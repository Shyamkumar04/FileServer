Write a Java Program for  displaying the data from the file "sample.txt" using FileInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments.
byte[] array = new byte[39];

FileInputStream fs = new FileInputStream("sample.txt");

System.out.println("Data in the file: ");

fs.read(array);
String data = new String(array);

System.out.println(data);
fs.close();
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .In that String str append the byte from the index value 2 and length 4
OutputStream fout=new FileOutputStream("sample.txt",true);

String s="SAVEETHA";  
byte b[]=s.getBytes();

fout.write(b,2,4);
fout.close();

System.out.println("Successfully Completed");
##
Implement a Java Program to append a String "SAVEETHA ENGINEERING COLLEGE" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA ENGINEERING COLLEGE"
OutputStream fout=new FileOutputStream("sample.txt",true);    

String s="SAVEETHA ENGINEERING COLLEGE";    
byte b[]=s.getBytes();//converting string into byte array    

fout.write(b);    
fout.close();    

System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using FileOutputStreamNote: Consider String str as  "Welcome to Saveetha" . Use predefined function  write(byte[] array, int start, int length) .Get the Starting byte and length from the user and store the characters in the file
FileOutputStream fout=new FileOutputStream("testout.txt");    

String s="Welcome to Saveetha";    
byte b[]=s.getBytes();

Scanner sc=new Scanner(System.in);
int start=sc.nextInt();
int length=sc.nextInt();

fout.write(b,start,length);    
fout.close();    

System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String for Specified byte  in a file "testout.txt" using OutputStream.Note:Consider String str as "HI EVERYBODY...",it has to print specified byte according to the user input
FileOutputStream fout=new FileOutputStream("testout.txt");    

String s="HI EVERYBODY";    
byte b[]=s.getBytes();

Scanner sc=new Scanner(System.in);
int start=sc.nextInt();
int length=sc.nextInt();

fout.write(b,start,length);    
fout.close();    

System.out.println("Successfully Completed");  
##
Write a Java Program for  displaying number of bytes & data in the file "sample.txt" using FileInputStreamNote:Already sample.txt file was created.initialize  byte[] array = new byte[39];
 byte[] array = new byte[39];
             FileInputStream input = new FileInputStream("sample.txt");
              System.out.println("Available bytes in the file: " +input.available());
              input.read(array);
              String data = new String(array);
              System.out.println("Data read from the file:" +data);
              input.close();
##
Implement a Java Program to append a String "SAVEETHA" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA"
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a byte in a file "testout.txt" using FileOutputStreamNote Write a byte "D" in a file
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
                 fout.write(68);    
                 fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a character in a file "testout.txt" using OutputStreamNote: Get input as 65 and printt "A" in the file(testtout.txt)
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             int s=65;    
          //   byte b[]=s.getBytes();//converting string into byte array    
             fout.write(s);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Write a Java Program for  displaying number of bytes after skipping from the file "sample.txt" using FileInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments and Skip() method for skipping some data in the file. Get the skip byte value from the user
 
             FileInputStream input = new FileInputStream("sample.txt");
              System.out.println("Available bytes in the file: " +input.available());
              Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
              input.skip(sk);
               System.out.println("Available bytes in the file: " +input.available());
          
              input.close();
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a byte in a file "testout.txt" using FileOutputStreamNote Write a character "A" in a file using ASCII code
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
                 fout.write(65);    
                 fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String for Specified byte  in a file "testout.txt" using OutputStream.Note:Consider String str as "HI EVERYBODY...",it has to print from starting index from 2 to 8
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b,2,8);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to read a byte in a file "testout.txt" using FileInputStream
     FileInputStream fin=new FileInputStream("testout.txt");    
                 int i=fin.read();  
                 System.out.println((char)i);    
                 fin.close(); 
##
Implement a Java Program to append a String "SAVEETHA ENGINEERING COLLEGE" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA ENGINEERING COLLEGE"
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA ENGINEERING COLLEGE";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using FileOutputStreamNote: Write a String  "Welcome to Saveetha"
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
             String s="Welcome to Saveetha";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using OutputStreamNote: Write a String  "HI EVERYBODY..."
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                System.out.println("Successfully Completed");  
##
Write a Java Program for  displaying the data from the file "sample.txt" using FileInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments. Use "While "Loop for reading the characters from the file
 
             FileInputStream input = new FileInputStream("sample.txt");

        System.out.println("Data in the file: ");

        // Reads the first byte
        int i = input.read();

       while(i !=-1) {
           
           System.out.print((char)i);

           // Reads next byte from the file
           i = input.read();
        }
        input.close();
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .In that String str append the byte from the index value 2 and length 4
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b,2,4);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String "SAVEETHA" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA"
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using FileOutputStreamNote: Write a String  "HI EVERYBODY..."
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String for Specified byte  in a file "testout.txt" using OutputStream.Note:Consider String str as "SAVEETHA ENGINEERING COLLEGE",it has to print from starting index from 7 to 10
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="SAVEETHA ENGINEERING COLLEGE";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b,7,10);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read the content from the String using ReaderNote: Initialize String Value as "WELCOME ALL."  and Display the Content of the String using predefined functionInitialize char[] array = new char[12];
import java.io.*;  
import java.util.*;
public class JavaCharArrayReaderReadExample4 
{  
    public static void main(String[] args)
    {
        String s ="WELCOME ALL.";
        char[] array = new char[12];
        try
        {
            Reader input = new StringReader(s);
            input.read(array);
            System.out.println("Data read from the string:");
            System.out.println(array);
            input.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a Java Program for getting input from the user using Input StreamReaderRule: Use do-while statement and get the input value from the user.2.Enter the Symbol "#" to quit. Ex: Hi#
import java.io.*;
public class ReadConsole {
    public static void main(String args[]) throws IOException
    {
        InputStreamReader cin = null;
        try
        {
            cin = new InputStreamReader(System.in);
            char c;
            do
            {
                c = (char) cin.read();
                System.out.print(c);
            }while(c != '#');
        }
        finally
        {
            if (cin != null)
            {
                cin.close();
            }
        }
    }
}
##
Implement a Java Program to append a String in a file "testout.txt" using WriterNote:Write  "Hi Everybody" in the file(testtout.txt)
Writer w1 = new FileWriter("testout.txt",true);  

w1.append("Hi Everybody");  
w1.close();  

System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to identify the file content  "file1.txt" is ready to read using the predefined function ready and  read the content from the file "file1.txt" using Reader
Reader reader = new FileReader("file1.txt");
int data = reader.read();

System.out.println("Is there data in the stream?  " + reader.ready());

System.out.println("File content:");
while (data != -1)
{
    System.out.print((char) data);  
    data = reader.read();  
}
System.out.println();

reader.close();
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote:  Write the Specified portion in a file using predefined function [write(String str, int off, int len)]Read  String value from the user and starting byte (int off) as 2  and length (int len) as 6 from the User
Writer w = new FileWriter("testout.txt");  

Scanner sc=new Scanner(System.in);

String content = sc.nextLine();

int off=sc.nextInt();
int length=sc.nextInt();

w.write(content,off,length);  
w.close();  

System.out.println("Input String Value:" +content);  
System.out.println("Wrote Specified portion in a File Successfully");  
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[12];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[12];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[39];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[39];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a character in a file "testout.txt" using WriterNote:Write  "A" in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append('A');  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to read the content from the file "file1.txt" using Reader
        Reader reader = new FileReader("file1.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote:  Write the Specified portion in a file using predefined function [write(String str, int off, int len)]Get String value and starting byte and length from the User
   
            Writer w = new FileWriter("testout.txt");  
            Scanner sc=new Scanner(System.in);
            String content = sc.nextLine();
            int off=sc.nextInt();
            int length=sc.nextInt();
            w.write(content,off,length);  
            w.close();  
             System.out.println("Input String Value:" +content);  
            System.out.println("Wrote Specified portion in a File Successfully");  
##
Write a Java Program to read the content from the String using ReaderNote: Initialize String Value as "This is the text read from StringReader."  and Display the Content of the String using predefined functionInitialize char[] array = new char[40];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
   String s ="This is the text read from StringReader.";
   
    char[] array = new char[40];
    try {
      // Create a StringReader
      Reader input = new StringReader(s);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[39];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[39];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a character in a file "testout.txt" using WriterNote:Write  "Z" in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append('Z');  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to read the content from the file "test.txt" using Reader
        Reader reader = new FileReader("test.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote: Write a String  "Welcome to Java File Concept -Reader"
   
            Writer w = new FileWriter("testout.txt");  
            String content = "Welcome to Java File Concept -Reader";  
            w.write(content);  
            w.close();  
            System.out.println("Wrote File Successfully");  
##
Write a Java Program for getting input from the user using Input StreamReaderRule: Use do-while statement and get the input value from the user.2.Enter the Symbol "#" to quit. Ex: Hi#
import java.io.*;
public class ReadConsole {

   public static void main(String args[]) throws IOException {
      InputStreamReader cin = null;

      try {
         cin = new InputStreamReader(System.in);
       //  System.out.println("Enter characters, 'q' to quit.");
         char c;
         do {
            c = (char) cin.read();
            System.out.print(c);
         } while(c != '#');
      }finally {
         if (cin != null) {
            cin.close();
         }
      }
   }
}
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[12];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[12];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a NUMBER in a file "testout.txt" using WriterNote: APPEND "1234567890"  in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append("1234567890");  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to identify the file content  "file1.txt" is ready to read using the predefined function ready using Reader
        Reader reader = new FileReader("file1.txt");  
            int data = reader.read();  
            System.out.println("Is there data in the stream?  " + reader.ready());
            
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote: Write a String  "Hi Everybody...Welcome all"
   
            Writer w = new FileWriter("testout.txt");  
            String content = "Hi Everybody...Welcome all";  
            w.write(content);  
            w.close();  
            System.out.println("Wrote File Successfully");  
##
Write a Java Program to read the content from the String using ReaderNote: Initialize String Value as "This is the text read from StringReader."  and Display the Content of the String using predefined functionInitialize char[] array = new char[40];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
   String s ="This is the text read from StringReader.";
   
    char[] array = new char[40];
    try {
      // Create a StringReader
      Reader input = new StringReader(s);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a String in a file "testout.txt" using WriterNote:Write  "WELCOME ALL" in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append("WELCOME ALL");  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to read the content from the file "sample1.txt" using Reader
        Reader reader = new FileReader("sample1.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote:  Write the Specified portion in a file using predefined function [write(String str, int off, int len)]Get String value and starting byte and length from the User
   
            Writer w = new FileWriter("testout.txt");  
            Scanner sc=new Scanner(System.in);
            String content = sc.nextLine();
            int off=sc.nextInt();
            int length=sc.nextInt();
            w.write(content,off,length);  
            w.close();  
             System.out.println("Input String Value:" +content);  
            System.out.println("Wrote Specified portion in a File Successfully");  
##
Write a Java Program for  displaying number of bytes & data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
FileInputStream  file1 = new FileInputStream("sample.txt");
FilterInputStream filter = new BufferedInputStream(file1);

System.out.println("Available bytes in the file: " +filter.available());

int k =0;
System.out.println("Data read from the file:");

while((k=filter.read())!=-1)
{
    System.out.print((char)k);
}

file1.close();
filter.close();
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '/'.
class CustomFilterReader1 extends FilterReader
{  
    CustomFilterReader1(Reader in)
    {  
        super(in);  
    }  
    public int read() throws IOException
    {
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '/');  
        else  
            return x;  
    }  
}
##
Implement a java Program to convert the file content in to Uppercase letter using Filter Writer conceptNote: Already record.txt was created and data are added. Convert the data into Uppercase character using write operation
import java.io.*;  
class CustomFilterWriter extends FilterWriter
{
    CustomFilterWriter(Writer out)
    {
        super(out);  
    }  
    public void write(String str) throws IOException
    {
        super.write(str.toUpperCase());  
    }
}  
##
Implement a Java Program to write a String in a file "Sample1.txt" using FilerOutputStreamNote: Consider a string value as "Welcome Everybody"
FileOutputStream file1 = new FileOutputStream("Sample1.txt");

FilterOutputStream filter = new FilterOutputStream(file1);

String s="Welcome Everybody";
byte b[]=s.getBytes();

filter.write(b);
filter.close();

file1.close();
##
Write a Java Program for  displaying  data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
FileInputStream  file1 = new FileInputStream("sample.txt");  

FilterInputStream filter = new BufferedInputStream(file1);  

int k =0;  

while( (k=filter.read()) != -1 )
{
    System.out.print((char)k);  
}
##
Implement a Java Program to write a String in a file "testout.txt" using FilterOutputStreamNote: Use predefined function  write(byte[] array, int start, int length) .Get the String Value, Starting byte and length from the user and store the characters in the file
   
                
             
              FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
       // String s="Welcome to FilterOutput Stream File";      
         
         
             Scanner sc=new Scanner(System.in);
             String s=sc.nextLine();
             int start=sc.nextInt();
             int length=sc.nextInt();
              byte b[]=s.getBytes();  
           //  write(byte[] array, int start, int length)
             filter.write(b,start,length); 
      //  filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for  displaying number of characters in the file "sample.txt" after skipping the specified characters using FilterInputStreamNote:Already sample.txt file was created. Read the input from the user for skipping characters
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
         filter.skip(sk);
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Write a Java Program to get the actual number of available bytes in the file using filter input stream.Note:Already sample.txt file was created. Read the input from the user for read method
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
        for(int i=0;i<sk;i++)
        {
            filter.read();
        }
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Implement a java Program to replace the file content  "E" character in to "A" character using Filter Writer conceptNote: Already record.txt was created and data are added. Replace  the E character into A character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.replace('E','A'));  
        }  
    }  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '?'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '?');  
        else  
            return x;  
    }  
}  
##
Write a Java Program for  displaying number of characters in the file "sample.txt" after skipping the specified characters using FilterInputStreamNote:Already sample.txt file was created. Read the input from the user for skipping characters
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
         filter.skip(sk);
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '$'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '$');  
        else  
            return x;  
    }  
}  
##
Implement a java Program to replace the file content  "B" character in to "C" character using Filter Writer conceptNote: Already record.txt was created and data are added. Replace  the B character into C character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.replace('B','C'));  
        }  
    }  
##
Implement a Java Program to write a String in a file "testout.txt" using FilterOutputStreamNote: Consider String str as  "Welcome to FilterOutput Stream File" . Use predefined function  write(byte[] array, int start, int length) .Get the Starting byte and length from the user and store the characters in the file
   
                
             
              FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
        String s="Welcome to FilterOutput Stream File";      
        byte b[]=s.getBytes();    
         
             Scanner sc=new Scanner(System.in);
             int start=sc.nextInt();
             int length=sc.nextInt();
           //  write(byte[] array, int start, int length)
             filter.write(b,start,length); 
      //  filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for  displaying number of bytes & data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
       System.out.println("Available bytes in the file: " +filter.available());
              int k =0;
               System.out.println("Data read from the file:");
        while((k=filter.read())!=-1)
        {  
            System.out.print((char)k);  
        }  
  file1.close();  
        filter.close();  
##
Write a Java Program for  displaying number of characters in the file "sample.txt" after skipping the specified characters using FilterInputStreamNote:Already sample.txt file was created. Read the input from the user for skipping characters
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
         filter.skip(sk);
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using FilterOutputStreamNote: Consider String str as  "Welcome to FilterOutput Stream File" . Use predefined function  write(byte[] array, int start, int length) .Set the Starting value as 3 and length as 9 store the characters in the file
   
                
             
              FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
        String s="Welcome to FilterOutput Stream File";      
        byte b[]=s.getBytes();    
         
            
           //  write(byte[] array, int start, int length)
             filter.write(b,3,9); 
      //  filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for  displaying  data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
        FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        int k =0;  
        while((k=filter.read())!=-1){  
            System.out.print((char)k);  
        }  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '*'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '*');  
        else  
            return x;  
    }  
}  
##
Implement a java Program to convert the file content in to lowercase letter using Filter Writer conceptNote: Already record.txt was created and data are added. Convert the data into lowercase character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.toLowerCase());  
        }  
    }  
##
Implement a java Program to replace the file content  "V" character in to "A" character using Filter Writer conceptNote: Already record.txt was created and data are added. Replace  the V character into A character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.replace('V','A'));  
        }  
    }  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '+'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '+');  
        else  
            return x;  
    }  
}  
##
Implement a Java Program to write a byte in a file "testout.txt" using FilerOutputStreamNote: Consider a string value as "Welcome to FilterOutput Stream File"
   
                FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
        String s="Welcome to FilterOutput Stream File";      
        byte b[]=s.getBytes();      
        filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for Reading data from console by InputStreamReader and BufferedReader
import java.io.*;  
public class BufferedReaderExample
{
    public static void main(String args[])throws Exception
    {           
        InputStreamReader r=new InputStreamReader(System.in);
        BufferedReader br=new BufferedReader(r);
        String name=br.readLine();
        System.out.println("Welcome: "+name);
    }
}
##
Write a Java Program for writing the Specified length of  data in the file Using  FileOutputStream & BufferedOutputStreamNote:Assume sample.txt file created. In the FileOutputStream use sample.txt file as arguments and display the data in the file using BufferedOutputStream.Get the Input String from the User.From the Input String store the data from index value as 5 and length as 10
FileOutputStream fout=new FileOutputStream("sample.txt");    

BufferedOutputStream bout=new BufferedOutputStream(fout);  

Scanner sc=new Scanner(System.in);

String s=sc.nextLine();    
int index=sc.nextInt();
int length=sc.nextInt();

byte b[]=s.getBytes();    

System.out.println("Original Data:" +s);
System.out.print("After Skipping:");

bout.write(b,index,length);    

bout.close();
fout.close();
##
Write a Java Program to read Employee data (name ,age,id) from the user using the BufferedReader class.Consider Employee Class using default constructor and instance method for displaying Employee name, age, id
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Employee {
    String name;
    int id;
    int age;
    Employee(String name, int age, int id)
    {
        this.name = name;
        this.age = age;
        this.id = id;
    }
    public void displayDetails()
    {
        System.out.println("Name: "+this.name);
        System.out.println("Age: "+this.age);
        System.out.println("Id: "+this.id);
    }
}
public class ReadData
{
    public static void main(String args[]) throws IOException
    {
        BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));
        
        String name = reader.readLine();
        int age = Integer.parseInt(reader.readLine());
        int id = Integer.parseInt(reader.readLine());
        
        Employee std = new Employee(name, age, id);
        std.displayDetails();
    }
}
##
Write a Java Program for displaying the data from the file, after skipping characters from the file using Filereader & BufferedReaderNote:Assume sample.txt file created. In the FileReader use sample.txt file as arguments and display the data in the file using BufferedReader .Use Predefined function for Skip . Get the Skipping character from the UserInitialize char[] array = new char[36];
FileReader fr=new FileReader("sample.txt");

BufferedReader br=new BufferedReader(fr);  

Scanner sc=new Scanner(System.in);

int skch=sc.nextInt();
br.skip(skch);

char[] array = new char[36];

System.out.println("Data after skipping "+skch+" characters:");

br.read(array);

System.out.println(array);

br.close();    
fr.close(); 
##
Write a java program for writing the data in the file using Buffered WriterNote: Read the data from the User
FileWriter writer = new FileWriter("sample.txt");  

BufferedWriter buffer = new BufferedWriter(writer);  

Scanner sc = new Scanner(System.in);
String str=sc.nextLine();

buffer.write(str);

buffer.close();
##
Write a Java Program for displaying the data from the file using Filereader & BufferedReaderNote:Assume sample.txt file created. In the FileReader use sample.txt file as arguments and display the data in the file using BufferedReader
          FileReader fr=new FileReader("sample.txt");   
          BufferedReader br=new BufferedReader(fr);    
          int i;    
          while((i=br.read())!=-1)
          {  
          System.out.print((char)i);  
          }  
            System.out.print("\n");
          br.close();    
          fr.close(); 
##
Write a Java Program to read the number from the user using the BufferedReader class and perform Fibonacci series
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Sample{
    void natural(int num)
    {
        int n1=0,n2=1,n3,i;    
 System.out.print(n1+" "+n2);//printing 0 and 1    
    
 for(i=2;i<num;++i)//loop starts from 2 because 0 and 1 are already printed    
 {    
  n3=n1+n2;    
  System.out.print(" "+n3);    
  n1=n2;    
  n2=n3;    
    }  
}
}

public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));


int number = Integer.parseInt(reader.readLine());
Sample std = new Sample();
std.natural(number);
}
}
##
Write a Java Program for getting string and integer input from the User using BufferedReader
// Java Program for taking user
// input using BufferedReader Class
import java.io.*;

public class Sample
	
{
	
// Main Method
public static void main(String [] args) throws IOException
{
	// Creating BufferedReader Object
	// InputStreamReader converts bytes to
	// stream of character

					
BufferedReader bfn = new BufferedReader(new InputStreamReader(System.in));
	// String reading internally
	String str = bfn.readLine();
				
	// Integer reading internally
	int it = Integer.parseInt(bfn.readLine());
					
	// Printing String
	System.out.println("Entered String : "+ str);
					
	// Printing Integer			
	System.out.println("Entered Integer : "+ it);
		
	}
					
}
##
Write a java program for writing the data in the file using Buffered WriterNote: Read the data from the User, In that get the index value and length value from the user
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
    String str=sc.nextLine();
int index=sc.nextInt();
    int length=sc.nextInt();
   // buffer.write(str);
    buffer.write(str,index,length);
    
    buffer.close();  
##
Write a Java Program for displaying the data from the file after skip method using FileInputStream & BufferedInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments and display the data in the file using BufferedInputStreamUse Skip() method for skipping some data in the user. Get the skip byte value from the user
        FileInputStream fi = new FileInputStream("sample.txt");
        BufferedInputStream bi = new BufferedInputStream(fi);
        Scanner sc=new Scanner(System.in);
        int sk=sc.nextInt();
          bi.skip(sk);
          System.out.println("Contents after skipping "+sk+" bytes:");
          int a = 0;
          while((a=bi.read()) != -1)
            System.out.print((char)a);
          bi.close();
          fi.close();
##
Write a Java Program for displaying the data from the file  FileInputStream & BufferedInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments and display the data in the file using BufferedInputStream
        FileInputStream fi = new FileInputStream("sample.txt");
        BufferedInputStream bi = new BufferedInputStream(fi);
        
          System.out.println("Data in the File:");
          int a = 0;
          while((a=bi.read()) != -1)
            System.out.print((char)a);
          bi.close();
          fi.close();
##
Write a Java Program to read the number from the user using the BufferedReader class and perform sum of natural numbers.
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Sample{
    void natural(int num)
    {
        int i, sum = 0;  
//executes until the condition returns true  
        for(i = 1; i <= num; ++i)  
        {  
        //adding the value of i into sum variable  
        sum = sum + i;  
        }  
//prints the sum   
        System.out.println("Sum of First "+num+" Natural Numbers is = " + sum);  
    }  
}

public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));


int number = Integer.parseInt(reader.readLine());
Sample std = new Sample();
std.natural(number);
}
}
##
Write a Java Program to read Employee data (name ,Designation, Salary) from the user using the BufferedReader class.Consider Employee Class using default constructor and instance method for displaying Employee name, Designation, Salary
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Employee{
String name;
String des;
int sal;
Employee(String name, String des, int sal){
this.name = name;
this.des = des;
this.sal= sal;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Designation: "+this.des);
System.out.println("Salary: "+this.sal);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();

String des=reader.readLine();

int sal = Integer.parseInt(reader.readLine());
Employee std = new Employee(name, des, sal);
std.displayDetails();
}
}
##
Write a java Program for reading the characters from the user and print in the display screen using Buffered InputStream
import java.io.*;  
import java.io.*;
public class Main  {
  public static void main(String[] args) throws IOException
  {
   BufferedInputStream bf = new BufferedInputStream(System.in)   ;
    try{
          int i;
        while((i = bf.read()) != -1) {
            char c = (char) i;
            System.out.println(c);  
    }
    }
finally{
        bf.close();
}   
}   
}
##
Write a java program for writing the character in the file using Buffered WriterNote: Read the Character from the User
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
  char c=sc.next().charAt(0);
   buffer.write(c);
   
    buffer.close();  
##
Write a Java Program to read student data (name ,department, rollno) from the user using the BufferedReader class.Consider Student Class using default constructor and instance method for displaying Student name, department, rollno
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
String dept;
Student(String name, String dept, int rollno){
this.name = name;
this.dept = dept;
this.rollno = rollno;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Department: "+this.dept);
System.out.println("Rollno: "+this.rollno);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();

String dept = reader.readLine();

int rollno = Integer.parseInt(reader.readLine());
Student std = new Student(name, dept, rollno);
std.displayDetails();
}
}
##
Write a Java Program for writing the data in the file Using  FileOutputStream & BufferedOutputStreamNote:Assume sample.txt file created. In the FileOutputStream use sample.txt file as arguments and display the data in the file using BufferedOutputStream
       
           FileOutputStream fout=new FileOutputStream("sample.txt");    
     BufferedOutputStream bout=new BufferedOutputStream(fout);  
     Scanner sc=new Scanner(System.in);
     String s=sc.nextLine();    
     byte b[]=s.getBytes();    
     bout.write(b);    
    
     bout.close();    
     fout.close();    
##
Write a Java Program for displaying the data from the file, after skipping 3 characters from the file using Filereader & BufferedReaderNote:Assume sample.txt file created. In the FileReader use sample.txt file as arguments and display the data in the file using BufferedReader .Use Predefined function for SkipInitialize char[] array = new char[36];
          FileReader fr=new FileReader("sample.txt");   
          BufferedReader br=new BufferedReader(fr);    
          char[] array = new char[36];
          br.skip(3);
        System.out.println("Data after skipping 3 characters:");
        br.read(array);
      System.out.println(array);
          
          
          br.close();    
          fr.close(); 
##
Write a java program for writing the particular character from the String in the file using Buffered WriterNote: Read the String from the User.Store the 5th position Character in the File
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
    String str=sc.nextLine();
    
  char c=str.charAt(5);
   buffer.write(c);
   
    buffer.close();  
##
Write a Java Program for getting integer input from the User using BufferedReader
// Java Program for taking user
// input using BufferedReader Class
import java.io.*;

public class Sample
	
{
	
// Main Method
public static void main(String [] args) throws IOException
{
	// Creating BufferedReader Object
	// InputStreamReader converts bytes to
	// stream of character

					
BufferedReader bfn = new BufferedReader(new InputStreamReader(System.in));
 
				
	// Integer reading internally
	int it = Integer.parseInt(bfn.readLine());
					

					
	// Printing Integer			
	System.out.println("Entered Integer : "+ it);
		
	}
					
}
##
Write a Java Program to read student data (name ,rollno,  subjects marks) from the user using the BufferedReader class.Consider Student Class using default constructor and instance method for displaying Student name, rollno, subjectmarks
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
int m1,m2,m3;
Student(String name,int rollno,int m1,int m2,int m3){
this.name = name;
this.rollno = rollno;
this.m1 =m1;
this.m2=m2;
this.m3=m3;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Rollno: "+this.rollno);
System.out.println("Marks 1: "+this.m1);
System.out.println("Marks 2: "+this.m2);
System.out.println("Marks 3: "+this.m3);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();
int rollno = Integer.parseInt(reader.readLine());
int m1 = Integer.parseInt(reader.readLine());
int m2=Integer.parseInt(reader.readLine());
int m3 = Integer.parseInt(reader.readLine());
Student std = new Student(name, rollno,m1,m2,m3);
std.displayDetails();
}
}
##
Write a Java Program for writing the Specified length of  data in the file Using  FileOutputStream & BufferedOutputStreamNote:Assume sample.txt file created. In the FileOutputStream use sample.txt file as arguments and display the data in the file using BufferedOutputStream.Get the Input String from the User.From the Input String store the data from index value as 5 and length as 10
       
           FileOutputStream fout=new FileOutputStream("sample.txt");    
     BufferedOutputStream bout=new BufferedOutputStream(fout);  
     Scanner sc=new Scanner(System.in);
     String s=sc.nextLine();    
     byte b[]=s.getBytes();    
     System.out.println("Original Data:" +s);
     System.out.print("After Skipping:");
     bout.write(b,5,10);    
     bout.close();    
     fout.close();    
##
Write a Java Program to read student data (name ,rollno,  subjects marks,percentage) from the user using the BufferedReader class.Consider Student Class using default constructor and instance method for displaying Student name, rollno, subjectmarks
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
int m1,m2,m3;
int percentage;
Student(String name,int rollno,int m1,int m2,int m3){
this.name = name;
this.rollno = rollno;
this.m1 =m1;
this.m2=m2;
this.m3=m3;
percentage=(m1+m2+m3)/3;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Rollno: "+this.rollno);
System.out.println("Marks 1: "+this.m1);
System.out.println("Marks 2: "+this.m2);
System.out.println("Marks 3: "+this.m3);
System.out.println("Percentage : "+percentage);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();
int rollno = Integer.parseInt(reader.readLine());
int m1 = Integer.parseInt(reader.readLine());
int m2=Integer.parseInt(reader.readLine());
int m3 = Integer.parseInt(reader.readLine());
Student std = new Student(name, rollno,m1,m2,m3);
std.displayDetails();
}
}
##
Write a Java Program for getting Double and integer input from the User using BufferedReader
// Java Program for taking user
// input using BufferedReader Class
import java.io.*;

public class Sample
	
{
	
// Main Method
public static void main(String [] args) throws IOException
{
	// Creating BufferedReader Object
	// InputStreamReader converts bytes to
	// stream of character

					
BufferedReader bfn = new BufferedReader(new InputStreamReader(System.in));
  Double d=Double.parseDouble(bfn.readLine());
				
	// Integer reading internally
	int it = Integer.parseInt(bfn.readLine());
					
	// Printing String
	System.out.println("Entered Double : "+ d);
					
	// Printing Integer			
	System.out.println("Entered Integer : "+ it);
		
	}
					
}
##
Write a java program for writing the data ("Welcome Java") in the file using Buffered Writer
 FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    buffer.write("Welcome Java");  
    buffer.close();  
##
Write a Java Program for  displaying the number of bytes in the  file "sample1.txt" using DataInputStreamNote: Assume sample1.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("sample1.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
FileOutputStream fout1=new FileOutputStream("F1.txt");    
FileOutputStream fout2=new FileOutputStream("F2.txt");    

ByteArrayOutputStream bout=new ByteArrayOutputStream();  

int value=66;

bout.write(value);    
bout.writeTo(fout1);    
bout.writeTo(fout2);  

bout.close();

System.out.println("Success...");
##
Write a Java Program to store a String Value  "This is a file created by using Data Stream" in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);

dout.writeUTF("This is a file created by using Data Stream"); 
dout.close();    
fout.close();

System.out.println("Successfully Completed");
##
Write a Java Program to read a integer Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
FileInputStream input = new FileInputStream("OutputFile.txt");  
DataInputStream di = new DataInputStream(input); 

int data = di.readInt();

System.out.println(data);  

input.close();
di.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 69
FileOutputStream fout1=new FileOutputStream("F1.txt");    
FileOutputStream fout2=new FileOutputStream("F2.txt");    

ByteArrayOutputStream bout=new ByteArrayOutputStream();  

int value=69;

bout.write(value);    
bout.writeTo(fout1);    
bout.writeTo(fout2);  

bout.close();

System.out.println("Success...");
##
Implement a Java Program to write a integer '65'  in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
                 dout.writeInt(65);    
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Multiplication of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value*value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for read the float data in the  file "OutputFile.txt" using DataInputStream.Note:Assume OutputFile.txt file created. In the DataInputStream use Output.txt file as argumentsInitialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
   
        float intvalue=di.readFloat();
        System.out.println("File result: "+intvalue);
    
      di.close();
    fi.close();
##
Write a Java Program to read a boolean Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 boolean data =di.readBoolean();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for read the integer data in the  file "OutputFile.txt" using DataInputStream.Note:Assume OutputFile.txt file created. In the DataInputStream use Output.txt file as argumentsInitialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
   
        int intvalue=di.readInt();
        System.out.println("File result: "+intvalue);
    
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program to read a character Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 char data =di.readChar();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a Java Program to store a String Value  in a file "testout.txt" using DataOutputStreamNote: Read the String value from the user
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
Scanner sc=new Scanner(System.in);
String str=sc.nextLine();
dout.writeUTF(str); 
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read a double Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 double data =di.readDouble();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a Java Program to store an integer , Double  and character value in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
Scanner sc=new Scanner(System.in);
int num=sc.nextInt();
double db=sc.nextDouble();
char ch=sc.next().charAt(0);
                 dout.writeInt(num);  
                 dout.writeDouble(db);
                 dout.writeChar(ch);
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for  displaying the number of bytes in the  file "Output.txt" using DataInputStreamNote: Assume Output.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("Output.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Multiplication of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value*value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(66);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program to store an integer '65' , Double  as  '25.32' and character value as 'A'  in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
                 dout.writeInt(65);  
                 dout.writeDouble(25.32);
                 dout.writeChar('A');
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read a String Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
   String data =di.readUTF();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a Java Program for  displaying the number of bytes in the  file "sample.txt" using DataInputStreamNote: Assume sample.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("sample.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 69
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(69);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for  displaying the number of bytes in the  file "Output.txt" using DataInputStreamNote: Assume Output.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("Output.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a Java Program to store an integer '65' , Double  as  '25.32' and character value as 'A'  in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
                 dout.writeInt(65);  
                 dout.writeDouble(25.32);
                 dout.writeChar('A');
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read a boolean Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 boolean data =di.readBoolean();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to display the number of bytes after read  function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
public class Main {
    public static void main(String args[])
    {
        byte[] array = { 1, 2, 3, 4 };
        try
        {
            ByteArrayInputStream input = new ByteArrayInputStream(array);
            System.out.println("Available bytes at the beginning: " + input.available());
            input.read();
            System.out.println("Available bytes at the end: " + input.available());
            input.close();
        }
        catch (Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};skip 2 VALUESDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
public class Main {
    
    public static void main(String args[])
    {
        byte[] array = { 1, 2, 3, 4 };
        try
        {
            ByteArrayInputStream input = new ByteArrayInputStream(array);
            input.skip(2);
            System.out.print("Input stream after skipping 2 bytes: ");
            int data = input.read();
            while (data != -1) {
            System.out.print(data + ", ");
            data = input.read();
        }
        input.close();
    }
        catch (Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 69
FileOutputStream fout1=new FileOutputStream("F1.txt");    
FileOutputStream fout2=new FileOutputStream("F2.txt");    

ByteArrayOutputStream bout=new ByteArrayOutputStream();  

int value=69;

bout.write(value);    
bout.writeTo(fout1);    
bout.writeTo(fout2);    

bout.close();

System.out.println("Success...");
##
Write a java program to read data using ByteArrayInputStream.Note: Get String Value from the UserConvert Stringvalue into Byte using the predefined function -getBytes()
import java.io.ByteArrayInputStream;
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        byte[] array = str.getBytes();
        
        try
        {
            ByteArrayInputStream input = new ByteArrayInputStream(array);
            System.out.print("The bytes read from the input stream: ");
            for(int i= 0; i < array.length; i++)
            {
                int data = input.read();
                System.out.print(data + ", ");
            }
            input.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the data to the stream using predefined function write
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        String data = sc.nextLine();
        try
        {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            byte[] array = data.getBytes();
            
            out.write(array);
            
            String streamData = out.toString();
            System.out.println("Output stream: " + streamData);
            
            out.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to read data using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Read the byte value using predefined function read
import java.io.ByteArrayInputStream;
public class Main {
  public static void main(String[] args) {

    // Creates an array of byte
    byte[] array = {1, 2, 3, 4};

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes available using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

    public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-Initialize start value as 2 and length as 7
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,2,7);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};get skip integer value from the userDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
import java.util.*;
   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);
       Scanner sc=new Scanner(System.in);
       int skvalue=sc.nextInt();
      // Using the skip()  method
      input.skip(skvalue);
      System.out.print("Input stream after skipping " +skvalue+ "  bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(66);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};SKIP 1 INTEGERDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Using the skip() method
      input.skip(1);
      System.out.print("Input stream after skipping 1 bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after read  function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      // Reads 2 bytes from the input stream
      input.read();
     
      // Returns the available number of bytes
      System.out.println("Available bytes at the end: " + input.available());

      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to read data using ByteArrayInputStream.Note: Get String Value from the UserConvert Stringvalue into Byte using the predefined function -getBytes()
import java.io.ByteArrayInputStream;
import java.util.*;
public class Main {
  public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
String str=sc.nextLine();
    // Creates an array of byte
    byte[] array = str.getBytes();

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-Initialize start value as 3 and length as 6
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,3,6);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize   byte[] array = { 12, 22, 33, 45 };skip 2 VALUESDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 12, 22, 33, 45 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Using the skip() method
      input.skip(2);
      System.out.print("Input stream after skipping 2 bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes available using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

    public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to read data using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Read the byte value using predefined function read
import java.io.ByteArrayInputStream;
public class Main {
  public static void main(String[] args) {

    // Creates an array of byte
    byte[] array = {1, 2, 3, 4};

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Multiplication of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value*value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write data using ByteArrayOutputStream.Note:Initialize String value as "This is a line of text inside the string".Writes the data to the stream using predefined function write
import java.io.*;
public class Main {
    public static void main(String[] args) {

    String data = "This is a line of text inside the string.";

    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Output stream: " + streamData);

      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to read data using ByteArrayInputStream.Note: Get String Value from the UserConvert Stringvalue into Byte using the predefined function -getBytes()
import java.io.ByteArrayInputStream;
import java.util.*;
public class Main {
  public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
String str=sc.nextLine();
    // Creates an array of byte
    byte[] array = str.getBytes();

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};get skip integer value from the userDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
import java.util.*;
   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);
       Scanner sc=new Scanner(System.in);
       int skvalue=sc.nextInt();
      // Using the skip()  method
      input.skip(skvalue);
      System.out.print("Input stream after skipping " +skvalue+ "  bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String,starting position and length value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
     int start=sc.nextInt();
     int length=sc.nextInt();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,start,length);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-Initialize start value as 2 and length as 7
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,2,7);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(66);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program to print the String value "Hi Everybody,Welcome to Java StringReader." Using StringReader
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {
        String srg = "Hi Everybody,Welcome to Java StringReader.";  
        StringReader reader = new StringReader(srg);  
        int k=0; 
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Create a Java Program to display the string content after skipping 4 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 4 characters
import java.io.StringReader;  
import java.util.*;
public class StringReaderExample 
{  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        
        StringReader sr = new StringReader(str);
        
        System.out.println("Original data: "+str);
        
        sr.skip(4);
        
        System.out.println("Data after skipping");
        
        int k;
        while((k=sr.read())!=-1)
        {
            System.out.print((char)k);
        }
    }  
}  
##
Write a Java Program to print the string "This is the text in the string." in the outputscreen using StringWriter
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {
        String srg = "This is the text in the string.";  
        StringReader reader = new StringReader(srg);  
        System.out.print("Data in the StringWriter: ");
        int k=0; 
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Create a Java Program to display the string content after skipping 2 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 2 characters
import java.io.StringReader;  
import java.util.*;
public class StringReaderExample 
{  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        
        StringReader sr = new StringReader(str);
        
        System.out.println("Original data: "+str);
        
        sr.skip(2);
        
        System.out.println("Data after skipping");
        
        int k;
        while((k=sr.read())!=-1)
        {
            System.out.print((char)k);
        }
    }  
}  
##
Write a Java Program to print the character in the outputscreen using StringWriterNote:Read the integer value from the user.Equivalent Character displayed in the Output Screen.
import java.io.StringWriter;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int data=sc.nextInt();
        try
        {
            StringWriter output = new StringWriter();
            
            output.write(data);
            System.out.println("Input Int Value: " + data);
            System.out.println("Equivalent Character: " + output);
            output.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a Java Program to print the String value "Hello Java!! Welcome to Java StringReader." Using StringReader
import java.io.StringReader;  
public class StringReaderExample {  
    public static void main(String[] args) throws Exception {  
        String srg = "Hello Java!! \nWelcome to Java StringReader.";  
        StringReader reader = new StringReader(srg);  
        int k=0;  
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Create a Java Program To display  and skip the specified number of characters using the predefined Method Skip in StringReaderNote:read the String value from the user,Get the number of characters to skip from the user
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
    int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
             input.skip(skipnumber);
             System.out.println("Data after skipping "+skipnumber+" characters:");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the string "String Writer" in the outputscreen using StringWriter
import java.io.StringWriter;

public class Main {
  public static void main(String[] args) {

    String data = "String Writer";

    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);

      // Prints the string writer
      System.out.println("Data in the StringWriter: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Create a Java Program to display the string content after skipping 5 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 5 characters
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
   // int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
           input.skip(5);
             System.out.println("Data after skipping ");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
Write a Java Program to print the specified bytes from the string in the outputscreen using StringWriterNote:Read the String Value, starting position  as 2 and length  as 4 from the user.
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data = sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data,2,4);

      // Prints the string writer
      System.out.println("Input String: " + data);
      System.out.println("Specified Location: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the String value with the help of character array Using StringReaderNote: Get the String value from the User ,Use char array function as char[] array = new char[15];
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String data = sc.nextLine();  
       
       char[] array = new char[15];

    try {
      // Create a StringReader
      StringReader input = new StringReader(data);

      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);

      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
        }  
}  
##
Create a Java Program to display the string content after skipping 3 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 3 characters
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
   // int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
           input.skip(3);
             System.out.println("Data after skipping ");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the string in the outputscreen using StringWriterNote:Read the String Value from the user
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data = sc.nextLine();
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);

      // Prints the string writer
      System.out.println("Data in the StringWriter: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the specified bytes from the string in the outputscreen using StringWriterNote:Read the String Value, starting position and length from the user.
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data = sc.nextLine();
     int st=sc.nextInt();
     int len=sc.nextInt();
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data,st,len);

      // Prints the string writer
      System.out.println("Input String: " + data);
      System.out.println("Specified Location: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the String value Using StringReaderNote: Get the String value from the User
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String srg = sc.nextLine();  
        StringReader reader = new StringReader(srg);  
        int k=0; 
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Write a Java Program to append the String with user defined String  using StringWriterNote:Read the String value and Append String value from the user.Display the Output in the output Screen
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

      
     Scanner sc=new Scanner(System.in);
     String data=sc.nextLine();
     String append =sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);
      output.append(append);
      // Prints the string writer
      System.out.println("Input Value: " + data);
      System.out.println("After Append: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the String value with the help of character array Using StringReaderNote: Get the String value from the User ,Use char array function as char[] array = new char[10];
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String data = sc.nextLine();  
       
       char[] array = new char[10];

    try {
      // Create a StringReader
      StringReader input = new StringReader(data);

      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);

      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
        }  
}  
##
Write a Java Program to append the String "Java" in the user defined String  using StringWriterNote:Read the String value from the user.Append the String "Java" in the user defined string value . Display the Output in the output Screen
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

      
     Scanner sc=new Scanner(System.in);
     String data=sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);
      output.append("Java");
      // Prints the string writer
      System.out.println("Input Value: " + data);
      System.out.println("After Append: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java program to store the Employee details(name,designation,id) in a file "emp.txt" using Serialization(Serializing an Object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Read Employee name ,designation,id from the User, and pass as an argument for Constructor Studentinfo
try
{
    Scanner sc=new Scanner(System.in);
    String name=sc.nextLine();
    String dept = sc.nextLine();
    int rollno=sc.nextInt();
    
    Employeeinfo si1 = new Employeeinfo(name,dept,rollno);
    FileOutputStream fos = new FileOutputStream("emp.txt");
    ObjectOutputStream oos = new ObjectOutputStream(fos);
    oos.writeObject(si1);
    oos.close();
}
catch (Exception e)
{
    System.out.println(e);
} 
##
Write a Java program to read the Student details(name,dept,rollno)from a file "student.txt" using Deserialization(deserialize the object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Initialize Studentinfo objectname =null;
try
{
    FileInputStream fis = new FileInputStream("student.txt");
    ObjectInputStream ois = new ObjectInputStream(fis);
    Studentinfo si = (Studentinfo)ois.readObject();
    System.out.println("Deserialization-Student Name:"+si.name);
    System.out. println("Deserialization-Student Department:"+si.dept);
    System.out. println("Deserialization-Student RollNo:"+si.rollno);

}
catch (Exception e)
{
    System.out.println(e);
}
##
Write a Java program to perform transient in Student details(name,dept,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept,,rollno
class Studentinfo implements Serializable
{
    String name;
    transient String dept;
    transient int rollno;
    Studentinfo(String n, String r,int n1)
    {
        this.name = n;
        this.dept = r;
        this.rollno=n1;
    }
}
##
Write a Java program to perform Transient in  Student details(name,dept)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept
class Studentinfo implements Serializable
{
    String name;
    transient String dept;
    Studentinfo(String n, String r)
    {
        this.name = n;
        this.dept = r;
    }
}
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Employee DatabaseNote: Create base class Employeesinfo with name and designation. In the Derived class Employeesal initialize the variable salarySerialization and Deserialization already performed in main class
class Employeeinfo implements Serializable
{
    String name;
    String desi;
    Employeeinfo(String n, String r)
    {
        this.name = n;
        this.desi = r;
    }
}
class Employeesal extends Employeeinfo
{
    double Salary;   
    public Employeesal(String name, String desi, double Salary)
    {
        super(name,desi);
        this.Salary=Salary;
    } 
}
##
Write a Java program to store the Employee details(name,designation) in a file "emp.txt" using Serialization(Serializing an Object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Read Employee name & Designation from the User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
           
            Employeeinfo si1 = new Employeeinfo(name,dept);
            FileOutputStream fos = new FileOutputStream("emp.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Employee details(name,designation,id)from a file "emp.txt" using Deserialization(deserialize the object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Initialize Employeeinfo objectname =null;
  Employeeinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("emp.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Employeeinfo)ois.readObject();
        }
         catch (Exception e)
        {
            System.out.println(e); 
         }
          System.out.println("Deserialization-Employee Name:"+si.name);
            System.out. println("Deserialization-Employee Designation:"+si.desi);
            System.out. println("Deserialization-Employee ID:"+si.id);
##
Write a Java program to perform Transient in Employee details(name,designation)Note: Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable designation
 class Employeeinfo implements Serializable
{
    String name;
    transient String desi;
   
    Employeeinfo(String n, String r)
    {
    this.name = n;
    this.desi = r;
   
    }
} 
##
Write a Java program to perform Transient in  Employee details(name,designation,id)Note:Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable id
class Employeeinfo implements Serializable
{
    String name;
    String desi;
    transient int id;
   
    Employeeinfo(String n, String r, int na)
    {
    this.name = n;
    this.desi = r;
    this.id=na;
   
    }
}
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Student Database.Note:Create a base class Person with variable rollno & name .In the derived class Student initialize the variable course name & fees.Serialization and Deserialization already performed in main class
   
    class Person implements Serializable{    
     int id;    
     String name;
     int total,percentage;
     Person(int id, String name) {    
      this.id = id;    
      this.name = name;    
     }    
    }    
    class Student extends Person{    
     String course;    
     int fee;   
     
     public Student(int id, String name, String course, int fee) {    
      super(id,name);    
      this.course=course;    
      this.fee=fee;    
     }    
    }    
##
Write a Java program to store the Student details(name,rollno) in a file "student.txt" using Serialization(Serializing an Object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Read Student name & rollno from User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            int rollno = sc.nextInt();
           
            Studentinfo si1 = new Studentinfo(name,rollno);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Student details(name,dept) from a file "student.txt" using Deserialization(deserialize the object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Initialize Studentinfo objectname =null;
  Studentinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("student.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Studentinfo)ois.readObject();
        }
         catch (Exception e)
        {
          System.out.println(e);  
            
        }
         System.out.println("Deserialization--Student Name:"+si.name);
      System.out. println("Deserialization--Student Department:"+si.dept);
##
Write a Java program to perform Transient in  Student details(name,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for rollno
 class Studentinfo implements Serializable
{
    String name;
    transient int rid;
   
    Studentinfo(String n, int r)
    {
    this.name = n;
    this.rid = r;
   
    }
}  
##
Write a Java program to perform Transient in  Student details(name,dept)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept
 class Studentinfo implements Serializable
{
    String name;
   transient String dept;
   
    Studentinfo(String n, String r)
    {
    this.name = n;
    this.dept = r;
   
    }
}
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Student Database.Note:Create a base class Person with variable rollno & name .In the derived class Student initialize the variable course name & fees.Serialization and Deserialization already performed in main class
    import java.io.*;    
    class Person implements Serializable{    
     int id;    
     String name;    
     Person(int id, String name) {    
      this.id = id;    
      this.name = name;    
     }    
    }    
    class Student extends Person{    
     String course;    
     int fee;    
     public Student(int id, String name, String course, int fee) {    
      super(id,name);    
      this.course=course;    
      this.fee=fee;    
     }    
    }    
##
Write a Java program to store the Student details(name,dept) in a file "student.txt" using Serialization(Serializing an Object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Read Student name & department from the User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
           
            Studentinfo si1 = new Studentinfo(name,dept);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Student details(name,rollno) from a file "student.txt" using Deserialization(deserialize the object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Initialize Studentinfo objectname =null;
   Studentinfo si=null;
  try
        {
            FileInputStream fis = new FileInputStream("student.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Studentinfo)ois.readObject();
        }
         catch (Exception e)
        {
            System.out.println(e);
            }
             System.out.println("Deserialization-Student Name:"+si.name);
            System.out. println("Deserialization-Student Rollno:"+si.rid);
##
Write a Java program to perform Transient in  Employee details(name,designation,id)Note:Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable id
class Employeeinfo implements Serializable
{
    String name;
    String desi;
    transient int id;
   
    Employeeinfo(String n, String r, int na)
    {
    this.name = n;
    this.desi = r;
    this.id=na;
   
    }
}
##
Write a Java program to perform Transient in  Student details(name,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for rollno
 class Studentinfo implements Serializable
{
    String name;
    transient int rid;
   
    Studentinfo(String n, int r)
    {
    this.name = n;
    this.rid = r;
   
    }
}  
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Employee DatabaseNote: Create base class Employeesinfo with name and designation. In the Derived class Employeesal initialize the variable salarySerialization and Deserialization already performed in main class
 class Employeeinfo implements Serializable
{
    String name;
    String desi;
    
   
    Employeeinfo(String n, String r)
    {
    this.name = n;
    this.desi = r;
   
    }
}
    class Employeesal extends Employeeinfo{    
    double Salary;   
      
     
     public Employeesal(String name, String desi, double Salary) {    
      super(name,desi);    
      this.Salary=Salary;    
       
     }    
    }    
##
Write a Java program to store the Student details(name,dept,rollno) in a file "student.txt" using Serialization(Serializing an Object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Read Student name,department,rollno from the User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
            int roll=sc.nextInt();
           
            Studentinfo si1 = new Studentinfo(name,dept,roll);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Employee details(name,designation)  from a file "emp.txt" using Deserialization(deserialize the object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Initialize Employeeinfo objectname =null;
  Employeeinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("emp.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Employeeinfo)ois.readObject();
        }
         catch (Exception e)
        {
            e.printStackTrace(); }
       
 System.out.println("Deserialization--Employee Name:"+si.name);
            System.out. println("Deserialization--Employee Designation:"+si.desi);
##
Write a Java program to perform transient in Student details(name,dept,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept,,rollno
 class Studentinfo implements Serializable
{
    String name;
   transient String dept;
    transient int rollno;
   
    Studentinfo(String n, String r,int n1)
    {
    this.name = n;
    this.dept = r;
    this.rollno=n1;
    }
}
##
Write a Java program to perform Transient in Employee details(name,designation)Note: Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable designation
 class Employeeinfo implements Serializable
{
    String name;
    transient String desi;
   
    Employeeinfo(String n, String r)
    {
    this.name = n;
    this.desi = r;
   
    }
} 
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Student Database.Note:Create a base class Person with variable rollno & name .In the derived class Student initialize the variable course name & fees.Serialization and Deserialization already performed in main class
   
    class Person implements Serializable{    
     int id;    
     String name;
     int total,percentage;
     Person(int id, String name) {    
      this.id = id;    
      this.name = name;    
     }    
    }    
    class Student extends Person{    
     String course;    
     int fee;   
     
     public Student(int id, String name, String course, int fee) {    
      super(id,name);    
      this.course=course;    
      this.fee=fee;    
     }    
    }    
##
Create a ArrayList in that list add any 4 animal names dynamically and display the same after add one more animal name at the index of 2 and then finally display the list.
import java.util.*;

public class CreateArrayListExample {

    public static void main(String[] args) {
        
        List<String> animals = new ArrayList<>();
        Scanner sc=new Scanner(System.in);

        for(int i=0;i<4;i++)
        {
        animals.add(sc.next());
        }

        System.out.println(animals);

       
        animals.add(2, sc.next());

        System.out.println(animals);

    }
}
##
Create an arraylist, add ‘n’ elements and remove 0th index elements and then display the arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
        ArrayList<String> al = new ArrayList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
        al.add(sc.next());
        }
        al.remove(0);
        System.out.println(al);
   }
}
##
Create an arraylist and add any three elements and then update the three elements by 71,81,91 and then display the result using the set method.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    ArrayList<Integer> arraylist = new ArrayList<Integer>(50);
    arraylist.add(1);
    arraylist.add(2);
    arraylist.add(3);
    
    arraylist.set(0,71);
    arraylist.set(1,81);
    arraylist.set(2,91);
    System.out.println(arraylist);
   
   }
}
##
To traverse Array List elements using the Iterator interface using java collection.
import java.util.*;  
public class ArrayListExample{  
 public static void main(String args[]){  
  Scanner sc=new Scanner(System.in);
  ArrayList<Integer> list=new ArrayList<Integer>();
  int n=sc.nextInt();
  for(int i=0;i<n;i++)
  {
      list.add(sc.nextInt());
  }
  Iterator itr=list.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  
  }  
 }  
}
##
To access an element from the array list,use the get() method of the ArrayList class based an index value and then display the corresponding value use java collection concepts.
import java.util.*;

public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    ArrayList<String> animals = new ArrayList<>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
          animals.add(sc.next());
    }
  
    System.out.println("ArrayList: " + animals);

   
    String str = animals.get(1);
    System.out.print("Element at index 1: " + str);
  }
}
##
Create an Array List to store n numbers (add elements of type Integer) and then display the n numbers.
import java.util.*;

public class Main { 
  public static void main(String[] args) { 
    ArrayList<Integer> myNumbers = new ArrayList<Integer>();
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    myNumbers.add(sc.nextInt());
    }
    for (int i : myNumbers) {
      System.out.println(i);
    }
  } 
}
##
Create an arraylist , add elements in an arraylist and then display in descending order.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
         Scanner sc=new Scanner(System.in);
        ArrayList<String> al = new ArrayList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
        al.add(sc.next());
        }
        Collections.sort(al, Collections.reverseOrder());
        System.out.println(al);

   }
}
##
Create an arraylist and add odd numbers from 30 to 11 and then display the result in sorting order.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    ArrayList<Integer> arraylist = new ArrayList<Integer>();
    arraylist.add(29);
    arraylist.add(27);
    arraylist.add(25);  arraylist.add(23);  arraylist.add(21);
    arraylist.add(19);  arraylist.add(17);  arraylist.add(15);  arraylist.add(13);  arraylist.add(11);
    
    Collections.sort(arraylist);
    System.out.println(arraylist);
   
   }
}
##
From  Arraylist numbers first print even numbers and then print odd numbers in ascending order using java collections.Note:int[] myArray={1,3,4,2,12,10,8,7,6,5,9,14} ;
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
         int[] myArray={1,3,4,2,12,10,8,7,6,5,9,14} ;
ArrayList<Integer>evenList = new ArrayList<Integer>();
ArrayList<Integer>oddList = new ArrayList<Integer>();

for(int i=0;i<myArray.length;i++){
if(myArray[i]%2==0){
evenList.add(myArray[i]);
}else{
oddList.add(myArray[i]);
}
}
Collections.sort(evenList);
Collections.sort(oddList);
for(int even : evenList)
System.out.print(even+",");
for(int odd : oddList)
{
System.out.print(odd+",");
}


   }
}
##
Pick prime numbers from arraylist and display the output using collections concepts.Note:Read size of the array.Read arraylist elemnts.Display prime numbers.
import java.util.*;

public class Main {
	static boolean isPrime(int number) {
		boolean isPrime = false;
		int i = (int) Math.ceil(Math.sqrt(number));
		while (i > 1) {
			if ((number != i) && (number % i == 0)) {
				isPrime = false;
				break;
			} else if (!isPrime)
				isPrime = true;
			--i;
		}
		return isPrime;
	}

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		ArrayList<Integer> list = new ArrayList<Integer>();
		int n=sc.nextInt();
		for(int i=0;i<n;i++)
		{
		    	list.add(sc.nextInt());
		}
	
		Integer array[] = new Integer[list.size()];
		array = list.toArray(array);
		System.out.println("Prime Numbers are: ");
		for (int i = 0; i < array.length; i++) {
			if (isPrime(array[i])) {
				System.out.println(array[i]);
			}
		}
	
	}
}
##
Write a java program add even numbers from 1 to 10 or 11 to 20 or 21 to 30 in arraylist and then display the size of the array list.Note:Runtime read the input.2,4,6,........
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		ArrayList<Integer> al=new ArrayList<Integer>();
        Scanner sc=new Scanner(System.in);
        for(int i=1;i<=5;i++)
        {
        al.add(sc.nextInt());
        }
     
        System.out.println(al.size());
	}
}
##
Create an arraylist, add 3 elements college,school,medical and remove school elements from the arraylist and then display the arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
        ArrayList<String> al = new ArrayList<String>();
      
        al.add("college");
        al.add("school");
        al.add("medical");
        
        al.remove("school");
        System.out.println(al);
   }
}
##
Create an arraylist and add elements like 1,2,3,4,5,6,7,1,1,1 and add size for arraylist 50.Apply trimToSize() method and display the arraylistelements and  the size of the current arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    ArrayList<Integer> arraylist = new ArrayList<Integer>(50);
    arraylist.add(1);
    arraylist.add(2);
    arraylist.add(3);
    arraylist.add(4);
    arraylist.add(5);
    arraylist.add(6);
    arraylist.add(7);
    arraylist.add(1);
    arraylist.add(1);
    arraylist.add(1);
    arraylist.trimToSize();
    System.out.println(arraylist);
    System.out.println(arraylist.size());
   }
}
##
Java Program To Print Fibonacci Series from given length Using Collection.Note:input 0 or -ve means print Length can not be negative.
import java.util.ArrayList;
import java.util.Scanner;

public class FibonacciSeries {

	public static void main(String[] args) {

	
		ArrayList<Integer> fibonacciSeries = new ArrayList<>();

	
		fibonacciSeries.add(0);
		fibonacciSeries.add(1);

	
		Scanner sc = new Scanner(System.in);
	
		int length = sc.nextInt();
		
	
		sc.close();

	
		if (length <= 0)
			System.out.println("Length can not be negative.");
	
		else if (length == 1)
			System.out.println(fibonacciSeries.get(0));
	
		else if (length == 2)
			System.out.println(fibonacciSeries);
		else {

		
			for (int i = 3; i <= length; i++) {
			
				fibonacciSeries.add(fibonacciSeries.get(i - 2) + fibonacciSeries.get(i - 3));
			}

		
			System.out.println(fibonacciSeries);
		}
	}
}
##
Create an arraylist and read input at runtime display the arraylist and then removeall elements for arraylist finally display the arraylist.
import java.util.*;

public class Main {
    public static void main(String[] args){

        Scanner sc=new Scanner(System.in);
        ArrayList<String> languages = new ArrayList<>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++){
             languages.add(sc.next());
        }
       
        
        System.out.println(languages);

        
        languages.removeAll(languages);
        System.out.println(languages);
    }
}
##
Write a java program add even numbers from 1 to 10 or 11 to 20 or 21 to 30 in arraylist and then display the size of the array list.Note:Runtime read the input.2,4,6,........
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		ArrayList<Integer> al=new ArrayList<Integer>();
        Scanner sc=new Scanner(System.in);
        for(int i=1;i<=5;i++)
        {
        al.add(sc.nextInt());
        }
     
        System.out.println(al.size());
	}
}
##
Create an arraylist, add 3 elements college,school,medical and remove school elements from the arraylist and then display the arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
        ArrayList<String> al = new ArrayList<String>();
      
        al.add("college");
        al.add("school");
        al.add("medical");
        
        al.remove("school");
        System.out.println(al);
   }
}
##
Convert array elements to arraylist and display the arraylist elements using collection concepts in java.Note:Array elements :      {"Agra", "Mysore", "Chennai", "Bhopal"}
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
      String citynames[]={"Agra", "Mysore", "Chennai", "Bhopal"};

	 
	  ArrayList<String> citylist= new ArrayList<String>(Arrays.asList(citynames));

	 

	  for (String str: citylist)
	  {
		System.out.println(str);
      }
   }
}
##
Java Program To Print Fibonacci Series from given length Using Collection.Note:input 0 or -ve means print Length can not be negative.
import java.util.ArrayList;
import java.util.Scanner;

public class FibonacciSeries {

	public static void main(String[] args) {

	
		ArrayList<Integer> fibonacciSeries = new ArrayList<>();

	
		fibonacciSeries.add(0);
		fibonacciSeries.add(1);

	
		Scanner sc = new Scanner(System.in);
	
		int length = sc.nextInt();
		
	
		sc.close();

	
		if (length <= 0)
			System.out.println("Length can not be negative.");
	
		else if (length == 1)
			System.out.println(fibonacciSeries.get(0));
	
		else if (length == 2)
			System.out.println(fibonacciSeries);
		else {

		
			for (int i = 3; i <= length; i++) {
			
				fibonacciSeries.add(fibonacciSeries.get(i - 2) + fibonacciSeries.get(i - 3));
			}

		
			System.out.println(fibonacciSeries);
		}
	}
}
##
Create an arraylist and read input at runtime display the arraylist and then removeall elements for arraylist finally display the arraylist.
import java.util.*;

public class Main {
    public static void main(String[] args){

        Scanner sc=new Scanner(System.in);
        ArrayList<String> languages = new ArrayList<>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++){
             languages.add(sc.next());
        }
       
        
        System.out.println(languages);

        
        languages.removeAll(languages);
        System.out.println(languages);
    }
}
##
Apply the Collection Concepts in java.To Create a linkedlist, read size of the list , read the elements for the linkedlist, add one element in particular index value and before and after index value added to linkedlist display the elements from the linkedlist.Note:add element at index position 2.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        LinkedList<String> domain = new LinkedList<String>();
        for(int i = 0;i<n;i++)
        {
            domain.add(sc.next());
        }
        System.out.println(domain);
        domain.add(2,sc.next());
        System.out.println(domain);
    }
}
##
Apply the listiterator method concepts in program to returns an object of Iterator class that contains  the elements in proper sequence  starting from the specified position as mentioned in the argument , display the elements from the linkedlist.To Create a linkedlist, read size of the list , read the elements for the linkedlist  and display it.Note:Index value consider as 1.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
     Iterator itr = cars.listIterator(1);

  while (itr.hasNext()) {

  System.out.println(itr.next());
  }
}
}
##
Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist.Apply the Collection Concepts in java.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
    System.out.println(cars);
  }
}
##
Apply the getFirst() method in LinkedList java concepts.Create a linkedlist, read size of the list , read the elements for the linkedlist and display the first index of the element from the linkedlist.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        LinkedList<String>list=new LinkedList<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            list.add(sc.next());
        }
        Iterator i=list.listIterator(0);
        System.out.print("First Element :"+i.next());
        
    }
}
##
Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist.After display element  add the "Good" text word first of the already created linkedlist. Finally display the current linkedlist element.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
    System.out.println(cars);
    cars.addFirst("Good");
    System.out.println(cars);
  }
}
##
Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist.Apply the Collection Concepts in java.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
       System.out.println(cars);
  }
}
##
Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist.Apply the Collection Concepts in java.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
       System.out.println(cars);
  }
}
##
Apply the Collection Concepts in java.Create a linkedlist, read size of the list , read the elements for the linkedlist and display the index 1 elements from the linkedlist.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        LinkedList<String>list=new LinkedList<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            list.add(sc.next());
        }
        Iterator i=list.listIterator(1);
        System.out.print("Element at index 1 :"+i.next());
        
    }
}
##
Apply the iterator Concepts in java linkedlist and display the elements from the linkedlist.To Create a linkedlist, read size of the list , read the elements for the linkedlist  and display it.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
     Iterator iterator = cars.iterator();  
    
        System.out.println("Elements in LinkedList : ");  
    
        while (iterator.hasNext())  
            System.out.print(iterator.next() + " ");  
    
        System.out.println();  
  }
}
##
To create the linkedlist , display the elements from the linkedlist and display the size of the linkedlist.Note:Read Size of the arrayRead elements for the array.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
       System.out.println("Linked List :" + cars);
       System.out.println("Linked List size:" + cars.size());
  }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object.Apply the iterator in list using for loop for iteration.Note:Size of the arrayRead n elements(String)
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }

		for (int i = 0; i < size; i++) {
  
            
            System.out.println(al.get(i) + " ");
        }
	    System.out.print("Size of the List:" + al.size());
	}
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object.Apply the iterator in list using for loop for iteration.Check list contains "Programming" text or not.Note:Size of the arrayRead n elements(String)
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }

		for (int i = 0; i < size; i++) {
  
            
            System.out.println(al.get(i) + " ");
        }
        System.out.println("List contains Programming or not:" + al.contains("programming"));
	
	}
}
##
Create a List interface implemented by array list class , adding n elements to object of List interface and print all the elements inside the List interface object,  remove given "for" object value  and then display the final list.Note:Size of the array.Read n elements(String).
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }
		System.out.println("Initial List:" + al);
		al.remove("for");
		System.out.println("Final List:" + al);
	}
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object,use indexOf() method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element and display the element from the list.Note:Size of the array.Read n elements(String).use indexOf("c")
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        List<String> s = new ArrayList<String>();
        Scanner sc = new Scanner(System.in); 
        int a = sc.nextInt();
        for(int i = 0;i<a;i++)
        {
            s.add(sc.next());
        }
        System.out.println("Initial List:"+s);
        System.out.println(s.indexOf("c"));
    }
}
##
Write a Java program to extract a portion of a list. index value from 1 to 3.
import java.util.*;
  public class Ex {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  List<String> list_Strings = new ArrayList<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list_Strings.add(sc.next());
  }
  System.out.println("Original list: " + list_Strings);
  List<String> sub_List = list_Strings.subList(1, 3);
  System.out.println("Index of 1 to 3 elements print: " + sub_List);
 }
}
##
Create a java program use hashset concepts in collection and add the elements to the hashset and then display it.
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        HashSet<String> s = new HashSet<String>();
        for(int i = 0;i<a;i++)
        {
            s.add(sc.next());
        }
        System.out.println("Values in HashSet object: " + s);
    }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object.Apply the iterator in list using for loop for iteration.Check list contains "Programming" text or not.Note:Size of the arrayRead n elements(String)
import java.util.*;
public class GFG 
{
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
	        al.add(sc.next());
        }
		for (int i = 0; i <size;i++) 
		{
              System.out.println(al.get(i));
        }
        System.out.print("List contains Programming or not:"+al.contains("programming"));
	}
}
##
Create a List interface implemented by array list class , adding n elements to object of List interface and print all the elements inside the List interface object,  remove given "for" object value  and then display the final list.Note:Size of the array.Read n elements(String).
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        List<String> list = new ArrayList<String>();
        for(int i =0;i<a;i++)
        {
            list.add(sc.next());
        }
        System.out.println("Initial List:"+list);
        list.remove("for");
        System.out.println("Final List:"+list);
    }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object,use indexOf() method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element and display the element from the list.Note:Size of the array.Read n elements(String).use indexOf("c")
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        List<String> s = new ArrayList<String>();
        Scanner sc = new Scanner(System.in); 
        int a = sc.nextInt();
        for(int i = 0;i<a;i++)
        {
            s.add(sc.next());
        }
        System.out.println("Initial List:"+s);
        System.out.println(s.indexOf("c"));
    }
}
##
Write a Java program to extract a portion of a list. index value from 1 to 3.
import java.util.*;
  public class Ex {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  List<String> list_Strings = new ArrayList<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list_Strings.add(sc.next());
  }
  System.out.println("Original list: " + list_Strings);
  List<String> sub_List = list_Strings.subList(1, 3);
  System.out.println("Index of 1 to 3 elements print: " + sub_List);
 }
}
##
Create a java program use hashset concepts in collection and add the elements to the hashset and then display it.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

HashSet <String> hs = new HashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

System.out.println("Values in HashSet object: "+ hs);
}
}
##
Write a java program to read n elements and remove the elements "98" from the hashset and the display the hashset elements.
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        HashSet<Integer> linked = new HashSet<Integer>();
        Scanner sc = new Scanner(System.in);
        int a= sc.nextInt();
        for(int i = 0;i<a;i++)
        {
            linked.add(sc.nextInt());
        }
        System.out.println("HashSet: "+linked);
        linked.remove(98);
        System.out.println("HashSet after removing elements: "+linked);
    }
}
##
Create a java program use hashset concepts in collection and add the elements to the hashset and then display the elements and its size.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        HashSet<String> s=new HashSet<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            s.add(sc.next());
        }
        System.out.println("HashSet: " + s);
        System.out.println("The size of the set is: " + s.size());
    }
}
##
Write a program to store a group of employee names into a LinkedHashSet, retrieve the elements one by one using an Iterator.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

HashSet <String> hs = new LinkedHashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

Iterator<String> it = hs.iterator();
		while (it.hasNext())
			System.out.println(it.next());
}
}
##
Write a java program to check wheather LinkedHashSet contains an element or not. It returns true if the set contains element, otherwise returns false.Apply clear method.Note:Size of the arrayRead n elementsDisplay the elements.
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        LinkedHashSet<String> s = new LinkedHashSet<String>();
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        for(int i = 0;i<a;i++)
        {
            s.add(sc.next());
        }
        System.out.println("HashSet Elements: " + s);
        
        System.out.println("Is the set empty: "+s.isEmpty());
        s.clear();
        System.out.println("Is the set empty: "+s.isEmpty());
    }
}
##
Write a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display the elements iterate(use while).
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        LinkedHashSet<String> s = new LinkedHashSet<String>();
        for(int i = 0;i<a;i++)
        {
            s.add(sc.next());
        }
        Iterator<String> i = s.iterator();
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a java program to read n elements and display the n elements, after remove one elements from the hashset("Ravi") and then display the elements.Note:remove object is "Ravi"
import java.util.*;  
public class HashSetRemoveExample1 
{  
    public static void main(String[] args) 
    {  
        HashSet<String> set=new HashSet<String>();  
        Scanner sc= new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
          set.add(sc.next());       
        }
        System.out.println("HashSet: "+set );   
        set.remove("Ravi");  
        System.out.println("HashSet after removing elements: " + set);  
    }  
}  
##
Create a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display it.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

LinkedHashSet <String> hs = new LinkedHashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

System.out.println("Values in HashSet object: " + hs);  
}
}
##
Apply the LinkedHashSet.Read the three animals name and display the elementsthrough LinkedHashSet using Iterator().
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        Set<String> s = new LinkedHashSet<String>(3);
        for(int i=0;i<3;i++)
        {
            s.add(sc.next());
        }
        Iterator i = s.iterator();
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a java program use hashset concepts from another collection and add the n elements to the arraylist and then add one element to hashset, apply iterate(use while)and then display elements using hashset variable.
import java.util.*;
public class HashSetDemo{
    public static void main(String args[]){
        
    Scanner sc=new Scanner(System.in);
    HashSet<String> list=new HashSet<String>(); 
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
        list.add(sc.next());
    }
    HashSet<String> set=new HashSet<String>(list);  
    set.add(sc.next());  
    Iterator<String> i=set.iterator();  
    while(i.hasNext())  
    {  
        System.out.println(i.next());  
    }  
}
}
##
Create a ArrayList in that list add any 4 animal names dynamically and display the same after add one more animal name at the index of 2 and then finally display the list.
import java.util.*;
public class Demo {
    public static void main(String args[])
    {
        List<String> animals = new ArrayList<>();
        Scanner sc=new Scanner(System.in);
        for (int i=0;i<4;i++)
        {
            animals.add(sc.next());
        }
        System.out.println(animals);
        animals.add(2, sc.next());
        System.out.println(animals);
    }
}
##
Create a two arraylist, first list add two words and then one word add in second arraylist.Finally display two arraylist elements in one arraylist.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        ArrayList<String> elements = new ArrayList<String>();
        Scanner sc=new Scanner(System.in);
        for (int i=0;i<2;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("ArrayList1 before addAll:"+elements);
        elements.add(2,sc.next());
        System.out.println("ArrayList1 after addAll:"+elements);
    }
}
##
Create an arraylist and add any three elements and then update the three elements by 71,81,91 and then display the result using the set method.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        ArrayList<Integer> arraylist = new ArrayList<Integer>();
        arraylist.add(1);
        arraylist.add(2);
        arraylist.add(3);
        
        arraylist.set(0,71);
        arraylist.set(1,81);
        arraylist.set(2,91);
        
        System.out.println(arraylist);
    }
}
##
To traverse Array List elements using the Iterator interface using java collection.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        ArrayList<Integer> list = new ArrayList<Integer>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            list.add(sc.nextInt());
        }
        
        Iterator itr = list.iterator();
        while (itr.hasNext())
        {
            System.out.println(itr.next());
        }
    }
}
##
To access an element from the array list,use the get() method of the ArrayList class based an index value and then display the corresponding value use java collection concepts.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        ArrayList<String> animals = new ArrayList<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            animals.add(sc.next());
        }
        System.out.println("ArrayList: "+animals);
        System.out.println("Element at index 1: "+animals.get(1));
    }
}
##
Create an arraylist and add the 4 cars name and add 3rd position one more car name and then display in alphabetical order.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        ArrayList<String> cars = new ArrayList<String>();
        Scanner sc=new Scanner(System.in);
        for(int i=0;i<4;i++)
        {
            cars.add(sc.next());
        }
        cars.add(3,sc.next());
        
        Collections.sort(cars); 
        
        for (String i : cars)
        {
            System.out.println(i);
        }
    }
}
##
Create a two arraylist, first list add two words and then one word add in second arraylist.Finally display two arraylist elements in one arraylist.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        ArrayList<String> elements = new ArrayList<String>();
        Scanner sc=new Scanner(System.in);
        for (int i=0;i<2;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("ArrayList1 before addAll:"+elements);
        elements.add(2,sc.next());
        System.out.println("ArrayList1 after addAll:"+elements);
    }
}
##
Create an arraylist and add any three elements and then update the three elements by 71,81,91 and then display the result using the set method.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        ArrayList<Integer> arraylist = new ArrayList<Integer>();
        arraylist.add(1);
        arraylist.add(2);
        arraylist.add(3);
        
        arraylist.set(0,71);
        arraylist.set(1,81);
        arraylist.set(2,91);
        
        System.out.println(arraylist);
    }
}
##
From  Arraylist numbers first print even numbers and then print odd numbers in ascending order using java collections.
Note:int[] myArray={1,3,4,2,12,10,8,7,6,5,9,14} ;
import java.util.*;  
public class Main {
    public static void main(String[] args)
    {
        int[] myArray={1,3,4,2,12,10,8,7,6,5,9,14} ;
        ArrayList<Integer>evenList = new ArrayList<Integer>();
        ArrayList<Integer>oddList = new ArrayList<Integer>();
        
        for(int i=0;i<myArray.length;i++)
        {
            if(myArray[i]%2==0)
            {
                evenList.add(myArray[i]);
            }
            else
            {
            oddList.add(myArray[i]);
            }
        }
        
        Collections.sort(evenList);
        Collections.sort(oddList);
        
        for(int even : evenList)
            System.out.print(even+",");
        
        for(int odd : oddList)
            System.out.print(odd+",");
    }
}
##
Create an Array List and we have to replace element of it using Java Collection concepts.Note:Size of the arraylist.Read elements based on size of the arraylist.Read index position(which element or position change )and replace element.Finally display arraylist elements.
import java.util.*;
public class pro1 {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        ArrayList<Integer> arrayList = new ArrayList<Integer>();
        
        for(int i=0;i<size;i++)
        {
            arrayList.add(sc.nextInt());
        }
        
        System.out.println("Original ArrayList...");
        for (int i:arrayList)
            System.out.println(i);
        
        int indexpos=sc.nextInt();
        int replaceelement=sc.nextInt();
        arrayList.set(indexpos, replaceelement);
        
        System.out.println("ArrayList after replacement...");
        for (int i:arrayList)
            System.out.println(i);
    }
}
##
Apply the Collection Concepts in java.To Create a linkedlist, read size of the list , read the elements for the linkedlist, add one element in particular index value and before and after index value added to linkedlist display the elements from the linkedlist.Note:add element at index position 2.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> elements = new LinkedList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println(elements);
        elements.add(2,sc.next());
        System.out.println(elements);
    }
}
##
Apply the getLast() method in LinkedList java concepts.Create a linkedlist, read size of the list , read the elements for the linkedlist and display the whole list of the elemnts and last index of the element from the linkedlist.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> elements = new LinkedList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println(elements);
        System.out.println("Last Element :"+elements.get(n-1));
    }
}
##
Create a linkedlist and read the 3 elements for the linkedlist and display the elements from the linkedlist.Apply the clone method in linkedlist.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> list1 = new LinkedList<String>();
        for(int i=0;i<3;i++)
        {
            list1.add(sc.next());
        }
        System.out.println("Linked List 1:"+list1);
        LinkedList list2 = new LinkedList();
        list2 = (LinkedList) list1.clone();
        System.out.println("Linked List 2:"+list2);
    }
}
##
Develop a java class with a method saveEvenNumbers(int N) using LinkedList to store even numbers from 2 to N, where N is a integer which is passed as a parameter to the method saveEvenNumbers().The method should return the LinkedList (A1) created. In the same class create a method printEvenNumbers()which iterates through the LinkedList A1 in step 1, and It should multiply each number with 2 and display it in format 4,8,12….2*N. and add these numbers in a new LinkedList (A2). The new LinkedList (A2) created needs to be returned. Create a method printEvenNumber(int N) parameter is a number N. This method should search the LinkedList (A1) for the existence of the number ‘N’ passed. If exists it should return the Number else return zero.Hint: Use instance variable for storing the LinkedList A1 and A2. NOTE: You can test the methods using a main method.
import java.util.*;
public class Main {
	
	private LinkedList<Integer> list = new LinkedList<Integer>();
	public LinkedList<Integer> saveEvenNumbers(int N)
	{
		list = new LinkedList<Integer>();
		for (int i = 2; i <= N; i++)
		{
			if (i % 2 == 0) list.add(i);
		}
		return list;
	}
	public LinkedList<Integer> printEvenNumbers()
	{
		LinkedList<Integer> newList = new LinkedList<Integer>();
		for (int item : list)
		{
			newList.add(item * 2);
			System.out.println(item * 2);
		}
		return newList;
	}
	public static void main(String[] args)
	{
		Main asg = new Main();
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		asg.saveEvenNumbers(N);
		asg.printEvenNumbers();
	}

}
##
Without applying removeFirst() method Concepts in java linkedlist , display the elements from index 1 position onwards in the linkedlist but apply remove() method must and display it.Note:Read Size of the arrayRead elements for the array.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        LinkedList<String> elements = new LinkedList<String>();
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Linked List :"+elements);
        int r=sc.nextInt();
        System.out.println("Element to be removed:"+elements.get(0));
        elements.remove(0);
        System.out.println("LinkedList:"+elements);
    }
}
##
Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist.Apply the Collection Concepts in java.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> elements = new LinkedList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println(elements);
    }
}
##
Apply the contains method in linkedlist.Create a linkedlist and read the n elements for the linkedlist and display the elements from the linkedlist.Check whether "Programming" text contains or not.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> elements = new LinkedList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Linked List 1:"+elements);
        System.out.println("Linked List 1 contains 'Programming' :"+elements.contains("Programming"));
    }
}
##
Apply the Collection Concepts in java.Create a linkedlist, read size of the list , read the elements for the linkedlist and display the index 1 elements from the linkedlist.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> elements = new LinkedList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Element at index 1 :"+elements.get(1));
    }
}
##
Apply the remove method Concepts in java linkedlist and display the elements before and after applying remove methods from the linkedlist.To Create a linkedlist, read size of the list , read the elements for the linkedlist  and display it.Note:Read Size of the arrayRead elements for the array.Based on index value remove the element from the linked list.(Index value must be mention(read)).
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        LinkedList<String> elements = new LinkedList<String>();
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Linked List :"+elements);
        int r=sc.nextInt();
        System.out.println("Element to be removed:"+elements.get(r));
        elements.remove(r);
        System.out.println("LinkedList:"+elements);
    }
}
##
To create the linkedlist , display the elements from the linkedlist and replace the one element from the created linkedlist.Note:Read Size of the arrayRead elements for the array.Replace position and element should read.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        LinkedList<String> elements = new LinkedList<String>();
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Linked List :"+elements);
        int r=sc.nextInt();
        System.out.println("Object to be replaced:"+elements.get(r));
        elements.set(r,sc.next());
        System.out.println("Linked List:"+elements);
    }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object.Note:Size of the arrayRead n elements(String)
import java.util.*;
public class Main {
    public static void main(String args[])
    {
        List<String> a = new ArrayList<String>();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
            a.add(sc.next());   
        }
        System.out.println(a);
    }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object and apply addall() method appends all of the elements in the specified collection to the end of this list.Note:List:Size of the array,Read n elements(integer)ArrayList:read value 100,200,300
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        List<Integer> n1=new ArrayList<Integer>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            n1.add(sc.nextInt());
        }
        System.out.println(n1);
        int[] array={100,200,300};
        List<Integer> n2=new ArrayList<Integer>();
        for (int i: array)
            n2.add(i);
        System.out.println(n2);
        n1.addAll(n2);
        System.out.println(n1);
    }
}
##
Create a List interface implemented by two Linkedlist class , adding n elements to object of two List interface and print all the elements inside the List interface object.Check the two lists are equal or not.Note:Read Size of the array for two listRead n elements(String) for two list.Output:EqualNot equal
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        List<String> n1=new ArrayList<String>();
        int s1=sc.nextInt();
        for (int i=0;i<s1;i++)
        {
            n1.add(sc.next());
        }
        System.out.println(n1);
        
        List<String> n2=new ArrayList<String>();
        int s2=sc.nextInt();
        for (int i=0;i<s2;i++)
        {
            n2.add(sc.next());
        }
        System.out.println(n2);
        if (n1.equals(n2))
            System.out.println("Equal");
        else
            System.out.println("Not equal");
    }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object,use lastIndexOf() method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element and display the element from the list.Note:Size of the array.Read n elements(Integer).use lastIndexOf(30)
import java.util.*;
public class Demo {
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<Integer> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
			al.add(sc.nextInt());
        }
		System.out.println("Initial List:" + al);
		System.out.println(al.lastIndexOf(30));
	}
}
##
Write a Java program to sort a given array list.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        List<String> arr=new ArrayList<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            arr.add(sc.next());
        }
        System.out.println("List before sort: "+arr);
        Collections.sort(arr);
        System.out.println("List after sort: "+arr);
    }
}
##
Write a program to store a group of employee names into a HashSet, retrieve the elements one by one using an Iterator.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        ArrayList<String>cars=new ArrayList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            cars.add(sc.next());
        }
        HashSet<String>set=new HashSet<String>(cars);
        Iterator<String>i=set.iterator();
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Create a List interface implemented by two arraylist class , adding n elements to object of two List interface and print all the elements inside the List interface object.Check the two lists are equal or not.Note:Read Size of the array for two listRead n elements(Integer) for two list.Output:EqualNot equal
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        List<String> n1=new ArrayList<String>();
        int s1=sc.nextInt();
        for (int i=0;i<s1;i++)
        {
            n1.add(sc.next());
        }
        System.out.println(n1);
        
        List<String> n2=new ArrayList<String>();
        int s2=sc.nextInt();
        for (int i=0;i<s2;i++)
        {
            n2.add(sc.next());
        }
        System.out.println(n2);
        if (n1.equals(n2))
            System.out.println("Equal");
        else
            System.out.println("Not equal");
    }
}
##
Create a List interface implemented by array list class , adding n elements to object of List interface and print all the elements inside the List interface object,  remove given "for" object value  and then display the final list.Note:Size of the array.Read n elements(String).
import java.util.*;
public class GFG {
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
			al.add(sc.next());
        }
		System.out.println("Initial List:" + al);
		al.remove("for");
		System.out.println("Final List:" + al);
	}
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object,use lastIndexOf() method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element and display the element from the list.Note:Size of the array.Read n elements(Integer).use lastIndexOf(30)
import java.util.*;
public class Demo {
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<Integer> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
			al.add(sc.nextInt());
        }
		System.out.println("Initial List:" + al);
		System.out.println(al.lastIndexOf(30));
	}
}
##
Write a Java program of swap two elements in a list. Swapping 1st(index 0) element with the 3rd(index 2) element.
import java.util.*;
public class swap {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        List<String> c1= new ArrayList<String>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            c1.add(sc.next());
        }
        
        System.out.println("Array list before Swap:");
        for(String a: c1)
        {
            System.out.println(a);
        }
        
        Collections.swap(c1, 0, 2);
        System.out.println("Array list after swap:");
        for(String b: c1)
        {
            System.out.println(b);
        }
    }
}
##
Write a program to store a group of employee names into a HashSet, retrieve the elements one by one using an Iterator.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        Set<String> elements=new HashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        Iterator i = elements.iterator();
        while (i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a java program to read n elements and display the n elements, after remove one elements from the hashset("Ravi") and then display the elements.Note:remove object is "Ravi"
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        Set<String> names=new HashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            names.add(sc.next());
        }
        System.out.println("HashSet: "+names);
        names.remove("Ravi");
        System.out.println("HashSet after removing elements: "+names);
    }
}
##
To create the linkedhashset , display the elements from the linkedhashset and display the size of the linkedhashset.Note:Read Size of the arrayRead elements for the array.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String> names=new LinkedHashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            names.add(sc.next());
        }
        System.out.println("Linked HashSet :"+names);
        System.out.println("Linked HashSet size:"+names.size());
    }
}
##
Create a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display it.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String> names=new LinkedHashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            names.add(sc.next());
        }
        System.out.println("Values in HashSet object: "+names);
    }
}
##
Write a java program to create Linkedhashset , read the 5 elements and  display the Linkedhashset elements and display the particular elements are present or not using contains() method.Note:Ckeck 110 and 555 elements present or not using contains method.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String> elements=new LinkedHashSet<String>();
        for (int i=0;i<5;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Hash set Elements: "+elements);
        System.out.println("Does the Set contains '110'? :- "+elements.contains("110"));
        System.out.println("Does the Set contains '555'? :- "+elements.contains("555"));
    }
}
##
Write a program to store a group of employee names into a LinkedHashSet, retrieve the elements one by one using an Iterator.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String> elements=new LinkedHashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        Iterator i = elements.iterator();
        while (i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a java program to check wheather HashSet contains an element or not. It returns true if the set contains element, otherwise returns false.Apply clear method.Note:Size of the arrayRead n elementsDisplay the elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        Set<String> elements=new HashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("HashSet Elements: "+elements);
        System.out.println("Is the set empty: "+elements.isEmpty());
        elements.clear();
        System.out.println("Is the set empty: "+elements.isEmpty());
    }
}
##
Write a program to store a group of employee names into a HashSet, retrieve the elements one by one using an Iterator.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        Set<String> elements=new HashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        Iterator i = elements.iterator();
        while (i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Check whether LinkedHashSet is empty or not using java collection.Without elements and with elements list result display.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        LinkedHashSet<Integer> al = new LinkedHashSet<Integer>();
        System.out.println("Is LinkedHashSet Empty: "+al.isEmpty());
        al.add(1);
        al.add(88);
        al.add(9);
        al.add(17);
        System.out.println("Is LinkedHashSet Empty: "+al.isEmpty());
    }
}
##
Create a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display it.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String> names=new LinkedHashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            names.add(sc.next());
        }
        System.out.println("Values in HashSet object: "+names);
    }
}
##
Write a java program to create the array list , to read the three elements and display the elements.Use add function in collection arraylist concept and display the same.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        List<String> lang = new ArrayList<>();
        for(int i=0;i<3;i++)
        {
            lang.add(sc.next());
        }
        System.out.println(lang);
    }
}
##
Create an arraylist, add 3 elements college,school,medical and remove school elements from the arraylist and then display the arraylist.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        List<String> txt = new ArrayList<>();
        txt.add("college");
        txt.add("school");
        txt.add("medical");
        txt.remove(1);
        System.out.println(txt);
    }
}
##
Check whether arraylist is empty or not using java collection.If list is empty display true otherwise display false.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int i = sc.nextInt();
        List<Integer> arr1 = new ArrayList<>();
        System.out.println("Is ArrayList Empty: "+arr1.isEmpty());
        for(int j=0;j<i;j++)
        {
            arr1.add(sc.nextInt());
        }
        System.out.println("Is ArrayList Empty: "+arr1.isEmpty());
    }
}
##
Create an arraylist in that list add n color name like Red,Green,Blue,Yellow using contains method find Pink color is found or not.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<String> sonjai = new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            sonjai.add(sc.nextLine());
        }
        System.out.print("ArrayList contains Pink: "+sonjai.contains("Pink"));
    }
}
##
Write a Java Program to iterate ArrayList using for-loop, while-loop, and advance for-loop.(Integer value)Note:Size of the arraylistElements of arraylistPrint the elements using different iterate methods in collection.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        List<Integer> arr = new ArrayList<>();
        for(int i=0;i<a;i++)
        {
            arr.add(sc.nextInt());
        }
        int j =0;
        System.out.println("While Loop:");
        while(j<a)
        {
            System.out.println(arr.get(j));
            j++;
        }
        System.out.println("Advanced For Loop:");
        for(Integer i : arr)
        {
            System.out.println(i);
        }
        System.out.println("For Loop:");
        for(int i=0;i<a;i++)
        {
            System.out.println(arr.get(i));
        }
    }
}
##
Check whether arraylist is empty or not using java collection.Without elements and with elements list result display.
import java.util.*;
public class Main {
    public static void main(String[] args) 
    {
        ArrayList<Integer> al = new ArrayList<Integer>();
        System.out.println("Is ArrayList Empty: "+al.isEmpty());
        // al.add;
        al.add(88);
        al.add(9);
        al.add(17);
        System.out.println("Is ArrayList Empty: "+al.isEmpty());
    }
}
##
Develop a java class with a method saveEvenNumbers(int N) using LinkedList to store even numbers from 2 to N, where N is a integer which is passed as a parameter to the method saveEvenNumbers().The method should return the LinkedList (A1) created. In the same class create a method printEvenNumbers()which iterates through the LinkedList A1 in step 1, and It should multiply each number with 2 and display it in format 4,8,12….2*N. and add these numbers in a new LinkedList (A2). The new LinkedList (A2) created needs to be returned. Create a method printEvenNumber(int N) parameter is a number N. This method should search the LinkedList (A1) for the existence of the number ‘N’ passed. If exists it should return the Number else return zero.Hint: Use instance variable for storing the LinkedList A1 and A2. NOTE: You can test the methods using a main method.
import java.util.*;
public class Main {
	private LinkedList<Integer> list = new LinkedList<Integer>();
	
	public LinkedList<Integer> saveEvenNumbers(int N) {
		list = new LinkedList<Integer>();
		
		for (int i = 2; i <= N; i++) {
			if (i % 2 == 0) list.add(i);
		}
		
		return list;
	}
	
	public LinkedList<Integer> printEvenNumbers() {
		LinkedList<Integer> newList = new LinkedList<Integer>();
		
		for (int item : list) {
			newList.add(item * 2);
			System.out.println(item * 2);
		}
		
		return newList;
	}

	public static void main(String[] args) {
		Main asg = new Main();
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		asg.saveEvenNumbers(N);
		asg.printEvenNumbers();
		

	}

}
##
Applying lastIndexOf() method returns the index of the element given in the linked list starting from first position. Otherwise it will return -1, if that element is not present in the linked list. .Create a linkedlist, read size of the list , read the elements for the linkedlist and display the whole list of the elements and apply the lastIndexOf("Engineering") and lastIndexOf("Programming").Apply this two different methods in linkedlist program. 
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    System.out.println(cars);
    
    System.out.println("LastIndex for Engineering :" + cars.lastIndexOf("Engineering"));
    System.out.println("LastIndex for Programming :" + cars.lastIndexOf("Programming"));
  }
}
##
Write a Java program to create a reverse order view of the elements contained in a given tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts = new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        System.out.println("Original tree set:"+ts);
        Iterator i=ts.descendingIterator();
        System.out.println("Elements in Reverse Order:");
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a Java program to compare two tree sets.(Use Integer).Note:Read size of the integer.Read elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeSet<Integer> ts1 = new TreeSet<Integer>();
        for(int i=0;i<n1;i++)
        {
            ts1.add(sc.nextInt());
        }
        int n2=sc.nextInt();
        TreeSet<Integer> ts2 = new TreeSet<Integer>();
        for(int i=0;i<n2;i++)
        {
            ts2.add(sc.nextInt());
        }
        System.out.println("Free Tree set: "+ts1);
        System.out.println("Second Tree set: "+ts2);
        TreeSet<Integer> result=new TreeSet<Integer>();
        for (Integer i: ts1)
        {
            System.out.println(ts2.contains(i) ? "Yes" : "No");
        }
    }
}
##
Write a Java program to print odd number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for (int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("Original tree set: "+ts);
        for (int i: ts)
        {
            if(i%2!=0)
                System.out.println(i);
        }
    }
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: tailset start from 10 (use integer)
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        TreeSet<Integer> tail_set=new TreeSet<Integer>();
        tail_set = (TreeSet<Integer>)ts.tailSet(10);
        Iterator i = tail_set.iterator();
        System.out.println("The resultant values from the tail: ");
        while (i.hasNext())
        {
            System.out.println(i.next() + " ");
        }
    }
}
##
Create the java program to demonstrate floor method for Integer value.Note: floor value for integer 25.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("TreeSet: "+ts);
        System.out.println("Floor value for 25: "+ts.floor(25));
    }
}
##
Write a Java program to iterate through all elements in a tree set. Note:Read size of n numbersRead n numbersuse for loop for iterate.
import java.util.*;
public class Exercise2 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<Integer> tree_set = new TreeSet<Integer>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.nextInt());
  }
 
  for (Integer element : tree_set) {
    System.out.println(element);
    }
 }
}
##
Write a Java program to get an element in a tree set which is strictly less than the given element.Note:Size of the elementRead elementDisplay lower than 69.Display lower than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly less than 69 : "+tree_num.lower(69));
   System.out.println("Strictly less than 12 : "+tree_num.lower(12));
   }    
}
##
Write a Java program to retrieve and remove the last element of a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the last element: "+tree_num.pollLast());
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
        Scanner sc=new Scanner(System.in);
                TreeSet<String> tree_set = new TreeSet<String>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> tail_set = new TreeSet<String>();
                tail_set = (TreeSet<String>)tree_set.tailSet("i");
                Iterator iterate;
                iterate = tail_set.iterator();
                System.out.println("The resultant values from the tail: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the 15(Integer) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<Integer> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.nextInt());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet(15));
        }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class color {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
  TreeSet<String> tree_set = new TreeSet<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);
 }
}
##
Write a Java program to get an element in a tree set which is strictly greater than the given element.Note:Size of the elementRead elementDisplay higher than 69.Display higher than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly greater than 69 : "+tree_num.higher(69));
   System.out.println("Strictly greater than 12 : "+tree_num.higher(12));
   }    
}
##
Write a Java program to remove a given element from a tree set.Note:Read Size of the setRead Elements.Remove 70 elements from set
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes 70 from the list: "+tree_num.remove(70));
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}
##
Write a java program to display the heterogenous object with help of stringbuffer concepts.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
                Set<StringBuffer> ts = new TreeSet<>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                ts.add(new StringBuffer(sc.next()));
                }
                System.out.println(ts);
        }
}
##
Create the java program to demonstrate descendingSet() method for String value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<String> treeadd = new TreeSet<String>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.next());
                }
            NavigableSet<String> treereverse = treeadd.descendingSet();
            Iterator<String> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to get the first and last elements in a tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
  public class Exercise5 {
  public static void main(String[] args) {
  
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<String> tree_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);

    Object first_element = tree_set.first();
    System.out.println("First Element is: "+first_element);
 
    
    Object last_element = tree_set.last();
    System.out.println("Last Element is: "+last_element);
 }
}
##
Write a Java program to get the number of elements in a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise6 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  
  TreeSet<String> t_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  t_set.add(sc.next());
  }
     
  System.out.println("Original tree set: " + t_set);
    System.out.println("Size of the tree set: " + t_set.size());     
     }
 }
##
Write a Java program to print even number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==0)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the resultant values(String) within the subset (range e to i ) should display in result. Note:use subset method.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
                TreeSet<String> tree_set = new TreeSet<String>();
                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> sub_set = new TreeSet<String>();
                sub_set = (TreeSet<String>)tree_set.subSet("e","i");
                Iterator iterate;
                iterate = sub_set.iterator();
                System.out.println("The resultant values within the sub set: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for Integer value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<Integer> treeadd = new TreeSet<Integer>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.nextInt());
                }
            NavigableSet<Integer> treereverse = treeadd.descendingSet();
            Iterator<Integer> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to add all the elements of a specified tree set to another tree set.Note:Read size.Read elements
import java.util.*;
public class Exercise3 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
   int size2=sc.nextInt();
  TreeSet<Integer> tree_set1 = new TreeSet<Integer>();
    for(int i=0;i<size1;i++){
    tree_set1.add(sc.nextInt());
    }
  
  
  System.out.println("Tree set1: "+tree_set1);
  TreeSet<Integer> tree_set2 = new TreeSet<Integer>();
  for(int i=0;i<size2;i++){
    tree_set2.add(sc.nextInt());
    }
  
  System.out.println("Tree set2: "+tree_set2);
  
   tree_set1.addAll(tree_set2);
   System.out.println("Tree set1: "+tree_set1);
 }
}
##
Write a Java program to compare two tree sets.(Use string).Note:Read size of the string.Read elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise8 {
  public static void main(String[] args) {

  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
  TreeSet<String> t_set1 = new TreeSet<String>();
  for(int i=0;i<size1;i++)
  {
  t_set1.add(sc.next());
  }
          System.out.println("Free Tree set: "+t_set1);

          
           int size2=sc.nextInt();
            TreeSet<String> t_set2 = new TreeSet<String>();
            for(int i=0;i<size2;i++)
            {
            t_set2.add(sc.next());
            }
          System.out.println("Second Tree set: "+t_set2);
          
          TreeSet<String> result_set = new TreeSet<String>();
         for (String element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}
##
Write a Java program to retrieve and remove the first element of a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise14 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
    tree_num.add(sc.nextInt());
   }
  
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the first(lowest) element: "+tree_num.pollFirst());
   System.out.println("Tree set after removing first element: "+tree_num);
   }    
}
##
Write a java program to display the resultant values within the subset (range 5 to 25 ) should display in result. Note:use subset method.
import java.util.*;


public class Main {
        public static void main(String[] args)
        {

                
                TreeSet<Integer> tree_set = new TreeSet<Integer>();

                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.nextInt());
                }
                
                TreeSet<Integer> sub_set = new TreeSet<Integer>();

                
                sub_set = (TreeSet<Integer>)tree_set.subSet(6, 30);

        
                Iterator iterate;
                iterate = sub_set.iterator();

        
                System.out.println("The resultant values within the sub set: ");

                
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the "h"(String) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<String> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.next());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet("h"));
        }
}
##
Write a Java program to create a reverse order view of the elements contained in a given tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
import java.util.Iterator;
  public class Exercise4 {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    int size=sc.nextInt();
     TreeSet<String> t_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  t_set.add(sc.next());
  }
 
          
    
   System.out.println("Original tree set:" + t_set);  
     Iterator it = t_set.descendingIterator();
     
     System.out.println("Elements in Reverse Order:");
     while (it.hasNext()) {
        System.out.println(it.next());
     }
  }
}
##
Write a Java program to get an element in a tree set which is strictly greater than the given element.Note:Size of the elementRead elementDisplay higher than 69.Display higher than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly greater than 69 : "+tree_num.higher(69));
   System.out.println("Strictly greater than 12 : "+tree_num.higher(12));
   }    
}
##
Write a Java program to retrieve and remove the last element of a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the last element: "+tree_num.pollLast());
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}
##
Write a java program to display the heterogenous object with help of stringbuffer concepts.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
                Set<StringBuffer> ts = new TreeSet<>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                ts.add(new StringBuffer(sc.next()));
                }
                System.out.println(ts);
        }
}
##
Create the java program to demonstrate floor method for Integer value.Note: floor value for integer 25.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
        TreeSet<Integer> treeadd = new TreeSet<Integer>();
                        
                        Scanner sc=new Scanner(System.in);
                        int size=sc.nextInt();
                        for(int i=0;i<size;i++)
                        {
            treeadd.add(sc.nextInt());
                        }
                        System.out.println("TreeSet: " + treeadd);
                        int value = treeadd.floor(25);
                        System.out.println("Floor value for 25: "
                                                        + value);
        
                
        }
}
##
Write a Java program to add all the elements of a specified tree set to another tree set.Note:Read size.Read elements
import java.util.*;
public class Exercise3 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
   int size2=sc.nextInt();
  TreeSet<Integer> tree_set1 = new TreeSet<Integer>();
    for(int i=0;i<size1;i++){
    tree_set1.add(sc.nextInt());
    }
  
  
  System.out.println("Tree set1: "+tree_set1);
  TreeSet<Integer> tree_set2 = new TreeSet<Integer>();
  for(int i=0;i<size2;i++){
    tree_set2.add(sc.nextInt());
    }
  
  System.out.println("Tree set2: "+tree_set2);
  
   tree_set1.addAll(tree_set2);
   System.out.println("Tree set1: "+tree_set1);
 }
}
##
Write a Java program to get an element in a tree set which is strictly less than the given element.Note:Size of the elementRead elementDisplay lower than 69.Display lower than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly less than 69 : "+tree_num.lower(69));
   System.out.println("Strictly less than 12 : "+tree_num.lower(12));
   }    
}
##
Write a Java program to print odd number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==1)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the resultant values within the subset (range 5 to 25 ) should display in result. Note:use subset method.
import java.util.*;


public class Main {
        public static void main(String[] args)
        {

                
                TreeSet<Integer> tree_set = new TreeSet<Integer>();

                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.nextInt());
                }
                
                TreeSet<Integer> sub_set = new TreeSet<Integer>();

                
                sub_set = (TreeSet<Integer>)tree_set.subSet(6, 30);

        
                Iterator iterate;
                iterate = sub_set.iterator();

        
                System.out.println("The resultant values within the sub set: ");

                
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for String value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<String> treeadd = new TreeSet<String>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.next());
                }
            NavigableSet<String> treereverse = treeadd.descendingSet();
            Iterator<String> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to get the first and last elements in a tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
  public class Exercise5 {
  public static void main(String[] args) {
  
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<String> tree_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);

    Object first_element = tree_set.first();
    System.out.println("First Element is: "+first_element);
 
    
    Object last_element = tree_set.last();
    System.out.println("Last Element is: "+last_element);
 }
}
##
Write a Java program to get the number of elements in a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise6 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  
  TreeSet<String> t_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  t_set.add(sc.next());
  }
     
  System.out.println("Original tree set: " + t_set);
    System.out.println("Size of the tree set: " + t_set.size());     
     }
 }
##
Write a Java program to print even number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==0)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
        Scanner sc=new Scanner(System.in);
                TreeSet<String> tree_set = new TreeSet<String>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> tail_set = new TreeSet<String>();
                tail_set = (TreeSet<String>)tree_set.tailSet("i");
                Iterator iterate;
                iterate = tail_set.iterator();
                System.out.println("The resultant values from the tail: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the 15(Integer) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<Integer> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.nextInt());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet(15));
        }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class color {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
  TreeSet<String> tree_set = new TreeSet<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);
 }
}
##
Write a Java program to compare two tree sets.(Use Integer).Note:Read size of the integer.Read elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise8 {
  public static void main(String[] args) {

  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
  TreeSet<Integer> t_set1 = new TreeSet<Integer>();
  for(int i=0;i<size1;i++)
  {
  t_set1.add(sc.nextInt());
  }
          System.out.println("Free Tree set: "+t_set1);

          
           int size2=sc.nextInt();
            TreeSet<Integer> t_set2 = new TreeSet<Integer>();
            for(int i=0;i<size2;i++)
            {
            t_set2.add(sc.nextInt());
            }
          System.out.println("Second Tree set: "+t_set2);
          
          TreeSet<Integer> result_set = new TreeSet<Integer>();
         for (Integer element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}
##
Write a Java program to retrieve and remove the first element of a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise14 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
    tree_num.add(sc.nextInt());
   }
  
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the first(lowest) element: "+tree_num.pollFirst());
   System.out.println("Tree set after removing first element: "+tree_num);
   }    
}
##
Write a java program to display the resultant values(String) within the subset (range e to i ) should display in result. Note:use subset method.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
                TreeSet<String> tree_set = new TreeSet<String>();
                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> sub_set = new TreeSet<String>();
                sub_set = (TreeSet<String>)tree_set.subSet("e","i");
                Iterator iterate;
                iterate = sub_set.iterator();
                System.out.println("The resultant values within the sub set: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for Integer value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<Integer> treeadd = new TreeSet<Integer>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.nextInt());
                }
            NavigableSet<Integer> treereverse = treeadd.descendingSet();
            Iterator<Integer> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to iterate through all elements in a tree set. Note:Read size of n numbersRead n numbersuse for loop for iterate.
import java.util.*;
public class Exercise2 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<Integer> tree_set = new TreeSet<Integer>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.nextInt());
  }
 
  for (Integer element : tree_set) {
    System.out.println(element);
    }
 }
}
##
Write a Java program to compare two tree sets.(Use string).Note:Read size of the string.Read elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise8 {
  public static void main(String[] args) {

  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
  TreeSet<String> t_set1 = new TreeSet<String>();
  for(int i=0;i<size1;i++)
  {
  t_set1.add(sc.next());
  }
          System.out.println("Free Tree set: "+t_set1);

          
           int size2=sc.nextInt();
            TreeSet<String> t_set2 = new TreeSet<String>();
            for(int i=0;i<size2;i++)
            {
            t_set2.add(sc.next());
            }
          System.out.println("Second Tree set: "+t_set2);
          
          TreeSet<String> result_set = new TreeSet<String>();
         for (String element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}
##
Write a Java program to print even number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==0)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
        Scanner sc=new Scanner(System.in);
                TreeSet<String> tree_set = new TreeSet<String>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> tail_set = new TreeSet<String>();
                tail_set = (TreeSet<String>)tree_set.tailSet("i");
                Iterator iterate;
                iterate = tail_set.iterator();
                System.out.println("The resultant values from the tail: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the "h"(String) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<String> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.next());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet("h"));
        }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class color {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
  TreeSet<String> tree_set = new TreeSet<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);
 }
}
##
Write a Java program to get an element in a tree set which is strictly less than the given element.Note:Size of the elementRead elementDisplay lower than 69.Display lower than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly less than 69 : "+tree_num.lower(69));
   System.out.println("Strictly less than 12 : "+tree_num.lower(12));
   }    
}
##
Write a Java program to retrieve and remove the first element of a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise14 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
    tree_num.add(sc.nextInt());
   }
  
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the first(lowest) element: "+tree_num.pollFirst());
   System.out.println("Tree set after removing first element: "+tree_num);
   }    
}
##
Write a java program to display the resultant values(String) within the subset (range e to i ) should display in result. Note:use subset method.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
                TreeSet<String> tree_set = new TreeSet<String>();
                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> sub_set = new TreeSet<String>();
                sub_set = (TreeSet<String>)tree_set.subSet("e","i");
                Iterator iterate;
                iterate = sub_set.iterator();
                System.out.println("The resultant values within the sub set: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for Integer value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<Integer> treeadd = new TreeSet<Integer>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.nextInt());
                }
            NavigableSet<Integer> treereverse = treeadd.descendingSet();
            Iterator<Integer> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to create a reverse order view of the elements contained in a given tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts = new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        System.out.println("Original tree set:"+ts);
        Iterator i=ts.descendingIterator();
        System.out.println("Elements in Reverse Order:");
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a Java program to compare two tree sets.(Use string).Note:Read size of the string.Read elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeSet<String> ts1 = new TreeSet<String>();
        for(int i=0;i<n1;i++)
        {
            ts1.add(sc.next());
        }
        int n2=sc.nextInt();
        TreeSet<String> ts2 = new TreeSet<String>();
        for(int i=0;i<n2;i++)
        {
            ts2.add(sc.next());
        }
        System.out.println("Free Tree set: "+ts1);
        System.out.println("Second Tree set: "+ts2);
        TreeSet<String> result=new TreeSet<String>();
        for (String i: ts1)
        {
            System.out.println(ts2.contains(i) ? "Yes" : "No");
        }
    }
}
##
Write a Java program to print odd number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for (int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("Original tree set: "+ts);
        for (int i: ts)
        {
            if(i%2!=0)
                System.out.println(i);
        }
    }
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts=new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        TreeSet<String> tail_set = new TreeSet<String>();
        tail_set = (TreeSet<String>)ts.tailSet("i");
        Iterator i = tail_set.iterator();
        System.out.println("The resultant values from the tail: ");
        while (i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Create the java program to demonstrate floor method for Integer value.Note: floor value for integer 25.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("TreeSet: "+ts);
        System.out.println("Floor value for 25: "+ts.floor(25));
    }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts = new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        System.out.println("Tree set:\n"+ts);
    }
}
##
Write a Java program to compare two tree sets.(Use Integer).Note:Read size of the integer.Read elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeSet<Integer> ts1 = new TreeSet<Integer>();
        for(int i=0;i<n1;i++)
        {
            ts1.add(sc.nextInt());
        }
        int n2=sc.nextInt();
        TreeSet<Integer> ts2 = new TreeSet<Integer>();
        for(int i=0;i<n2;i++)
        {
            ts2.add(sc.nextInt());
        }
        System.out.println("Free Tree set: "+ts1);
        System.out.println("Second Tree set: "+ts2);
        TreeSet<Integer> result=new TreeSet<Integer>();
        for (Integer i: ts1)
        {
            System.out.println(ts2.contains(i) ? "Yes" : "No");
        }
    }
}
##
Write a Java program to retrieve and remove the last element of a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;
public class Exercise15 {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        TreeSet <Integer>tree_num = new TreeSet<Integer>();
        TreeSet <Integer>treeheadset = new TreeSet<Integer>();
         
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_num.add(sc.nextInt());
        }
        System.out.println("Original tree set: "+tree_num);
        System.out.println("Removes the last element: "+tree_num.pollLast());
        System.out.println("Tree set after removing last element: "+tree_num);
    }    
}
##
Write a java program to display the heterogenous object with help of stringbuffer concepts.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        Set<StringBuffer> ts = new TreeSet<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            ts.add(new StringBuffer(sc.next()));
        }
        System.out.println(ts);
    }
}
##
Write a java program tailset start from the 15(Integer) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        SortedSet<Integer> s = new TreeSet<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            s.add(sc.nextInt());
        }
        System.out.print("Elements greater than or equal to in set are : " + s.tailSet(15));
    }
}
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,String> hm = new HashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
        System.out.println("Does HashMap contains 104 as key: "+hm.containsKey(104));
    }
}
##
Create a java program to retrieve the key and value from hashtable for all input value.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Map<Integer,String> hm = new Hashtable<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
    }
}
##
Create a java program to create and add objects and check whether a particular key/value exist  in hashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,Double> hm = new HashMap<Integer,Double>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.nextDouble());
        }
        Iterator<Integer> i = hm.keySet().iterator();
        while(i.hasNext())
        {
            int key=i.next();
            System.out.println(key+" "+hm.get(key));
        }
        System.out.println(hm.containsKey(3));
        System.out.println(hm.containsValue(3.3));
    }
}
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in hashmap interface.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,String> hm = new HashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        hm.replaceAll( (key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: "+hm);
    }
}
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,String> hm = new HashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Map<Integer,String> syncmap = Collections.synchronizedMap(hm);
        Iterator<Integer> i=syncmap.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println(key+" "+syncmap.get(key));
        }
    }
}
##
Create a java program to retrieve the key and value from hashmap and display the size of the hashmap and clear the hashmap using clear method concepts.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in hashmap interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap for all input value.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to retrieve the key and value from hashtable for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap for all input value.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in hashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in hashmap interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add objects  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to retrieve the key and value from hashtable for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in hashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap and display the size of the hashmap and clear the hashmap using clear method concepts.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap for all input value.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in linkedhashmap interface then display the map elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        LinkedHashMap<Integer,String> hm = new LinkedHashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i = hm.keySet().iterator();
        while(i.hasNext())
        {
            int key=i.next();
            System.out.println(key+" "+hm.get(key));
        }
    }
}
##
Create a java program to retrieve the key and value from linkedhashmap and display the size of the linkekhashmap and clear the linkedhashmap using clear method concepts.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Map<Integer,String> hm = new LinkedHashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
        System.out.println("Size of Map: "+hm.size());
        hm.clear();
        System.out.println("Size of Map: "+hm.size());
    }
}
##
Create a java program to create and add mappings to linkedhashmap and  linkedhashmap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    { 
        Map<String, Integer> map = new LinkedHashMap<String, Integer>();
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            String b=sc.next();
            Integer a=sc.nextInt();
            map.put(b,a);  
        } 
        System.out.println("HashMap: " + map);
        
        int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
        System.out.println("Price of Shirt: " + returnedValue);
        
        System.out.println("Updated HashMap: " + map);
    }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Map<Integer,String> hm = new LinkedHashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
    }
}
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in linkedhashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
    public static void main(String args[]){ 
        Map<Integer,String> map=new LinkedHashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for (int i=0;i<size;i++)
        {
            map.put(sc.nextInt(),sc.next());  
        } 
        Iterator<Integer> i = map.keySet().iterator();
        while (i.hasNext())
        {
            int key = i.next();
            System.out.println(key+" "+map.get(key));
        }
        map.putIfAbsent(4, "JavaScript");
        map.putIfAbsent(3, "welcome");
        System.out.println("Updated Languages: " + map);
    }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in linkedhashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Double> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from linkedhashmap .Note:iterate over  linkedhashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashMap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Integer> vehicles=new LinkedHashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects  in Linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and  linkedHashMap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("LinkedHashMap: " + map);

    int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated LinkedHashMap: " + map);
 
 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from linkedhashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from linkedhashmap .Note:retrieve the value from linkedhashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from linkedhashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and apply mapping for the key is present in linkedHashMap or not present in linkedHashMap for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap and display the size of the linkekhashmap and clear the linkedhashmap using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and  linkedHashMap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("LinkedHashMap: " + map);

    int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated LinkedHashMap: " + map);
 
 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from linkedhashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Integer> vehicles=new LinkedHashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in linkedhashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Double> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add objects  in Linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and apply mapping for the key is present in linkedHashMap or not present in linkedHashMap for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in linkedhashmap interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to retrieve the value from linkedhashmap .Note:retrieve the value from linkedhashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and  linkedhashmap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("HashMap: " + map);

    int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated HashMap: " + map);
 
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in linkedhashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from linkedhashmap .Note:iterate over  linkedhashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashMap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from linkedhashmap .import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByKey() in descending order)Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
    public static void main(String args[])
    {  
        Map<Integer,String> map=new HashMap<Integer,String>();          
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            map.put(sc.nextInt(),sc.next());  
        }   
        
        map.entrySet()  
        .stream()  
        .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())) 
        .forEach(System.out::println);  
    }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from map .Note:iterate over map using any loop.
import java.util.*;  
public class Mapp{  
    public static void main(String args[])
    { 
        Map<Integer,String> map=new HashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            Integer a=sc.nextInt();
            String b=sc.next();
            map.put(a,b);  
        } 
        
        Iterator<Integer> i = map.keySet().iterator(); 
        while(i.hasNext())
        {
            Integer key = i.next(); 
            System.out.println("key: " + key + " value: " + map.get(key));
        }
        System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));
    }  
}  
##
Create a java program to create and add mappings to hashtable and  Hashtable merge() to Insert New Entry use map interface concepts.Note:new entry :::::::::::::::Shirt price is 70.
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    { 
        Hashtable<String, Integer> map = new Hashtable<String, Integer>();
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            map.put(sc.next(),sc.nextInt());  
        } 
        System.out.println("Map: " + map);
        
        int returnedValue = map.merge("Shirt", 70, (oldValue, newValue) -> oldValue + newValue);
        System.out.println("Price of Shirt: " + returnedValue);
        
        System.out.println("Updated Map: " + map);
    }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from map .
import java.util.*;  
public class Mapp{  
    public static void main(String args[])
    { 
        Map<Integer,String> map=new HashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            Integer a=sc.nextInt();
            String b=sc.next();
            map.put(a,b);  
        } 
        
        Iterator<Integer> i = map.keySet().iterator(); 
        while(i.hasNext())
        {
            Integer key = i.next(); 
            System.out.println("key: " + key + " value: " + map.get(key));
        }
        System.out.println("Following value is removed from Map: " + map.remove(100));
    }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    {
    
        Map<Integer,String> map=new HashMap<>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            Integer a=sc.nextInt();
            String b=sc.next();
            map.put(a,b);  
        } 
        for(Map.Entry m:map.entrySet())
        {
            System.out.println(m.getKey()+" "+m.getValue());  
        }  
        map.replace(100,"welcome to java");
        System.out.println("HashMap After Replace :");
        for(Map.Entry m:map.entrySet())
        {
            System.out.println(m.getKey()+" "+m.getValue());  
        } 
    }  
}  
##
Create a java program to display the name with key  using map interface like key , value pair.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to retrieve the key and value from map and display the size of the map and clear the map using clear method concepts.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add mappings to map and apply mapping for the key is present in Map or not present in Map for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue()) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the key and value from map for all input value.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> numbers = new Hashtable<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts with map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() in descending order )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the value from map .Note:retrieve the value from hashmap.Consider key value 120 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 120; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add mappings to map and  Map merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 90.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<String, Integer> map = new HashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("HashMap: " + map);

    int returnedValue = map.merge("Shirt", 90, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated HashMap: " + map);
 
 }  
}  
##
Create a java program to retrieve the key and value from hashtable with map interface for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByKey().)Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByKey())  

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to insert and display  the key and values  using map interface.Note:Read size of the map.Read elements for map.Map numbers display.Access keys of the map.Access values of the map.Access entries of the map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> numbers=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
 
 System.out.println("Map: " + numbers);

        
        System.out.println("Keys: " + numbers.keySet());

        
        System.out.println("Values: " + numbers.values());

        
        System.out.println("Entries: " + numbers.entrySet());

       
 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the Map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 HashMap<Integer,String> numbers = new HashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from map .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() in descending order )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the key and value from map for all input value.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the Map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 HashMap<Integer,String> numbers = new HashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from map .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from map .Note:retrieve the value from hashmap.Consider key value 120 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 120; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add mappings to map and apply mapping for the key is present in Map or not present in Map for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts with map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to display the name with key  using map interface like key , value pair.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from map .Note:iterate over map using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByKey() in descending order)Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to insert and display  the key and values  using map interface.Note:Read size of the map.Read elements for map.Map numbers display.Access keys of the map.Access values of the map.Access entries of the map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> numbers=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
 
 System.out.println("Map: " + numbers);

        
        System.out.println("Keys: " + numbers.keySet());

        
        System.out.println("Values: " + numbers.values());

        
        System.out.println("Entries: " + numbers.entrySet());

       
 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> numbers = new Hashtable<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue()) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the key and value from map and display the size of the map and clear the map using clear method concepts.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add mappings to hashtable and  Hashtable merge() to Insert New Entry use map interface concepts.Note:new entry :::::::::::::::Shirt price is 70.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<String, Integer> map = new Hashtable<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("Map: " + map);

    int returnedValue = map.merge("Shirt", 70, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated Map: " + map);
 
 }  
}  
##
Create a java program to retrieve the key and value from hashtable with map interface for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply mapping for the key is present in HashMap or not present in HashMap for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
    public static void main(String args[]){ 
        HashMap<Integer,String> map=new HashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            map.put(sc.nextInt(),sc.next());  
        } 
        
        for(Map.Entry m : map.entrySet())
        {  
            System.out.println(m.getKey()+" "+m.getValue());  
        }  
        String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);
        
        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);
        
        System.out.println("Updated Elements: " + map);
    }  
}  
##
Create a java program to create and add mappings to hashmap and  HashMap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    { 
        HashMap<String, Integer> map = new HashMap<>();
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            String b=sc.next();
            Integer a=sc.nextInt();
            map.put(b,a);  
        } 
        System.out.println("HashMap: " + map);
        
        int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
        System.out.println("Price of Shirt: " + returnedValue);
        
        System.out.println("Updated HashMap: " + map);
    }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}
##
Write a Java program to copy a Tree Map content to another Tree Map content.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeMap<String,String> tm1=new TreeMap<String,String>();
        for (int i=0;i<n1;i++)
        {
            tm1.put(sc.next(),sc.next());
        }
        int n2=sc.nextInt();
        TreeMap<String,String> tm2=new TreeMap<String,String>();
        for (int i=0;i<n2;i++)
        {
            tm2.put(sc.next(),sc.next());
        }
        System.out.println("Tree Map 1: "+tm1);
        System.out.println("Tree Map 2: "+tm2);
        tm1.putAll(tm2);
        System.out.println("After coping map2 to map1: "+tm1);
    }
}
##
Write a Java program to get a reverse order view of the keys contained in a given map.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<String,String> tm=new TreeMap<String,String>();
        for (int i=0;i<n;i++)
        {
            tm.put(sc.next(),sc.next());
        }
        System.out.println("Orginal TreeMap content: "+tm);
        System.out.println("Reverse order view of the keys: "+tm.descendingKeySet());
    }
}
##
Write a Java program to get a key-value mapping associated with the greatest key less than or equal to the given key. Note:Check entry for 10, 30 and 70
import java.util.*;
import java.util.Map.Entry;  
public class Example11 {  
    public static void main(String args[])
    {
        TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_map1.put(sc.nextInt(),sc.next());  
        }
        System.out.println("Orginal TreeMap content: " + tree_map1);
        System.out.println("Checking the entry for 10: ");
        System.out.println("Value is: " + tree_map1.floorEntry(10));
        System.out.println("Checking the entry for 30: ");
        System.out.println("Value is: " + tree_map1.floorEntry(30));
        System.out.println("Checking the entry for 70: ");
        System.out.println("Value is: " + tree_map1.floorEntry(70));
    }
}
##
Write a Java program to get the portion of a map whose keys range from a given key (inclusive), to another key (exclusive).
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
    public static void main(String args[])
    {
        TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_map1.put(sc.nextInt(),sc.next());  
        }
        System.out.println("Orginal TreeMap content: " + tree_map1);
        System.out.println("Sub map key-values: " + tree_map1.subMap(20, 40));
    }
}
##
Write a Java program to get a key-value mapping associated with the least key greater than or equal to the given key. Return null if there is no such key.Note:Keys are greater than or equal 20,40 and 50
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
    public static void main(String args[])
    {
        TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
        SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_map.put(sc.nextInt(),sc.next()); 
        }
        System.out.println("Orginal TreeMap content: "+tree_map);
        System.out.println("Keys greater than or equal to 20: " + tree_map.ceilingEntry(20));
        System.out.println("Keys greater than or equal to 40: " + tree_map.ceilingEntry(40));
        System.out.println("Keys greater than or equal to 50: " + tree_map.ceilingEntry(50));
    }
}
##
Write a Java program to get all keys from the given a Tree Map.
import java.util.*;
public class java
{
public static void main(String[]args)
{
    Scanner sc=new Scanner(System.in);
    int a=sc.nextInt();
    String b=sc.nextLine();
    String c=sc.nextLine();
    String d=sc.nextLine();
    String e=sc.nextLine();
    String f=sc.nextLine();
    String g=sc.nextLine();
    System.out.println(b);
    System.out.println(d);
    System.out.println(f);
    
}
}
##
Write a Java program to sort keys in Tree Map by using comparator.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println("Orginal TreeMap content: "+tree_map1);
    }
}
 class sort_key implements Comparator<String>{
     @Override
    public int compare(String str1, String str2) {
        return str1.compareTo(str2);
    }
     
}
##
Write a Java program to get a key-value mapping associated with the greatest key strictly less than the given key. Return null if there is no such key.Note:Checking the entry for 10,20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex {  
       public static void main(String args[]) {
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

      System.out.println("Orginal TreeMap content: "+tree_map1);
	  System.out.println("Checking the entry for 10: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(10));  
	  System.out.println("Checking the entry for 20: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(20));  
	  System.out.println("Checking the entry for 70: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(70));   
 }
}
##
Write a Java program to remove and get a key-value mapping associated with the least key in a map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
    System.out.println("Value before poll: " + tree_map1);
  System.out.println("Value returned: " + tree_map1.pollFirstEntry());
  System.out.println("Value after poll: " + tree_map1);
 }
}
##
Write a Java program to get the least key greater than or equal to the given key. Returns null if there is no such key.Note:Keys are greater than or equal 20,30 and 50
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Keys greater than or equal to 20: " + tree_map.ceilingKey(20));
  System.out.println("Keys greater than or equal to 30: " + tree_map.ceilingKey(30));
  System.out.println("Keys greater than or equal to 50: " + tree_map.ceilingKey(50));
 }
}
##
Write a Java program to search a key in a Tree Map.Note:TreeMap contain key for C1 and C5 only write it.
import java.util.*;  
public class Ex {  
   public static void main(String args[]){  
  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  
 
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println(tree_map1);
        if(tree_map1.containsKey("C1")){
            System.out.println("The Tree Map contains key C1");
        } else {
            System.out.println("The Tree Map does not contain key C1");
        }
        if(tree_map1.containsKey("C5")){
            System.out.println("The Tree Map contains key C5");
        } else {
            System.out.println("The TreeMap does not contain key C5");
        }
    }
}
##
Write a Java program to get a key-value mapping associated with the greatest key and the least key in a map.Note:Use firstentry and lastentry method.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Greatest key: " + tree_map1.firstEntry());
  System.out.println("Least key: " + tree_map1.lastEntry());
    }
}
##
Write a Java program to get the least key strictly greater than the given key. Return null if there is no such key. Note:Checking the entry for 10,20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex {  
       public static void main(String args[]) {
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

     System.out.println("Orginal TreeMap content: "+tree_map1);
	  System.out.println("Checking the entry for 10: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(10));  
	  System.out.println("Checking the entry for 20: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(20));  
	  System.out.println("Checking the entry for 70: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(70)); 
 }
}
##
Write a Java program to get the greatest key strictly less than the given key. Return null if there is no such key. Note:check the entry for 10, 20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(10));
  System.out.println("Checking the entry for 20: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(20));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(70));
 }
}
##
Write a Java program to get a portion of a map whose keys are greater than or equal to a given key.Note:Keys are greater than or equal to 20
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys are greater than or equal to 20: " + tree_map.tailMap(20));
 }
}
##
Write a Java program to associate the specified value with the specified key in a Tree Map.
import java.util.*;  
public class ss {  
  public static void main(String args[]){  
  
   TreeMap<Integer,String> tree_map=new TreeMap<Integer,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
	 
   for (Map.Entry<Integer,String> entry : tree_map.entrySet())
   {
    System.out.println(entry.getKey() + "=>" + entry.getValue());
   }
 }  
}
##
Write a Java program to delete all elements from a given Tree Map.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println("Orginal TreeMap content: "+tree_map1);
  tree_map1.clear();
  System.out.println("The New map: "+tree_map1);
 }
}
##
Write a Java program to get the portion of this map whose keys are less than (or equal to, if inclusive is true) a given key. Note:Checking the entry for 10,20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex {  
       public static void main(String args[]) {
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.headMap(10, true));
  System.out.println("Checking the entry for 20: ");
  System.out.println("Key(s): " + tree_map1.headMap(20, true));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.headMap(70, true));
 }
}
##
Write a Java program to remove and get a key-value mapping associated with the greatest key in this map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
    System.out.println("Value before poll: " + tree_map1);
  System.out.println("Value returned: " + tree_map1.pollLastEntry());
  System.out.println("Value after poll: " + tree_map1);
 }
}
##
Write a Java program to get a portion of a map whose keys are greater than to a given key.Note:Keys are greater than 20:
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys are greater than 20: " + tree_map.tailMap(20, false));
 }
}
##
Write a Java program to search a value in a Tree Map.
import java.util.*;  
public class Ex {  
   public static void main(String args[]){  
  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  
 
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println(tree_map1);
        if(tree_map1.containsValue("Green")){
            System.out.println("The TreeMap contains value Green");
        } else {
            System.out.println("The TreeMap does not contain value Green");
        }
        if(tree_map1.containsValue("Pink")){
            System.out.println("The TreeMap contains value Pink");
        } else {
            System.out.println("The TreeMap does not contain value Pink");
        }
    
    }
}
##
Write a Java program to get the first (lowest) key and the last (highest) key currently in a map.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Greatest key: " + tree_map1.firstKey());
  System.out.println("Least key: " + tree_map1.lastKey());
    }
}
##
Write a Java program to get the portion of a map whose keys are strictly less than a given key.Note:check entry for 10,30 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex{  
       public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

 Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.headMap(10));
  System.out.println("Checking the entry for 30: ");
  System.out.println("Key(s): " + tree_map1.headMap(30));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.headMap(70));
 }
}
##
Write a Java program to get NavigableSet view of the keys contained in a map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
   System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Orginal TreeMap content: " + tree_map1.navigableKeySet());
 }
}
##
Write a Java program to get the portion of a map whose keys range from a given key to another key.Note:use sub tree map method subMap(20, true, 40, true).
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  
  System.out.println("Orginal TreeMap content: " + tree_map);
  sub_tree_map = tree_map.subMap(20, true, 40, true);
  System.out.println("Sub map key-values: " + sub_tree_map);
 }
}
##
Write a Java program to search a key in a Tree Map.Note:TreeMap contain key for C1 and C5 only write it.
import java.util.*;  
public class Ex {  
   public static void main(String args[]){  
  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  
 
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println(tree_map1);
        if(tree_map1.containsKey("C1")){
            System.out.println("The Tree Map contains key C1");
        } else {
            System.out.println("The Tree Map does not contain key C1");
        }
        if(tree_map1.containsKey("C5")){
            System.out.println("The Tree Map contains key C5");
        } else {
            System.out.println("The TreeMap does not contain key C5");
        }
    }
}
##
Write a Java program to get a reverse order view of the keys contained in a given map.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Reverse order view of the keys: " + tree_map1.descendingKeySet());
    }
}
##
Write a Java program to get the least key strictly greater than the given key. Return null if there is no such key. Note:Checking the entry for 10,20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex {  
       public static void main(String args[]) {
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

     System.out.println("Orginal TreeMap content: "+tree_map1);
	  System.out.println("Checking the entry for 10: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(10));  
	  System.out.println("Checking the entry for 20: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(20));  
	  System.out.println("Checking the entry for 70: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(70)); 
 }
}
##
Write a Java program to get NavigableSet view of the keys contained in a map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
   System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Orginal TreeMap content: " + tree_map1.navigableKeySet());
 }
}
##
Write a Java program to get a key-value mapping associated with the least key greater than or equal to the given key. Return null if there is no such key.Note:Keys are greater than or equal 20,40 and 50
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys greater than or equal to 20: " + tree_map.ceilingEntry(20));
  System.out.println("Keys greater than or equal to 40: " + tree_map.ceilingEntry(40));
  System.out.println("Keys greater than or equal to 50: " + tree_map.ceilingEntry(50));
 }
}
##
Write a Java program to get all keys from the given a Tree Map.
import java.util.*;  
public class Exa {  
   public static void main(String args[]){  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
 Set<String> keys = tree_map1.keySet();
        for(String key: keys){
            System.out.println(key);
        }
    }
}
##
Write a Java program to sort keys in Tree Map by using comparator.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println("Orginal TreeMap content: "+tree_map1);
    }
}
 class sort_key implements Comparator<String>{
     @Override
    public int compare(String str1, String str2) {
        return str1.compareTo(str2);
    }
     
}
##
Write a Java program to get the portion of a map whose keys are strictly less than a given key.Note:check entry for 10,30 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex{  
       public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

 Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.headMap(10));
  System.out.println("Checking the entry for 30: ");
  System.out.println("Key(s): " + tree_map1.headMap(30));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.headMap(70));
 }
}
##
Write a Java program to remove and get a key-value mapping associated with the greatest key in this map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
    System.out.println("Value before poll: " + tree_map1);
  System.out.println("Value returned: " + tree_map1.pollLastEntry());
  System.out.println("Value after poll: " + tree_map1);
 }
}
##
Write a Java program to get a portion of a map whose keys are greater than to a given key.Note:Keys are greater than 20:
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys are greater than 20: " + tree_map.tailMap(20, false));
 }
}
##
Write a Java program to sort keys in Tree Map by using comparator.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println("Orginal TreeMap content: "+tree_map1);
    }
}
 class sort_key implements Comparator<String>{
     @Override
    public int compare(String str1, String str2) {
        return str1.compareTo(str2);
    }
     
}
##
Write a Java program to get the portion of a map whose keys are strictly less than a given key.Note:check entry for 10,30 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex{  
       public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

 Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.headMap(10));
  System.out.println("Checking the entry for 30: ");
  System.out.println("Key(s): " + tree_map1.headMap(30));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.headMap(70));
 }
}
##
Write a Java program to remove and get a key-value mapping associated with the greatest key in this map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
    System.out.println("Value before poll: " + tree_map1);
  System.out.println("Value returned: " + tree_map1.pollLastEntry());
  System.out.println("Value after poll: " + tree_map1);
 }
}
##
Write a Java program to get a portion of a map whose keys are greater than to a given key.Note:Keys are greater than 20:
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys are greater than 20: " + tree_map.tailMap(20, false));
 }
}
##
Write a Java program to copy a Tree Map content to another Tree Map content.
import java.util.*;  
public class Example2 {  
   public static void main(String args[]){  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size1=sc.nextInt();
   for(int i=0;i<size1;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
  
   System.out.println("Tree Map 1: "+tree_map1);
   TreeMap<String,String> tree_map2 = new TreeMap<String,String>();
  int size2=sc.nextInt();
   for(int i=0;i<size2;i++)
   {
      String n2 = sc.next();
      String s2= sc.next();
       
   	  tree_map2.put(n2,s2);  
   }
  
   System.out.println("Tree Map 2: "+tree_map2);
   tree_map1.putAll(tree_map2);
   System.out.println("After coping map2 to map1: "+tree_map1);   
 }  
}
##
Write a Java program to get a key-value mapping associated with the greatest key and the least key in a map.Note:Use firstentry and lastentry method.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Greatest key: " + tree_map1.firstEntry());
  System.out.println("Least key: " + tree_map1.lastEntry());
    }
}
##
Write a Java program to get a key-value mapping associated with the greatest key strictly less than the given key. Return null if there is no such key.Note:Checking the entry for 10,20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex {  
       public static void main(String args[]) {
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

      System.out.println("Orginal TreeMap content: "+tree_map1);
	  System.out.println("Checking the entry for 10: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(10));  
	  System.out.println("Checking the entry for 20: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(20));  
	  System.out.println("Checking the entry for 70: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(70));   
 }
}
##
Write a Java program to get the portion of a map whose keys range from a given key (inclusive), to another key (exclusive).
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
  System.out.println("Orginal TreeMap content: " + tree_map1);
  sub_tree_map = tree_map1.subMap(20, 40);
  System.out.println("Sub map key-values: " + sub_tree_map);
 }
}
##
Write a Java program to get a portion of a map whose keys are greater than or equal to a given key.Note:Keys are greater than or equal to 20
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys are greater than or equal to 20: " + tree_map.tailMap(20));
 }
}
##
Write a Java program to associate the specified value with the specified key in a Tree Map.
import java.util.*;  
public class ss {  
  public static void main(String args[]){  
  
   TreeMap<Integer,String> tree_map=new TreeMap<Integer,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
	 
   for (Map.Entry<Integer,String> entry : tree_map.entrySet())
   {
    System.out.println(entry.getKey() + "=>" + entry.getValue());
   }
 }  
}
##
Write a Java program to delete all elements from a given Tree Map.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println("Orginal TreeMap content: "+tree_map1);
  tree_map1.clear();
  System.out.println("The New map: "+tree_map1);
 }
}
##
Write a Java program to get the least key greater than or equal to the given key. Returns null if there is no such key.Note:Keys are greater than or equal 20,30 and 50
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Keys greater than or equal to 20: " + tree_map.ceilingKey(20));
  System.out.println("Keys greater than or equal to 30: " + tree_map.ceilingKey(30));
  System.out.println("Keys greater than or equal to 50: " + tree_map.ceilingKey(50));
 }
}
##
Write a Java program to search a value in a Tree Map.
import java.util.*;  
public class Ex {  
   public static void main(String args[]){  
  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  
 
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println(tree_map1);
        if(tree_map1.containsValue("Green")){
            System.out.println("The TreeMap contains value Green");
        } else {
            System.out.println("The TreeMap does not contain value Green");
        }
        if(tree_map1.containsValue("Pink")){
            System.out.println("The TreeMap contains value Pink");
        } else {
            System.out.println("The TreeMap does not contain value Pink");
        }
    
    }
}
##
Write a Java program to get the first (lowest) key and the last (highest) key currently in a map.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Greatest key: " + tree_map1.firstKey());
  System.out.println("Least key: " + tree_map1.lastKey());
    }
}
##
Write a Java program to get a key-value mapping associated with the greatest key less than or equal to the given key. Note:Check entry for 10, 30 and 70
import java.util.*;
import java.util.Map.Entry;  
public class Example11 {  
     public static void main(String args[]) {
 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Value is: " + tree_map1.floorEntry(10));
  System.out.println("Checking the entry for 30: ");
  System.out.println("Value is: " + tree_map1.floorEntry(30));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Value is: " + tree_map1.floorEntry(70));
 }
}
##
Write a Java program to get the greatest key strictly less than the given key. Return null if there is no such key. Note:check the entry for 10, 20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(10));
  System.out.println("Checking the entry for 20: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(20));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(70));
 }
}
##
Write a Java program to get the portion of a map whose keys range from a given key to another key.Note:use sub tree map method subMap(20, true, 40, true).
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  
  System.out.println("Orginal TreeMap content: " + tree_map);
  sub_tree_map = tree_map.subMap(20, true, 40, true);
  System.out.println("Sub map key-values: " + sub_tree_map);
 }
}
##
Write a Java program to get all keys from the given a Tree Map.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<String,String> tm = new TreeMap<String,String>();
        for(int i=0;i<n;i++)
        {
            tm.put(sc.next(),sc.next());
        }
        Set<String> key=tm.keySet();
        for (String i:key)
            System.out.println(i);
    }
}
##
Write a Java program to get the first (lowest) key and the last (highest) key currently in a map.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<Integer,String> tm = new TreeMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            tm.put(sc.nextInt(),sc.next());
        }
        System.out.println("Orginal TreeMap content: "+tm);
        System.out.println("Greatest key: "+tm.firstKey());
        System.out.println("Least key: "+tm.lastKey());
    }
}
##
Write a Java program to get the portion of a map whose keys are strictly less than a given key.Note:check entry for 10,30 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Example11 {  
    public static void main(String args[])
    {
        TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_map1.put(sc.nextInt(),sc.next());  
        }
        System.out.println("Orginal TreeMap content: " + tree_map1);
        System.out.println("Checking the entry for 10: ");
        System.out.println("Key(s): " + tree_map1.headMap(10));
        System.out.println("Checking the entry for 30: ");
        System.out.println("Key(s): " + tree_map1.headMap(30));
        System.out.println("Checking the entry for 70: ");
        System.out.println("Key(s): " + tree_map1.headMap(70));
    }
}
##
Write a Java program to get NavigableSet view of the keys contained in a map.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<Integer,String> tm = new TreeMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            tm.put(sc.nextInt(),sc.next());
        }
        System.out.println("Orginal TreeMap content: "+tm);
        System.out.println("Orginal TreeMap content: "+tm.navigableKeySet());
    }
}
##
Write a Java program to get the least key greater than or equal to the given key. Returns null if there is no such key.Note:Keys are greater than or equal 20,30 and 50
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<Integer,String> tm = new TreeMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            tm.put(sc.nextInt(),sc.next());
        }
        System.out.println("Keys greater than or equal to 20: "+tm.ceilingKey(20));
        System.out.println("Keys greater than or equal to 30: "+tm.ceilingKey(30));
        System.out.println("Keys greater than or equal to 50: "+tm.ceilingKey(50));
    }
}
##
Write a java program to illustrate Comparator using a separate class(Percentage comparator).Read student name and percentage of student).Display in highest percentage to low using comparator.
import java.util.*;
class Student
{
	String name;
	float percentage;
	Student(String name, float percentage)
	{
		this.name = name;
		this.percentage = percentage;
	}
}
class PercentageComparator implements Comparator<Student> {
	public int compare(Student stud1, Student stud2)
	{
		if(stud1.percentage < stud2.percentage)
			return 1;
		return -1;
	}
}
public class Main {
	public static void main(String args[])
	{
	
		ArrayList<Student> studList = new ArrayList<Student>();
		Scanner sc=new Scanner(System.in);
		int size=sc.nextInt();
		for(int i=0;i<size;i++)
		{
		    studList.add(new Student(sc.next(), sc.nextInt()));
		}
		
		Comparator<Student> com = new PercentageComparator();
		
		Collections.sort(studList, com);
		
		System.out.println("Avg % --> Name");
		System.out.println("---------------------");
		for(Student stud:studList) 
		{
			System.out.println(stud.percentage + " --> " + stud.name);
		}		
	}	
}
##
Write a java program to sort using treeset collection,this object needs to be passed in the constructor of TreeSet. Sorting elements in a collection using Comparator interface, we need to pass the class object that implements Comparator interface.Finally Display it.
import java.util.*;
class Student
{
    int roll;
    String name;
    Student(int r,String n)
    {
        roll = r;
        name = n;
    }
    public String toString()
    {
        return roll+" "+name;
    }
}
class MyComparator implements Comparator<Student>
{
    public int compare(Student s1,Student s2)
    {
        if(s1.roll == s2.roll)
            return 0;
        else if(s1.roll > s2.roll)
            return 1;
        else
            return -1;
    }
}
public class Test {
    public static void main(String[] args)
    {
        TreeSet< Student> ts = new TreeSet< Student>(new MyComparator());
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            ts.add(new Student(sc.nextInt(),sc.next()));
        }
        System.out.println(ts);
    }
}
##
Write a Java program to sort a list of characters in reverse order using Comparable interface.Apply LinkedList concepts.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        LinkedList<String> list2 = new LinkedList<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            list2.add(sc.next());
        }
        list2.sort( new Comparator<String>()
        {
            @Override
            public int compare(String num1, String num2)
            {    
                return num1.compareTo(num2);
            }
        });
        for (String num : list2)
        {
            System.out.println(num);
        }
    }
}
##
To demonstrate the working of comparator interface , Create a student class (attribute is rollno,name,address) use constructor concepts, with the help of another class implement the comparator interface(sorting in ascending order of rollno), in main class create the arraylist and add the rollno,name and address and with help of collection sort by the rollno.
import java.io.*;
import java.lang.*;
import java.util.*;
class Student {
 
    int rollno;
    String name, address;
    public Student(int rollno, String name, String address)
    {
        this.rollno = rollno;
        this.name = name;
        this.address = address;
    }
    public String toString()
    {
         return this.rollno + " " + this.name + " "
            + this.address;
    }
}
class Sortbyroll implements Comparator<Student> {
    public int compare(Student a, Student b)
    {
 
        return a.rollno - b.rollno;
    }
} 
public class Main {
    public static void main(String[] args)
    {
        ArrayList<Student> ar = new ArrayList<Student>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
        ar.add(new Student(sc.nextInt(),sc.next(),sc.next()));
        }
      
        System.out.println("Unsorted");
 
        
        for (int i = 0; i < ar.size(); i++)
            System.out.println(ar.get(i));
 
        Collections.sort(ar, new Sortbyroll());
 
   
        System.out.println("Sorted by rollno");
 
        
        for (int i = 0; i < ar.size(); i++)
            System.out.println(ar.get(i));
 
       
    }
}
##
Write a java program to sort the given elements based on comparator interface and also use the list concepts in java collection.
import java.util.*;

public class Main {
 public static void main(String[] args) {
 
  List<Integer> list2 = new ArrayList<Integer>();
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list2.add(sc.nextInt());
  }
  list2.sort(new Comparator<Integer>() {
   @Override
   public int compare(Integer num1, Integer num2) {    
    return num1.compareTo(num2);
   }
   
  });
  

  for (Integer num : list2) {
   System.out.println(num);
  }
 }
}
##
Write a java program to sort the list based on null value for name using comparator method(nullsfirst).Note: (pass the value below mentioned lines)al.add(new Student(101,"Vijay",23));al.add(new Student(106,"Ajay",27));al.add(new Student(105,null,21));
import java.util.*;    
 class Student {    
   int rollno;    
   String name;    
  int age;    
    Student(int rollno,String name,int age){    
    this.rollno=rollno;    
    this.name=name;    
    this.age=age;    
    }  
    public int getRollno() {  
        return rollno;  
    }  
    public void setRollno(int rollno) {  
        this.rollno = rollno;  
    }  
    public String getName() {  
        return name;  
    }  
  
    public void setName(String name) {  
        this.name = name;  
    }  
  
    public int getAge() {  
        return age;  
    }  
    public void setAge(int age) {  
        this.age = age;  
    }  
    }    public class TestSort2{    
 public static void main(String args[]){    
 ArrayList<Student> al=new ArrayList<Student>();    
 al.add(new Student(101,"Vijay",23));    
 al.add(new Student(106,"Ajay",27));    
 al.add(new Student(105,null,21));    
 Comparator<Student> cm1=Comparator.comparing(Student::getName,Comparator.nullsFirst(String::compareTo));  
  Collections.sort(al,cm1);  
  System.out.println("Considers null to be less than non-null");  
  for(Student st: al){  
     System.out.println(st.rollno+" "+st.name+" "+st.age);  
     }  
  
 }    
 }     
##
 Write a java program sort ArrayList objects in accordance with more than one fields like firstly sort, according to student name and secondly sort according to student roll number.Apply comparator interface.

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

class Student {
	Integer rollno;
	String name, address;

	public Integer getRollno() {
		return rollno;
	}

	public void setRollno(Integer rollno) {
		this.rollno = rollno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Student(Integer rollno, String name, String address) {
		super();
		this.rollno = rollno;
		this.name = name;
		this.address = address;
	}


	public String toString() {
		return this.rollno + " " + this.name + " " + this.address;
	}
}

class SortByNameAndRollNum implements Comparator<Student> {
	
	public int compare(Student a, Student b) {

		
		int NameCompare = a.getName().compareTo(b.getName());
		int RollNumCompare = a.getRollno().compareTo(b.getRollno());

		if (NameCompare == 0) {
			return ((RollNumCompare == 0) ? NameCompare : RollNumCompare);
		} else {
			return NameCompare;
		}

	}
}

// Driver class
public class Main {
	public static void main(String[] args) {
		ArrayList<Student> ar = new ArrayList<Student>();
		ar.add(new Student(111, "aaaa", "london"));
		ar.add(new Student(131, "aaaa", "nyc"));
		ar.add(new Student(121, "cccc", "jaipur"));

		System.out.println("Unsorted");
		for (int i = 0; i < ar.size(); i++)
			System.out.println(ar.get(i));

		Collections.sort(ar, new SortByNameAndRollNum());

		System.out.println("\nSorted by namd and rolNum");
		for (int i = 0; i < ar.size(); i++)
			System.out.println(ar.get(i));

	}
}
##
Java program implements a Person class that contains name and age as member fields. This class implements a ‘Comparable’ interface that will allow us to sort the object of class Person.Note that as we are going to sort custom objects, we need to override the ‘compareTo ()’ method of the Comparable interface.Note:Read person name1 and age1Read person name2 and age2compare ages of two personsis older than or are of the same age!
import java.util.*;

class Person implements Comparable<Person> {
    private String name;
    private int age;
   
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    public int getAge() {
        return this.age;
    }
    public String getName() {
        return this.name;
    }
    
    @Override
    public String toString() {
        return "";
    }
    
    @Override
    public int compareTo(Person per) {
        if(this.age == per.age)
            return 0;
        else
            return this.age > per.age ? 1 : -1;
    }
}
public class Main{
    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        Person p1 = new Person(sc.next(), sc.nextInt());
        Person p2 = new Person(sc.next(), sc.nextInt());
        int ageDiff = p1.compareTo(p2);    
        switch(ageDiff) {
            case -1: {
                System.out.println(p2.getName() + " is older than " + p1.getName());
                break;
            }
           case 1: {
                System.out.println(p1.getName() + " is older than " + p2.getName());
                break;
                }
             default:
                System.out.println(p1.getName () + " and " + p2.getName () 
                                + " are of the same age!");
        }
    }
}
##
Write a java program to display the highest gpa from two given student details use comparable interface in java collection concepts.NotesadTwo student details read)Read nameRead gpaRead register number

import java.util.*;
class Student implements Comparable<Student>
{
	private String name;
	private int gpa;
	private int regNo;
	
	//Constructor
	public Student(String name, int gpa, int regNo) {
		this.name = name;
		this.gpa = gpa;
		this.regNo = regNo;
	}
	
    //Override the comapareTo() method
	@Override
	public int compareTo(Student other)
	{
		return (int)(this.getGpa() - other.getGpa());//compare using GPA
	}
	
	//getters and setters
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	public int getGpa() {
		return gpa;
	}
	public void setGpa(int gpa) {
		this.gpa = gpa;
	}
	
	public int getRegNo() {
		return regNo;
	}
	public void setRegNo(int regNo) {
		this.regNo = regNo;
	}
}

public class Main
{
	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
		Student s1 = new Student(sc.next(), sc.nextInt(), sc.nextInt());
		Student s2 = new Student(sc.next(), sc.nextInt(), sc.nextInt());
		
		int comparisonResult = s1.compareTo(s2);
		
		if(comparisonResult > 0)
			System.out.println(s1.getName() + " has higher GPA");
		
		else if(comparisonResult < 0)
			System.out.println(s2.getName() + " has higher GPA");
		
		else
			System.out.println(s1.getName() + " and "+ s2.getName() + " have same GPA");
	}
}
##
Write a java program to demonstrate Comparator comparingDouble(ToDoubleFunction) method.Read name and salary(Double) for employee.Sort by salary (low to high use comparator.) and display it.NotesadInput pass below given data)"Ram", 3500.56"Kumar", 4222.99"Sasi", 2832.34"mamo", 2522.76
// Java program to demonstrate Comparator
// comparingDouble(ToDoubleFunction) method

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Main {
	public static void main(String[] args)
	{


		User u1 = new User("Ram", 3500.56);
		User u2 = new User("Kumar", 4222.99);
		User u3 = new User("Sasi", 2832.34);
		User u4 = new User("mamo", 2522.76);

	
		List<User> list = Arrays.asList(u2, u1, u4, u3);
		System.out.println("Before Sort:");
		list.forEach(user -> System.out.println(user));

		Collections.sort(list,
						Comparator.comparingDouble(User::getSalary));
		System.out.println("\nAfterSort:");
		list.forEach(user -> System.out.println(user));
	}
}

class User implements Comparable<User> {
	public String name;
	public double salary;

	public User(String name, double d)
	{
		this.name = name;
		this.salary = d;
	}

	public int compareTo(User u1)
	{
		return name.compareTo(u1.name);
	}

	public String getName()
	{
		return name;
	}

	public void setName(String name)
	{
		this.name = name;
	}

	public double getSalary()
	{
		return salary;
	}

	public void setSalary(double salary)
	{
		this.salary = salary;
	}

	@Override
	public String toString()
	{
		return "User [name=" + name
			+ ", salary="
			+ salary + "]";
	}
}
##
Write a java program to sort the given elements based on comparator interface and also use the linkedlist concepts in java collection.
import java.util.*;

public class Main {
 public static void main(String[] args) {
 
  LinkedList<Integer> list2 = new LinkedList<Integer>();
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list2.add(sc.nextInt());
  }
  list2.sort(new Comparator<Integer>() {
   @Override
   public int compare(Integer num1, Integer num2) {    
    return num1.compareTo(num2);
   }
   
  });
  

  for (Integer num : list2) {
   System.out.println(num);
  }
 }
}
##
Write a Java program to sort a list of name in reverse order using Comparable interface.Apply LinkedList concepts.
import java.util.*;

public class Main {
 public static void main(String[] args) {
 
  LinkedList<String> list2 = new LinkedList<String>();
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list2.add(sc.next());
  }
  list2.sort(new Comparator<String>() {
   @Override
   public int compare(String num1, String num2) {    
    return num1.compareTo(num2);
   }
   
  });
  

  for (String num : list2) {
   System.out.println(num);
  }
 }
}
##
To demonstrate the working of comparator interface , Create a student class (attribute is rollno,name,address) use constructor concepts, with the help of another class implement the comparator interface(sorting in ascending order of name), in main class create the arraylist and add the rollno,name and address and with help of collection sort by the rollno.
import java.io.*;
import java.lang.*;
import java.util.*;
class Student {
 
    int rollno;
    String name, address;
    public Student(int rollno, String name, String address)
    {
        this.rollno = rollno;
        this.name = name;
        this.address = address;
    }
    public String toString()
    {
         return this.rollno + " " + this.name + " "
            + this.address;
    }
}
class Sortbyname implements Comparator<Student> {
 
    public int compare(Student a, Student b)
    {
 
        return a.name.compareTo(b.name);
    }
}
public class Main {
    public static void main(String[] args)
    {
        ArrayList<Student> ar = new ArrayList<Student>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
        ar.add(new Student(sc.nextInt(),sc.next(),sc.next()));
        }
      
        System.out.println("Unsorted");
 
        
        for (int i = 0; i < ar.size(); i++)
            System.out.println(ar.get(i));
 
         Collections.sort(ar, new Sortbyname());
 
        
        System.out.println("\nSorted by name");
 
        
        for (int i = 0; i < ar.size(); i++)
            System.out.println(ar.get(i));
 
       
    }
}
##
Write a java program to compare  two elements , if element is greater means display 1 otherwise display -1 use only comparable interface in java collection.
import java.util.*;
public class ComparableExample {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        
        Integer valA = Integer.valueOf(sc.nextInt());
        Integer valB = Integer.valueOf(sc.nextInt());

        int comparisonA = valA.compareTo(valB);
        int comparisonB = valB.compareTo(valA);

        System.out.println(comparisonA);
        System.out.println(comparisonB);
    }
}
##
Write a java program to sort the list based on null value for name using comparator method(nullslast).Notesadpass the value below lines)al.add(new Student(101,"Vijay",23));al.add(new Student(106,"Ajay",27));al.add(new Student(105,null,21));
import java.util.*;    
 class Student {    
   int rollno;    
   String name;    
  int age;    
    Student(int rollno,String name,int age){    
    this.rollno=rollno;    
    this.name=name;    
    this.age=age;    
    }  
    public int getRollno() {  
        return rollno;  
    }  
    public void setRollno(int rollno) {  
        this.rollno = rollno;  
    }  
    public String getName() {  
        return name;  
    }  
  
    public void setName(String name) {  
        this.name = name;  
    }  
  
    public int getAge() {  
        return age;  
    }  
    public void setAge(int age) {  
        this.age = age;  
    }  
    }    public class TestSort2{    
 public static void main(String args[]){    
 ArrayList<Student> al=new ArrayList<Student>();    
 al.add(new Student(101,"Vijay",23));    
 al.add(new Student(106,"Ajay",27));    
 al.add(new Student(105,null,21));    
  
  Comparator<Student> cm2=Comparator.comparing(Student::getName,Comparator.nullsLast(String::compareTo));  
  Collections.sort(al,cm2);  
  System.out.println("Considers null to be greater than non-null");  
  for(Student st: al){  
     System.out.println(st.rollno+" "+st.name+" "+st.age);  
     }  
 }    
 }     
 ##
 Write a java program to read and get the enumeration of the values present in the Vector and print the  elements using vector in java collection.(Use elements() method)
 import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Vector<String> vec= new Vector<String>();
        for (int i=0;i<n;i++)
        {
            vec.add(sc.next());
            vec.add(sc.next());
        }
        System.out.println("The vector is: "+vec);
        Enumeration enu = vec.elements();
        System.out.println("The enumeration of values are:");
        while (enu.hasMoreElements())
        {
            System.out.println(enu.nextElement());
        }
    }
}
##
Write a java program to read and  print all the  elements and also firstelement() using vector method  in java collection.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Vector<String> vec= new Vector<String>();
        for (int i=0;i<n;i++)
        {
            vec.add(sc.next());
            vec.add(sc.next());
        }
        System.out.println("The vector is: "+vec);
        System.out.println("The first element is: "+vec.firstElement());
    }
}
##
Write a java program to read and  print all the  elements and return the first position of element in vector object using indexOf("welcome") method and use vector method  in java collection.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Vector<String> vec= new Vector<String>();
        for (int i=0;i<n;i++)
        {
            vec.add(sc.next());
        }
        System.out.println("The vector is: "+vec);
        System.out.println("Index of 'welcome' is: "+vec.indexOf("welcome"));
    }
}
##
Write the java program to add the elements in stack and then display the elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Stack<String> st=new Stack<String>();
        for(int i=0;i<n;i++)
        {
            st.push(sc.next());
        }
        System.out.println("Elements in Stack: "+st);
    }
}
##
Write the java program to add the elements in stack and then display the elements , then remove all the elements from the stack .Finally display the element of the stack.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Stack<String> st=new Stack<String>();
        for(int i=0;i<n;i++)
        {
            st.push(sc.next());
        }
        System.out.println("The initial size is: "+st.size());
        st.clear();
        System.out.println("Final Stack: "+st);
    }
}
##
Write a java program to read and print the elements  and to fetching the specific element from the index of 3 using vector in java collection.(Use elementAt() method)
import java.util.*;
public class VectorDemo {
	public static void main(String args[])
	{
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	   	System.out.println("The vector is: " + vec_tor);

	    System.out.println("The element is: "
                           + vec_tor.elementAt(3));
		}
}
##
Write a java program to create vector and read the elements  for two vector in java collection.(Use equals method )
import java.util.*;
public class VectorDemo {
	public static void main(String args[])
	{
		Vector<String> vec_tor1 = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor1.add(sc.next());
	    }
	   	System.out.println("The vector is: " + vec_tor1);

	    Vector<String> vec_tor2 = new Vector<String>();
        int size2=sc.nextInt();
        for(int i=0;i<size2;i++)
        {
        vec_tor2.add(sc.next());
        }
       
  
       System.out.println("The Vector is: "
                           + vec_tor2);
  
        System.out.println("Are both of them equal? "
                           + vec_tor1.equals(vec_tor2));
		}
}
##
Write a java program to read and  print the  elements using vector in java collection.Note:add "SEC" to vector with index value is 2.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    
	    }
	

		System.out.println("The vector is: " + vec_tor);

		vec_tor.insertElementAt("SEC", 2);
	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write the java program to retrieve or fetch the first element of the Stack or the element present at the top of the Stack and then display the elements.(use peek method)
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Elements in Stack: " + stk);  

System.out.println("Pop elements in Stack: " + stk.peek());  

}  
}  
##
Write the java program to add the elements in stack and then display the elements , then remove the elements at the index of 1.Finally display the element of the stack.(use remove() method).After apply the toString() method display it.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("The initial size is: "
                           + stk.size());
  
       
        stk.remove(1);
  
       
        System.out.println("Final Stack: " + stk);
  
        System.out.println("The final size is: "
                           + stk.size());  
        System.out.println("Using toString() method:" + stk.toString());

}  
}  
##
write a java program to create an empty vector and add an elements in the vector then create a collection,add element to collection and then appending the collection element to vector .Finally display the vector element.
import java.util.*;
import java.util.ArrayList;

public class GFG {
	public static void main(String args[])
	{
		Vector<String> vt = new Vector<String>();
		Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vt.add(sc.next());
	    vt.add(sc.next());
	    }
		Collection<String> c = new ArrayList<String>();
     	int size1=sc.nextInt();
	    for(int j=0;j<size1;j++)
	    {
		c.add(sc.next());
	   
	    }
		System.out.println("The Vector is: " + vt);

	
		vt.addAll(c);

	
		System.out.println("The new vector is: " + vt);
	}
}
##
Write a java program to read and print the elements  and check the element in vector or not using vector in java collection.(Use method in vector)Note:Check the vector contains Italic , 4 and yes is present in vector or not.
import java.util.*;
public class VectorDemo {
	public static void main(String args[])
	{
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	   	System.out.println("The vector is: " + vec_tor);

	    System.out.println("Does the vector contains 'Italic'? "
                           + vec_tor.contains("Italic"));
  
       
        System.out.println("Does the Vector contains '4'? "
                           + vec_tor.contains("4"));
  
        
        System.out.println("Does the Queue contains 'yes'? "
                           + vec_tor.contains("yes"));
		}
}
##
Write a java program to read and  print the  elements and removes all components from this Vector and sets its size to zero use vector in java collection.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    
	    }
	

		System.out.println("The vector is: " + vec_tor);

		vec_tor.removeAllElements();
	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write the java program to search for an element in the stack and get its distance from the top and then display the stack.Note:"Welcome" string is present in stack or not.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Elements in Stack: " + stk);  

System.out.println("Search element in Stack: " + stk.search("Welcome"));  

}  
}  
##
Write the java program to add the elements in stack and then display the elements , then remove the elements at the indexposition of 2.Finally display the element of the stack.(use removeElementAt().)
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("The initial size is: "
                           + stk.size());
  
       
        stk.removeElementAt(2);
  
       
        System.out.println("Final Stack: " + stk);
  
        System.out.println("The final size is: "
                           + stk.size());  

}  
}  
##
Write a java program to read and  print the  elements using vector in java collection.Note:Use addElement method().
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	

		System.out.println("The vector is: " + vec_tor);

		int size1=sc.nextInt();
	    for(int j=0;j<size1;j++)
	    {
		vec_tor.addElement(sc.next());
	    }

	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write a java program to create three vector and read the elements  and check the element in vector or not using vector in java collection.(Use containsall method in vector)Note:In third vector only add the "Hello" String.
import java.util.*;
public class VectorDemo {
	public static void main(String args[])
	{
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	   	System.out.println("The vector is: " + vec_tor);

	    Vector<String> colvec_tor = new Vector<String>();
        int size2=sc.nextInt();
        for(int i=0;i<size2;i++)
        {
        colvec_tor.add(sc.next());
        }
       
  
        System.out.println("Are all the contents equal? " + vec_tor.containsAll(colvec_tor));
  
  
        Vector<String> colvec_tor2 = new Vector<String>();
  
        colvec_tor2.add("Hello");
       
  
        System.out.println("Are all the contents equal? " + vec_tor.containsAll(colvec_tor2));
		}
}
##
Write a java program to read and  print the  elements and the remove an element from a Vector from a specific position or index using vector in java collection.Note:Consider index value is zero.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    
	    }
	

		System.out.println("The vector is: " + vec_tor);

		vec_tor.remove(0);
	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write the java program to check the stack is empty or not and then display the stack.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Elements in Stack: " + stk);  

System.out.println("Check empty or not in Stack: " + stk.empty());  

}  
}  
##
Write the java program to add the elements in stack and then display the last occurrence of the  elements using lastIndexOf method using java collection.Note:String is "Welcome"
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Stack: "+ stk.lastIndexOf("Welcome"));

    
}  
}  
##
Write a java program to read and  print the  elements using vector in java collection.Note:Use add method().
// Java code to illustrate boolean add(Object element)
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	

		System.out.println("The vector is: " + vec_tor);

		int size1=sc.nextInt();
	    for(int j=0;j<size1;j++)
	    {
		vec_tor.add(sc.next());
	    }

	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write a java program to read and  print all the  elements and also lastelement() using vector method  in java collection.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	

		System.out.println("The vector is: " + vec_tor);

	    System.out.println("The last element is: "
                           + vec_tor.lastElement());
	}
}
##
Write a java program to read and  print all the  elements and return the first position of element in vector object using lastIndexOf("welcome") method and use vector method  in java collection.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    }
	

		System.out.println("The vector is: " + vec_tor);

	    System.out.println("Index of 'welcome' is: "
                           + vec_tor.lastIndexOf("welcome"));
	}
}
##
Write the java program pop the elements in stack and then display the elements.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Elements in Stack: " + stk);  

System.out.println("Pop elements in Stack: " + stk.pop());  

}  
}  
##
Write the java program to add the elements in stack and then display the elements using listIterator method using java collection.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Stack: "+ stk);
ListIterator<String> iterator = stk.listIterator();
System.out.println("Using ListIterator:");
            while (iterator.hasNext()) {
                System.out.println("Value is : "
                                   + iterator.next());
        
            }
    
}  
}  
##
Write a java program to read and  print the  elements using vector in java collection.Note:Use add method().
// Java code to illustrate boolean add(Object element)
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	

		System.out.println("The vector is: " + vec_tor);

		int size1=sc.nextInt();
	    for(int j=0;j<size1;j++)
	    {
		vec_tor.add(sc.next());
	    }

	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write a java program to create vector and read the elements  for two vector in java collection.(Use equals method )
import java.util.*;
public class VectorDemo {
	public static void main(String args[])
	{
		Vector<String> vec_tor1 = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor1.add(sc.next());
	    }
	   	System.out.println("The vector is: " + vec_tor1);

	    Vector<String> vec_tor2 = new Vector<String>();
        int size2=sc.nextInt();
        for(int i=0;i<size2;i++)
        {
        vec_tor2.add(sc.next());
        }
       
  
       System.out.println("The Vector is: "
                           + vec_tor2);
  
        System.out.println("Are both of them equal? "
                           + vec_tor1.equals(vec_tor2));
		}
}
##
Write a java program to read and  print the  elements and the remove an element from a Vector from a specific position or index using vector in java collection.Note:Consider index value is zero.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    
	    }
	

		System.out.println("The vector is: " + vec_tor);

		vec_tor.remove(0);
	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write the java program to add the elements in stack and then display the elements.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Elements in Stack: " + stk);  

}  
}  
##
Write the java program to add the elements in stack and then display the elements , then remove the elements at the indexposition of 2.Finally display the element of the stack.(use removeElementAt().)
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("The initial size is: "
                           + stk.size());
  
       
        stk.removeElementAt(2);
  
       
        System.out.println("Final Stack: " + stk);
  
        System.out.println("The final size is: "
                           + stk.size());  

}  
}  
##
Write a java program to Print the top of the element from the Priority Queue.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
        for(int i=0;i<n;i++)
        {
            pq.add(sc.nextInt());
        }
        System.out.println("Display the top of the element of PriorityQueue: \n" + pq.peek());
    }
}
##
Write a java program to display the added elements from the Priority Queue and to insert a particular element into the Priority Queue and then display the elements.(Use offer() method).
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
        for(int i=0;i<n;i++)
        {
            pq.offer(sc.nextInt());
        }
        System.out.println("Display the element of Queue: \n" + pq);
    }
}
##
Write a java program to display the added elements from the Dequeue using java collection.(Use ArrayDeque)
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Deque<Integer> dq=new ArrayDeque<Integer>();
        for(int i=0;i<n;i++)
        {
            dq.add(sc.nextInt());
        }
        System.out.println("Display the element of Dequeue: \n" + dq);
    }
}
##
Write a java program to display the added elements from the Dequeue using removefirst method in java collection.(Use string)
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Deque<String> dq=new ArrayDeque<String>();
        for(int i=0;i<n;i++)
        {
            dq.offer(sc.next());
        }
        System.out.println("Display the element of Dequeue: \n" + dq);
        dq.removeFirst();
        System.out.println(dq);
    }
}
##
Write a java program to display the head element from the Dequeue using getFirst method  in java collection.(Use string)
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Deque<String> dq=new ArrayDeque<String>();
        for(int i=0;i<n;i++)
        {
            dq.offer(sc.next());
        }
        System.out.println("Display the element of Dequeue: \n" + dq);
        System.out.println(dq.getFirst());
    }
}
##
Write a java program to display the added elements from the Priority Queue.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.nextInt());
	    }
	    System.out.println("Display the element of Queue:");
		System.out.println(pQueue);

		
	}
}
##
Write a java program to display the added elements from the Priority Queue and to insert a particular element into the Priority Queue and then display the elements after clear the priority queue and then display it.(Use clear() method).
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.offer(sc.nextInt());
	    }
	    System.out.println("Display the element of Queue:");
		System.out.println(pQueue);
		System.out.println("Display the element of Queue after clear method:");
		pQueue.clear();
		System.out.println(pQueue);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using java collection.Note:add 100 to the first element of dequeue.
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<Integer> dq = new LinkedList<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.add(sc.nextInt());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
        System.out.println("Display the element of Dequeue after add first element :");
        dq.addFirst(100);
		System.out.println(dq);
		
	}
}
##
Write a java program to display the added elements from the Dequeue using removelast method in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		dq.removeLast();
		System.out.println(dq);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using descendingiterator through deque in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
     	for (Iterator itr = dq.iterator();
             itr.hasNext();) {
            System.out.print(itr.next() + " ");
        }
        System.out.println();
 
        for (Iterator itr = dq.descendingIterator();
             itr.hasNext();) {
            System.out.print(itr.next() + " ");
        }
		
	}
}
##
Write a java program to print the top element and removing it from the Priority Queue Container.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.nextInt());
	    }
	    System.out.println("Display the remove element of PriorityQueue:");
		System.out.println(pQueue.poll());
		System.out.println("Display the element of PriorityQueue:");
		System.out.println(pQueue);

		
	}
}
##
Write a java program  to insert a element into the Priority Queue and to access the elements from priority queue then display the head of the queue elements from priority queue.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.offer(sc.nextInt());
	    }
	   
	    int number = pQueue.peek();
        System.out.println("Accessed Element: " + number);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using java collection.(Use LinkedList)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<Integer> dq = new LinkedList<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.add(sc.nextInt());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using offer method in java collection.
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<Integer> dq = new ArrayDeque<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.nextInt());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);

		
	}
}
##
Write a java program to display the removal element from the Dequeue using getLast method  in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		System.out.println(dq.getLast());
     	
	}
}
##
Write a java program to display the added elements from the Priority Queue and apply the toArray() method to form an array of the same elements as that of the Priority Queue. Basically, it copies all the element from a priority queue to a new array and display it.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.nextInt());
	    }
	    System.out.println("The PriorityQueue: " + pQueue);
  
       
        Object[] arr = pQueue.toArray();
  
        System.out.println("The array is:");
        for (int j = 0; j < arr.length; j++)
            System.out.println(arr[j]);

		
	}
}
##
Write a java program to print the top element and removing it from the Priority Queue Container.(use String elements)
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<String> pQueue = new PriorityQueue<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.next());
	    }
	    System.out.println("Display the remove element of PriorityQueue:");
		System.out.println(pQueue.poll());
		System.out.println("Display the element of PriorityQueue:");
		System.out.println(pQueue);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using java collection.Note:add 150 to the last element of dequeue.
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<Integer> dq = new LinkedList<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.add(sc.nextInt());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
        System.out.println("Display the element of Dequeue after add first element :");
        dq.addLast(150);
		System.out.println(dq);
		
	}
}
##
Write a java program to display the added elements from the Dequeue using iterator through deque in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
     	for (Iterator itr = dq.iterator();
             itr.hasNext();) {
            System.out.print(itr.next() + " ");
        }

		
	}
}
##
Write a java program to display the removal  element from the Dequeue using pollFirst method  in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		System.out.println(dq.pollFirst());
     	
	}
}
##
Write a java program to display the added elements from the Priority Queue.Note : Use iterator(while).Iterating the elements from the Priority Queue.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.nextInt());
	    }
	   Iterator iterator = pQueue.iterator();
	   System.out.println("Iterate the elements from the queue using while loop:");
  
        while (iterator.hasNext()) {
            System.out.print(iterator.next() + " ");
        }
		
	}
}
##
Write a java program to display the added elements from the Priority Queue and to insert a particular element into the Priority Queue and then display the elements.Create a comparator value and then display the values .Use the Comparator method returns a null value if the queue follows the natural ordering pattern of the elements.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.offer(sc.nextInt());
	    }
	     System.out.println("Priority queue values are: " + pQueue);
 
       
        Comparator comp = pQueue.comparator();
 
     
        System.out.println("Since the Comparator value is: " + comp);
        System.out.println("it follows natural ordering");
		
	}
}
##
Write a java program to display the added elements from the Dequeue using java collection.Note:push the element 72 to deque.
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<Integer> dq = new ArrayDeque<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.add(sc.nextInt());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		dq.push(72);
	    System.out.println("Display the element of Dequeue after push the element 72:");
		System.out.println(dq);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using offerfirst method in java collection.Note:Add "SEC" string to the deque.
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		dq.offerFirst("SEC");
		System.out.println(dq);

		
	}
}
##
Write a java program to display the removal  element from the Dequeue using pollLast method  in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		System.out.println(dq.pollLast());
     	
	}
}
##
Write a java program to Print the top of the element from the Priority Queue.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.nextInt());
	    }
	    System.out.println("Display the top of the element of PriorityQueue:");
		System.out.println(pQueue.peek());

		
	}
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes double age value as a parameter. If the age is less than 3.5, we are throwing the ArithmeticException as "Child is not eligible for KinderGarden"    otherwise print a message as "Child is eligible for KinderGarden!!"Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(double age) 
        {  
            try
            {
            if(age<3.5) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Child is not eligible for KinderGarden");    
            }  
            else {  
            System.out.println("Child is eligible for KinderGarden!!");  
            }  
            }
            catch(Exception e)
      {
          System.out.println(e);
      }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            double n=sc.nextDouble();
            validate(n);  
                
      }    
    }      
##
Create a final class 'Student' with  Name,Id and Year,Schoolname  as its member, make  Year and School name as final variable with value "3th Year" & "ABC School", Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Student
{
    final String Year="3th Year";
    final String schoolname="ABC School";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: "+Year+"\nSchool: " +schoolname);
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}
##
Write a Java program to count the vowels and consonant in the given string by calling run methodNote: Get the value from the User
import java.util.*;
public class Multi implements Runnable
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String str = sc.nextLine();  
        int vCount = 0, cCount = 0;    
        
        str = str.toLowerCase();    
        
        for(int i = 0; i < str.length(); i++)
        {
            if(str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') 
            {    
                vCount++;    
            }    
            else if(str.charAt(i) >= 'a' && str.charAt(i)<='z')
            {      
                cCount++;    
            }    
        }    
        System.out.println("Number of vowels: " + vCount);    
        System.out.println("Number of consonants: " + cCount);   
    }  
    public static void main(String args[])
    {  
        Multi m1=new Multi(); 
        Thread t1 =new Thread(m1); 
        t1.run();  
    }  
}
##
Write a java program for set the priority and name of the current thread.Note : Read the threadname from the UserRead the priority value from the User
import java.util.*;
public class A implements Runnable
{
    public void run()
    {
        System.out.println(Thread.currentThread()); 
    }
    public static void main(String[] args) 
    {
        A a = new A();
        Scanner sc=new Scanner(System.in);
        String thname=sc.nextLine();
        int pri=sc.nextInt();
        Thread t = new Thread(a, thname);
        t.setPriority(pri);
        System.out.println("Priority of Thread: " +t.getPriority());
        System.out.println("Name of Thread: " +t.getName());
        t.start();
    }
}
##
Write a Java program to create Thread using extends In run method get the Patient details as patient name and patient Id as String variable from the user and print the value in Output screen
import java.util.*;
public class Multi extends Thread
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Patient Name: " +sname);  
        System.out.println("Patient ID: " +rollno);  
    }  
    public static void main(String args[])
    {
        Multi t1=new Multi();  
        t1.start();  
    }  
}
##
Write a Java program to create Thread using extends In run method get the student name and roll number from the user and print the value
import java.util.*;
public class Multi extends Thread
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Student Name: " +sname);  
        System.out.println("Roll No: " +rollno);  
    }  
    public static void main(String args[])
    {
        Multi t1=new Multi();  
        t1.start();  
    }  
}
##
Write a Java program to perform whether the given number is Positive or Negative ,zero by creating Thread using Runnable Interface.Note: Get the value from the User
import java.util.*;
public class Multi implements Runnable
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        int num=sc.nextInt();
        if(num>0)  
        {  
            System.out.println("The number is positive.");  
        }
        else if(num<0)  
        {  
            System.out.println("The number is negative.");  
        }
        else  
        {  
            System.out.println("The number is zero.");  
        }
    }
    public static void main(String args[])
    {  
        Multi m1=new Multi(); 
        Thread t1 =new Thread(m1); 
        t1.run();  
    }  
}
##
Write a Java program to perform whether the given number is palindrome or not by creating Thread using Runnable Interface.Note: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int number=sc.nextInt();
        int remainder=0,reverse=0,temp;
        temp=number;
       while(number != 0)   
        {  
         remainder = number % 10;  
        reverse = reverse * 10 + remainder;  
        number = number/10;  
        }  
        if(temp==reverse)
        {
        System.out.println("The number " +temp+" is Palindrome");  
        }
        else
        {
              System.out.println("The number " +temp+" is not a Palindrome");  
        }
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using extendsNote: Get Thread integer number  from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int count=sc.nextInt();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Consider two threads t1 and t2Note : Read the threadname from the UserRead the priority value from the user for both the threads
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String first=sc.nextLine();
 String second=sc.nextLine();
 Thread t1 = new Thread(a, first);
 Thread t2 = new Thread(a, second);
 
 int t1pr=sc.nextInt();
 int t2pr=sc.nextInt();
 t1.setPriority(t1pr); // Setting the priority of first thread.
 t2.setPriority(t2pr); // Setting the priority of second thread.
 
 
 t1.start();
 t2.start();
 
  }
}
##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.Note: Get Thread integer number  from the User
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to perform whether the given number is palindrome or not by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int number=sc.nextInt();
        int remainder=0,reverse=0,temp;
        temp=number;
       while(number != 0)   
        {  
         remainder = number % 10;  
        reverse = reverse * 10 + remainder;  
        number = number/10;  
        }  
        if(temp==reverse)
        {
        System.out.println("The number " +temp+" is Palindrome");  
        }
        else
        {
              System.out.println("The number " +temp+" is not a Palindrome");  
        }
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a Java program to add two numbers by creating Thread using Runnable Interface.Note: Get the value of int first and second variable as Input from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int a=sc.nextInt();
        int b=sc.nextInt();
        int sum=a+b;
        System.out.println("Result: " +sum);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a Java program to count the number of characters in the given string by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String string = sc.nextLine();    
        int count = 0;    
        //Counts each character except space    
        for(int i = 0; i < string.length(); i++)
        {    
            if(string.charAt(i) != ' ')    
                count++;    
        }    
        //Displays the total number of characters present in the given string    
        System.out.println("Total number of characters in a string: " + count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Consider two threads t1 and t2Note : Read the threadname from the Userset the priority as 4 for t1 and set the priority as 2 for t2
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String first=sc.nextLine();
 String second=sc.nextLine();
 Thread t1 = new Thread(a, first);
 Thread t2 = new Thread(a, second);
 
 
 t1.setPriority(4); // Setting the priority of first thread.
 t2.setPriority(2); // Setting the priority of second thread.
 
 
 t1.start();
 t2.start();
 
  }
}
##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.Note: Get Thread integer number  from the User
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using extendsNote: Get User name from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using Implements Runnable  .In run method get student name & rollno as input from the user and print inside the function
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi();  
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a java program for determine the priority and name of the current thread.Note : Read the threadname from the User
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}
##
Write a Java program to create Thread using extendsNote: Get Thread integer number  from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int count=sc.nextInt();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to perform whether the given number is Positive or Negative ,zero by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int num=sc.nextInt();
       if(num>0)  
{  
System.out.println("The number is positive.");  
}  
//checks the number is less than 0 or not  
else if(num<0)  
{  
System.out.println("The number is negative.");  
}  
//executes when the above two conditions return false  
else  
{  
System.out.println("The number is zero.");  
}  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Note : Read the threadname from the UserSet the Priority as 2.
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 t.setPriority(2); // Setting the priority of thread.
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}
##
Write a Java program to create Thread and call the thread  using run methodNote: Get User name from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.run();  
     }  
    }  
##
Write a Java program to create Thread using Runnable InterfaceNote: Get double value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        double count=sc.nextDouble();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    } 
##
Write a Java Program to perform cube value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void cube method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    void cube(int n)
    {
        synchronized(this)
        {
            int temp = 1;
            for(int i=1;i<=n;i++)
            { 
                int j=i;
                System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
                try
                {  
                    Thread.sleep(400);  
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            }  
        }
    }  
}
##
Write a Java Program to perform multiplication table  for 5 & 100 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void printTable() in that perform multiplication table2. Create a Two threads "MyThread1" and "MyThread2"  with a member function void run() to call ThreadIn main() access all function using its corresponding Object.
class Table
{  
    synchronized void printTable(int n)
    {
        for(int i=1;i<=5;i++)
        {
            System.out.println(n*i);  
            try
            {  
                Thread.sleep(400);  
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
    }
}
class MyThread1 extends Thread
{
    Table t;  
    MyThread1(Table t)
    {
        this.t=t;  
    }  
    public void run()
    {  
        t.printTable(5);  
    }
}
class MyThread2 extends Thread
{  
    Table t;  
    MyThread2(Table t)
    {
        this.t=t;  
    }  
    public void run()
    {  
        t.printTable(100);  
    }  
}
public class HelloWorld
{
    public static void main(String args[])
    {
        Table obj = new Table();
        MyThread1 t1=new MyThread1(obj);  
        MyThread2 t2=new MyThread2(obj);  
        
        t1.start();  
        t2.start();  
    }  
}
##
Write a Java Program to perform factorial  value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void factorial method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    static synchronized void factorial(int n)
    { 
        int fact=1;
        if (n == 0)    
            fact=1;    
        else  
        {
            for(int i=1;i<=n;i++)
            fact=fact*i;    
        }   
        System.out.println("Factorial for a number " +n+ " :" + fact);
        try
        {  
            Thread.sleep(400);  
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
   }  
}
##
Write a Java Program to display Even number up to the range using Synchronization block for the below Scenario1. Create a Class Table with void Even method in that create Synchronization blockNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
import java.util.*;
class Table
{
    public static synchronized void Even(int n)
    {
        System.out.print("List of Even numbers for "+n+" : ");
        for(int i=1;i<=n;i++)
        {
            if(i%2==0)
            {
                System.out.print(i+" ");
            }
        }
        System.out.println();
        try
        {
            Thread.sleep(400);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
}
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario1. Create a Class Table with void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    void printTable(int n)
    {
        synchronized(this)
        {
            for(int i=1;i<=10;i++)
            {  
                System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                try
                { 
                    Thread.sleep(400);  
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            }
        }
    }  
}
##
Write a Java Program to perform cube value using Synchronization block for the below Scenario1. Create a Class Table with void cube method in that create Synchronization block perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
 class Table
  {
    void cube(int n)
     {
      synchronized(this)
      {
          int temp = 1;
         for(int i=1;i<=n;i++)
         { 
             int j=i;
         System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
         try
         {  
          Thread.sleep(400);  
         }
         catch(Exception e){System.out.println(e);}  
         }  
      }
   }  
  }
##
Write a Java Program to perform cube value using synchronization  method concept  for the below Scenario1. In a Class Table create a synchronized void cube method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
 class Table
  {
   synchronized void cube(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
##
Write a Java Program to perform static synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform Fibonacci series for static synchronization method for the below Scenario1. In a Class Table create a static synchronized void Fibonacci method in that perform Fibonacci OperationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
   static synchronized void fibonacci(int n)
   {
       int  firstTerm = 0, secondTerm = 1;
    System.out.print("Fibonacci Series for " + n + " value:");

    for (int i = 1; i <= n; ++i) {
      System.out.print(firstTerm + ", ");
      // compute the next term
      int nextTerm = firstTerm + secondTerm;
      firstTerm = secondTerm;
      secondTerm = nextTerm; 
    }
    System.out.println(" ");
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
   } 
   
  }
##
Write a Java Program to display odd numbers using Synchronization block for the below Scenario1. Create a Class Table with void odd method in that create synchronization blockNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    void odd(int n)
    {
      synchronized(this)
     {//synchronized block  
     
       int i=1;
     System.out.print("List of odd numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
     
     
     }
   }  
  }
##
Write a Java Program to perform square value using Synchronization block for the below Scenario1. Create a Class Table with void square method in that create Synchronization block perform square operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    void square(int n)
    {
      synchronized(this)
     {//synchronized block  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("square for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
     }
   }  
  }
##
Write a Java Program to display Even number up to the range using static Synchronization block for the below Scenario1. In a Class Table  create a function for displaying Even number up to the range with static synchronization block using void even (int n) functionNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    synchronized static void Even(int n)
    {
      
      int i=2;
     System.out.print("List of Even numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
   }  
  }
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario1. Create a Class Table with void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
    {  
     
     void printTable(int n){
         synchronized(this)
         {
               for(int i=1;i<=10;i++){  
                 System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                 try{  
                  Thread.sleep(400);  
                 }catch(Exception e){System.out.println(e);}  
               } 
         }
      
     }  
    }  
##
Write a Java Program to perform static synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  //example of java synchronized method  
    class Table
    {  
     synchronized void printTable(int n){//synchronized method  
       for(int i=1;i<=10;i++){  
         System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
         try{  
          Thread.sleep(400);  
         }catch(Exception e){System.out.println(e);}  
       }  
      
     }  
    }  
##
Write a Java Program to perform Power table 2 &  8 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void power method in that perform power table  Note :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
   synchronized void power(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=5;i++)
     { 
     System.out.println("value of " +n+ " :" + n*temp);
     temp = n*temp;
     try
     {  
      Thread.sleep(500);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
##
Write a Java Program to perform Synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	public synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform factorial  value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void factorial method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
  {
   static synchronized void factorial(int n)
   {//synchronized method  
     int fact=1;
     if (n == 0)    
      fact=1;    
     else  
     {
       for(int i=1;i<=n;i++)
          fact=fact*i;    
     }   
System.out.println("Factorial for a number " +n+ " :" + fact);
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     
   }  
  }
##
Write a Java Program to perform Arithmetic Exception for voting purpose using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
    static void checkAge(Double age) 
    {
        if(age<18)
            throw new ArithmeticException("Access denied - You must be at least 18 years old.");
        else
            System.out.println("Access granted - You are old enough!");
}
  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
         checkAge(n);
      }
      catch(ArithmeticException e)
      {
          System.out.println("Exception : "+e);
      }
  }
}
##
Write a Java Program to perform NullPointerException using throws .Note: Get String value as input from the user. Calculate the length of the string for user input .If the user entered null character then print the "Exception : java.lang.NullPointerException: Enter some value for the String "else print the statement as "String Length:" 
import java.util.*;
public class Main {
    static void fun(String str) throws NullPointerException
    {
        int n=str.length();
        if (n=='\0')
        {
            throw new NullPointerException("Enter some value for the String");
        }
        else
        {
            System.out.println("String Length : "+n);
        }
    }
    public static void main(String[] args) 
    { 
        Scanner sc=new Scanner(System.in); 
        String str=sc.nextLine();
        try
        {
            fun(str);
        }
        catch(NullPointerException e)
        {
            System.out.println("Exception : "  +e);
        }
    }
}
##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with value "HCL" , Get as input from the user for id,designation and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class staffDetails
{
    final String companyname="HCL";
    String name;
    int Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.next();
        Id=sc.nextInt();
        //des=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
    public static void main(String[] args)
    {
        staffDetails obj=new staffDetails();
        obj.get();
        obj.print();
    }
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when ArrayIndexOutOfBoundsException occur in try block and handled in catch block
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      // array of size 4.
        int[] arr = new int[4];
         
        try
        {
            int i = arr[4];
                 
            // this statement will never execute
            // as exception is raised by above statement
            System.out.println("Inside try block");
        }
         
        catch(ArrayIndexOutOfBoundsException ex)
        {
            System.out.println("Exception caught in catch block");
        }
         
        finally
        {
            System.out.println("finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes String  value as a parameter. If the String length ='\0' , we are throwing the NullPointerException as "Enter some value for the String"    otherwise print a message as "String Length :  "Note: String value as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(String str) 
        {  
            int n=str.length();
            try
            {
            if (n=='\0')
             {  
                 throw new NullPointerException("Enter some value for the String");
             }
        else {
            System.out.println("String Length : "+n);
            }
            }  
            
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            String str=sc.nextLine();
            validate(str);  
                
      }    
    }      
##
Write a Java program for performing exception using throwsNote: Consider a scenario.In Main function use try -catch method  and get the integer input value from the user and print the variable value using throw keyword
import java.util.*;

public class ThrowsExecp {
 
    // This method throws an exception
    // to be handled
    // by caller or caller
    // of caller and so on.
    static void fun() throws IllegalAccessException
    {
        Scanner in=new Scanner(System.in);
        int a=in.nextInt();
        System.out.println("Inside function. ");
        throw new IllegalAccessException(" Entered Input value as:    " +a);
    }
 
    // This is a caller function
    public static void main(String args[])
    {
        try {
            fun();
        }
        catch (IllegalAccessException e) {
            System.out.println("caught in main." +e);
        }
    }
}
##
Write a Java Program to perform ArrayIndexOutOfBoundsException using throws .Note: Consider the size of the array should not exceed 5 .Get Size value from the user. If the value exceed 5 then print " Exception : java.lang.ArrayIndexOutOfBoundsException: Size of the array Should not exceed 5" else print the statement as "Size of the Array : "Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
   static void fun(int n) throws ArrayIndexOutOfBoundsException
  {
      int a[] = new int[n];
    if (n>5)
    {
        
       throw new ArrayIndexOutOfBoundsException("Size of the array Should not exceed 5");
    }
    else {
      System.out.println("Size of the Array : "+n);
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      
      try
      {
      fun(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with value "Amazon" , Get as input from the user for id,designation and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class staffDetails
{
    final String companyname="Amazon";
    String name;
    int Id;
   
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.next();
        Id=sc.nextInt();
        //des=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    staffDetails obj=new staffDetails();
    obj.get();
    obj.print();
}
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes integer age value as a parameter. If the age is less than 18, we are throwing the ArithmeticException as "Person is not eligible to vote"    otherwise print a message as "Person is eligible to vote!!"Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(int age) 
        {  
            try
            {
            if(age<18) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Person is not eligible to vote");    
            }  
            else {  
            System.out.println("Person is eligible to vote!!");  
            }  
            }
            catch(Exception e)
      {
          System.out.println(e);
      }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            int n=sc.nextInt();
            validate(n);  
                
      }    
    }      
##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Create a final class 'Company' with  Name,Id and companyname as its member, make companyname as final variable with value "HCL" , Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Company
{
    final String companyname="HCL";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.get();
    obj.print();
}
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when NullPointerException occur in try block and handled in catch block
public class HelloWorld {
    public static void main(String[] args) 
    {
      
        try
        {
           String str=null;
           System.out.println(str.length());
        }
         
        catch(NullPointerException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the checkEligibilty() method that takes integer  stuage,  and stuweight as a parameter. If the age is less than 12 and weight >40 , we are throwing the ArithmeticException as "Student is not eligible for registration"    otherwise print a message as "Student Entry is Valid!!"Note: Get the Input for age and weight from the User
import java.util.Scanner;

public class HelloWorld
{
   
       static void checkEligibilty(int stuage, int stuweight)
      { 
           try
    {
      if((stuage<12) && (stuweight<40)) 
      {
         throw new ArithmeticException("Student is not eligible for registration"); 
      }
      else if((stuweight>40) &&(stuage<12))
      {
         throw new ArithmeticException("Student is not eligible for registration"); 
        
      }
      else
      {
          System.out.println("Student Entry is Valid!!");
      }
      }
      catch(Exception e)
      {
          System.out.println(e);
      }
   } 

   public static void main(String args[])
   { 
     System.out.println("Welcome to the Registration process!!");
     Scanner sc=new Scanner(System.in);
     int stuage=sc.nextInt();
     int stuweight=sc.nextInt();
     checkEligibilty(stuage,stuweight); 
     System.out.println("Have a nice day.."); 
 } 
}
##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Write a Java Program to perform NullPointerException using throws .Note: Get String value as input from the user. Calculate the length of the string for user input .If the user entered null character then print the "Exception : java.lang.NullPointerException: Enter some value for the String "else print the statement as "String Length:" 
import java.util.*;
public class Main 
{
    
   static void fun(String str) throws NullPointerException
  {
      int n=str.length();
     
    if (n=='\0')
    {
        
       throw new NullPointerException("Enter some value for the String");
    }
    else {
      System.out.println("String Length : "+n);
    }
  }

  public static void main(String[] args) 
  { 
     Scanner sc=new Scanner(System.in); 
     String str=sc.nextLine();
      try
      {
      fun(str);
      }
      catch(NullPointerException e)
      {
          System.out.println("Exception : "  +e);
      }
     
  }
}
##
Create a final class 'Student' with  Name,Id and Year as its member, make  Year as final variable with value "3th Year" , Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Student
{
    final String Year="3th Year";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: "+Year);
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when NumberFormatException occur in try block and handled in catch block
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      Scanner sc=new Scanner(System.in);
       try
        {
           String str=sc.nextLine();
           int a=Integer.parseInt(str);
           System.out.println("Result:" +a);
        }
         
        catch(NumberFormatException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a main() for the class named 'Test' to access class 'date' and display in-date of an employee(Time be in format Day:month:year).get the input from user
public class Test{
    public static void main(String[] args)
    {//Write your code here
        Clock obj = new Clock();
        obj.hours = 18;
        obj.mins = 30;
        obj.sec = 15;
        System.out.println(obj.hours+":"+obj.mins+":"+obj.sec);
    }
}
##
Write a java program left shift the given number upto given times.
public class Mark{
    double m1,m2,m3,tot,per;
    public static void main(String args[]){
        Mark obj = new Mark();
        obj.m1 = 65.5;
        obj.m2 = 51.5;
        obj.m3 = 72.0;
        obj.tot = (obj.m1+obj.m2+obj.m3);
        obj.per = obj.tot / 3;
        System.out.println("Total Mark="+obj.tot+" "+"Percentage="+obj.per+"%");
    }
}
##
Write a java program to perform multiple catch using multiple Exception(Rule:1.Get array Index value as Input.( Index Value <5)2.If the array Index value is less than 5 then print as "Valid Statement :  0"3.If the Index value >5 then print " IndexOutOfBoundsException : java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5"4.If the Index value as String then print "NumberFormatException : java.lang.NumberFormatException: For input string: "string"
import java.util.*;
class ListOfNumbers {
    public int[] arr = new int[5];
    void writeList()
    {
        Scanner sc=new Scanner(System.in);
        try
        {
            //Write the code for try block
            int n=Integer.parseInt(sc.nextLine());
            System.out.println("Valid Statement :" +arr[n]);
            
        }
        catch (NumberFormatException e1)
        {
            System.out.println("NumberFormatException : " + e1);
        }
        catch (IndexOutOfBoundsException e2)
        {
            System.out.println("IndexOutOfBoundsException : " + e2);
        }
    }
}
public class Main {
  public static void main(String[] args) {
    ListOfNumbers list = new ListOfNumbers();
    list.writeList();
  }
}
##
Write a Java Program for handling ArrayIndexOutOfBounds ExceptionNote: 1. Get Index value n as input from the user and assign value as 72.Size of the array =10
import java.util.*;
public class Example1
{
   public static void main(String args[])
   {
       Scanner sc = new Scanner(System.in);
       int n=sc.nextInt();
       try
       {
            int a[]=new int[10];
            a[n]=7;
            System.out.println("Value: "+a[n]);
       }
       catch(ArrayIndexOutOfBoundsException e1)
      {
          System.out.println("ArrayIndexOutOfBounds");
      }
   }
}
##
Write a java program to implement compile time polymorphism.(Use single argument for displaying 5 and * as 10 times)
class Pattern {
    public void display()
    {
        for (int i = 0; i < 10; i++) 
        {
            System.out.print("5");
        }
    }
    public void display(char symbol)
    {
        for (int i = 0; i < 10; i++)
        {
            System.out.print(symbol);
        }
    }
}
public class HelloWorld{

    public static void main(String []args)
    {
        Pattern d1 = new Pattern();
        d1.display();
        System.out.println("\n");
        d1.display('#');
    }
}
##
Write a Java Program for run time polymorphism by creating a class named Shape that contains a empty method named print Area().Provide two classes named Rectangle and triangle such that each one of the classes extends the class Shape. Each one of the classes contains only the method print Area () that prints the area of the given shapeNote: Get Input from the User and pass as arguments for Area() Function
import java.util.*;
class Shape
{
    void draw(int a,int b){ }  
}  
class Rectangle extends Shape
{  
    void draw(int a,int b)
    {
        int area=(a*b);
        System.out.println("Area of Rectangle:" +area);}  
    }  
class Triangle extends Shape
{
    void draw(int a,int b)
    {
        int area=(a*b)/2;
        System.out.println("Area of Triangle:" +area);}  
    }  
public class Main
{
	public static void main(String[] args) 
	{
        Shape s;  
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        
        s=new Rectangle();  
        s.draw(a,b);  
        
        s=new Triangle();  
        s.draw(a,b);  
    }
}
##
Write a java program to handle nested try Statement .Note:1, In Outer try block -perform Arithmetic Exception -print message as "Arithmetic exception " .Get Input Value for the Integer a & b from the User.2. In Inner try block -perform Nullpointer  Exception- . Assign String variable as null
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        try
        {
            int a =sc.nextInt();
            int b=sc.nextInt();
            int c=a/b;
            System.out.println("Result:" +c);
            try
            {
                String str=null;
                System.out.println("Innerblock :" +str.length());
            }
            catch(NullPointerException ex1)
            {
                System.out.println("NullPointerException");
            }
        }
        catch (ArithmeticException ex2)
        {
            System.out.println("Sorry! Number not divisible by zero");
        }
    }
}
##
Write a java program for run time polymorphism. Consider a scenario where Bank is a class that provides a method to get the rate of interest. However, the rate of interest may differ according to banks. For example, SBI, ICICI, and AXIS banks are providing 8.4%, 7.3%, and 9.7% rate of interest.Note: Bank act as a base class, SBI, ICICI, and AXIS act as a Derived Class .Get Person name and Age as Input from the User
import java.util.*;
class Bank{  
float getRateOfInterest(){return 0;}  
}  
class SBI extends Bank{  
float getRateOfInterest(){return 8.4f;}  
}  
class ICICI extends Bank{  
float getRateOfInterest(){return 7.3f;}  
}  
class AXIS extends Bank{  
float getRateOfInterest(){return 9.7f;}  
}  
public class TestPolymorphism{  
public static void main(String args[]){  
Bank b;  
Scanner sc=new Scanner(System.in);
String name=sc.nextLine();
int age=sc.nextInt();
b=new SBI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("SBI Rate of Interest: "+b.getRateOfInterest());  
b=new ICICI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("ICICI Rate of Interest: "+b.getRateOfInterest());  
b=new AXIS();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("AXIS Rate of Interest: "+b.getRateOfInterest());  
}  
} 
##
Write a Java program for solving the error using Exception HandlingRules:1.Get array Index value as input2. If the index value less than 4 then print the value  else print "Array value should be less than 4"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
         
        try  
        {  
        int arr[]= {1,3,5,7};  
        int n=sc.nextInt();
        System.out.println(arr[n]); //may throw exception   
        }  
            // handling the array exception  
        catch(ArrayIndexOutOfBoundsException e)  
        {  
            System.out.println("Array value should be less than 4");  
        }  
        
          
    }
}
##
Write a java program to add two numbers using Method Overloading(Compile time polymorphism)(Note: Use integer and double data type)
import java.util.*;

public class HelloWorld{

        void sum(int a,int b){
    System.out.println(a+b);
   }
  void sum(double a,double b){
    System.out.println(a+b);
  }

  public static void main(String []args)
    {
  HelloWorld obj=new HelloWorld();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();
  double c=sc.nextDouble();
  double d=sc.nextDouble();
  obj.sum(a,b);
  obj.sum(c,d);
     }
}
##
Write a java program to handle nested try Statement .Note:1, In Outer try block -perform Arithmetic Exception -print message as "Sorry! Division by zero isn't feasible!"2. In Inner try block -perform Nullpointer  Exception- set String value as "null"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class HelloWorld {
    public static void main(String[] args) 
    {
     Scanner sc=new Scanner(System.in);
      try {
        
         int res=100/n;
         // another try block
         try {
               String str=null;
               //write the remaining code
             }
        catch(NullPointerException ex1) 
        {
         System.out.println("NullPointerException");
        }
      }
      catch (ArithmeticException ex2) 
      {
            System.out.println("Sorry! Division by zero isn't feasible!");
     }
   }
}
##
Write a java program to demonstrate multiple catch blocks for multiple exceptionsRule:1.Get the variable "a" as integer input and perform the operation as 10%a2.If  a is not equal to 0 then print value of a and  If a is equal to 0 then print "Arithmetic Exception : java.lang.ArithmeticException: / by zero"3.If a as String variable then print "Number Format Exception java.lang.NumberFormatException: For input string: "java"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner scn = new Scanner(System.in);
        try
        {
            int n = Integer.parseInt(scn.nextLine());
           
            if (10%n == 0)
                System.out.println("Value: " +n);
        }
        catch (ArithmeticException ex)
        {
            System.out.println("Arithmetic Exception : " +ex);
        }
        catch (NumberFormatException ex)
        {
            System.out.println("Number Format Exception " + ex);
        }
    }
}
##
Write a java program to implement compile time polymorphism.(Use single argument for displaying integer and double values as 10 times)Note : Get Integer and Double values from the User
import java.util.*;
class Pattern {

  // method without parameter
  public void display(int a) {
    for (int i = 0; i < 10; i++) {
      System.out.print(a);
    }
  }

  // method with single parameter
  public void display(double b) {
    for (int i = 0; i < 10; i++) {
      System.out.print(b);
    }
  }
}
public class HelloWorld{

     public static void main(String []args)
     {
        Pattern d1 = new Pattern();
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        double f=sc.nextDouble();

    // call method without any argument
    d1.display(a);
    System.out.println("\n");

    // call method with a single argument
    d1.display(f);
     }
}
##
Write a Java Program for handling division by zero exception.Note: Get num1 & num2 as integer input variable from the user.
import java.util.*;
public class Example1
{
   public static void main(String args[])
   {
      Scanner sc=new Scanner(System.in);
      try{
         int num1=sc.nextInt();
         int num2=sc.nextInt();
         int output=num1/num2;
         System.out.println ("Result: "+output);
      }
      catch(ArithmeticException e){
         System.out.println ("You Shouldn't divide a number by zero");
      }
   }
}
##
Write a java program for run time polymorphism.Consider a scenario method showcase() is displaying different messages depending on which type of object it is associated with. When it is associated with the “Parents”  class, it is showing messages as "I am Parent". When it is associated with the “Children” type, it shows messages as "I am Child".
class Parents {
public void showcase () {
System.out.println("I am Parent");
}
}
class Children extends Parents {
@Override
public void showcase () {
System.out.println("I am Child");
}
}
public class RunTimePolymorphism {
public static void main(String args[]) {
Parents superObject = new Parents();
superObject.showcase(); //method of super class or parent class is called
Parents subObject = new Children(); // upcasting
subObject.showcase();//method of sub class or child class is called by Parent reference, this is called "Run time Polymorphism"

}
}
##
Write a java program to handle nested try Statement .Note:1, In Outer try block -perform NumberFormatException -print message as "Sorry! String Value can not convert to Integer" .Get String Input Value from the User.2. In Inner try block -perform Nullpointer  Exception- . Assign String variable as null
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
     Scanner sc=new Scanner(System.in);
      try {
         String str1=sc.nextLine();
           int a=Integer.parseInt(str1);
           System.out.println("Result:" +a);
         // another try block
         try {
               String str=null;
               System.out.println("Innerblock :" +str.length());
         }
        catch(NullPointerException ex1) {
         System.out.println("NullPointerException");
      }
      }
      
      
       catch (NumberFormatException ex2) {
            System.out.println("Sorry! String Value can not convert to Integer");
         }
   }
}
##
Write a java program to perform ArrayIndexOutOfBounds Exception  using  Multiple CatchRules:(i) Use atleast 3 catch(ii) Get Array index value from the User
import java.util.*;
public class MultipleCatchBlock3 {

	public static void main(String[] args) {
		
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		   try{  
			    int a[]=new int[5];  
			     
			     System.out.println("Value:" +a[n]);
			   }  
			   catch(ArithmeticException e)
		          {
				   System.out.println("Arithmetic Exception occurs");
				  }  
			   catch(ArrayIndexOutOfBoundsException e)
		          {
				   System.out.println("ArrayIndexOutOfBounds Exception occurs");
				  }  
			   catch(Exception e)
		          {
				   System.out.println("Parent Exception occurs");
				  }  		  
			   System.out.println("rest of the code");  
	}
}
##
Write a Java program for solving the error using Exception HandlingNote: Read the input from the User
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
           try
           {
               int a=sc.nextInt();
             int b=sc.nextInt();
             int c=a/b;
             System.out.println("Result: " +c); 
           }
               catch(ArithmeticException e)  
        {  
            System.out.println("Arithmetic Exception: Number should not divide by zero");  
        }  
    }
}
##
Write a java program to perform ArrayIndexOutOfBounds Exception  using  Multiple CatchRules:(i) Use atleast 3 catch
public class MultipleCatchBlock3 {

	public static void main(String[] args) {
		
		   try{  
			    int a[]=new int[5];  
			     
			    System.out.println(a[10]);
			   }  
			   catch(ArithmeticException e)
		          {
				   System.out.println("Arithmetic Exception occurs");
				  }  
			   catch(ArrayIndexOutOfBoundsException e)
		          {
				   System.out.println("ArrayIndexOutOfBounds Exception occurs");
				  }  
			   catch(Exception e)
		          {
				   System.out.println("Parent Exception occurs");
				  }  		  
			   System.out.println("rest of the code");  
	}
}
##
Write a java Program for run time polymorphism in multilevel inheritance. In this example, we have taken two levels of inheritance into account. The method sip() is displaying different messages depending on which type of object it is associated with.Note: Create Human as Parent class ,Man as child class for Human ,Baby as child class for Man class
class Human{
void sip() {
System.out.println("Human is sipping");
}
}
class Man extends Human{
void sip(){
System.out.println("Man is sipping soup");
}
}
class Baby extends Man{
void sip(){
System.out.println("Baby is sipping milk");
}
}
public class RunTimePolymorphism {
public static void main(String args[]){
Human superObject=new Human();
Human subObject=new Man();  // // upcasting : first level of heritance
Human babyObject=new Baby();  // // upcasting : second level of heritance
superObject.sip();
subObject.sip();  //run time polymorphism happening in first level of heritance
babyObject.sip(); //run time polymorphism happening in second level of heritance
}
}
##
Write a java program to handle nested try Statement .Note:1. In Outer try block -perform ArrayIndexOutofBounds Exception- Get Index value index_value as Input from the user2, In Inner try block -perform Arithmetic Exception -print message as "Sorry! Division by zero isn't feasible!"3.If the index_value is in between 1 to 5 then print "Valid Statement : 0"
import java.util.*;
class Exception2 
{
   public static void main(String args[])
   {
     Scanner sc=new Scanner(System.in);
      try {
         int a[]=new int[5];
       
         int n=sc.nextInt();
          System.out.println("Valid Statement :" +a[n]);
         // another try block
         try {
                 int res = 100/ n;
         }
         catch (ArithmeticException ex2) {
            System.out.println("Sorry! Division by zero isn't feasible!");
         }
      }
      catch (ArrayIndexOutOfBoundsException ex1) {
         System.out.println("ArrayIndexOutOfBoundsException");
      }
   }
}
##
Write a java program to perform sum of two numbers and three numbers using Method Overloading(Compile time polymorphism)
import java.util.*;
class Calculation{
  
 void sum(int a,int b)
  {
     System.out.println(a+b);
  }
  void sum(int a,int b,int c){
     System.out.println(a+b+c);
   }
  
}


public class HelloWorld{

     public static void main(String []args)
     {
       
  Calculation obj=new Calculation();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();
  int c=sc.nextInt();
  obj.sum(a,b);
  obj.sum(a,b,c);
}
}
##
Write a java program to handle nested try statement for the following Scenario1.In the Outer try block, initialize array variable "str" and assign value as {30, 45, 60, 75, 90, 105, 120, 140, 160, 200}; and get the index value from the user, print the element according to the index value2. In the Inner try block perform "Arithmetic Exception"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
       Scanner sc=new Scanner(System.in);
          try {
         int a[] = {30, 45, 60, 75, 90, 105, 120, 140, 160, 200};
         // displaying element at index 8
         int n=sc.nextInt();
         System.out.println("Element at index "+n+" = " +a[n]);
         // another try block
         try {
            System.out.println("Division");
            int res = 100/ 0;
         }
         catch (ArithmeticException ex2) {
            System.out.println("Sorry! Division by zero isn't feasible!");
         }
      }
      catch (ArrayIndexOutOfBoundsException ex1) {
         System.out.println("ArrayIndexOutOfBoundsException");
      }
   }
}
##
Write a Java program for run time polymorphism by creating two classes Bike and Scooter. Scooter class extends Bike class and overrides its run() methodNote:Bike as Parent Class and Scooter as Child Class. Get Company name from the User
import java.util.*;
class Bike{  
  void run(String name)
  {
      System.out.println("Company Name: "+name);
      System.out.println("Bike class");}  
}  
class Scooter extends Bike{  
  void run(String name)
  {
      System.out.println("Company Name: "+name);
      System.out.println("Scooter class");}  
}
public class Main
{
  
  public static void main(String args[])
  {  
    Bike b = new Scooter();//upcasting  
    Scanner sc=new Scanner(System.in);
    String name=sc.nextLine();
    b.run(name);  
  }  
} 
##
Write a Java Program for NullPointerExceptionNote: Assign String variable value as null
public class Exception2 
{
   public static void main(String args[])
   {
	try{
		String str=null;
		System.out.println (str.length());
	}
        catch(NullPointerException e){
		System.out.println("NullPointerException..");
	}
   }
}
##
Write a java Program to display the arguments using method overloading.Note: Use 2 Methods. Method1 -display the Integer values Method2 -Display the Double values
import java.util.*;
class ClassMain{
	
	void disp(int number1, int number2){
		System.out.println ("Arguments:" + number1 + "," + number2);
	}
void disp(double number) {
		System.out.println("\nArgument:" + number);
	
	}
}
public class HelloWorld{

     public static void main(String []args)
     {
       
  ClassMain obj=new ClassMain();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();

Double d=sc.nextDouble();
 
  obj.disp(a,b);
  obj.disp(d);
}
}
##
Write a java program for solving the following errorRules:1.Use atleast 3 Catch statement2.Assign the String variable as null
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

public class HelloWorld {
    public static void main(String[] args)
    {
         try{    
                String s=null;  
                System.out.println(s.length());  
               }    
               catch(ArithmeticException e)  
                  {  
                   System.out.println("Arithmetic Exception occurs");  
                  }    
               catch(ArrayIndexOutOfBoundsException e)  
                  {  
                   System.out.println("ArrayIndexOutOfBounds Exception occurs");  
                  }    
               catch(NullPointerException e)  
                  {  
                   System.out.println("Exception: " +e);  
                  }             
               //System.out.println("rest of the code");    
    }
}
##
Write a java program for solving the following errorRules:1.Use atleast 3 Catch statement2.Assign the String variable as null
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
public class HelloWorld {
    public static void main(String[] args)
    {
         try{    
                String s=null;  
                System.out.println(s.length());  
               }    
               catch(ArithmeticException e)  
                  {  
                   System.out.println("Arithmetic Exception occurs");  
                  }    
               catch(ArrayIndexOutOfBoundsException e)  
                  {  
                   System.out.println("ArrayIndexOutOfBounds Exception occurs");  
                  }    
               catch(NullPointerException e)  
                  {  
                   System.out.println("Exception: " +e);  
                  }             
               //System.out.println("rest of the code");    
    }
}
##
Write a Java program for solving the error using Exception HandlingRules:1.Get array Index value as input2. If the index value less than 4 then print the value  else print "Array value should be less than 4"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
         
        try  
        {  
        int arr[]= {1,3,5,7};  
        int n=sc.nextInt();
        System.out.println(arr[n]); //may throw exception   
        }  
            // handling the array exception  
        catch(ArrayIndexOutOfBoundsException e)  
        {  
            System.out.println("Array value should be less than 4");  
        }      
    }
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when ArithmeticException occur in try block and handled in catch blockRule: Get dividend value from the user
import java.util.*;
public class A
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        try
        {
            int a=100;
            int b=sc.nextInt();
            int c=a/b;
            System.out.println("Valid Statement :"+c);
        }
        catch(ArithmeticException e)
        {
            System.out.println("Exception: "+e);
        }
        finally
        {
            System.out.println("Finally block executed");
        }
        System.out.println("Outside try-catch-finally clause");
    } 
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes integer age value as a parameter. If the age is less than 18, we are throwing the ArithmeticException as "Person is not eligible for Opening Bank Account"    otherwise print a message as "Person is eligible to Open Bank Account!!"
import java.util.Scanner;
public class HelloWorld {
    static void validate(int age)  
    {
        try
        {
            if (age<18)
                throw new ArithmeticException("Person is not eligible for Opening Bank Account");
            else
                System.out.println("Person is eligible to Open Bank Account!!");
        }
        catch (Exception e1)
        {
            System.out.println(e1);
        }
    } 
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        validate(sc.nextInt());
    }    
}
##
Write a Java Program to perform Arithmetic Exception for voting purpose using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
    static void checkAge(Double age) 
    {
        if(age<18)
            throw new ArithmeticException("Access denied - You must be at least 18 years old.");
        else
            System.out.println("Access granted - You are old enough!");
}
  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
         checkAge(n);
      }
      catch(ArithmeticException e)
      {
          System.out.println("Exception : "+e);
      }
  }
}
##
Write a Java Program to perform NullPointerException using throws .Note: Get String value as input from the user. Calculate the length of the string for user input .If the user entered null character then print the "Exception : java.lang.NullPointerException: Enter some value for the String "else print the statement as "String Length:" 
import java.util.*;
public class Main {
    static void fun(String str) throws NullPointerException
    {
        int n=str.length();
        if (n=='\0')
        {
            throw new NullPointerException("Enter some value for the String");
        }
        else
        {
            System.out.println("String Length : "+n);
        }
    }
    public static void main(String[] args) 
    { 
        Scanner sc=new Scanner(System.in); 
        String str=sc.nextLine();
        try
        {
            fun(str);
        }
        catch(NullPointerException e)
        {
            System.out.println("Exception : "  +e);
        }
    }
}
##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with value "HCL" , Get as input from the user for id,designation and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class staffDetails
{
    final String companyname="HCL";
    String name;
    int Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.next();
        Id=sc.nextInt();
        //des=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
    public static void main(String[] args)
    {
        staffDetails obj=new staffDetails();
        obj.get();
        obj.print();
    }
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when ArrayIndexOutOfBoundsException occur in try block and handled in catch block
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      // array of size 4.
        int[] arr = new int[4];
         
        try
        {
            int i = arr[4];
                 
            // this statement will never execute
            // as exception is raised by above statement
            System.out.println("Inside try block");
        }
         
        catch(ArrayIndexOutOfBoundsException ex)
        {
            System.out.println("Exception caught in catch block");
        }
         
        finally
        {
            System.out.println("finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes String  value as a parameter. If the String length ='\0' , we are throwing the NullPointerException as "Enter some value for the String"    otherwise print a message as "String Length :  "Note: String value as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(String str) 
        {  
            int n=str.length();
            try
            {
            if (n=='\0')
             {  
                 throw new NullPointerException("Enter some value for the String");
             }
        else {
            System.out.println("String Length : "+n);
            }
            }  
            
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            String str=sc.nextLine();
            validate(str);  
                
      }    
    }      
##
Write a Java program for performing exception using throwsNote: Consider a scenario.In Main function use try -catch method  and get the integer input value from the user and print the variable value using throw keyword
import java.util.*;

public class ThrowsExecp {
 
    // This method throws an exception
    // to be handled
    // by caller or caller
    // of caller and so on.
    static void fun() throws IllegalAccessException
    {
        Scanner in=new Scanner(System.in);
        int a=in.nextInt();
        System.out.println("Inside function. ");
        throw new IllegalAccessException(" Entered Input value as:    " +a);
    }
 
    // This is a caller function
    public static void main(String args[])
    {
        try {
            fun();
        }
        catch (IllegalAccessException e) {
            System.out.println("caught in main." +e);
        }
    }
}
##
Write a Java Program to perform ArrayIndexOutOfBoundsException using throws .Note: Consider the size of the array should not exceed 5 .Get Size value from the user. If the value exceed 5 then print " Exception : java.lang.ArrayIndexOutOfBoundsException: Size of the array Should not exceed 5" else print the statement as "Size of the Array : "Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
   static void fun(int n) throws ArrayIndexOutOfBoundsException
  {
      int a[] = new int[n];
    if (n>5)
    {
        
       throw new ArrayIndexOutOfBoundsException("Size of the array Should not exceed 5");
    }
    else {
      System.out.println("Size of the Array : "+n);
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      
      try
      {
      fun(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with value "Amazon" , Get as input from the user for id,designation and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class staffDetails
{
    final String companyname="Amazon";
    String name;
    int Id;
   
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.next();
        Id=sc.nextInt();
        //des=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    staffDetails obj=new staffDetails();
    obj.get();
    obj.print();
}
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes integer age value as a parameter. If the age is less than 18, we are throwing the ArithmeticException as "Person is not eligible to vote"    otherwise print a message as "Person is eligible to vote!!"Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(int age) 
        {  
            try
            {
            if(age<18) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Person is not eligible to vote");    
            }  
            else {  
            System.out.println("Person is eligible to vote!!");  
            }  
            }
            catch(Exception e)
      {
          System.out.println(e);
      }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            int n=sc.nextInt();
            validate(n);  
                
      }    
    }      
##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Create a final class 'Company' with  Name,Id and companyname as its member, make companyname as final variable with value "HCL" , Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Company
{
    final String companyname="HCL";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.get();
    obj.print();
}
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when NullPointerException occur in try block and handled in catch block
public class HelloWorld {
    public static void main(String[] args) 
    {
      
        try
        {
           String str=null;
           System.out.println(str.length());
        }
         
        catch(NullPointerException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the checkEligibilty() method that takes integer  stuage,  and stuweight as a parameter. If the age is less than 12 and weight >40 , we are throwing the ArithmeticException as "Student is not eligible for registration"    otherwise print a message as "Student Entry is Valid!!"Note: Get the Input for age and weight from the User
import java.util.Scanner;

public class HelloWorld
{
   
       static void checkEligibilty(int stuage, int stuweight)
      { 
           try
    {
      if((stuage<12) && (stuweight<40)) 
      {
         throw new ArithmeticException("Student is not eligible for registration"); 
      }
      else if((stuweight>40) &&(stuage<12))
      {
         throw new ArithmeticException("Student is not eligible for registration"); 
        
      }
      else
      {
          System.out.println("Student Entry is Valid!!");
      }
      }
      catch(Exception e)
      {
          System.out.println(e);
      }
   } 

   public static void main(String args[])
   { 
     System.out.println("Welcome to the Registration process!!");
     Scanner sc=new Scanner(System.in);
     int stuage=sc.nextInt();
     int stuweight=sc.nextInt();
     checkEligibilty(stuage,stuweight); 
     System.out.println("Have a nice day.."); 
 } 
}
##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Write a Java Program to perform NullPointerException using throws .Note: Get String value as input from the user. Calculate the length of the string for user input .If the user entered null character then print the "Exception : java.lang.NullPointerException: Enter some value for the String "else print the statement as "String Length:" 
import java.util.*;
public class Main 
{
    
   static void fun(String str) throws NullPointerException
  {
      int n=str.length();
     
    if (n=='\0')
    {
        
       throw new NullPointerException("Enter some value for the String");
    }
    else {
      System.out.println("String Length : "+n);
    }
  }

  public static void main(String[] args) 
  { 
     Scanner sc=new Scanner(System.in); 
     String str=sc.nextLine();
      try
      {
      fun(str);
      }
      catch(NullPointerException e)
      {
          System.out.println("Exception : "  +e);
      }
     
  }
}
##
Create a final class 'Student' with  Name,Id and Year as its member, make  Year as final variable with value "3th Year" , Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Student
{
    final String Year="3th Year";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: "+Year);
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when NumberFormatException occur in try block and handled in catch block
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      Scanner sc=new Scanner(System.in);
       try
        {
           String str=sc.nextLine();
           int a=Integer.parseInt(str);
           System.out.println("Result:" +a);
        }
         
        catch(NumberFormatException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes double age value as a parameter. If the age is less than 3.5, we are throwing the ArithmeticException as "Child is not eligible for KinderGarden"    otherwise print a message as "Child is eligible for KinderGarden!!"Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(double age) 
        {  
            try
            {
            if(age<3.5) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Child is not eligible for KinderGarden");    
            }  
            else {  
            System.out.println("Child is eligible for KinderGarden!!");  
            }  
            }
            catch(Exception e)
      {
          System.out.println(e);
      }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            double n=sc.nextDouble();
            validate(n);  
                
      }    
    }      
##
Create a final class 'Student' with  Name,Id and Year,Schoolname  as its member, make  Year and School name as final variable with value "3th Year" & "ABC School", Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Student
{
    final String Year="3th Year";
    final String schoolname="ABC School";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: "+Year+"\nSchool: " +schoolname);
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}
##
Write a Java program to count the vowels and consonant in the given string by calling run methodNote: Get the value from the User
import java.util.*;
public class Multi implements Runnable
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String str = sc.nextLine();  
        int vCount = 0, cCount = 0;    
        
        str = str.toLowerCase();    
        
        for(int i = 0; i < str.length(); i++)
        {
            if(str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') 
            {    
                vCount++;    
            }    
            else if(str.charAt(i) >= 'a' && str.charAt(i)<='z')
            {      
                cCount++;    
            }    
        }    
        System.out.println("Number of vowels: " + vCount);    
        System.out.println("Number of consonants: " + cCount);   
    }  
    public static void main(String args[])
    {  
        Multi m1=new Multi(); 
        Thread t1 =new Thread(m1); 
        t1.run();  
    }  
}
##
Write a java program for set the priority and name of the current thread.Note : Read the threadname from the UserRead the priority value from the User
import java.util.*;
public class A implements Runnable
{
    public void run()
    {
        System.out.println(Thread.currentThread()); 
    }
    public static void main(String[] args) 
    {
        A a = new A();
        Scanner sc=new Scanner(System.in);
        String thname=sc.nextLine();
        int pri=sc.nextInt();
        Thread t = new Thread(a, thname);
        t.setPriority(pri);
        System.out.println("Priority of Thread: " +t.getPriority());
        System.out.println("Name of Thread: " +t.getName());
        t.start();
    }
}
##
Write a Java program to create Thread using extends In run method get the Patient details as patient name and patient Id as String variable from the user and print the value in Output screen
import java.util.*;
public class Multi extends Thread
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Patient Name: " +sname);  
        System.out.println("Patient ID: " +rollno);  
    }  
    public static void main(String args[])
    {
        Multi t1=new Multi();  
        t1.start();  
    }  
}
##
Write a Java program to create Thread using extends In run method get the student name and roll number from the user and print the value
import java.util.*;
public class Multi extends Thread
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Student Name: " +sname);  
        System.out.println("Roll No: " +rollno);  
    }  
    public static void main(String args[])
    {
        Multi t1=new Multi();  
        t1.start();  
    }  
}
##
Write a Java program to perform whether the given number is Positive or Negative ,zero by creating Thread using Runnable Interface.Note: Get the value from the User
import java.util.*;
public class Multi implements Runnable
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        int num=sc.nextInt();
        if(num>0)  
        {  
            System.out.println("The number is positive.");  
        }
        else if(num<0)  
        {  
            System.out.println("The number is negative.");  
        }
        else  
        {  
            System.out.println("The number is zero.");  
        }
    }
    public static void main(String args[])
    {  
        Multi m1=new Multi(); 
        Thread t1 =new Thread(m1); 
        t1.run();  
    }  
}
##
Write a Java program to perform whether the given number is palindrome or not by creating Thread using Runnable Interface.Note: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int number=sc.nextInt();
        int remainder=0,reverse=0,temp;
        temp=number;
       while(number != 0)   
        {  
         remainder = number % 10;  
        reverse = reverse * 10 + remainder;  
        number = number/10;  
        }  
        if(temp==reverse)
        {
        System.out.println("The number " +temp+" is Palindrome");  
        }
        else
        {
              System.out.println("The number " +temp+" is not a Palindrome");  
        }
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using extendsNote: Get Thread integer number  from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int count=sc.nextInt();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Consider two threads t1 and t2Note : Read the threadname from the UserRead the priority value from the user for both the threads
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String first=sc.nextLine();
 String second=sc.nextLine();
 Thread t1 = new Thread(a, first);
 Thread t2 = new Thread(a, second);
 
 int t1pr=sc.nextInt();
 int t2pr=sc.nextInt();
 t1.setPriority(t1pr); // Setting the priority of first thread.
 t2.setPriority(t2pr); // Setting the priority of second thread.
 
 
 t1.start();
 t2.start();
 
  }
}
##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.Note: Get Thread integer number  from the User
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to perform whether the given number is palindrome or not by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int number=sc.nextInt();
        int remainder=0,reverse=0,temp;
        temp=number;
       while(number != 0)   
        {  
         remainder = number % 10;  
        reverse = reverse * 10 + remainder;  
        number = number/10;  
        }  
        if(temp==reverse)
        {
        System.out.println("The number " +temp+" is Palindrome");  
        }
        else
        {
              System.out.println("The number " +temp+" is not a Palindrome");  
        }
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a Java program to add two numbers by creating Thread using Runnable Interface.Note: Get the value of int first and second variable as Input from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int a=sc.nextInt();
        int b=sc.nextInt();
        int sum=a+b;
        System.out.println("Result: " +sum);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a Java program to count the number of characters in the given string by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String string = sc.nextLine();    
        int count = 0;    
        //Counts each character except space    
        for(int i = 0; i < string.length(); i++)
        {    
            if(string.charAt(i) != ' ')    
                count++;    
        }    
        //Displays the total number of characters present in the given string    
        System.out.println("Total number of characters in a string: " + count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Consider two threads t1 and t2Note : Read the threadname from the Userset the priority as 4 for t1 and set the priority as 2 for t2
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String first=sc.nextLine();
 String second=sc.nextLine();
 Thread t1 = new Thread(a, first);
 Thread t2 = new Thread(a, second);
 
 
 t1.setPriority(4); // Setting the priority of first thread.
 t2.setPriority(2); // Setting the priority of second thread.
 
 
 t1.start();
 t2.start();
 
  }
}
##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.Note: Get Thread integer number  from the User
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using extendsNote: Get User name from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using Implements Runnable  .In run method get student name & rollno as input from the user and print inside the function
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi();  
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a java program for determine the priority and name of the current thread.Note : Read the threadname from the User
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}
##
Write a Java program to create Thread using extendsNote: Get Thread integer number  from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int count=sc.nextInt();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to perform whether the given number is Positive or Negative ,zero by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int num=sc.nextInt();
       if(num>0)  
{  
System.out.println("The number is positive.");  
}  
//checks the number is less than 0 or not  
else if(num<0)  
{  
System.out.println("The number is negative.");  
}  
//executes when the above two conditions return false  
else  
{  
System.out.println("The number is zero.");  
}  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Note : Read the threadname from the UserSet the Priority as 2.
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 t.setPriority(2); // Setting the priority of thread.
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}
##
Write a Java program to create Thread and call the thread  using run methodNote: Get User name from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.run();  
     }  
    }  
##
Write a Java program to create Thread using Runnable InterfaceNote: Get double value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        double count=sc.nextDouble();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    } 
##
Write a Java Program to perform cube value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void cube method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    void cube(int n)
    {
        synchronized(this)
        {
            int temp = 1;
            for(int i=1;i<=n;i++)
            { 
                int j=i;
                System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
                try
                {  
                    Thread.sleep(400);  
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            }  
        }
    }  
}
##
Write a Java Program to perform multiplication table  for 5 & 100 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void printTable() in that perform multiplication table2. Create a Two threads "MyThread1" and "MyThread2"  with a member function void run() to call ThreadIn main() access all function using its corresponding Object.
class Table
{  
    synchronized void printTable(int n)
    {
        for(int i=1;i<=5;i++)
        {
            System.out.println(n*i);  
            try
            {  
                Thread.sleep(400);  
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
    }
}
class MyThread1 extends Thread
{
    Table t;  
    MyThread1(Table t)
    {
        this.t=t;  
    }  
    public void run()
    {  
        t.printTable(5);  
    }
}
class MyThread2 extends Thread
{  
    Table t;  
    MyThread2(Table t)
    {
        this.t=t;  
    }  
    public void run()
    {  
        t.printTable(100);  
    }  
}
public class HelloWorld
{
    public static void main(String args[])
    {
        Table obj = new Table();
        MyThread1 t1=new MyThread1(obj);  
        MyThread2 t2=new MyThread2(obj);  
        
        t1.start();  
        t2.start();  
    }  
}
##
Write a Java Program to perform factorial  value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void factorial method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    static synchronized void factorial(int n)
    { 
        int fact=1;
        if (n == 0)    
            fact=1;    
        else  
        {
            for(int i=1;i<=n;i++)
            fact=fact*i;    
        }   
        System.out.println("Factorial for a number " +n+ " :" + fact);
        try
        {  
            Thread.sleep(400);  
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
   }  
}
##
Write a Java Program to display Even number up to the range using Synchronization block for the below Scenario1. Create a Class Table with void Even method in that create Synchronization blockNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
import java.util.*;
class Table
{
    public static synchronized void Even(int n)
    {
        System.out.print("List of Even numbers for "+n+" : ");
        for(int i=1;i<=n;i++)
        {
            if(i%2==0)
            {
                System.out.print(i+" ");
            }
        }
        System.out.println();
        try
        {
            Thread.sleep(400);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
}
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario1. Create a Class Table with void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    void printTable(int n)
    {
        synchronized(this)
        {
            for(int i=1;i<=10;i++)
            {  
                System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                try
                { 
                    Thread.sleep(400);  
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            }
        }
    }  
}
##
Write a Java Program to perform cube value using Synchronization block for the below Scenario1. Create a Class Table with void cube method in that create Synchronization block perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
 class Table
  {
    void cube(int n)
     {
      synchronized(this)
      {
          int temp = 1;
         for(int i=1;i<=n;i++)
         { 
             int j=i;
         System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
         try
         {  
          Thread.sleep(400);  
         }
         catch(Exception e){System.out.println(e);}  
         }  
      }
   }  
  }
##
Write a Java Program to perform cube value using synchronization  method concept  for the below Scenario1. In a Class Table create a synchronized void cube method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
 class Table
  {
   synchronized void cube(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
##
Write a Java Program to perform static synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform Fibonacci series for static synchronization method for the below Scenario1. In a Class Table create a static synchronized void Fibonacci method in that perform Fibonacci OperationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
   static synchronized void fibonacci(int n)
   {
       int  firstTerm = 0, secondTerm = 1;
    System.out.print("Fibonacci Series for " + n + " value:");

    for (int i = 1; i <= n; ++i) {
      System.out.print(firstTerm + ", ");
      // compute the next term
      int nextTerm = firstTerm + secondTerm;
      firstTerm = secondTerm;
      secondTerm = nextTerm; 
    }
    System.out.println(" ");
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
   } 
   
  }
##
Write a Java Program to display odd numbers using Synchronization block for the below Scenario1. Create a Class Table with void odd method in that create synchronization blockNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    void odd(int n)
    {
      synchronized(this)
     {//synchronized block  
     
       int i=1;
     System.out.print("List of odd numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
     
     
     }
   }  
  }
##
Write a Java Program to perform square value using Synchronization block for the below Scenario1. Create a Class Table with void square method in that create Synchronization block perform square operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    void square(int n)
    {
      synchronized(this)
     {//synchronized block  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("square for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
     }
   }  
  }
##
Write a Java Program to display Even number up to the range using static Synchronization block for the below Scenario1. In a Class Table  create a function for displaying Even number up to the range with static synchronization block using void even (int n) functionNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    synchronized static void Even(int n)
    {
      
      int i=2;
     System.out.print("List of Even numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
   }  
  }
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario1. Create a Class Table with void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
    {  
     
     void printTable(int n){
         synchronized(this)
         {
               for(int i=1;i<=10;i++){  
                 System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                 try{  
                  Thread.sleep(400);  
                 }catch(Exception e){System.out.println(e);}  
               } 
         }
      
     }  
    }  
##
Write a Java Program to perform static synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  //example of java synchronized method  
    class Table
    {  
     synchronized void printTable(int n){//synchronized method  
       for(int i=1;i<=10;i++){  
         System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
         try{  
          Thread.sleep(400);  
         }catch(Exception e){System.out.println(e);}  
       }  
      
     }  
    }  
##
Write a Java Program to perform Power table 2 &  8 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void power method in that perform power table  Note :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
   synchronized void power(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=5;i++)
     { 
     System.out.println("value of " +n+ " :" + n*temp);
     temp = n*temp;
     try
     {  
      Thread.sleep(500);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
##
Write a Java Program to perform Synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	public synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform factorial  value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void factorial method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
  {
   static synchronized void factorial(int n)
   {//synchronized method  
     int fact=1;
     if (n == 0)    
      fact=1;    
     else  
     {
       for(int i=1;i<=n;i++)
          fact=fact*i;    
     }   
System.out.println("Factorial for a number " +n+ " :" + fact);
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     
   }  
  }
---
import pyperclip
import time
import json
import re  


with open('data.json', 'r',encoding="utf-8") as file:
    question_answer_data = json.load(file)

# Function to clean up the text by removing excess spaces and newlines
def clean_text(text):
    # Replace multiple spaces and newlines with a single space
    return re.sub(r'\s+', ' ', text).strip()

# Function to get the answer for the given question
def get_answer(question):
    cleaned_question = clean_text(question)
    for qa in question_answer_data["data"]:
        if clean_text(qa['question']).lower() == cleaned_question.lower():
            return qa['answer']
    return "Answer not found!"

# Initialize last clipboard content and list to store answers
last_clipboard_data = ""
provided_answers = []

print("Monitoring clipboard for questions... Press Ctrl+C to stop.")

try:
    while True:
        # Step 2: Get the current clipboard data
        clipboard_data = pyperclip.paste()

        # Clean up clipboard data
        cleaned_clipboard_data = clean_text(clipboard_data)

        # Check if the clipboard data has changed and is not an answer
        if cleaned_clipboard_data and cleaned_clipboard_data != last_clipboard_data and cleaned_clipboard_data not in provided_answers:
            print(f"New question detected: {cleaned_clipboard_data}")

            # Step 3: Find the corresponding answer
            answer = get_answer(cleaned_clipboard_data)
            print(f"Answer: {answer}")
            
            # Copy answer back to clipboard
            pyperclip.copy(answer)

            # Add answer to the list of provided answers to avoid reprocessing
            provided_answers.append(answer)

            # Update the last clipboard data
            last_clipboard_data = cleaned_clipboard_data

        # Wait for 1 second before checking the clipboard again
        time.sleep(1)

except KeyboardInterrupt:
    print("\nStopped monitoring clipboard.")

---
Write a java program to display the factorial numbers using static and calling method. 

static void factorial(int num)
{
int i,f=1;
for(i=1; i<=num; i++){
f=f*i;
}
##
Write a java program for calculate cube of a number using static method.

import java.util.*;  
public class CalculateCube  
{  
static void cube()  
{  
Scanner sc= new Scanner(System.in); 
int x= sc.nextInt();  
int y=x*x*x;
System.out.println("Cube is: "+y);    
}  
public static void main(String args[])  
{  
cube();    
}  
}  
##
Write a java program for swap two numbers using static and calling method.

  public static void swapFunction(int a, int b) {
        System.out.println("In swapFunction at the begining: a = " + a + " , b = " + b);
  
        int c = a;
        a = b;
        b = c;
        System.out.println("In swapFunction at the end: a = " + a + " , b = " + b);
    }
##
write a java program to display the area of circle using calling method.

import java.util.Scanner;
public class AreaOfCircleMethod 
{
   public static void main(String[] args) 
   {
      Scanner sc = new Scanner(System.in);   
      double radius = sc.nextDouble(); 
      double area = calculateArea(radius);  
      System.out.println("Area of circle : " + area);
      sc.close();
   }
   static double calculateArea(double r)
   {
      return (22 * r * r) / 7;
   }
}
##
write a java program to find the simple interest .

import java.util.*;
public class SimpleInterestCalculator {
    public static double calculateSimpleInterest(double principal, double rate, double time) {
        return (principal * rate * time) / 100;
    }
    public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
        double principal = sc.nextDouble();
        double rate = sc.nextDouble();
        double time = sc.nextDouble();
        double simpleInterest = calculateSimpleInterest(principal, rate, time);
        System.out.println("Principal Amount: $" + principal);
        System.out.println("Interest Rate: " + rate + "%");
        System.out.println("Time Period: " + time + " years");
        System.out.println("Simple Interest: $" + simpleInterest);
    }
}
##
Write a java program to display the factorial numbers using static and calling method. 

static void factorial(int num)
{
int i,f=1;
for(i=1; i<=num; i++){
f=f*i;
}
##
write a java program for prime number using static and calling method.

static boolean checkForPrime(int inputNumber)
{
boolean isItPrime = true;

if(inputNumber <= 1) 
{
isItPrime = false;

return isItPrime;
}
else
{
for (int i = 2; i<= inputNumber/2; i++) 
{
if ((inputNumber % i) == 0)
{
isItPrime = false;

break;
}
}
return isItPrime;
}
}
##
Write a java program for palindrome using static and calling a method.


	    int sum=0,r;
	    while(num!=0)
	    {
	    r=num%10;
	    sum=(sum*10)+r;
	    num/=10;	
	    }
	return sum;
##
write a java program to display the area of circle using calling method.

import java.util.Scanner;
public class AreaOfCircleMethod 
{
   public static void main(String[] args) 
   {
      Scanner sc = new Scanner(System.in);   
      double radius = sc.nextDouble(); 
      double area = calculateArea(radius);  
      System.out.println("Area of circle : " + area);
      sc.close();
   }
   static double calculateArea(double r)
   {
      return (22 * r * r) / 7;
   }
}
##
Determine if the number is a Fibonacci static method.

import java.util.Scanner;
public class Main {
 
    public static boolean isPerfectSquare(long number) {
        long squareRoot = (long) Math.sqrt(number);
        return squareRoot * squareRoot == number;
    }
 
    public static boolean isFibonacci(long number) {
        return isPerfectSquare(5 * number * number + 4) || isPerfectSquare(5 * number * number - 4);
    }
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
 
        long n = scanner.nextLong();
 
        boolean isFibonacci = isFibonacci(n);

        if (isFibonacci) {
            System.out.println(n + " is a Fibonacci number.");
        } else {
            System.out.println(n + " is not a Fibonacci number.");
        }
        scanner.close();
    }
}
##
write a java program for factorial using static and calling method.
 
import java.util.Scanner;
public class Find_Factorial4{ 
public static void main(String args[]){ 


Scanner scan=new Scanner(System.in);
int num=scan.nextInt();
factorial(num);
}
static void factorial(int num1)
{
int i,f=1;
for(i=1;i<=num1; i++){
f=f*i;
}
System.out.print("Factorial of the "+ num1 + " " +"is "+f); 

}
}
##
Write a java program for calculate cube of a number using static method.

import java.util.*;  
public class CalculateCube  
{  
//defining a static method   
static void cube()  
{  

int x= 6;  
int y=x*x*x;
System.out.println("Cube is: "+y);    
}  
public static void main(String args[])  
{  
cube();    
}  
}  
##
Write a java program for swap two numbers using static and calling method.

import java.util.*;  
public class Swapp {
 
    public static void swapFunction(int a, int b) {
        System.out.println("In swapFunction at the begining: a = " + a + " , b = " + b);
 
        // Swap n1 with n2
        int c = a;
        a = b;
        b = c;
        System.out.println("In swapFunction at the end: a = " + a + " , b = " + b);
    }
 
    public static void main(String[] args) {
        //Scanner sc= new Scanner(System.in);
        int a= 30;  
        int b= 40;  
        System.out.println("Before swapping: a = " + a + " , b = " + b);
 
        // Invoke the swap method
        swapFunction(a, b);
        System.out.println("\n**Now, Before and After swapping values will be same here**:");
        System.out.println("After swapping: a = " + a + " , b = " + b);
    }
 
}
##
write a java program to display the area of square using calling method.

import java.util.Scanner;
public class AreaOfCircleMethod 
{
   public static void main(String[] args) 
   {
      Scanner sc = new Scanner(System.in);
      double radius = sc.nextInt();
      
      double area = calculateArea(radius);  
      System.out.println("Area of square : " + area);
      
   }
   static double calculateArea(double r)
   {
      return ( r * r);
   }
}
##
using Function to print upto N Fibonacci Number in java.

import java.util.*;  
public class GFG {
  
    // Function to print N Fibonacci Number
    static void Fibonacci(int N)
    {
        int num1 = 0, num2 = 1;
  
        int counter = 0;
  
        // Iterate till counter is N
        while (counter < N) {
  
            // Print the number
            System.out.print(num1 + " ");
  
            // Swap
            int num3 = num2 + num1;
            num1 = num2;
            num2 = num3;
            counter = counter + 1;
        }
    }
  
    // Driver Code
    public static void main(String args[])
    {
        // Given Number N
        Scanner sc = new Scanner(System.in); 
        int N= sc.nextInt();  
  
        // Function Call
        Fibonacci(N);
    }
}
##
Demonstrates the Default Access Modifier in Java and print "default" word.

class BaseClass 
{ 
    void display()      //no access modifier indicates default modifier
       { 
           System.out.println("default"); 
       } 
} 
 
public class Main
{ 
    public static void main(String args[]) 
       {   
          //access class with default scope
          BaseClass obj = new BaseClass(); 
   
          obj.display();    //access class method with default scope
       } 
}
##
Demonstrate the java program using public access modifier and print word "SoftwareTesting".

class A 
{ 
   public void display() 
      { 
          System.out.println("SoftwareTesting"); 
      } 
} 
public class Main 
{ 
    public static void main(String args[]) 
      { 
          A obj = new A (); 
          obj.display(); 
      } 
}
##
Write a Java Program to display "welcome to java" using modifiers.

public class A 
{ 
public void display() 
    { 
        System.out.println("welcome to java"); 
    } 

    public static void main(String args[])
    {
        A obj = new A();
        obj.display();
    }
}
##
Write a java program using private access modifiers and display the value even number from 0 to 20.(one by one)

import java.util.*;
public class EvenNumbers {

    // Private method to print even numbers
    private void printEvenNumbers() {
        for (int i = 0; i <= 20; i++) {
            if (i % 2 == 0) { // Check if the number is even and not zero
                System.out.println(i);
            }
        }
    }

    // Public method to start the process
    public void displayEvenNumbers() {
        printEvenNumbers(); // Calling the private method
    }

    public static void main(String[] args) {
        EvenNumbers evenNumbers = new EvenNumbers(); // Create an instance of EvenNumbers
        evenNumbers.displayEvenNumbers(); // Call the public method to display even numbers
    }
}
##

Java Program for calculate area of circle using public access specifier.

import java.util.Scanner;  
import java.lang.Math;  
public class AreaOfCircle  
{  
public static void main(String[] args)   
{  

double radius, area;    
//object of the Scanner class  
Scanner sc=new Scanner (System.in);  
  

    //System.out.print("Enter the radius of the circle: ");   
    radius=sc.nextDouble();  
    area=(Math.PI*(radius*radius));  
    System.out.print(area);   
    
}    
}    
##
Demonstrates the Default Access Modifier in Java and print square value.

class BaseClass 
{ 
    void display()      //no access modifier indicates default modifier
       { 
           int a=2;
           int s=a*a;
           System.out.println(s);
       } 
} 
 
public class Main
{ 
    public static void main(String args[]) 
       {   
          //access class with default scope
          BaseClass obj = new BaseClass(); 
   
          obj.display();    //access class method with default scope
       } 
}
##
Demonstrate the java program using public access modifier and print word "SoftwareTesting".

class A 
{ 
   public void display() 
      { 
          System.out.println("SoftwareTesting"); 
      } 
} 
public class Main 
{ 
    public static void main(String args[]) 
      { 
          A obj = new A (); 
          obj.display(); 
      } 
}
##
Write a Java Program to display "*" based on row input using protected modifiers.

import java.util.*;
class p
{
    protected void dis(int rows)
    {
        for (int i = 1; i <= rows; i++)
        {
            for (int j = 1; j <= i; j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}
public class Pattern3
{
    public static void main(String[] args)
    {
    Scanner sc=new Scanner(System.in); 
	int rows = sc.nextInt();
	p obj=new p();
	obj.dis(rows);
        
        
    }
}
##
Write a java program using private access modifiers and display the value even number from 0 to 20.(one by one)

import java.util.*;
  
public class B 
{ 
    private void display() 
    { 
       
        int a=0;
        while(a<=20)
        {
            System.out.println(a);
            a=a+2;
        }
    } 
public static void main(String args[]) 
    { 
        B obj = new B(); 
        // Trying to access private method
        // of another class 
        obj.display(); 
    } 
}
##
Java Program for calculate area of circle using public access specifier.

import java.util.Scanner;  
import java.lang.Math;  
public class AreaOfCircle  
{  
public static void main(String[] args)   
{  

double radius, area;    
//object of the Scanner class  
Scanner sc=new Scanner (System.in);  
  

    //System.out.print("Enter the radius of the circle: ");   
    radius=sc.nextDouble();  
    area=(Math.PI*(radius*radius));  
    System.out.print(area);   
    
}    
}    
##
write a java program for factorial using static and calling method. 

import java.util.Scanner;
public class Find_Factorial4{ 
public static void main(String args[]){ 


Scanner scan=new Scanner(System.in);
int num=scan.nextInt();
factorial(num);
}
static void factorial(int num1)
{
int i,f=1;
for(i=1;i<=num1; i++){
f=f*i;
}
System.out.print("Factorial of the "+ num1 + " " +"is "+f); 

}
}
##
Write a java program for calculate cube of a number using static method.

import java.util.*;  
public class CalculateCube  
{  
//defining a static method   
static void cube()  
{  

int x= 6;  
int y=x*x*x;
System.out.println("Cube is: "+y);    
}  
public static void main(String args[])  
{  
cube();    
}  
}  
##
Write a java program for swap two numbers using static and calling method.

import java.util.*;  
public class Swapp {
 
    public static void swapFunction(int a, int b) {
        System.out.println("In swapFunction at the begining: a = " + a + " , b = " + b);
 
        // Swap n1 with n2
        int c = a;
        a = b;
        b = c;
        System.out.println("In swapFunction at the end: a = " + a + " , b = " + b);
    }
 
    public static void main(String[] args) {
        //Scanner sc= new Scanner(System.in);
        int a= 30;  
        int b= 40;  
        System.out.println("Before swapping: a = " + a + " , b = " + b);
 
        // Invoke the swap method
        swapFunction(a, b);
        System.out.println("\n**Now, Before and After swapping values will be same here**:");
        System.out.println("After swapping: a = " + a + " , b = " + b);
    }
 
}
##
write a java program to display the area of square using calling method.

import java.util.Scanner;
public class AreaOfCircleMethod 
{
   public static void main(String[] args) 
   {
      Scanner sc = new Scanner(System.in);
      double radius = sc.nextInt();
      
      double area = calculateArea(radius);  
      System.out.println("Area of square : " + area);
      
   }
   static double calculateArea(double r)
   {
      return ( r * r);
   }
}
##
using Function to print upto N Fibonacci Number in java.

import java.util.*;  
public class GFG {
  
    // Function to print N Fibonacci Number
    static void Fibonacci(int N)
    {
        int num1 = 0, num2 = 1;
  
        int counter = 0;
  
        // Iterate till counter is N
        while (counter < N) {
  
            // Print the number
            System.out.print(num1 + " ");
  
            // Swap
            int num3 = num2 + num1;
            num1 = num2;
            num2 = num3;
            counter = counter + 1;
        }
    }
  
    // Driver Code
    public static void main(String args[])
    {
        // Given Number N
        Scanner sc = new Scanner(System.in); 
        int N= sc.nextInt();  
  
        // Function Call
        Fibonacci(N);
    }
}
##
Demonstrates the Default Access Modifier in Java and print the given year is a leap year or not.

import java.util.Scanner;
public class Main {

    public static void main(String[] args) {
        int year;
    	Scanner scan = new Scanner(System.in);
    	
    	year = scan.nextInt();
    	scan.close();
        boolean isLeap = false;

        if(year % 4 == 0)
        {
            if( year %100  == 0)
            {
                if ( year %400  == 0)
                    isLeap = true;
                else
                    isLeap = false;
            }
            else
                isLeap = true;
        
        }
        else {
            isLeap = false;
        }

        if(isLeap==true)
            System.out.println(year + " is a Leap Year.");
        else
            System.out.println(year + " is not a Leap Year.");
    }
}
##
Demonstrate the java program using public access modifier and find the quotient and remainder.

public class JavaExample {
    public static void main(String[] args) {
        int num1 = 15, num2 = 2;
        int quotient = num1 / num2;
        int remainder = num1 % num2;
        System.out.println("Quotient is: " +quotient);
        System.out.println("Remainder is: " + remainder);
    }
}
##
Write a Java Program to display number like pattern format based on rows values using modifiers.

import java.util.*;
class p
{
    public void pattern(int rows)
    {
        for (int i = 1; i <= rows; i++)
        {
            for (int j = 1; j <= i; j++)
            {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}
public class Pattern1
{
    public static void main(String[] args)
    {
	    Scanner sc=new Scanner(System.in);
	    int rows =sc.nextInt();
	    p obj=new p();
	    obj.pattern(rows);
        
    }
}
##
Write a java program using private access modifiers and display the value even number from 0 to 20.(one by one)

import java.util.*;
  Write a Java program to calculate the area of a triangle when three sides are given or normal method.
public class B 
{ 
    private void display() 
    { 
       
        int a=0;
        while(a<=20)
        {
            System.out.println(a);
            a=a+2;
        }
    } 
public static void main(String args[]) 
    { 
        B obj = new B(); 
         
        obj.display(); 
    } 
}
##
Write a Java program to calculate the area of a triangle when three sides are given or normal method.

import java.util.Scanner;
public class AreaOfTriangle 
{
   public static void main(String args[]) 
    {   
       
      Scanner s= new Scanner(System.in);
        
         
         double b= s.nextDouble();
 
         
          double h= s.nextDouble();
 
                  
      double area=(b*h)/2;
      System.out.println("Area of Triangle is: " + area);      
   }
}
##
Demonstrates the Default Access Modifier in Java and print square value.

class BaseClass 
{ 
    void display()      //no access modifier indicates default modifier
       { 
           int a=2;
           int s=a*a;
           System.out.println(s);
       } 
} 
 
public class Main
{ 
    public static void main(String args[]) 
       {   
          //access class with default scope
          BaseClass obj = new BaseClass(); 
   
          obj.display();    //access class method with default scope
       } 
}
##
Demonstrate the java program using public access modifier and print word "SoftwareTesting".

class A 
{ 
   public void display() 
      { 
          System.out.println("SoftwareTesting"); 
      } 
} 
public class Main 
{ 
    public static void main(String args[]) 
      { 
          A obj = new A (); 
          obj.display(); 
      } 
}
##
Write a Java Program to display "*" based on row input using protected modifiers.

import java.util.*;
class p
{
    protected void dis(int rows)
    {
        for (int i = 1; i <= rows; i++)
        {
            for (int j = 1; j <= i; j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}
public class Pattern3
{
    public static void main(String[] args)
    {
    Scanner sc=new Scanner(System.in); 
	int rows = sc.nextInt();
	p obj=new p();
	obj.dis(rows);
        
        
    }
}
##
Java Program for calculate area of circle using public access specifier.

import java.util.Scanner;  
import java.lang.Math;  
public class AreaOfCircle  
{  
public static void main(String[] args)   
{  

double radius, area;    
//object of the Scanner class  
Scanner sc=new Scanner (System.in);  
  

    //System.out.print("Enter the radius of the circle: ");   
    radius=sc.nextDouble();  
    area=(Math.PI*(radius*radius));  
    System.out.print(area);   
    
}    
}   
##
Create a java program to declare and initialization the string value into the array and display the elements from an array.

public class OneDimensionString
{
    public static void main(String[] args)
    {
        
        String[] str = new String[]{"one", "two", "three", "four"};
        System.out.println("These are elements of one Dimensional array:");
        for (int i = 0; i < str.length; i++) 
	    {
            System.out.println(str[i] + "   ");
        }
   }
}
##
Write a Java program to find the index of an array element.

import java.util.Scanner;

public class ArraySearchInput {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Reading the size of the array
        //System.out.print("Enter the number of elements in the array: ");
        int size = scanner.nextInt();

        // Declaring the array
        int[] array = new int[size];

        // Reading array elements
        //System.out.println("Enter the elements of the array: ");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt();
        }

        // Reading the value to find in the array
        //System.out.print("Enter the value to find: ");
        int valueToFind = scanner.nextInt();

        // Searching for the value in the array
        boolean found = false;
        for (int value : array) {
            if (value == valueToFind) {
                found = true;
                break;
            }
        }

       
        if (found) {
            System.out.println("The array contains the value: " + valueToFind);
        } else {
            System.out.println("The array does not contain the value: " + valueToFind);
        }

    
    }
}
##
Write a Java program to find the length of the longest consecutive elements sequence from an unsorted array of integers.

import java.util.Scanner;

public class LongestConsecutiveSequenceWithoutHashSetOrSort {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the size of the array
        //System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        // Read the elements of the array
        int[] nums = new int[size];
        //System.out.println("Enter the elements of the array:");
        for (int i = 0; i < size; i++) {
            nums[i] = scanner.nextInt();
        }

        // Find the length of the longest consecutive sequence
        int longestConsecutiveSequenceLength = findLongestConsecutiveSequenceLength(nums);

        System.out.println("Length of the longest consecutive sequence: " + longestConsecutiveSequenceLength);

        scanner.close();
    }

    private static int findLongestConsecutiveSequenceLength(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }

        // Initialize a counter to keep track of the longest consecutive sequence length
        int longestSequenceLength = 0;

        // Create a hash table to mark the presence of each element in the array
        boolean[] visited = new boolean[1000001]; // Assuming the range of integers is within [-500000, 500000]

        // Iterate through the array
        for (int num : nums) {
            visited[num + 500000] = true; // Mark the presence of the current number
        }

        // Iterate through the array again to count consecutive sequences
        for (int num : nums) {
            int currentSequenceLength = 0;

            // Check for consecutive elements starting from the current number
            for (int i = num; i <= 1000000 && visited[i + 500000]; i++) {
                currentSequenceLength++;
            }

            // Update the longest consecutive sequence length
            longestSequenceLength = Math.max(longestSequenceLength, currentSequenceLength);
        }

        return longestSequenceLength;
    }
}
##
Write a Java program that creates integer array of  size is 'n' elements, accepts values of arrays and find sum of all odd numbers in an array.

import java.util.*; 
public class ss
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        int size=sc.nextInt();
        int sumOdd=0;
        int Arr[] = new int[size]; 
        for(int i = 0; i < Arr.length; i++) 
           Arr[i] = sc.nextInt(); 
        for(int j = 0; j < Arr.length; j++){ 
           if(Arr[j]%2!=0){ 
             sumOdd = sumOdd + Arr[j];
           }
        }
        System.out.println("Sum of odd numbers: "+sumOdd); 
   } 
}
##
Develop a Java Program to sort the elements of an array in descending order.

import java.util.Scanner;

public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n;   
        
        n=sc.nextInt();   
        
        Integer arr[]=new Integer[n];    
    
        for(int i=0;i<n;i++)     
        {
            arr[i]=sc.nextInt();
        }
        
        int temp = 0;    
        
         for (int i = 0; i < arr.length; i++)  
         {     
            for (int j = i+1; j < arr.length; j++)    
            {     
               if(arr[i] < arr[j])
               {    
                   temp = arr[i];    
                   arr[i] = arr[j];    
                   arr[j] = temp;    
               }     
            }     
        }    
          
        //System.out.println();    
            
        
        System.out.print("Result of a Sorted Array :");    
        for (int i = 0; i < arr.length; i++) 
        {     
            System.out.print(arr[i] + " ");    
        }    
    }
}
##
Write a java program to read 5 values and display the all 5 values from array  using single dimensional array.

import java.util.*;

public class Main
{
   public static void main(String args[])
   {    

	Scanner sc=new Scanner(System.in);
	
	int a[]=new int[5];//declaration    	 
	
        for(int i=0; i<5; i++)
        {
           a[i] = sc.nextInt();
        }   
        System.out.print("Elements in Array are :\n");
        for(int i=0; i<5; i++)
        {
           System.out.print(a[i] + "  ");
        }  
   }
}
##
Write a Java program to find common elements between two integer arrays.

import java.util.Scanner;

public class CommonElementsWithoutSorting {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the size of the first array
        //System.out.print("Enter the size of the first array: ");
        int size1 = scanner.nextInt();

        // Read the elements of the first array
        int[] array1 = new int[size1];
        //System.out.println("Enter the elements of the first array:");
        for (int i = 0; i < size1; i++) {
            array1[i] = scanner.nextInt();
        }

        // Read the size of the second array
        //System.out.print("Enter the size of the second array: ");
        int size2 = scanner.nextInt();

        // Read the elements of the second array
        int[] array2 = new int[size2];
        //System.out.println("Enter the elements of the second array:");
        for (int i = 0; i < size2; i++) {
            array2[i] = scanner.nextInt();
        }

        // Find and print common elements
        findAndPrintCommonElements(array1, array2);

        scanner.close();
    }

    private static void findAndPrintCommonElements(int[] array1, int[] array2) {
        System.out.println("Common elements:");

        // Loop through the elements of the first array
        for (int i = 0; i < array1.length; i++) {
            // Check if the current element of the first array is present in the second array
            boolean foundInSecondArray = false;
            for (int j = 0; j < array2.length; j++) {
                if (array1[i] == array2[j]) {
                    foundInSecondArray = true;
                    break;
                }
            }
            // If found, print the common element
            if (foundInSecondArray) {
                System.out.println(array1[i]);
            }
        }
    }
}
##
Write a Java program that creates size of an array, accepts values of arrays and display only odd numbers in the array.

import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   { 
      Scanner sc = new Scanner(System.in); 
      int size=sc.nextInt();
      int Arr[] = new int[size]; 
      for(int i = 0; i < Arr.length; i++) 
         Arr[i] = sc.nextInt(); 
      System.out.println("Odd Numbers: "); 
      for(int j = 0; j < Arr.length; j++){ 
         if(Arr[j]%2!=0){ 
            System.out.println(Arr[j]); 
         }
      }
   } 
}
##
Write a Java program to create the character array for the array size then, to Convert Character Array to String Using copyValueOf() method and then display the string.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Asking for the size of the character array
       // System.out.println("Enter the size of the character array:");
        int size = scanner.nextInt();
        
        // Creating a character array of the given size
        char[] charArray = new char[size];
        
        // Consuming the leftover newline
        scanner.nextLine();
        
        // Reading characters into the array
        //System.out.println("Enter the characters one by one:");
        for (int i = 0; i < size; i++) {
            String line = scanner.nextLine();
            if (!line.isEmpty()) {
                charArray[i] = line.charAt(0);
            }
        }
        
        // Converting the character array to a string
        String resultString = String.copyValueOf(charArray);
        
        // Displaying the converted string
        System.out.println("The string representation of the character array is:");
        System.out.println(resultString);
        
        scanner.close();
    }
}
##
Construct a Java program to find smallest element in an array and then print the value.

import java.util.Scanner;

public class Main
{
   public static void main(String[] args)
   {
      int tot, i, small;
      Scanner scan = new Scanner(System.in);
      
      //System.out.print("Enter the Size of Array: ");
      tot = scan.nextInt();
      int[] arr = new int[tot];
      //System.out.print("Enter " +tot+ " Numbers: ");
      for(i=0; i<tot; i++)
         arr[i] = scan.nextInt();
      
      small = arr[0];
      for(i=1; i<tot; i++)
      {
         if(small>arr[i])
            small = arr[i];
      }
      
      System.out.println("Smallest Number = " +small);
   }
}
##
Develop a java program to read the length of an array, to store elements into the array and then display the array elements. Use Scanner class to read the input.

import java.util.Scanner;
public class OnedimensionalScanner
{
   public static void main(String args[])
   {    
	int len;
	Scanner sc=new Scanner(System.in);
	//System.out.println("Enter Array length : ");
	len=sc.nextInt();
	int a[]=new int[len];//declaration    	 
	//System.out.print("Enter " + len + " Element to Store in Array :\n");
        for(int i=0; i<len; i++)
        {
           a[i] = sc.nextInt();
        }   
        System.out.print("Elements in Array are :\n");
        for(int i=0; i<len; i++)
        {
           System.out.print(a[i] + "  ");
        }  
   }
}
##
Write a Java program that creates integer array of 10 elements, accepts 10 values of arrays and print the array values in reverse order.

import java.util.*; 
public class Main
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        //System.out.println("Enter 10 array elements:");
        int Arr[] = new int[10]; 
        for(int i = 0; i < Arr.length; i++) 
            Arr[i] = sc.nextInt(); 
        
        System.out.println("Reverse Array: "); 
        for (int k = Arr.length-1; k >= 0; k--) 
            System.out.print(Arr[k] + " "); 
    } 
}
##
Write a Java program that creates size of an array, accepts values of arrays and display only odd numbers in the array.

import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   { 
      Scanner sc = new Scanner(System.in); 
      int size=sc.nextInt();
      int Arr[] = new int[size]; 
      for(int i = 0; i < Arr.length; i++) 
         Arr[i] = sc.nextInt(); 
      System.out.println("Odd Numbers: "); 
      for(int j = 0; j < Arr.length; j++){ 
         if(Arr[j]%2!=0){ 
            System.out.println(Arr[j]); 
         }
      }
   } 
}
##
Write a Java program to arrange the elements of an array of integers so that all negative integers appear before all positive integers.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        int[] array = new int[n];

        //System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

        rearrangeArray(array);

        System.out.println("Array after rearrangement:");
        for (int i : array) {
            System.out.print(i + " ");
        }
        
        scanner.close();
    }

    private static void rearrangeArray(int[] array) {
        int j = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] < 0) {
                if (i != j) {
                    // Swap array[i] and array[j]
                    int temp = array[i];
                    array[i] = array[j];
                    array[j] = temp;
                }
                j++;
            }
        }
    }
}
##
Construct a Java program to find smallest element in an array and then print the value.

import java.util.Scanner;

public class Main
{
   public static void main(String[] args)
   {
      int tot, i, small;
      Scanner scan = new Scanner(System.in);
      
      //System.out.print("Enter the Size of Array: ");
      tot = scan.nextInt();
      int[] arr = new int[tot];
      //System.out.print("Enter " +tot+ " Numbers: ");
      for(i=0; i<tot; i++)
         arr[i] = scan.nextInt();
      
      small = arr[0];
      for(i=1; i<tot; i++)
      {
         if(small>arr[i])
            small = arr[i];
      }
      
      System.out.println("Smallest Number = " +small);
   }
}
##
Develop a java program to read the length of an array, to store elements into the array and then display the array elements. Use Scanner class to read the input.

import java.util.Scanner;
public class OnedimensionalScanner
{
   public static void main(String args[])
   {    
	int len;
	Scanner sc=new Scanner(System.in);
	//System.out.println("Enter Array length : ");
	len=sc.nextInt();
	int a[]=new int[len];//declaration    	 
	//System.out.print("Enter " + len + " Element to Store in Array :\n");
        for(int i=0; i<len; i++)
        {
           a[i] = sc.nextInt();
        }   
        System.out.print("Elements in Array are :\n");
        for(int i=0; i<len; i++)
        {
           System.out.print(a[i] + "  ");
        }  
   }
}
##
Write a java program to read 'n' subject marks and then display the sum & average of marks.

import java.util.*;
public class OneDArr {
public static void main(String[] args) 
{
Scanner sc = new Scanner(System.in);
int size=sc.nextInt();
int[ ] num = new int[size];
for (int i = 0; i < size; i++) {
num[i] = sc.nextInt();
}
 
double avg = 0.0;
int sum = 0;
// Find the sum of these numbers.
  for(int i = 0; i < size; i++)
   sum  = sum + num[i];
     avg = (double)sum/size;
  System.out.println("Sum of array: " +sum);
  System.out.println("Average of array: " +avg);
 }
}
##
Write a Java program that creates integer array of 'n' elements(size of an array), accepts values of arrays and display only even numbers in the array.

import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   { 
      Scanner sc = new Scanner(System.in); 
      int size=sc.nextInt();
      int Arr[] = new int[size]; 
      for(int i = 0; i < Arr.length; i++) 
         Arr[i] = sc.nextInt(); 
      System.out.println("Even Numbers: "); 
      for(int j = 0; j < Arr.length; j++){ 
         if(Arr[j]%2==0){ 
            System.out.println(Arr[j]); 
         }
      }
   } 
}
##
Write a Java program that creates integer array of  size is 'n' elements, accepts values of arrays and find sum of all odd numbers in an array.

import java.util.*; 
public class ss
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        int size=sc.nextInt();
        int sumOdd=0;
        int Arr[] = new int[size]; 
        for(int i = 0; i < Arr.length; i++) 
           Arr[i] = sc.nextInt(); 
        for(int j = 0; j < Arr.length; j++){ 
           if(Arr[j]%2!=0){ 
             sumOdd = sumOdd + Arr[j];
           }
        }
        System.out.println("Sum of odd numbers: "+sumOdd); 
   } 
}
##
Write a java program for multidimensional array to read the string values for array and then display the values row by row.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.println("Enter the number of rows:");
        int rows = scanner.nextInt();

        //System.out.println("Enter the number of columns:");
        int columns = scanner.nextInt();

        // Consume the remaining newline
        scanner.nextLine();

        // Initializing the two-dimensional string array
        String[][] stringArray = new String[rows][columns];

        //System.out.println("Enter the elements of the array:");

        // Loop for inputting array elements
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                stringArray[i][j] = scanner.nextLine();
            }
        }

        System.out.println("Printing array elements row by row:");

        // Looping through the array to print elements row by row
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(stringArray[i][j] + " ");
            }
            System.out.println(); // Move to the next line after printing all elements of the current row
        }

        scanner.close();
    }
}
##
Write a java program to find the length or size of 2D array.

public class TwoDArray {
  public static void main(String[] args) {
    
  
    int[][] arr = {{50,60},{70,80},{90,10}};
    
    System.out.println("Parent size = " + arr.length);
    System.out.println("Child-1 size = " + arr[0].length);
    System.out.println("Child-2 size = " + arr[1].length);
    System.out.println("Child-3 size = " + arr[2].length);
  }
}
##
Write a java program to read array value, display the array1 and array2 value.

import java.util.Scanner;  
public class ArrayInputExample1   
{  
public static void main(String[] args)   
{  
int n;  
Scanner sc=new Scanner(System.in);  

 
int[] array1 = new int[5];  

for(int i=0; i<5; i++)  
{  
   
array1[i]=sc.nextInt();  
}  
for(int i=0; i<5; i++)  
{  
   
System.out.println(array1[i]); 
}
int[] array2 = new int[5];  
 
for(int i=0; i<5; i++)  
{  

array2[i]=sc.nextInt();  
} 
for(int i=0; i<5; i++)  
{  
   
System.out.println(array2[i]); 
}

}
}
##
Write a java program to display elements of one dimensional array and passing array value to function or methods.

class OneDArray 
{
  void show(int x[ ]) {
	 for(int i = 0; i < x.length; i++) 
	 {
	   System.out.print(x[i]+ " ");	 
	 }
  }
}
public class OneDArraytoMethod {
public static void main(String[ ] args) 
{

    int[ ] x = {2, 3, 4, 5, 6, 7, 8};


     OneDArray obj = new OneDArray();
     System.out.println("Value of array x: ");
      obj.show(x); 
  }
}
##
write a Java program merges two given arrays into the third array, and then sort the merged array in ascending order.

import java.util.Scanner;
public class CodesCracker
{
   public static void main(String[] args)
   {
      int i, j;
      Scanner scan = new Scanner(System.in);
      
      
      int x = scan.nextInt();
      int[] a = new int[x];
      
      for(i=0; i<x; i++)
         a[i] = scan.nextInt();
      
     
      int y = scan.nextInt();
      int[] b = new int[y];
      
      for(i=0; i<y; i++)
         b[i] = scan.nextInt();
      

      int[] merge = new int[x+y];
      for(i=0; i<x; i++)
         merge[i] = a[i];
      for(j=0; j<y; j++)
         merge[i++] = b[j];
      
      
      int k = i;
      for(i=0; i<(k-1); i++)
      {
         for(j=0; j<(k-1); j++)
         {
            if(merge[j]>merge[j+1])
            {
               int temp = merge[j];
               merge[j] = merge[j+1];
               merge[j+1] = temp;
            }
         }
      }
      
     
      System.out.println("The merged array is: ");
      for(i=0; i<k; i++)
         System.out.print(merge[i]+ " ");
   }
}
##
Write a java program for multidimensional array to read the values for array and then display the values row by row.

import java.util.Scanner;

public class ArrayRowByRowPrinter {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.println("Enter the number of rows:");
        int rows = scanner.nextInt();

        //System.out.println("Enter the number of columns:");
        int columns = scanner.nextInt();

        // Initializing the two-dimensional array based on user input
        int[][] twoDArray = new int[rows][columns];

        //System.out.println("Enter the elements of the array:");

        // Loop to input array elements
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                twoDArray[i][j] = scanner.nextInt();
            }
        }

        System.out.println("Printing array elements row by row:");

        // Looping through the array to print elements row by row
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(twoDArray[i][j] + " ");
            }
            // Move to the next line after printing all elements of the current row
            System.out.println();
        }

        scanner.close();
    }
}
##
Write a java program to read and print a two-dimensional array.

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int row, col;
        int arr[][];
        Scanner scanner = new Scanner(System.in);
        
        row = scanner.nextInt();
        
        col = scanner.nextInt();
        arr = new int[row][col];
        for (int i = 0; i < row; i++) {
            
            for (int j = 0; j < col; j++) {
                
                //System.out.print("Enter element for row = " + (i + 1) + " column = " + (j + 1) + " : ");
                arr[i][j] = scanner.nextInt();
            }
        
        } 
        System.out.println("You have entered the following array : ");
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }

}
##
Create a java program to find second largest number in an array.

import java.util.Scanner;

public class ArrayProgram {

  
  public static int secondLargest(int[] arr) {
    
    
    int fmax = 0; 
    int smax = 0; 

    
    fmax = arr[0];
    smax = arr[0];

    for (int i = 1; i < arr.length; i++) {
      if (fmax < arr[i]) {
        smax = fmax;
        fmax = arr[i];
      } else if(smax < arr[i]) {
        smax = arr[i];
      }
    }

    return smax;
  }
  
  public static void main(String[] args) {
    
    Scanner scan = new Scanner(System.in);

   
    int length = 0;
    int numbers[] = null;

   
   
    length = scan.nextInt();


    numbers = new int[length];


    for (int i = 0; i < numbers.length; i++) {
      numbers[i] = scan.nextInt();
    }

    System.out.println("Second largest element = " 
                         + secondLargest(numbers));

    
    scan.close();
  }
}
##
Write a java program to display elements of one dimensional array and Simply pass the name of the normal array to the method.

public class Main
{
    public static void addTen(int[] arr)
    {
        for(int i = 0; i < arr.length; i++)
        {
            arr[i] += 10;
        }
    }
    public static void main(String[] args)
    {
        int[] arr = {1, 3, 5, 7, 9};
        addTen(arr);
        for(int i = 0; i < arr.length; i++)
        {
            System.out.print(arr[i] + " ");
        }
    }
}
##
Develop a java program declare and initialize four one dimensional array of 2 elements each , display the elements of each array with their indexes and values and to print the elements of an array.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Declare and initialize four one-dimensional arrays of 2 elements each
        int[] array1 = new int[2];
        int[] array2 = new int[2];
        int[] array3 = new int[2];
        int[] array4 = new int[2];

        // Read input for each array
        for (int i = 1; i <= 4; i++) {
            //System.out.println("Enter 2 elements for array " + i + ":");
            for (int j = 0; j < 2; j++) {
                int input = scanner.nextInt(); // Read the input
                // Assign the input to the appropriate array
                switch (i) {
                    case 1:
                        array1[j] = input;
                        break;
                    case 2:
                        array2[j] = input;
                        break;
                    case 3:
                        array3[j] = input;
                        break;
                    case 4:
                        array4[j] = input;
                        break;
                }
            }
        }

        // Display the elements of each array with their indexes and values
        printArrayElements(array1, 1);
        printArrayElements(array2, 2);
        printArrayElements(array3, 3);
        printArrayElements(array4, 4);

        scanner.close();
    }

    // Helper method to print the elements of an array
    private static void printArrayElements(int[] array, int arrayNumber) {
        System.out.println("Elements of array " + arrayNumber + ":");
        for (int i = 0; i < array.length; i++) {
            System.out.println("Index: " + i + ", Value: " + array[i]);
        }
    }
}
##
Write a java program to read 3 values in array and display the array elements using single dimensional array and standard method.

import java.util.*;
public class OnedimensionalStandard
{
	public static void main(String args[])
	{ 
	Scanner sc= new Scanner(System.in); 
	int[] a=new int[3];  
	for(int i=0;i<3;i++)
	{
	    a[i]=sc.nextInt();
	}
	 
	 
	System.out.println("One dimensional array elements are");    
	for(int i=0;i<3;i++)
	{
	   System.out.println(a[i]);
	}
	 

	}
}
##
Write a java program to read 'n' subject marks and then display the sum & average of marks.

import java.util.*;
public class OneDArr {
public static void main(String[] args) 
{
Scanner sc = new Scanner(System.in);
int size=sc.nextInt();
int[ ] num = new int[size];
for (int i = 0; i < size; i++) {
num[i] = sc.nextInt();
}
 
double avg = 0.0;
int sum = 0;
// Find the sum of these numbers.
  for(int i = 0; i < size; i++)
   sum  = sum + num[i];
     avg = (double)sum/size;
  System.out.println("Sum of array: " +sum);
  System.out.println("Average of array: " +avg);
 }
}
##
Write a Java program to read and display the character of an array using do...while loop.

import java.util.Scanner;
public class Arr_One_Dim_Char_DoWhile1{
public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
//create a scanner object for Taking input
// from the user - input from keyboard
//System.out.print("Enter the Array length: ");
//Ask input from the user for array length
int length=sc.nextInt();
//Reading the input from the user for array length
char arr[]=new char[length]; 
//diclaration and creation of char array

//System.out.println("Enter the "+length+" Characters");
int i=0;
do{
arr[i]=sc.next().charAt(0);    
//Reding the input(characters) from the user
 i++;
}while(i<length);
System.out.println("Entered characters are:");
int j=0; 
do{
System.out.println(arr[j]);    
 j++;
}while(j<length);
//display all entered characters
}
}
##
Write a Java program to read the size of an array, to read string value for an array size and then display the output.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt for and read the size of the array
        //System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();
        scanner.nextLine(); // Consume the newline left by nextInt()

        // Declare and instantiate the array
        String[] array = new String[size];

        // Read string values into the array
        //System.out.println("Enter " + size + " string values:");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextLine(); // Read each string
        }

        // Display the array contents
        System.out.println("Array contents:");
        for (String value : array) {
            System.out.println(value);
        }

        // Close the scanner
        scanner.close();
    }
}
##
Develop a Java program which generates 'n' terms of fibonacci no in an array and then prints the fibonacci value.

import java.util.Scanner;

public class Main {
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        //System.out.print("Enter the number of terms in the Fibonacci sequence to generate: ");
        int n = scanner.nextInt();
        
        // Check if the input is valid
        if (n <= 0) {
            System.out.println("Please enter a positive integer greater than 0.");
        } else {
            // Create an array to hold the Fibonacci numbers
            int[] fibonacci = new int[n];
            
            // Initialize the first two terms (as needed)
            if (n > 0) {
                fibonacci[0] = 0; // The first term of the Fibonacci sequence
            }
            if (n > 1) {
                fibonacci[1] = 1; // The second term of the Fibonacci sequence
            }
            
            // Generate the Fibonacci sequence and store it in the array
            for (int i = 2; i < n; i++) {
                fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];
            }
            
            // Print the Fibonacci sequence
            System.out.println("The first " + n + " terms of the Fibonacci sequence are:");
            for (int i = 0; i < n; i++) {
                System.out.print(fibonacci[i] + " ");
            }
        }
        
        scanner.close();
    }
}
##
Write a java program to declare and initialization the values into the array and display the array elements.

public class text
{
	public static void main(String args[])
	{    
	   int a[]={10,20,30,40,50};  	  
	   System.out.println("One dimensional array elements are :\n");    
	   for(int i=0;i<a.length;i++)  
	   {
		System.out.println("a["+i+"]:"+a[i]);    
	   }	
	}
}
##
Write a Java program that creates integer array of 10 elements, accepts 10 values of arrays and print the array values in reverse order.

import java.util.*; 
public class Main
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        //System.out.println("Enter 10 array elements:");
        int Arr[] = new int[10]; 
        for(int i = 0; i < Arr.length; i++) 
            Arr[i] = sc.nextInt(); 
        
        System.out.println("Reverse Array: "); 
        for (int k = Arr.length-1; k >= 0; k--) 
            System.out.print(Arr[k] + " "); 
    } 
}
##
Write a Java program that creates integer array of 'n' elements(size of an array), accepts values of arrays and display only even numbers in the array.

import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   { 
      Scanner sc = new Scanner(System.in); 
      //System.out.println("Enter 10 array elements");
      int size=sc.nextInt();
      int Arr[] = new int[size]; 
      for(int i = 0; i < size; i++) 
         Arr[i] = sc.nextInt(); 
      System.out.println("Even Numbers: "); 
      for(int j = 0; j < size; j++){ 
         if(Arr[j]%2==0){ 
            System.out.println(Arr[j]); 
         }
      }
   } 
}
##
Write a Java program to arrange the elements of an array of integers so that all negative integers appear before all positive integers.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        int[] array = new int[n];

        //System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

        rearrangeArray(array);

        System.out.println("Array after rearrangement:");
        for (int i : array) {
            System.out.print(i + " ");
        }
        
        scanner.close();
    }

    private static void rearrangeArray(int[] array) {
        int j = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] < 0) {
                if (i != j) {
                    // Swap array[i] and array[j]
                    int temp = array[i];
                    array[i] = array[j];
                    array[j] = temp;
                }
                j++;
            }
        }
    }
}
##
Write a Java program to find the largest element in an array and then print the largest value.

import java.util.Scanner;

public class Main{
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Ask the user for the number of elements in the array
        //System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        
        // Check if the user enters a positive number of elements
        if (n <= 0) {
            System.out.println("The number of elements must be positive.");
            return; // Exit the program
        }
        
        // Declare and initialize the array
        int[] array = new int[n];
        
        // Read the array elements
        //System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }
        
        // Assume the first element is the largest, then compare with the rest
        int largest = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] > largest) {
                largest = array[i];
            }
        }
        
        // Print the largest element
        System.out.println("The largest element in the array is: " + largest);
        
        scanner.close();
    }
}
##
Develop a java program to read the length of an array, to store elements into the array and then display the array elements. Use Scanner class to read the input.

import java.util.Scanner;
public class OnedimensionalScanner
{
   public static void main(String args[])
   {    
	int len;
	Scanner sc=new Scanner(System.in);
	//System.out.println("Enter Array length : ");
	len=sc.nextInt();
	int a[]=new int[len];//declaration    	 
	//System.out.print("Enter " + len + " Element to Store in Array :\n");
        for(int i=0; i<len; i++)
        {
           a[i] = sc.nextInt();
        }   
        System.out.print("Elements in Array are :\n");
        for(int i=0; i<len; i++)
        {
           System.out.print(a[i] + "  ");
        }  
   }
}
##
Write a Java program to find the sum values of an array and display the sum value.

import java.util.*; 
public class Main
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        int a=sc.nextInt();
        int Arr[] = new int[a]; 
        int sum = 0;
        for(int i = 0; i < Arr.length; i++) 
            Arr[i] = sc.nextInt(); 
        
        System.out.println("Sum of an array: "); 
        for (int i : Arr)
            
            sum += i;
        System.out.println(sum);
    } 
}
##
Write a Java program to find the smallest and second smallest elements of a given array.

import java.util.Scanner;
public class SmallestAndSecondSmallest {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the size of the array
        //System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        // Validate input
        if (size < 2) {
            System.out.println("Array size should be at least 2.");
            return;
        }

        // Read the elements of the array
        int[] array = new int[size];
        //System.out.println("Enter the elements of the array:");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt();
        }

        // Find the smallest and second smallest elements
        int[] result = findSmallestAndSecondSmallest(array);

        // Display the result
        System.out.println("Smallest element: " + result[0]);
        System.out.println("Second smallest element: " + result[1]);

        scanner.close();
    }

    private static int[] findSmallestAndSecondSmallest(int[] array) {
        int smallest = Integer.MAX_VALUE;
        int secondSmallest = Integer.MAX_VALUE;

        for (int num : array) {
            if (num < smallest) {
                secondSmallest = smallest;
                smallest = num;
            } else if (num < secondSmallest && num != smallest) {
                secondSmallest = num;
            }
        }

        // If secondSmallest is still Integer.MAX_VALUE, there is no second smallest element
        if (secondSmallest == Integer.MAX_VALUE) {
            secondSmallest = smallest; // Set secondSmallest to smallest
        }

        return new int[]{smallest, secondSmallest};
    }
}
##
Write a Java program to read the size of an array and value for that array, to print the values using any looping statement.

import java.util.Scanner;

public class ArrayInputOutput {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt for and read the size of the array
       // System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        // Declare and instantiate the array
        int[] array = new int[size];

        // Read the values into the array
        //System.out.println("Enter " + size + " integers:");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt(); // Read each integer
        }

        // Print the array values
        System.out.println("You have entered:");
        for (int value : array) {
            System.out.println(value);
        }

        // Close the scanner
        scanner.close();
    }
}
##
Develop a Java Program to sort the elements of an array in ascending order.

import java.util.Arrays;
import java.util.Scanner;

public class SortAscending1 {
	private static Scanner sc;
	public static void main(String[] args) 
	{
		int Size, i;
		sc = new Scanner(System.in);
	 
		//System.out.print(" Please Enter Number of elements in an array : ");
		Size = sc.nextInt();	
		
		int [] a = new int[Size];
		
		//System.out.print(" Please Enter " + Size + " elements of an Array  : ");
		for (i = 0; i < Size; i++)
		{
			a[i] = sc.nextInt();
		}
		
		Arrays.sort(a);
		
		System.out.println("Result of a Sorted Array :  ");
		for (int Number: a)
		{
			System.out.print(Number + "  ");
		}
	}
}
##
Write a java program to declare and initialization the values into the array and display the array elements.

public class text
{
	public static void main(String args[])
	{    
	   int a[]={10,20,30,40,50};  	  
	   System.out.println("One dimensional array elements are :\n");    
	   for(int i=0;i<a.length;i++)  
	   {
		System.out.println("a["+i+"]:"+a[i]);    
	   }	
	}
}
##
Write a Java program to find the index of an array element.

import java.util.Scanner;
public class ArraySearchInput {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Reading the size of the array
        //System.out.print("Enter the number of elements in the array: ");
        int size = scanner.nextInt();

        // Declaring the array
        int[] array = new int[size];

        // Reading array elements
        //System.out.println("Enter the elements of the array: ");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt();
        }

        // Reading the value to find in the array
        //System.out.print("Enter the value to find: ");
        int valueToFind = scanner.nextInt();

        // Searching for the value in the array
        boolean found = false;
        for (int value : array) {
            if (value == valueToFind) {
                found = true;
                break;
            }
        }

        // Displaying the result
        if (found) {
            System.out.println("The array contains the value: " + valueToFind);
        } else {
            System.out.println("The array does not contain the value: " + valueToFind);
        }

    
    }
}
##
Write a Java program to read and display the character of an array using do...while loop.

import java.util.Scanner;
public class Arr_One_Dim_Char_DoWhile1{
public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
//create a scanner object for Taking input
// from the user - input from keyboard
//System.out.print("Enter the Array length: ");
//Ask input from the user for array length
int length=sc.nextInt();
//Reading the input from the user for array length
char arr[]=new char[length]; 
//diclaration and creation of char array

//System.out.println("Enter the "+length+" Characters");
int i=0;
do{
arr[i]=sc.next().charAt(0);    
//Reding the input(characters) from the user
 i++;
}while(i<length);
System.out.println("Entered characters are:");
int j=0; 
do{
System.out.println(arr[j]);    
 j++;
}while(j<length);
//display all entered characters
}
}
##
Write a Java program to read the size of an array and value for that array, to print the values using any looping statement.

import java.util.Scanner;

public class ArrayInputOutput {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt for and read the size of the array
       // System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        // Declare and instantiate the array
        int[] array = new int[size];

        // Read the values into the array
        //System.out.println("Enter " + size + " integers:");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt(); // Read each integer
        }

        // Print the array values
        System.out.println("You have entered:");
        for (int value : array) {
            System.out.println(value);
        }

        // Close the scanner
        scanner.close();
    }
}
##
Develop a Java program which generates 'n' terms of fibonacci no in an array and then prints the fibonacci value.

import java.util.Scanner;

public class Main {
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        //System.out.print("Enter the number of terms in the Fibonacci sequence to generate: ");
        int n = scanner.nextInt();
        
        // Check if the input is valid
        if (n <= 0) {
            System.out.println("Please enter a positive integer greater than 0.");
        } else {
            // Create an array to hold the Fibonacci numbers
            int[] fibonacci = new int[n];
            
            // Initialize the first two terms (as needed)
            if (n > 0) {
                fibonacci[0] = 0; // The first term of the Fibonacci sequence
            }
            if (n > 1) {
                fibonacci[1] = 1; // The second term of the Fibonacci sequence
            }
            
            // Generate the Fibonacci sequence and store it in the array
            for (int i = 2; i < n; i++) {
                fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];
            }
            
            // Print the Fibonacci sequence
            System.out.println("The first " + n + " terms of the Fibonacci sequence are:");
            for (int i = 0; i < n; i++) {
                System.out.print(fibonacci[i] + " ");
            }
        }
        
        scanner.close();
    }
}
##
Create a java program to declare and initialization the string value into the array and display the elements from an array.

public class OneDimensionString
{
    public static void main(String[] args)
    {
        
        String[] str = new String[]{"one", "two", "three", "four"};
        System.out.println("These are elements of one Dimensional array:");
        for (int i = 0; i < str.length; i++) 
	    {
            System.out.println(str[i] + "   ");
        }
   }
}
##
Write a Java program to find the sum values of an array and display the sum value.

import java.util.*; 
public class Main
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        int a=sc.nextInt();
        int Arr[] = new int[a]; 
        int sum = 0;
        for(int i = 0; i < Arr.length; i++) 
            Arr[i] = sc.nextInt(); 
        
        System.out.println("Sum of an array: "); 
        for (int i : Arr)
            
            sum += i;
        System.out.println(sum);
    } 
}
##
Write a Java program to find the length of the longest consecutive elements sequence from an unsorted array of integers.

import java.util.Scanner;
public class LongestConsecutiveSequenceWithoutHashSetOrSort {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the size of the array
        //System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        // Read the elements of the array
        int[] nums = new int[size];
        //System.out.println("Enter the elements of the array:");
        for (int i = 0; i < size; i++) {
            nums[i] = scanner.nextInt();
        }

        // Find the length of the longest consecutive sequence
        int longestConsecutiveSequenceLength = findLongestConsecutiveSequenceLength(nums);

        System.out.println("Length of the longest consecutive sequence: " + longestConsecutiveSequenceLength);

        scanner.close();
    }

    private static int findLongestConsecutiveSequenceLength(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }

        // Initialize a counter to keep track of the longest consecutive sequence length
        int longestSequenceLength = 0;

        // Create a hash table to mark the presence of each element in the array
        boolean[] visited = new boolean[1000001]; // Assuming the range of integers is within [-500000, 500000]

        // Iterate through the array
        for (int num : nums) {
            visited[num + 500000] = true; // Mark the presence of the current number
        }

        // Iterate through the array again to count consecutive sequences
        for (int num : nums) {
            int currentSequenceLength = 0;

            // Check for consecutive elements starting from the current number
            for (int i = num; i <= 1000000 && visited[i + 500000]; i++) {
                currentSequenceLength++;
            }

            // Update the longest consecutive sequence length
            longestSequenceLength = Math.max(longestSequenceLength, currentSequenceLength);
        }

        return longestSequenceLength;
    }
}

##
Write a Java program to create the character array for the array size then, to Convert Character Array to String Using copyValueOf() method and then display the string.

import java.util.Scanner;
public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Asking for the size of the character array
       // System.out.println("Enter the size of the character array:");
        int size = scanner.nextInt();
        
        // Creating a character array of the given size
        char[] charArray = new char[size];
        
        // Consuming the leftover newline
        scanner.nextLine();
        
        // Reading characters into the array
        //System.out.println("Enter the characters one by one:");
        for (int i = 0; i < size; i++) {
            String line = scanner.nextLine();
            if (!line.isEmpty()) {
                charArray[i] = line.charAt(0);
            }
        }
        
        // Converting the character array to a string
        String resultString = String.copyValueOf(charArray);
        
        // Displaying the converted string
        System.out.println("The string representation of the character array is:");
        System.out.println(resultString);
        
        scanner.close();
    }
}
##
Write a Java program to find the largest element in an array and then print the largest value.

import java.util.Scanner;

public class Main{
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Ask the user for the number of elements in the array
        //System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        
        // Check if the user enters a positive number of elements
        if (n <= 0) {
            System.out.println("The number of elements must be positive.");
            return; // Exit the program
        }
        
        // Declare and initialize the array
        int[] array = new int[n];
        
        // Read the array elements
        //System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }
        
        // Assume the first element is the largest, then compare with the rest
        int largest = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] > largest) {
                largest = array[i];
            }
        }
        
        // Print the largest element
        System.out.println("The largest element in the array is: " + largest);
        
        scanner.close();
    }
}
##
Write a java program to read 3 values in array and display the array elements using single dimensional array and standard method.

import java.util.*;
public class OnedimensionalStandard
{
	public static void main(String args[])
	{ 
	Scanner sc= new Scanner(System.in); 
	int[] a=new int[3];  
	for(int i=0;i<3;i++)
	{
	    a[i]=sc.nextInt();
	}
	 
	 
	System.out.println("One dimensional array elements are");    
	for(int i=0;i<3;i++)
	{
	   System.out.println(a[i]);
	}
	 

	}
}
##
Write a Java program to find common elements between two integer arrays.

import java.util.Scanner;

public class CommonElementsWithoutSorting {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the size of the first array
        //System.out.print("Enter the size of the first array: ");
        int size1 = scanner.nextInt();

        // Read the elements of the first array
        int[] array1 = new int[size1];
        //System.out.println("Enter the elements of the first array:");
        for (int i = 0; i < size1; i++) {
            array1[i] = scanner.nextInt();
        }

        // Read the size of the second array
        //System.out.print("Enter the size of the second array: ");
        int size2 = scanner.nextInt();

        // Read the elements of the second array
        int[] array2 = new int[size2];
        //System.out.println("Enter the elements of the second array:");
        for (int i = 0; i < size2; i++) {
            array2[i] = scanner.nextInt();
        }

        // Find and print common elements
        findAndPrintCommonElements(array1, array2);

        scanner.close();
    }

    private static void findAndPrintCommonElements(int[] array1, int[] array2) {
        System.out.println("Common elements:");

        // Loop through the elements of the first array
        for (int i = 0; i < array1.length; i++) {
            // Check if the current element of the first array is present in the second array
            boolean foundInSecondArray = false;
            for (int j = 0; j < array2.length; j++) {
                if (array1[i] == array2[j]) {
                    foundInSecondArray = true;
                    break;
                }
            }
            // If found, print the common element
            if (foundInSecondArray) {
                System.out.println(array1[i]);
            }
        }
    }
}
##
Write a Java program that creates integer array of 'n' elements(size of an array), accepts values of arrays and display only even numbers in the array.

import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   { 
      Scanner sc = new Scanner(System.in); 
      //System.out.println("Enter 10 array elements");
      int size=sc.nextInt();
      int Arr[] = new int[size]; 
      for(int i = 0; i < size; i++) 
         Arr[i] = sc.nextInt(); 
      System.out.println("Even Numbers: "); 
      for(int j = 0; j < size; j++){ 
         if(Arr[j]%2==0){ 
            System.out.println(Arr[j]); 
         }
      }
   } 
}
##
Write a Java program to read the size of an array, to read string value for an array size and then display the output.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt for and read the size of the array
        //System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();
        scanner.nextLine(); // Consume the newline left by nextInt()

        // Declare and instantiate the array
        String[] array = new String[size];

        // Read string values into the array
        //System.out.println("Enter " + size + " string values:");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextLine(); // Read each string
        }

        // Display the array contents
        System.out.println("Array contents:");
        for (String value : array) {
            System.out.println(value);
        }

        // Close the scanner
        scanner.close();
    }
}
##
Develop a Java Program to sort the elements of an array in ascending order.

import java.util.Arrays;
import java.util.Scanner;

public class SortAscending1 {
	private static Scanner sc;
	public static void main(String[] args) 
	{
		int Size, i;
		sc = new Scanner(System.in);
	 
		//System.out.print(" Please Enter Number of elements in an array : ");
		Size = sc.nextInt();	
		
		int [] a = new int[Size];
		
		//System.out.print(" Please Enter " + Size + " elements of an Array  : ");
		for (i = 0; i < Size; i++)
		{
			a[i] = sc.nextInt();
		}
		
		Arrays.sort(a);
		
		System.out.println("Result of a Sorted Array :  ");
		for (int Number: a)
		{
			System.out.print(Number + "  ");
		}
	}
}
##
Write a java program to read 5 values and display the all 5 values from array  using single dimensional array.

import java.util.*;

public class Main
{
   public static void main(String args[])
   {    

	Scanner sc=new Scanner(System.in);
	
	int a[]=new int[5];//declaration    	 
	
        for(int i=0; i<5; i++)
        {
           a[i] = sc.nextInt();
        }   
        System.out.print("Elements in Array are :\n");
        for(int i=0; i<5; i++)
        {
           System.out.print(a[i] + "  ");
        }  
   }
}
	
##
Write a java program to read 'n' subject marks and then display the sum & average of marks.

import java.util.*;
public class OneDArr {
public static void main(String[] args) 
{
Scanner sc = new Scanner(System.in);
int size=sc.nextInt();
int[ ] num = new int[size];
for (int i = 0; i < size; i++) {
num[i] = sc.nextInt();
}
 
double avg = 0.0;
int sum = 0;
// Find the sum of these numbers.
  for(int i = 0; i < size; i++)
   sum  = sum + num[i];
     avg = (double)sum/size;
  System.out.println("Sum of array: " +sum);
  System.out.println("Average of array: " +avg);
 }
}
##
Write a Java program to find the smallest and second smallest elements of a given array.

import java.util.Scanner;

public class SmallestAndSecondSmallest {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the size of the array
        //System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        // Validate input
        if (size < 2) {
            System.out.println("Array size should be at least 2.");
            return;
        }

        // Read the elements of the array
        int[] array = new int[size];
        //System.out.println("Enter the elements of the array:");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt();
        }

        // Find the smallest and second smallest elements
        int[] result = findSmallestAndSecondSmallest(array);

        // Display the result
        System.out.println("Smallest element: " + result[0]);
        System.out.println("Second smallest element: " + result[1]);

        scanner.close();
    }

    private static int[] findSmallestAndSecondSmallest(int[] array) {
        int smallest = Integer.MAX_VALUE;
        int secondSmallest = Integer.MAX_VALUE;

        for (int num : array) {
            if (num < smallest) {
                secondSmallest = smallest;
                smallest = num;
            } else if (num < secondSmallest && num != smallest) {
                secondSmallest = num;
            }
        }

        // If secondSmallest is still Integer.MAX_VALUE, there is no second smallest element
        if (secondSmallest == Integer.MAX_VALUE) {
            secondSmallest = smallest; // Set secondSmallest to smallest
        }

        return new int[]{smallest, secondSmallest};
    }
}
##
Write a Java program that creates integer array of  size is 'n' elements, accepts values of arrays and find sum of all odd numbers in an array.

import java.util.*; 
public class ss
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        int size=sc.nextInt();
        int sumOdd=0;
        int Arr[] = new int[size]; 
        for(int i = 0; i < Arr.length; i++) 
           Arr[i] = sc.nextInt(); 
        for(int j = 0; j < Arr.length; j++){ 
           if(Arr[j]%2!=0){ 
             sumOdd = sumOdd + Arr[j];
           }
        }
        System.out.println("Sum of odd numbers: "+sumOdd); 
   } 
}
##
Develop a Java Program to sort the elements of an array in descending order.

import java.util.Scanner;

public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n;   
        
        n=sc.nextInt();   
        
        Integer arr[]=new Integer[n];    
    
        for(int i=0;i<n;i++)     
        {
            arr[i]=sc.nextInt();
        }
        
        int temp = 0;    
        
         for (int i = 0; i < arr.length; i++)  
         {     
            for (int j = i+1; j < arr.length; j++)    
            {     
               if(arr[i] < arr[j])
               {    
                   temp = arr[i];    
                   arr[i] = arr[j];    
                   arr[j] = temp;    
               }     
            }     
        }    
          
        //System.out.println();    
            
        
        System.out.print("Result of a Sorted Array :");    
        for (int i = 0; i < arr.length; i++) 
        {     
            System.out.print(arr[i] + " ");    
        }    
    }
}
##
Develop a java program to read the length of an array, to store elements into the array and then display the array elements. Use Scanner class to read the input.

import java.util.Scanner;
public class OnedimensionalScanner
{
   public static void main(String args[])
   {    
	int len;
	Scanner sc=new Scanner(System.in);
	//System.out.println("Enter Array length : ");
	len=sc.nextInt();
	int a[]=new int[len];//declaration    	 
	//System.out.print("Enter " + len + " Element to Store in Array :\n");
        for(int i=0; i<len; i++)
        {
           a[i] = sc.nextInt();
        }   
        System.out.print("Elements in Array are :\n");
        for(int i=0; i<len; i++)
        {
           System.out.print(a[i] + "  ");
        }  
   }
}
##
Write a Java program that creates integer array of 10 elements, accepts 10 values of arrays and print the array values in reverse order.

import java.util.*; 
public class Main
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        //System.out.println("Enter 10 array elements:");
        int Arr[] = new int[10]; 
        for(int i = 0; i < Arr.length; i++) 
            Arr[i] = sc.nextInt(); 
        
        System.out.println("Reverse Array: "); 
        for (int k = Arr.length-1; k >= 0; k--) 
            System.out.print(Arr[k] + " "); 
    } 
}
##
Write a Java program that creates size of an array, accepts values of arrays and display only odd numbers in the array.

import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   { 
      Scanner sc = new Scanner(System.in); 
      int size=sc.nextInt();
      int Arr[] = new int[size]; 
      for(int i = 0; i < Arr.length; i++) 
         Arr[i] = sc.nextInt(); 
      System.out.println("Odd Numbers: "); 
      for(int j = 0; j < Arr.length; j++){ 
         if(Arr[j]%2!=0){ 
            System.out.println(Arr[j]); 
         }
      }
   } 
}
##
Write a Java program to arrange the elements of an array of integers so that all negative integers appear before all positive integers.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        int[] array = new int[n];

        //System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

        rearrangeArray(array);

        System.out.println("Array after rearrangement:");
        for (int i : array) {
            System.out.print(i + " ");
        }
        
        scanner.close();
    }

    private static void rearrangeArray(int[] array) {
        int j = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] < 0) {
                if (i != j) {
                    // Swap array[i] and array[j]
                    int temp = array[i];
                    array[i] = array[j];
                    array[j] = temp;
                }
                j++;
            }
        }
    }
}
##
Construct a Java program to find smallest element in an array and then print the value.

import java.util.Scanner;

public class Main
{
   public static void main(String[] args)
   {
      int tot, i, small;
      Scanner scan = new Scanner(System.in);
      
      //System.out.print("Enter the Size of Array: ");
      tot = scan.nextInt();
      int[] arr = new int[tot];
      //System.out.print("Enter " +tot+ " Numbers: ");
      for(i=0; i<tot; i++)
         arr[i] = scan.nextInt();
      
      small = arr[0];
      for(i=1; i<tot; i++)
      {
         if(small>arr[i])
            small = arr[i];
      }
      
      System.out.println("Smallest Number = " +small);
   }
}
##
Write a java program that returns the sum of all the values in a 2D array.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Ask for the dimensions of the 2D array
        //System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        //System.out.print("Enter the number of columns: ");
        int columns = scanner.nextInt();

        // Initialize the 2D array
        int[][] array = new int[rows][columns];

        // Read the values for the 2D array from user input
        //System.out.println("Enter the values for the 2D array:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                //System.out.printf("Element [%d][%d]: ", i, j);
                array[i][j] = scanner.nextInt();
            }
        }

        // Calculate and print the sum of all values in the 2D array
        int sum = calculateSum(array);
        System.out.println("The sum of all values in the 2D array is: " + sum);

        scanner.close();
    }

    /**
     * Calculates the sum of all values in a 2D array.
     *
     * @param array The 2D array of integers.
     * @return The sum of all values in the array.
     */
    public static int calculateSum(int[][] array) {
        int sum = 0;
        for (int[] row : array) {
            for (int element : row) {
                sum += element;
            }
        }
        return sum;
    }
}
##
Write a java program to read and print a two-dimensional array.

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        int row, col;
        int arr[][];
        Scanner scanner = new Scanner(System.in);
        
        row = scanner.nextInt();
        
        col = scanner.nextInt();
        arr = new int[row][col];
        for (int i = 0; i < row; i++) {
            
            for (int j = 0; j < col; j++) {
                
                //System.out.print("Enter element for row = " + (i + 1) + " column = " + (j + 1) + " : ");
                arr[i][j] = scanner.nextInt();
            }
        
        } 
        System.out.println("You have entered the following array : ");
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }

}
##
Create a java program to find second largest number in an array.

import java.util.Scanner;

public class ArrayProgram {

  
  public static int secondLargest(int[] arr) {
    
    
    int fmax = 0; 
    int smax = 0; 

    
    fmax = arr[0];
    smax = arr[0];

    for (int i = 1; i < arr.length; i++) {
      if (fmax < arr[i]) {
        smax = fmax;
        fmax = arr[i];
      } else if(smax < arr[i]) {
        smax = arr[i];
      }
    }

    return smax;
  }
  
  public static void main(String[] args) {
    
    Scanner scan = new Scanner(System.in);

   
    int length = 0;
    int numbers[] = null;

   
   
    length = scan.nextInt();


    numbers = new int[length];


    for (int i = 0; i < numbers.length; i++) {
      numbers[i] = scan.nextInt();
    }

    System.out.println("Second largest element = " 
                         + secondLargest(numbers));

    
    scan.close();
  }
}
##
Write a java program to display elements of one dimensional array and Simply pass the name of the normal array to the method.

public class Main
{
    public static void addTen(int[] arr)
    {
        for(int i = 0; i < arr.length; i++)
        {
            arr[i] += 10;
        }
    }
    public static void main(String[] args)
    {
        int[] arr = {1, 3, 5, 7, 9};
        addTen(arr);
        for(int i = 0; i < arr.length; i++)
        {
            System.out.print(arr[i] + " ");
        }
    }
}
##
write a Java program to merge two arrays. Both the array must be received by user at run-time of the program.

import java.util.Scanner;
public class CodesCracker
{
   public static void main(String[] args)
   {
      int i, k=0;
      int[] a = new int[5];
      int[] b = new int[5];
      int[] c = new int[10];
      Scanner scan = new Scanner(System.in);
      
      
      for(i=0; i<5; i++)
         a[i] = scan.nextInt();
      
      
      for(i=0; i<5; i++)
         b[i] = scan.nextInt();
      

      for(i=0; i<5; i++, k++)
         c[k] = a[i];
      
     
      for(i=0; i<5; i++, k++)
         c[k] = b[i];
      
      System.out.println("The merged array is: ");
      for(i=0; i<10; i++)
         System.out.print(c[i]+ " ");
   }
}
##
Write a Java program to print an array after changing the rows and columns of a two-dimensional array.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        //System.out.print("Enter the number of columns: ");
        int columns = scanner.nextInt();

        int[][] matrix = new int[rows][columns];
        int[][] transposedMatrix = new int[columns][rows];

        // Reading matrix values from the user
        //System.out.println("Enter the matrix values:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        // Transposing the matrix
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                transposedMatrix[j][i] = matrix[i][j];
            }
        }

        // Printing the original matrix
        System.out.println("Original Matrix:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }

        // Printing the transposed matrix
        System.out.println("Transposed Matrix:");
        for (int i = 0; i < columns; i++) {
            for (int j = 0; j < rows; j++) {
                System.out.print(transposedMatrix[i][j] + " ");
            }
            System.out.println();
        }

        scanner.close();
    }
}
##
Write a Java Program to Accept Array Elements and Calculate Sum.

import java.util.Scanner;
public class Array_Sum
{
    public static void main(String[] args) 
    {
        int n, sum = 0;
        Scanner s = new Scanner(System.in);
        
        n = s.nextInt();
        int a[] = new int[n];
        
        for(int i = 0; i < n; i++)
        {
            a[i] = s.nextInt();
            sum = sum + a[i];
        }
        System.out.println("Sum:"+sum);
    }
}
##
Write a Java Program to Find Sum of Even and Odd Numbers in the array , and display the odd and even sum numbers.

import java.util.Arrays;
import java.util.Scanner;

public class ArrayTest {

  public static void main(String[] args) {
    
    Scanner scan = new Scanner(System.in);


    
    int n = scan.nextInt();


    int numbers[] = new int[n];

    
    for (int i = 0; i < n; ++i) {
      numbers[i] = scan.nextInt();
    }

   
    oddEvenSum(numbers);

    scan.close();

  }

  
  public static void oddEvenSum(int[] numbers) {
      
    int oddSum = 0;
    int evenSum = 0;

    
    for (int num : numbers) {
      if (num % 2 == 0) { 
        evenSum += num;
      } else {            
        oddSum += num;
      }
    }

    System.out.println("Odd numbers sum = " + oddSum);
    System.out.println("Even numbers sum = " + evenSum);
  }
}
##
Write a java program to display elements of one dimensional array and Passing two arrays and calling the method.

public class Main{
    public static void addArrays(int[] arr1, int[] arr2)
    {
        for(int i = 0; i < arr1.length; i++)
        {
            int sum = arr1[i] + arr2[i];
            System.out.print(sum + " ");
        }
    }
    public static void main(String[] args)
    {
        int[] arr1 = {1, 2, 3, 4, 5};
        int[] arr2 = {2, 4, 6, 8, 10};
        addArrays(arr1, arr2);
    }
}
##
Develop a java program declare and initialize four one dimensional array of 2 elements each , display the elements of each array with their indexes and values and to print the elements of an array.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Declare and initialize four one-dimensional arrays of 2 elements each
        int[] array1 = new int[2];
        int[] array2 = new int[2];
        int[] array3 = new int[2];
        int[] array4 = new int[2];

        // Read input for each array
        for (int i = 1; i <= 4; i++) {
            //System.out.println("Enter 2 elements for array " + i + ":");
            for (int j = 0; j < 2; j++) {
                int input = scanner.nextInt(); // Read the input
                // Assign the input to the appropriate array
                switch (i) {
                    case 1:
                        array1[j] = input;
                        break;
                    case 2:
                        array2[j] = input;
                        break;
                    case 3:
                        array3[j] = input;
                        break;
                    case 4:
                        array4[j] = input;
                        break;
                }
            }
        }

        // Display the elements of each array with their indexes and values
        printArrayElements(array1, 1);
        printArrayElements(array2, 2);
        printArrayElements(array3, 3);
        printArrayElements(array4, 4);

        scanner.close();
    }

    // Helper method to print the elements of an array
    private static void printArrayElements(int[] array, int arrayNumber) {
        System.out.println("Elements of array " + arrayNumber + ":");
        for (int i = 0; i < array.length; i++) {
            System.out.println("Index: " + i + ", Value: " + array[i]);
        }
    }
}
##
Develop a Java Program to read and print two dimensional array (Matrix).

import java.util.Scanner;

public class Ex2DArray {
  public static void main(String args[]) {
	// initialize here.
	int row, col, i, j;
	int arr[][] = new int[10][10];
	Scanner scan = new Scanner(System.in);

	// enter row and column for array.
	//System.out.print("Enter row for the array (max 10) : ");
	row = scan.nextInt();
	//System.out.print("Enter column for the array (max 10) : ");
	col = scan.nextInt();

	// enter array elements.
	//System.out.println("Enter " + (row * col) + " Array Elements : ");
	for (i = 0; i < row; i++) {
  	for (j = 0; j < col; j++) {
    	arr[i][j] = scan.nextInt();
  	}
	}

	// the 2D array is here.
	System.out.print("The Array is :\n");
	for (i = 0; i < row; i++) {
  	for (j = 0; j < col; j++) {
    	System.out.print(arr[i][j] + "  ");
  	}
  	System.out.println();
	}
  }
}
##
Write a Java Program to Calculate Sum of Even Numbers using for loop.

import java.util.Scanner;

public class SumofEven1 {
	private static Scanner sc;
	public static void main(String[] args) 
	{
		int number, i, evenSum = 0;
		sc = new Scanner(System.in);
		
		
		number = sc.nextInt();	
		
		for(i = 1; i <= number; i++)
		{
			if(i % 2 == 0)
			{
				evenSum = evenSum + i; 
			}
		}
		System.out.println("The Sum of Even Numbers:" + evenSum);
	}
}
##
Write a java program copy one array value to another value in Java by using the assignment operator (=).

import java.util.*;  
public class Main  
{  
public static void main(String[] args)   
{  
int n;  
Scanner sc=new Scanner(System.in);  
n=sc.nextInt();  
int[] array = new int[10];  
int[] newArr = new int[10]; 
for(int i=0; i<n; i++)  
{  
array[i]=sc.nextInt();  
}  
for(int i=0; i<n; i++)  
{  
newArr[i]=array[i];  
} 
System.out.println("Original Array=" + Arrays.toString(array));
System.out.println("Copied Array=" + Arrays.toString(newArr));
}
}
##
Write a java program to display elements of one dimensional array and passing 2d array value to function or methods. 

class TwoDArray 
{
 void show(int x[ ][ ])
 {
    int i, j;
    System.out.println("Matrix x: ");
   for(i = 0; i < x.length; i++)
   {
	 for(j = 0; j < x.length; j++)
	   System.out.print(x[i][j]+ " ");
	   System.out.println();
   }
  }
}
public class PassingTwoDArrayToMethod {
public static void main(String[] args) 
{
 int x[ ][ ] = {{1, 2},{3, 4}};
 TwoDArray obj = new TwoDArray();
  obj.show(x);
 }
}
##
Read number of rows and columns, array elements for two dimensional array and print in matrix format using java program.

import java.util.Scanner;

public class Ex2DArray {
  public static void main(String args[]) {
   
    int row, col, i, j;
    int arr[][] = new int[10][10];
    Scanner scan = new Scanner(System.in);

   
    row = scan.nextInt();

    col = scan.nextInt();

    
    for (i = 0; i < row; i++) {
      for (j = 0; j < col; j++) {
        arr[i][j] = scan.nextInt();
      }
    }


    System.out.print("The Array is :\n");
    for (i = 0; i < row; i++) {
      for (j = 0; j < col; j++) {
        System.out.print(arr[i][j] + " ");
      }
      System.out.println();
    }
  }
}
##
Write a java program for multidimensional array to read the values for array and then display the values row by row.

import java.util.Scanner;
public class ArrayRowByRowPrinter {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.println("Enter the number of rows:");
        int rows = scanner.nextInt();

        //System.out.println("Enter the number of columns:");
        int columns = scanner.nextInt();

        // Initializing the two-dimensional array based on user input
        int[][] twoDArray = new int[rows][columns];

        //System.out.println("Enter the elements of the array:");

        // Loop to input array elements
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                twoDArray[i][j] = scanner.nextInt();
            }
        }

        System.out.println("Printing array elements row by row:");

        // Looping through the array to print elements row by row
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(twoDArray[i][j] + " ");
            }
            // Move to the next line after printing all elements of the current row
            System.out.println();
        }

        scanner.close();
    }
}
##
Write a Java Program to find Sum of Even Numbers in an Array using For Loop.

import java.util.Scanner;

public class SumOfEvens1 {
	private static Scanner sc;
	public static void main(String[] args) 
	{
		int Size, i, EvenSum = 0;
		sc = new Scanner(System.in);
	 
	
		Size = sc.nextInt();	
		
		int [] a = new int[Size];
		
		
		for (i = 0; i < Size; i++)
		{
			a[i] = sc.nextInt();
		}   

		for(i = 0; i < Size; i++)
		{
			if(a[i] % 2 == 0)
			{
				EvenSum = EvenSum + a[i]; 
			}
		}		
		System.out.println("The Sum of Even Numbers in this Array = " + EvenSum);
	}
}
##
Develop a java program to calculate the average of numbers for array, first, we need to calculate the sum and then find the average using sum / number_of_array_elements variables.

import java.util.*;
public class ArrayAverage {
  public static void main(String[] args) {

Scanner sc=new Scanner(System.in);   
int size=sc.nextInt();
double[] array = new double[size];  

for(int i=0; i<size; i++)  
{  
   
array[i]=sc.nextInt();  
}
    
    double sum = 0.0;

    double avg = 0.0;

    
    for (int i=0; i<array.length; i++) {
      
      sum = sum + array[i];
    }

    avg = sum/array.length;

    
    System.out.println("Average: " + avg );
  }
}
##
Write a java program to display elements of one dimensional array and passing array value to function or methods. Final Output is modified value.

public class PassingArrays {
public static void main(String[] args) 
{
  int x = 2; 
  int[ ] num = {0, 1}; 
   m1(x, num);
   System.out.println("Value of x: " +x);
   System.out.print("Value of num[1]: " +num[1]);
 }
public static void m1(int x, int[ ] num) 
{
   x = 5; 
   num[1] = 20; 
 }
}
##
Write a java program to find the sum of all the elements present in a 2-D array.

public class Main
{
    public static void sum(int[][] arr)
    {
        int sum = 0;
        for(int i = 0; i < arr.length; i++)
        {
            for(int j = 0; j < arr[0].length; j++)
            {
                sum = sum + arr[i][j];
            }
        }
        System.out.print("Sum of all elements is: " + sum);
    }
    public static void main(String[] args)
    {
        int[][] arr = {
                {1, 2, 3, 4, 5},
                {2, 4, 6, 8, 10},
                {1, 3, 5, 7, 9}
        };
        sum(arr);
    }
}
##
Write a java program for multidimensional array to read the string values for array and then display the values row by row.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.println("Enter the number of rows:");
        int rows = scanner.nextInt();

        //System.out.println("Enter the number of columns:");
        int columns = scanner.nextInt();

        // Consume the remaining newline
        scanner.nextLine();

        // Initializing the two-dimensional string array
        String[][] stringArray = new String[rows][columns];

        //System.out.println("Enter the elements of the array:");

        // Loop for inputting array elements
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                stringArray[i][j] = scanner.nextLine();
            }
        }

        System.out.println("Printing array elements row by row:");

        // Looping through the array to print elements row by row
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(stringArray[i][j] + " ");
            }
            System.out.println(); // Move to the next line after printing all elements of the current row
        }

        scanner.close();
    }
}
##
Write a Java Program to find Sum of Even Numbers in an Array using For Loop.

import java.util.Scanner;

public class SumOfEvens1 {
	private static Scanner sc;
	public static void main(String[] args) 
	{
		int Size, i, EvenSum = 0;
		sc = new Scanner(System.in);
	 
	
		Size = sc.nextInt();	
		
		int [] a = new int[Size];
		
		
		for (i = 0; i < Size; i++)
		{
			a[i] = sc.nextInt();
		}   

		for(i = 0; i < Size; i++)
		{
			if(a[i] % 2 == 0)
			{
				EvenSum = EvenSum + a[i]; 
			}
		}		
		System.out.println("The Sum of Even Numbers in this Array = " + EvenSum);
	}
}
##
Develop a java program to calculate the average of numbers for array, first, we need to calculate the sum and then find the average using sum / number_of_array_elements variables.

import java.util.*;
public class ArrayAverage {
  public static void main(String[] args) {

Scanner sc=new Scanner(System.in);   
int size=sc.nextInt();
double[] array = new double[size];  

for(int i=0; i<size; i++)  
{  
   
array[i]=sc.nextInt();  
}
    
    double sum = 0.0;

    double avg = 0.0;

    
    for (int i=0; i<array.length; i++) {
      
      sum = sum + array[i];
    }

    avg = sum/array.length;

    
    System.out.println("Average: " + avg );
  }
}
##
Write a java program to display elements of one dimensional array and passing array value to function or methods. Final Output is modified value.

public class PassingArrays {
public static void main(String[] args) 
{
  int x = 2; 
  int[ ] num = {0, 1}; 
   m1(x, num);
   System.out.println("Value of x: " +x);
   System.out.print("Value of num[1]: " +num[1]);
 }
public static void m1(int x, int[ ] num) 
{
   x = 5; 
   num[1] = 20; 
 }
}
##
Read number of rows and columns, array elements for two dimensional array and print in matrix format using java program.

import java.util.Scanner;

public class Ex2DArray {
  public static void main(String args[]) {
   
    int row, col, i, j;
    int arr[][] = new int[10][10];
    Scanner scan = new Scanner(System.in);

   
    row = scan.nextInt();

    col = scan.nextInt();

    
    for (i = 0; i < row; i++) {
      for (j = 0; j < col; j++) {
        arr[i][j] = scan.nextInt();
      }
    }


    System.out.print("The Array is :\n");
    for (i = 0; i < row; i++) {
      for (j = 0; j < col; j++) {
        System.out.print(arr[i][j] + " ");
      }
      System.out.println();
    }
  }
}
##
Develop a Java Program to read and print two dimensional array (Matrix).

import java.util.Scanner;

public class Ex2DArray {
  public static void main(String args[]) {
	// initialize here.
	int row, col, i, j;
	int arr[][] = new int[10][10];
	Scanner scan = new Scanner(System.in);

	// enter row and column for array.
	//System.out.print("Enter row for the array (max 10) : ");
	row = scan.nextInt();
	//System.out.print("Enter column for the array (max 10) : ");
	col = scan.nextInt();

	// enter array elements.
	//System.out.println("Enter " + (row * col) + " Array Elements : ");
	for (i = 0; i < row; i++) {
  	for (j = 0; j < col; j++) {
    	arr[i][j] = scan.nextInt();
  	}
	}

	// the 2D array is here.
	System.out.print("The Array is :\n");
	for (i = 0; i < row; i++) {
  	for (j = 0; j < col; j++) {
    	System.out.print(arr[i][j] + "  ");
  	}
  	System.out.println();
	}
  }
}
##
Write a Java Program to Accept Array Elements and Calculate Sum.

import java.util.Scanner;
public class Array_Sum
{
    public static void main(String[] args) 
    {
        int n, sum = 0;
        Scanner s = new Scanner(System.in);
        
        n = s.nextInt();
        int a[] = new int[n];
        
        for(int i = 0; i < n; i++)
        {
            a[i] = s.nextInt();
            sum = sum + a[i];
        }
        System.out.println("Sum:"+sum);
    }
}
##
Write a Java Program to Find Sum of Even and Odd Numbers in the array , and display the odd and even sum numbers.

import java.util.Arrays;
import java.util.Scanner;

public class ArrayTest {

  public static void main(String[] args) {
    
    Scanner scan = new Scanner(System.in);


    
    int n = scan.nextInt();


    int numbers[] = new int[n];

    
    for (int i = 0; i < n; ++i) {
      numbers[i] = scan.nextInt();
    }

   
    oddEvenSum(numbers);

    scan.close();

  }

  
  public static void oddEvenSum(int[] numbers) {
      
    int oddSum = 0;
    int evenSum = 0;

    
    for (int num : numbers) {
      if (num % 2 == 0) { 
        evenSum += num;
      } else {            
        oddSum += num;
      }
    }

    System.out.println("Odd numbers sum = " + oddSum);
    System.out.println("Even numbers sum = " + evenSum);
  }
}
##
Write a java program to display elements of one dimensional array and Simply pass the name of the normal array to the method.

public class Main
{
    public static void addTen(int[] arr)
    {
        for(int i = 0; i < arr.length; i++)
        {
            arr[i] += 10;
        }
    }
    public static void main(String[] args)
    {
        int[] arr = {1, 3, 5, 7, 9};
        addTen(arr);
        for(int i = 0; i < arr.length; i++)
        {
            System.out.print(arr[i] + " ");
        }
    }
}
##
Input value for 2d array

public class Main
{
    public static void sum(int[][] arr)
    {
        int sum = 0;
        for(int i = 0; i < arr.length; i++)
        {
            for(int j = 0; j < arr[0].length; j++)
            {
                sum = sum + arr[i][j];
            }
        }
        System.out.print("Sum of all elements is: " + sum);
    }
    public static void main(String[] args)
    {
        int[][] arr = {
                {1, 2, 3, 4, 5},
                {2, 4, 6, 8, 10},
                {1, 3, 5, 7, 9}
        };
        sum(arr);
    }
}
##
Write a java program for multidimensional array to read the values for array and then display the values row by row.

import java.util.Scanner;

public class ArrayRowByRowPrinter {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.println("Enter the number of rows:");
        int rows = scanner.nextInt();

        //System.out.println("Enter the number of columns:");
        int columns = scanner.nextInt();

        // Initializing the two-dimensional array based on user input
        int[][] twoDArray = new int[rows][columns];

        //System.out.println("Enter the elements of the array:");

        // Loop to input array elements
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                twoDArray[i][j] = scanner.nextInt();
            }
        }

        System.out.println("Printing array elements row by row:");

        // Looping through the array to print elements row by row
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(twoDArray[i][j] + " ");
            }
            // Move to the next line after printing all elements of the current row
            System.out.println();
        }

        scanner.close();
    }
}
##
Write a java program to read and print a two-dimensional array.

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int row, col;
        int arr[][];
        Scanner scanner = new Scanner(System.in);
        
        row = scanner.nextInt();
        
        col = scanner.nextInt();
        arr = new int[row][col];
        for (int i = 0; i < row; i++) {
            
            for (int j = 0; j < col; j++) {
                
                //System.out.print("Enter element for row = " + (i + 1) + " column = " + (j + 1) + " : ");
                arr[i][j] = scanner.nextInt();
            }
        
        } 
        System.out.println("You have entered the following array : ");
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }

}
##
Create a java program to find second largest number in an array.

import java.util.Scanner;

public class ArrayProgram {

  
  public static int secondLargest(int[] arr) {
    
    
    int fmax = 0; 
    int smax = 0; 

    
    fmax = arr[0];
    smax = arr[0];

    for (int i = 1; i < arr.length; i++) {
      if (fmax < arr[i]) {
        smax = fmax;
        fmax = arr[i];
      } else if(smax < arr[i]) {
        smax = arr[i];
      }
    }

    return smax;
  }
  
  public static void main(String[] args) {
    
    Scanner scan = new Scanner(System.in);

   
    int length = 0;
    int numbers[] = null;

   
   
    length = scan.nextInt();


    numbers = new int[length];


    for (int i = 0; i < numbers.length; i++) {
      numbers[i] = scan.nextInt();
    }

    System.out.println("Second largest element = " 
                         + secondLargest(numbers));

    
    scan.close();
  }
}
##
Write a java program to display elements of one dimensional array and passing 2d array value to function or methods. 

class TwoDArray 
{
 void show(int x[ ][ ])
 {
    int i, j;
    System.out.println("Matrix x: ");
   for(i = 0; i < x.length; i++)
   {
	 for(j = 0; j < x.length; j++)
	   System.out.print(x[i][j]+ " ");
	   System.out.println();
   }
  }
}
public class PassingTwoDArrayToMethod {
public static void main(String[] args) 
{
 int x[ ][ ] = {{1, 2},{3, 4}};
 TwoDArray obj = new TwoDArray();
  obj.show(x);
 }
}
##
write a Java program merges two given arrays into the third array, and then sort the merged array in ascending order.

import java.util.Scanner;

public class CodesCracker
{
   public static void main(String[] args)
   {
      int i, j;
      Scanner scan = new Scanner(System.in);
      
      
      int x = scan.nextInt();
      int[] a = new int[x];
      
      for(i=0; i<x; i++)
         a[i] = scan.nextInt();
      
     
      int y = scan.nextInt();
      int[] b = new int[y];
      
      for(i=0; i<y; i++)
         b[i] = scan.nextInt();
      

      int[] merge = new int[x+y];
      for(i=0; i<x; i++)
         merge[i] = a[i];
      for(j=0; j<y; j++)
         merge[i++] = b[j];
      
      
      int k = i;
      for(i=0; i<(k-1); i++)
      {
         for(j=0; j<(k-1); j++)
         {
            if(merge[j]>merge[j+1])
            {
               int temp = merge[j];
               merge[j] = merge[j+1];
               merge[j+1] = temp;
            }
         }
      }
      
     
      System.out.println("The merged array is: ");
      for(i=0; i<k; i++)
         System.out.print(merge[i]+ " ");
   }
}
##
Write a java program that returns the sum of all the values in a 2D array.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Ask for the dimensions of the 2D array
        //System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        //System.out.print("Enter the number of columns: ");
        int columns = scanner.nextInt();

        // Initialize the 2D array
        int[][] array = new int[rows][columns];

        // Read the values for the 2D array from user input
        //System.out.println("Enter the values for the 2D array:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                //System.out.printf("Element [%d][%d]: ", i, j);
                array[i][j] = scanner.nextInt();
            }
        }

        // Calculate and print the sum of all values in the 2D array
        int sum = calculateSum(array);
        System.out.println("The sum of all values in the 2D array is: " + sum);

        scanner.close();
    }

    /**
     * Calculates the sum of all values in a 2D array.
     *
     * @param array The 2D array of integers.
     * @return The sum of all values in the array.
     */
    public static int calculateSum(int[][] array) {
        int sum = 0;
        for (int[] row : array) {
            for (int element : row) {
                sum += element;
            }
        }
        return sum;
    }
}
##
int[][] arr = {{50,60},{70,80},{90,10}};

public class TwoDArray {
  public static void main(String[] args) {
    
  
    int[][] arr = {{50,60},{70,80},{90,10}};
    
    System.out.println("Parent size = " + arr.length);
    System.out.println("Child-1 size = " + arr[0].length);
    System.out.println("Child-2 size = " + arr[1].length);
    System.out.println("Child-3 size = " + arr[2].length);
  }
}
##
Write a java program to read array value, display the array1 and array2 value.

import java.util.Scanner;  
public class ArrayInputExample1   
{  
public static void main(String[] args)   
{  
int n;  
Scanner sc=new Scanner(System.in);  

 
int[] array1 = new int[5];  

for(int i=0; i<5; i++)  
{  
   
array1[i]=sc.nextInt();  
}  
for(int i=0; i<5; i++)  
{  
   
System.out.println(array1[i]); 
}
int[] array2 = new int[5];  
 
for(int i=0; i<5; i++)  
{  

array2[i]=sc.nextInt();  
} 
for(int i=0; i<5; i++)  
{  
   
System.out.println(array2[i]); 
}

}
}
##
Write a java program to display elements of one dimensional array and Passing two arrays and calling the method.

public class Main{
    public static void addArrays(int[] arr1, int[] arr2)
    {
        for(int i = 0; i < arr1.length; i++)
        {
            int sum = arr1[i] + arr2[i];
            System.out.print(sum + " ");
        }
    }
    public static void main(String[] args)
    {
        int[] arr1 = {1, 2, 3, 4, 5};
        int[] arr2 = {2, 4, 6, 8, 10};
        addArrays(arr1, arr2);
    }
}
##
Develop a java program declare and initialize four one dimensional array of 2 elements each , display the elements of each array with their indexes and values and to print the elements of an array.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Declare and initialize four one-dimensional arrays of 2 elements each
        int[] array1 = new int[2];
        int[] array2 = new int[2];
        int[] array3 = new int[2];
        int[] array4 = new int[2];

        // Read input for each array
        for (int i = 1; i <= 4; i++) {
            //System.out.println("Enter 2 elements for array " + i + ":");
            for (int j = 0; j < 2; j++) {
                int input = scanner.nextInt(); // Read the input
                // Assign the input to the appropriate array
                switch (i) {
                    case 1:
                        array1[j] = input;
                        break;
                    case 2:
                        array2[j] = input;
                        break;
                    case 3:
                        array3[j] = input;
                        break;
                    case 4:
                        array4[j] = input;
                        break;
                }
            }
        }

        // Display the elements of each array with their indexes and values
        printArrayElements(array1, 1);
        printArrayElements(array2, 2);
        printArrayElements(array3, 3);
        printArrayElements(array4, 4);

        scanner.close();
    }

    // Helper method to print the elements of an array
    private static void printArrayElements(int[] array, int arrayNumber) {
        System.out.println("Elements of array " + arrayNumber + ":");
        for (int i = 0; i < array.length; i++) {
            System.out.println("Index: " + i + ", Value: " + array[i]);
        }
    }
}
##
Write a Java program to print an array after changing the rows and columns of a two-dimensional array.

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        //System.out.print("Enter the number of columns: ");
        int columns = scanner.nextInt();

        int[][] matrix = new int[rows][columns];
        int[][] transposedMatrix = new int[columns][rows];

        // Reading matrix values from the user
        //System.out.println("Enter the matrix values:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        // Transposing the matrix
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                transposedMatrix[j][i] = matrix[i][j];
            }
        }

        // Printing the original matrix
        System.out.println("Original Matrix:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }

        // Printing the transposed matrix
        System.out.println("Transposed Matrix:");
        for (int i = 0; i < columns; i++) {
            for (int j = 0; j < rows; j++) {
                System.out.print(transposedMatrix[i][j] + " ");
            }
            System.out.println();
        }

        scanner.close();
    }
}
##
Write a Java Program to Calculate Sum of Even Numbers using for loop.

import java.util.Scanner;

public class SumofEven1 {
	private static Scanner sc;
	public static void main(String[] args) 
	{
		int number, i, evenSum = 0;
		sc = new Scanner(System.in);
		
		
		number = sc.nextInt();	
		
		for(i = 1; i <= number; i++)
		{
			if(i % 2 == 0)
			{
				evenSum = evenSum + i; 
			}
		}
		System.out.println("The Sum of Even Numbers:" + evenSum);
	}
}
##
Write a java program copy one array value to another value in Java by using the assignment operator (=).

import java.util.*;  
public class Main  
{  
public static void main(String[] args)   
{  
int n;  
Scanner sc=new Scanner(System.in);  
n=sc.nextInt();  
int[] array = new int[10];  
int[] newArr = new int[10]; 
for(int i=0; i<n; i++)  
{  
array[i]=sc.nextInt();  
}  
for(int i=0; i<n; i++)  
{  
newArr[i]=array[i];  
} 
System.out.println("Original Array=" + Arrays.toString(array));
System.out.println("Copied Array=" + Arrays.toString(newArr));
}
}
##
Write a java program to display elements of one dimensional array and passing array value to function or methods.

class OneDArray 
{
  void show(int x[ ]) {
	 for(int i = 0; i < x.length; i++) 
	 {
	   System.out.print(x[i]+ " ");	 
	 }
  }
}
public class OneDArraytoMethod {
public static void main(String[ ] args) 
{

    int[ ] x = {2, 3, 4, 5, 6, 7, 8};


     OneDArray obj = new OneDArray();
     System.out.println("Value of array x: ");
      obj.show(x); 
  }
}
##
write a Java program to merge two arrays. Both the array must be received by user at run-time of the program.

import java.util.Scanner;

public class CodesCracker
{
   public static void main(String[] args)
   {
      int i, k=0;
      int[] a = new int[5];
      int[] b = new int[5];
      int[] c = new int[10];
      Scanner scan = new Scanner(System.in);
      
      
      for(i=0; i<5; i++)
         a[i] = scan.nextInt();
      
      
      for(i=0; i<5; i++)
         b[i] = scan.nextInt();
      

      for(i=0; i<5; i++, k++)
         c[k] = a[i];
      
     
      for(i=0; i<5; i++, k++)
         c[k] = b[i];
      
      System.out.println("The merged array is: ");
      for(i=0; i<10; i++)
         System.out.print(c[i]+ " ");
   }
}
##
Write a java program for multidimensional array and  initialize all the elements of the given 2d array.

public class Main
{
    public static void main(String[] args) {
         //2-d array initialised with values    
        int[][] intArray = { { 1, 2 }, { 3, 4 },{5,6}}; 
        //print the array
        System.out.println("Initialized Two dimensional array:");
        for (int i = 0; i < 3; i++) { 
            for (int j = 0; j < 2; j++) { 
            System.out.print(intArray [i][j] + " "); 
            } 
 
            System.out.println(); 
        } 
    }
}
##
Write a java program to Find Second Largest Number in Array Java.

import java.util.Scanner;

public class ArrayProgram {

  
  public static int secondLargest(int[] arr) {
    
    
    int fmax = 0; 
    int smax = 0; 

    
    fmax = arr[0];
    smax = arr[0];

    for (int i = 1; i < arr.length; i++) {
      if (fmax < arr[i]) {
        smax = fmax;
        fmax = arr[i];
      } else if(smax < arr[i]) {
        smax = arr[i];
      }
    }

    return smax;
  }
  
  public static void main(String[] args) {
    
    Scanner scan = new Scanner(System.in);

   
    int length = 0;
    int numbers[] = null;

   
   
    length = scan.nextInt();


    numbers = new int[length];


    for (int i = 0; i < numbers.length; i++) {
      numbers[i] = scan.nextInt();
    }

    System.out.println("Second largest element = " 
                         + secondLargest(numbers));

    
    scan.close();
  }
}
##
Write a java program to display elements of one dimensional array and Passing two arrays and calling the method.

public class Main{
    public static void addArrays(int[] arr1, int[] arr2)
    {
        for(int i = 0; i < arr1.length; i++)
        {
            int sum = arr1[i] + arr2[i];
            System.out.print(sum + " ");
        }
    }
    public static void main(String[] args)
    {
        int[] arr1 = {1, 2, 3, 4, 5};
        int[] arr2 = {2, 4, 6, 8, 10};
        addArrays(arr1, arr2);
    }
}
##
Write a java program for multidimensional array and  initialize or assign the values to 2d array using a loop.

public class Main
{
    public static void main(String[] args) {
         
        int[][] intArray = new int[3][3];
        System.out.println("Array elements are:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                intArray[i][j] = i+1;       
                System.out.print(intArray[i][j] + " ");
            }
            
            System.out.println();
        }
    }
}
##
Write a java program to read array value, print array1 and array2 value

import java.util.Scanner;  
public class ArrayInputExample1   
{  
public static void main(String[] args)   
{  
int n;  
Scanner sc=new Scanner(System.in);  

 
int[] array1 = new int[5];  

for(int i=0; i<5; i++)  
{  
   
array1[i]=sc.nextInt();  
}  
for(int i=0; i<5; i++)  
{  
   
System.out.println(array1[i]); 
}
int[] array2 = new int[5];  
 
for(int i=0; i<5; i++)  
{  

array2[i]=sc.nextInt();  
} 
for(int i=0; i<5; i++)  
{  
   
System.out.println(array2[i]); 
}

}
}
##
write a java program declare  and initialize four one dimensional array of 2 elements each.

public class CodesCracker
{
   public static void main(String[] args)
   {
      int[][] arr = {{1, 2},{3, 4},{5, 6},{7, 8}};
      
      System.out.println("Array's Elements with its indexes: ");
      for(int i=0; i<4; i++)
      {
         for(int j=0; j<2; j++)
            System.out.print("arr["+i+"]["+j+"] = " +arr[i][j]+"\t");
         System.out.print("\n");
      }
   }
}
##
Write a java program for multidimensional array and  initialize or assign the values to 2d array using a loop.

public class Main
{
    public static void main(String[] args) {
        //two dimensional array definition  
        int[][] intArray = new int[3][3];
        //printing the 2-d array
        System.out.println("The two-dimensional array:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                intArray[i][j] = i*j;                    //assign value to each array element
                System.out.print(intArray [i][j] + " ");
            }
            System.out.println("");
        }
    }
}
##
Write a java program to declare and initialization the string value in to the array and display the string from string array elements using single dimensional array.

public class OneDimensionString
{
    public static void main(String[] args)
    {
        
        String[] str = new String[]{"one", "two", "three", "four"};
        System.out.println("These are elements of one Dimensional array:");
        for (int i = 0; i < str.length; i++) 
	    {
            System.out.println(str[i] + "   ");
        }
   }
}
##
Write a program to initialize own integer array elements and then Print the length of the array.

public class OneDArr {
public static void main(String[] args) 
{

     int[ ] num = {2, 4, 6, 8, 10, 12, 14};
 
     System.out.println("Length of array: " +num.length);
 }
}
##
Write a Java program to read and print character of an array using do...while loop.

//Java program to read and print character of an array using do-while
import java.util.Scanner;
public class Arr_One_Dim_Char_DoWhile1{
public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
//create a scanner object for Taking input
// from the user - input from keyboard
//System.out.print("Enter the Array length: ");
//Ask input from the user for array length
int length=sc.nextInt();
//Reading the input from the user for array length
char arr[]=new char[length]; 
//diclaration and creation of char array

//System.out.println("Enter the "+length+" Characters");
int i=0;
do{
arr[i]=sc.next().charAt(0);    
//Reding the input(characters) from the user
 i++;
}while(i<length);
System.out.println("Entered characters are:");
int j=0; 
do{
System.out.println(arr[j]);    
 j++;
}while(j<length);
//display all entered characters
}
}
##
Write a Java program accessing array elements using index numbers.

import java.util.*;



public class Main {
 public static void main(String[] args) {
  
   // create an array
   int[] age = {12, 4, 5, 2, 5};

   
   System.out.println("Accessing Elements of Array:");
   System.out.println("First Element: " + age[0]);
   System.out.println("Second Element: " + age[1]);
   System.out.println("Third Element: " + age[2]);
   System.out.println("Fourth Element: " + age[3]);
   System.out.println("Fifth Element: " + age[4]);
 }
}
##
Write a program to find smallest element in an array and then prints it.

import java.util.Scanner;

public class Main
{
   public static void main(String[] args)
   {
      int tot, i, small;
      Scanner scan = new Scanner(System.in);
      
      //System.out.print("Enter the Size of Array: ");
      tot = scan.nextInt();
      int[] arr = new int[tot];
      //System.out.print("Enter " +tot+ " Numbers: ");
      for(i=0; i<tot; i++)
         arr[i] = scan.nextInt();
      
      small = arr[0];
      for(i=1; i<tot; i++)
      {
         if(small>arr[i])
            small = arr[i];
      }
      
      System.out.println("Smallest Number = " +small);
   }
}
##
Write a java program to Read the array length, to store elements in to the array and display the array elements using single dimensional array and use Scanner class.

import java.util.Scanner;
public class OnedimensionalScanner
{
   public static void main(String args[])
   {    
	int len;
	Scanner sc=new Scanner(System.in);
	//System.out.println("Enter Array length : ");
	len=sc.nextInt();
	int a[]=new int[len];//declaration    	 
	//System.out.print("Enter " + len + " Element to Store in Array :\n");
        for(int i=0; i<len; i++)
        {
           a[i] = sc.nextInt();
        }   
        System.out.print("Elements in Array are :\n");
        for(int i=0; i<len; i++)
        {
           System.out.print(a[i] + "  ");
        }  
   }
}
##
Write a java program to read 6 subject marks and then Print the sum , average.

public class OneDArr {
public static void main(String[] args) 
{
int[ ] num = new int[6];
 num[0] = 20;
 num[1] = 30;
 num[2] = 40;
 num[3] = 50;
 num[4] = 60;
 num[5] = 70;
 
double avg = 0.0;
int sum = 0;
// Find the sum of these numbers.
  for(int i = 0; i < 6; i++)
   sum  = sum + num[i];
     avg = (double)sum/6;
  System.out.println("Sum of six numbers: " +sum);
  System.out.println("Average of six numbers: " +avg);
 }
}
##
Write a program that creates integer array of 5 elements, accepts values of arrays and Print only even numbers in the array.

import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   { 
      Scanner sc = new Scanner(System.in); 
     
      int Arr[] = new int[5]; 
      for(int i = 0; i < Arr.length; i++) 
         Arr[i] = sc.nextInt(); 
      System.out.println("Even Numbers: "); 
      for(int j = 0; j < Arr.length; j++){ 
         if(Arr[j]%2==0){ 
            System.out.println(Arr[j]); 
         }
      }
   } 
}
##
Write a Java program to print values with loop through each element of the array.

public class Main {
 public static void main(String[] args) {
  
   
   int[] age = {12, 4, 5};

 
   System.out.println("Using for Loop:");
   for(int i = 0; i < age.length; i++) {
     System.out.println(age[i]);
   }
 }
}
##
Write a program which generates 10 terms of Fibonacci no in an array and then prints it.

import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   {
      long[] fibonacci = new long[10];
      fibonacci[0] = 1;
      fibonacci[1] = 1;
      for(int i=2; i < fibonacci.length; i++){
          fibonacci[i] = fibonacci[i-1] + fibonacci[i-2];
      }
      System.out.println("Fibonacci Series upto 10 ");
      for (int i = 0; i < fibonacci.length; i++) {
          System.out.println(fibonacci[i] + " ");
      }
   }
}
##
Write a java program to declare and initialization the value in to the array and display the array elements using single dimensional array.

public class text
{
	public static void main(String args[])
	{    
	   int a[]={10,20,30,40,50};  	  
	   System.out.println("One dimensional array elements are :\n");    
	   for(int i=0;i<a.length;i++)  
	   {
		System.out.println("a["+i+"]:"+a[i]);    
	   }	
	}
}
##
Write a java program to read 5 subject marks and then Print the total , percentage.

import java.util.Scanner;
public class OneDArr {
public static void main(String[] args) 
{
    Scanner sc=new Scanner(System.in);
 int[ ] marks = new int[5];
 for(int i = 0; i < 5; i++) {
	marks[i] = sc.nextInt();
   }

   int total = 0;
   for(int i = 0; i < 5; i++) {
	 total += marks[i]; 
   }

     System.out.println("Total marks: " +total);

     float percentage = (float)total/5; 
     System.out.println("Percentage: " +percentage+ "%");
 }
}
##
Write a program that creates integer array of 10 elements, accepts values of arrays and Print only even numbers in the array.

import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   { 
      Scanner sc = new Scanner(System.in); 
      //System.out.println("Enter 10 array elements");
      int Arr[] = new int[10]; 
      for(int i = 0; i < Arr.length; i++) 
         Arr[i] = sc.nextInt(); 
      System.out.println("Even Numbers: "); 
      for(int j = 0; j < Arr.length; j++){ 
         if(Arr[j]%2==0){ 
            System.out.println(Arr[j]); 
         }
      }
   } 
}
##
Write a Java program to read string value in array.

public class OneDimensionalArrayString {
    public static void main(String args[]) 
    {
     
      String[] strArray = {"Alive is Awesome", "Be in Present","Be Yourself"};
      System.out.println("The length of String Array is: "+strArray.length);
     
     
      System.out.println("Displaying One dimensional String array elements:");
      for( int i=0; i < strArray.length ; i++)
      {
          System.out.println(strArray[i] + " ");
      }      
    }
}
##
Java Program to sort the elements of an array in descending order

import java.util.Scanner;

public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n;   
        
        n=sc.nextInt();   
        
        Integer arr[]=new Integer[n];    
    
        for(int i=0;i<n;i++)     
        {
            arr[i]=sc.nextInt();
        }
        
        int temp = 0;    
        
         for (int i = 0; i < arr.length; i++)  
         {     
            for (int j = i+1; j < arr.length; j++)    
            {     
               if(arr[i] < arr[j])
               {    
                   temp = arr[i];    
                   arr[i] = arr[j];    
                   arr[j] = temp;    
               }     
            }     
        }    
          
        //System.out.println();    
            
        
        System.out.print("Result of a Sorted Array :");    
        for (int i = 0; i < arr.length; i++) 
        {     
            System.out.print(arr[i] + " ");    
        }    
    }
}
##
Write a java program to initialize 3 value for array and display the array elements using single dimensional array and standard method.

public class OnedimensionalStandard
{
	public static void main(String args[])
	{    
	int[] a=new int[3];   
	a[0]=10; 
	a[1]=20;  
	a[2]=30;  
	 
	System.out.println("One dimensional array elements are");    
	System.out.println(a[0]);    
	System.out.println(a[1]);    
	System.out.println(a[2]);    
	}
}
##
Write a program that creates integer array of 5 elements, accepts values of arrays and Print the array in reverse

import java.util.*; 
public class Main
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        
        int Arr[] = new int[5]; 
        for(int i = 0; i < Arr.length; i++) 
            Arr[i] = sc.nextInt(); 
        
        System.out.println("Reverse Array: "); 
        for (int k = Arr.length-1; k >= 0; k--) 
            System.out.print(Arr[k] + " "); 
    } 
}
##
Write a Java program to Convert Character Array to String using the valueOf() method.

public class GFG {



	public static String toString(char[] a)
	{

		String string = String.valueOf(a);

		return string;
	}


	public static void main(String args[])
	{
	

		char s[] = { 'c','o','m','p','u','t','e','r'};

	
		System.out.println(toString(s));
	}
}
##
Write a Java program to Convert Character Array to String Using copyValueOf() method of String class and then print "Saveetha".

import java.util.*;


public class GFG {

	
	public static void main(String[] args) {

	
		char[] arr = {'s','a','v','e','e','t','h','a'};


		String str = String.copyValueOf(arr);

	
		System.out.print(str);
	}
}
##
Write a program to find largest element in given array and then prints it.

public class Test
{
	static int arr[] = {10, 324, 45, 90, 9808};
	
	
	static int largest()
	{
		int i;
		
		
		int max = arr[0];
		
		
		for (i = 1; i < arr.length; i++)
			if (arr[i] > max)
				max = arr[i];
		
		return max;
	}
	
	
	public static void main(String[] args)
	{
		System.out.println("Largest in given array is " + largest());
		}
}
##
Write a java program to read 5 value and display the array elements using single dimensional array.

import java.util.*;

public class Main
{
   public static void main(String args[])
   {    

	Scanner sc=new Scanner(System.in);
	
	int a[]=new int[5];//declaration    	 
	
        for(int i=0; i<5; i++)
        {
           a[i] = sc.nextInt();
        }   
        System.out.print("Elements in Array are :\n");
        for(int i=0; i<5; i++)
        {
           System.out.print(a[i] + "  ");
        }  
   }
}
##
Write a program that creates integer array of 10 elements, accepts values of arrays and Print the array in reverse

import java.util.*; 
public class Main
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        //System.out.println("Enter 10 array elements:");
        int Arr[] = new int[10]; 
        for(int i = 0; i < Arr.length; i++) 
            Arr[i] = sc.nextInt(); 
        
        System.out.println("Reverse Array: "); 
        for (int k = Arr.length-1; k >= 0; k--) 
            System.out.print(Arr[k] + " "); 
    } 
}
##
Write a Java program to Convert Character Array to String.

public class GFG {

	
	public static String toString(char[] a)
	{
	
		String string = new String(a);

		return string;
	}


	public static void main(String args[])
	{

	
		char s[] = { 'w','e','l','c','o','m','e'};

		
		System.out.println(toString(s));
	}
}
##Write a program that creates integer array of 5 elements, accepts values of arrays and Find sum of all odd numbers

import java.util.*; 
public class ss
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        int sumOdd=0;
        int Arr[] = new int[5]; 
        for(int i = 0; i < Arr.length; i++) 
           Arr[i] = sc.nextInt(); 
        for(int j = 0; j < Arr.length; j++){ 
           if(Arr[j]%2!=0){ 
             sumOdd = sumOdd + Arr[j];
           }
        }
        System.out.println("Sum of odd numbers: "+sumOdd); 
   } 
}
##
Java Program to sort the elements of an array in ascending order

import java.util.Arrays;
import java.util.Scanner;

public class SortAscending1 {
	private static Scanner sc;
	public static void main(String[] args) 
	{
		int Size, i;
		sc = new Scanner(System.in);
	 
		//System.out.print(" Please Enter Number of elements in an array : ");
		Size = sc.nextInt();	
		
		int [] a = new int[Size];
		
		//System.out.print(" Please Enter " + Size + " elements of an Array  : ");
		for (i = 0; i < Size; i++)
		{
			a[i] = sc.nextInt();
		}
		
		Arrays.sort(a);
		
		System.out.println("Result of a Sorted Array :  ");
		for (int Number: a)
		{
			System.out.print(Number + "  ");
		}
	}
}
##
The entered integer is: 45
public static void printInteger(int num) {
     System.out.println("The entered integer is: " + num);
}
##
Reversed number: 766
import java.util.Scanner;

public class Main {
    public static int reverseNumber(int num) {
        int reversedNumber = 0;
        while (num != 0) {
            int digit = num % 10;
            reversedNumber = reversedNumber * 10 + digit;
            num /= 10;
        }
        return reversedNumber;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number = scanner.nextInt();
        int reversed = reverseNumber(number);

        System.out.println("Reversed number: " + reversed);
    }
}
##
Write a Java Program to Reverse a Number Using static function
import java.util.Scanner;

public class Main {
    public static int reverseNumber(int num) {
        int reversedNumber = 0;
        while (num != 0) {
            int digit = num % 10;
            reversedNumber = reversedNumber * 10 + digit;
            num /= 10;
        }
        return reversedNumber;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number = scanner.nextInt();
        int reversed = reverseNumber(number);

        System.out.println("Reversed number: " + reversed);
    }
}
##
Implement a Java program that uses a static method to convert temperature from Celsius to Fahrenheit.
  
    public static double celsiusToFahrenheit(double celsius) {
        return (celsius * 9/5) + 32;
    }
##
write a java program to display the area of square .the sample code here.
 
      //System.out.println("Please enter radius : ");
      double radius = sc.nextDouble();
      // area of circle in java
      double area = calculateArea(radius);
##
using Function to print upto N Fibonacci Number in java.
import java.util.*;  
public class GFG {
  
    // Function to print N Fibonacci Number
    static void Fibonacci(int N)
    {
        int num1 = 0, num2 = 1;
  
        int counter = 0;
  
        // Iterate till counter is N
        while (counter < N) {
  
            // Print the number
            System.out.print(num1 + " ");
  
            // Swap
            int num3 = num2 + num1;
            num1 = num2;
            num2 = num3;
            counter = counter + 1;
        }
    }
  
    // Driver Code
    public static void main(String args[])
    {
        // Given Number N
        Scanner sc = new Scanner(System.in); 
        int N= sc.nextInt();  
  
        // Function Call
        Fibonacci(N);
    }
}
##
Write a java code to Get and Print the user input using static function.
class Demo
{
    void display()
    {
        System.out.println("A non-static function");
    }
    static void show()
    {
        System.out.println("The static function");
    }
}
public class StaticFunctionExample
{
    public static void main(String[] args)
    {
        Demo obj=new Demo();
        obj.display();
        Demo.show();
    }
}
##
Write a Java Program to Reverse a Number Using static function
import java.util.Scanner;

public class Main {
    public static int reverseNumber(int num) {
        int reversedNumber = 0;
        while (num != 0) {
            int digit = num % 10;
            reversedNumber = reversedNumber * 10 + digit;
            num /= 10;
        }
        return reversedNumber;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number = scanner.nextInt();
        int reversed = reverseNumber(number);

        System.out.println("Reversed number: " + reversed);
    }
}
##
Implement a Java program that uses a static method to convert temperature from Celsius to Fahrenheit.
import java.util.*;
public class Swapp
{
    public static void swapFunction(int a,int b)
    {
        System.out.println("In swapFunction at the begining: a = "+a+" , b = "+b);
        int c=a;
        a=b;
        b=c;
        System.out.println("In swapFunction at the end: a = "+a+" , b = "+b);
    }
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        System.out.println("Before swapping: a = "+a+" , b = "+b);
        swapFunction(a,b);
        System.out.println("\n**Now, Before and After swapping values will be same here**:");
        System.out.println("After swapping: a = "+a+" , b = "+b);
    }
}
##
write a java program to display the area of square .the sample code here.
import java.util.*;
public class AreaOfCircleMethod
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        double radius=sc.nextDouble();
        double area=calculateArea(radius);
        System.out.println("Area of square : "+area);
        sc.close();
    }
    static double calculateArea(double radius)
    {
        return (radius*radius);
    }
}
##
write a java program to find the simple interest .
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        long n,sum=0;
        Scanner sc=new Scanner(System.in);
        n=sc.nextLong();
        int i=1;
        while(i<=n/2)
        {
            if(n%i==0)
            {
                sum+=i;
            }
            i++;
        }
        if(sum==n)
        {
            System.out.println(n+" is a perfect number.");
        }
        else
        {
            System.out.println(n+" is not a perfect number.");
        }
    }
}
##
Display message like in sample testcase using static and non-static function in java.
class Demo  
{  
    void display()
    {  
        System.out.println("A non-static function");  
    }  
 
    static void show()  
    {  
        System.out.println("The static function");      
    }  
}  
public class StaticFunctionExample  
{  
    public static void main(String args[])  
    {  
        Demo obj=new Demo();
        obj.display();  
        Demo.show();
    }  
} 
##
write a java program for prime number using static and calling method.
import java.util.Scanner;

public class PrimeNumberProgram 
{
static boolean checkForPrime(int inputNumber)
{
boolean isItPrime = true;

if(inputNumber <= 1) 
{
isItPrime = false;

return isItPrime;
}
else
{
for (int i = 2; i<= inputNumber/2; i++) 
{
if ((inputNumber % i) == 0)
{
isItPrime = false;

break;
}
}

return isItPrime;
}
}

public static void main(String[] args) 
{




int inputNumber = 12;

boolean isItPrime = checkForPrime(inputNumber);

if (isItPrime)
{
System.out.println(inputNumber+" is a prime number.");
}
else
{
System.out.println(inputNumber+" is not a prime number.");
}

//sc.close();
}
}
##
Write a java program for swap two numbers using static and calling method.
import java.util.*;  
public class Swapp 
{
    public static void swapFunction(int a, int b) 
    {
        System.out.println("In swapFunction at the begining: a = " + a + " , b = " + b);
 
        
        int c = a;
        a = b;
        b = c;
        System.out.println("In swapFunction at the end: a = " + a + " , b = " + b);
    }
 
    public static void main(String[] args) {
        Scanner sc= new Scanner(System.in);
        int a= sc.nextInt();  
        int b= sc.nextInt();  
        System.out.println("Before swapping: a = " + a + " , b = " + b);
 
        // Invoke the swap method
        swapFunction(a, b);
        System.out.println("\n**Now, Before and After swapping values will be same here**:");
        System.out.println("After swapping: a = " + a + " , b = " + b);
    }
 
}
##
write a java program for odd or even using static and method and pass input is 7.
import java.util.Scanner;
public class Main
{
public static void main (String args[])
{
int num;
Scanner sc=new Scanner(System.in);
num=sc.nextInt();
find_Oddeven(num);
}

static void find_Oddeven(int num)
{
if(num%2==0) 
    System.out.println(num+" is even"); 
else 
    System.out.println(num+" is odd");
}
}
##
write a java program to find perfect number or not using static and calling method.
import java.util.Scanner;  
public class Main
{  
public static void main(String args[])    
{  
long n, sum=0;  
         
Scanner sc =new Scanner(System.in);
n=sc.nextLong();
int i=1;  
 
while(i <= n/2)  
{  
if(n % i == 0)  
{  
  
sum = sum + i;  
}
i++;  
}  

if(sum==n)  
{  
 
System.out.println(n+" is a perfect number.");  
}
else  
 
System.out.println(n+" is not a perfect number.");   
}  
}  
##
Demonstrates the Default Access Modifier in Java and print square value.
class BaseClass {
    int square(int a) {
        return a * a;
    }
}

public class Main {
    public static void main(String[] args) {
        BaseClass obj = new BaseClass();
        int a = 2;
        int squareValue = obj.square(a);
        System.out.println(squareValue);
    }
}
##
Demonstrate the java program using public access modifier and to check Vowel or Consonant using Switch Case.
import java.util.Scanner;
public class Main
{
   public static void main(String[ ] arg)
   {
	boolean isVowel=false;;
	Scanner scanner=new Scanner(System.in);

	char ch=scanner.next().charAt(0); 
	scanner.close();
	switch(ch)
	{
	   case 'a' :
	   case 'e' :
       case 'i' :
	   case 'o' :
	   case 'u' :
	   case 'A' :
	   case 'E' :
	   case 'I' :
	   case 'O' :
	   case 'U' : isVowel = true;
	}
	if(isVowel == true) {
	   System.out.println(ch+" is  a Vowel");
	}
	else {
	   if((ch>='a'&&ch<='z')||(ch>='A'&&ch<='Z'))
		System.out.println(ch+" is a Consonant");
	   else
		System.out.println("Input is not an alphabet");	
	}
   }
}
##
Write a Java Program to display "welcome to java" using modifiers.public class A 
{ 
public void display() 
{ 
    System.out.println("welcome to java"); 
} 

public static void main(String args[]) 
{ 
    A obj = new A(); 
    obj.display(); 
} 
}
##
Write a java program using any one access modifiers and display the helloworld.
class A 
{ 
public void display() 
    { 
        System.out.println("HelloWorld"); 
    } 
} 
  
public class B 
{ 
public static void main(String args[]) 
    { 
        A obj = new A(); 
        obj.display(); 
    } 
}
##
Write a Java Program to print name , lname , email and age using private access specifier.
public class Main {
  private String fname = "John";
  private String lname = "Doe";
  private String email = "john@doe.com";
  private int age = 24;
  
  public static void main(String[] args) {
    Main myObj = new Main();
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Email: " + myObj.email);
    System.out.println("Age: " + myObj.age);
  }
}
##
Demonstrates the Default Access Modifier in Java and print "default" word.
class BaseClass
{
    void display()
    {
        String s="default";
        System.out.println(s);
    }
}
public class Main
{
    public static void main(String[] args)
    {
        BaseClass obj=new BaseClass();
        obj.display();
    }
}
##
Demonstrate the java program using public access modifier and print word "SoftwareTesting".
class A
{
    public void display()
    {
        String s="SoftwareTesting";
        System.out.println(s);
    }
}
public class Main
{
    public static void main(String[] args)
    {
        A obj=new A();
        obj.display();
    }
}
##
Write a Java Program to display "*" based on row input using protected modifiers.
import java.util.*;
class p
{
    protected void dis(int rows)
    {
        for (int i = 1; i <= rows; i++)
        {
            for (int j = 1; j <= i; j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}
public class Pattern3
{
    public static void main(String[] args)
    {
    Scanner sc=new Scanner(System.in); 
	int rows = sc.nextInt();
	p obj=new p();
	obj.dis(rows);
        
        
    }
}
##
Write a java program using any one access modifiers and display the odd value from 1 to 10 using for loop or while loop.
import java.util.*;
public class odd
{
    public static void main(String[] args)
    {
        int i;
        for(i=1;i<=10;i++)
        {
            if(i%2!=0)
            {
                System.out.println(i);
            }
        }
    }
}
##
Write a Java Program to print name , lname , email and age using private access specifier.
public class Main
{
    private String fname="John";
    private String lname="Doe";
    private String email="john@doe.com";
    private int age=24;
    
    public static void main(String[] args)
    {
        Main obj=new Main();
        System.out.println("Name: "+obj.fname+" "+obj.lname);
        System.out.println("Email: "+obj.email);
        System.out.println("Age: "+obj.age);
    }
}
##
John
public class Main
{
    private String fname="John";
    private String lname="Doe";
    private String email="john@doe.com";
    private int age=24;
    
    public static void main(String[] args)
    {
        Main obj=new Main();
        System.out.println("Name: "+obj.fname+" "+obj.lname);
        System.out.println("Email: "+obj.email);
        System.out.println("Age: "+obj.age);
    }
}
##
Demonstrates the public Access Modifier in Java and print the value of product of two numbers.
import java.util.Scanner;

public class Demo {

    public static void main(String[] args) {

       
        Scanner sc = new Scanner(System.in);

        int num1 = sc.nextInt();
        
      
        int num2 = sc.nextInt();

       
        int product = num1*num2;
        
       
        System.out.println("Output: "+product);
    }
}
##
Demonstrate the java program using public access modifier and to check Vowel or Consonant using Switch Case.
import java.util.Scanner;
public class Main
{
   public static void main (String[] args)
   {
	boolean isVowel=false;
	Scanner scanner =new Scanner(System.in);

	char ch=scanner.next().charAt(0); 
	scanner.close();
	switch(ch)
	{
	   case 'a' :isVowel = true;break;
	   case 'e' :isVowel = true;break;
       	   case 'i' :isVowel = true;break;
	   case 'o' :isVowel = true;break;
	   case 'u' :isVowel = true;break;
	   case 'A' :isVowel = true;break;
	   case 'E' :isVowel = true;break;
	   case 'I' :isVowel = true;break;
	   case 'O' :isVowel = true;break;
	   case 'U' : isVowel = true;
	}
	if(isVowel == true) {
	   System.out.println(ch+" is  a Vowel");
	}
	else {
	   if((ch>='a'&&ch<='z')||(ch>='A'&&ch<='Z'))
		System.out.println(ch+" is a Consonant");
	   else
		System.out.println("Input is not an alphabet");	
	}
   }
}
##
Write a Java Program to display the addition number using private modifiers only.
public class A
{ 
    private void display() 
    { 
        int a=8,b=9;
        System.out.println(a+b); 
    }
    public static void main(String args[])
    {
        A obj = new A();
        obj.display();
    }
}
##
Write a java program using any one access modifiers and display the helloworld.
class A 
{ 
public void display() 
    { 
        System.out.println("HelloWorld"); 
    } 
} 
  
public class B 
{ 
public static void main(String[] args) 
    { 
        A obj = new A(); 
        obj.display(); 
    } 
}
##
Java Program for calculate area of circle using public access specifier.
import java.util.Scanner;  
import java.lang.Math;  
public class AreaOfCircle  
{  
    public static void main(String[] args)   
    {  
    double radius,area;    
    Scanner sc=new Scanner (System.in);  
    radius=sc.nextDouble();  
    area=(Math.PI*(radius*radius));  
    System.out.print(area);   
    }    
}
##
Develop a java program to read the length of an array, to store elements into the array and then display the array elements. Use Scanner class to read the input.
import java.util.Scanner;
public class OnedimensionalScanner
{
   public static void main(String args[])
   {    
	int len;
	Scanner sc=new Scanner(System.in);
	//System.out.println("Enter Array length : ");
	len=sc.nextInt();
	int a[]=new int[len];//declaration    	 
	//System.out.print("Enter " + len + " Element to Store in Array :\n");
        for(int i=0; i<len; i++)
        {
           a[i] = sc.nextInt();
        }   
        System.out.print("Elements in Array are :\n");
        for(int i=0; i<len; i++)
        {
           System.out.print(a[i] + "  ");
        }  
   }
}
##
Write a Java program to find the sum values of an array and display the sum value.
import java.util.*; 
public class Main
{
    public static void main(String[] args) 
    { 
        Scanner sc = new Scanner(System.in); 
        //System.out.println("Enter 10 array elements:");
        int Arr[] = new int[5]; 
        for(int i = 0; i < Arr.length; i++) 
            Arr[i] = sc.nextInt(); 
        
        System.out.println("Reverse Array: "); 
        for (int k = Arr.length-1; k >= 0; k--) 
            System.out.print(Arr[k] + " "); 
    } 
}
##
Write a Java program that creates integer array of 'n' elements(size of an array), accepts values of arrays and display only even numbers in the array.
import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   { 
      Scanner sc = new Scanner(System.in); 
      //System.out.println("Enter 10 array elements");
      int Arr[] = new int[10]; 
      for(int i = 0; i < Arr.length; i++) 
         Arr[i] = sc.nextInt(); 
      System.out.println("Even Numbers: "); 
      for(int j = 0; j < Arr.length; j++){ 
         if(Arr[j]%2==0){ 
            System.out.println(Arr[j]); 
         }
      }
   } 
}
##
Write a Java program to read the size of an array, to read string value for an array size and then display the output.
public class StringArrayExample {
    public static void main(String[] args) {
        // Define the string array
        String[] stringArray = {"Alive is Awesome", "Be in Present", "Be Yourself"};
        
        // Display the length of the array
        System.out.println("The length of String Array is: " + stringArray.length);
        
        // Display the elements of the array
        System.out.println("Displaying One dimensional String array elements:");
        for (String str : stringArray) {
            System.out.println(str);
        }
    }
}
##
Write a Java program to find the largest element in an array and then print the largest value.
public class LargestElement {
    public static void main(String[] args) {
        // Define the array
        int[] numbers = {10, 324, 45, 90, 9808};

        // Initialize the largest element as the first element of the array
        int largest = numbers[0];

        // Iterate through the array to find the largest element
        for (int i = 1; i < numbers.length; i++) {
            if (numbers[i] > largest) {
                largest = numbers[i];
            }
        }

        // Print the largest element
        System.out.println("Largest in given array is " + largest);
    }
}
##
Write a java program to read 3 values in array and display the array elements using single dimensional array and standard method.
public class Main
{
    public static void main(String[] args)
    {
        int a[]={10,20,30};
        System.out.println("One dimensional array elements are");
        for(int i=0;i<a.length;i++)
        {
            System.out.println(a[i]);
        }
    }
}
##
Write a java program to read 'n' subject marks and then display the sum & average of marks.
import java.util.*;
public class OneDArr {
public static void main(String[] args) 
{
Scanner sc = new Scanner(System.in);
int size=sc.nextInt();
int[ ] num = new int[size];
for (int i = 0; i < size; i++) {
num[i] = sc.nextInt();
}
 
double avg = 0.0;
int sum = 0;
// Find the sum of these numbers.
  for(int i = 0; i < size; i++)
   sum  = sum + num[i];
     avg = (double)sum/size;
  System.out.println("Sum of array: " +sum);
  System.out.println("Average of array: " +avg);
 }
}
##
Write a Java program to find the length of the longest consecutive elements sequence from an unsorted array of integers.
public class Main
{
    public static String toString(char[] a)
    {
        String s=String.valueOf(a);
        return s;
    }
    public static void main(String[] args)
    {
        char s[]={'w','e','l','c','o','m','e'};
        System.out.println(toString(s));
    }
}
##
Write a Java program that creates integer array of  size is 'n' elements, accepts values of arrays and find sum of all odd numbers in an array.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        int sum=0;
        int a[]=new int[5];
        Scanner sc=new Scanner(System.in);
        for(int i=0;i<5;i++)
        {
            a[i]=sc.nextInt();
        }
        for(int i=0;i<5;i++)
        {
            if(a[i]%2!=0)
            {
                sum=sum+a[i];
            }
        }
    System.out.println("Sum of odd numbers: "+sum);
    }
}
##
Develop a Java Program to sort the elements of an array in ascending order.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++)
        {
            a[i]=sc.nextInt();
        }
        Arrays.sort(a);
        System.out.println("Result of a Sorted Array :");
        for(int i=0;i<n;i++)
        {
            System.out.print(a[i]+"  ");
        }
    }
}
##
Write a java program to read 3 values in array and display the array elements using single dimensional array and standard method.
public class Main
{
    public static void main(String[] args)
    {
        int a[]={10,20,30};
        System.out.println("One dimensional array elements are");
        for(int i=0;i<a.length;i++)
        {
            System.out.println(a[i]);
        }
    }
}
##
Write a java program to read 'n' subject marks and then display the sum & average of marks.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        int num[]=new int[6];
        int sum=0;
        double avg=0.0;
        num[0]=20;
        num[1]=30;
        num[2]=40;
        num[3]=50;
        num[4]=60;
        num[5]=70;
        for(int i=0;i<6;i++)
        {
            sum+=num[i];
        }
        System.out.println("Sum of six numbers: "+sum);
        avg=(double)sum/6;
        System.out.println("Average of six numbers: "+avg);
    }
}
##
Write a Java program to find the length of the longest consecutive elements sequence from an unsorted array of integers.
public class Main
{
    public static String toString(char[] a)
    {
        String s=String.valueOf(a);
        return s;
    }
    public static void main(String[] args)
    {
        char s[]={'w','e','l','c','o','m','e'};
        System.out.println(toString(s));
    }
}
##
Write a Java program that creates integer array of  size is 'n' elements, accepts values of arrays and find sum of all odd numbers in an array.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        int sum=0;
        int a[]=new int[5];
        Scanner sc=new Scanner(System.in);
        for(int i=0;i<5;i++)
        {
            a[i]=sc.nextInt();
        }
        for(int i=0;i<5;i++)
        {
            if(a[i]%2!=0)
            {
                sum=sum+a[i];
            }
        }
    System.out.println("Sum of odd numbers: "+sum);
    }
}
##
Develop a Java Program to sort the elements of an array in ascending order.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++)
        {
            a[i]=sc.nextInt();
        }
        Arrays.sort(a);
        System.out.println("Result of a Sorted Array :");
        for(int i=0;i<n;i++)
        {
            System.out.print(a[i]+"  ");
        }
    }
}
##
Write a Java program to print an array after changing the rows and columns of a two-dimensional array.
public class Main
{
    public static void main(String[] args)
    {
        int[][] a={ {1,0},{0,1} };
        System.out.println("Array elements are:");
        for(int i=0;i<2;i++)
        {
            for(int j=0;j<2;j++)
            {
                System.out.print(a[i][j]+" ");
            }
            System.out.println();
        }
    }
}
##
Write a java program to read and print a two-dimensional array.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        int row,col;
        int a[][];
        Scanner sc=new Scanner(System.in);
        row=sc.nextInt();
        col=sc.nextInt();
        a=new int[row][col];
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                a[i][j]=sc.nextInt();
            }
        }
        System.out.println("You have entered the following array :");
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                System.out.print(a[i][j]+" ");
            }
            System.out.println();
        }
    }
}
##
Write a java program copy one array value to another value in Java by using the assignment operator (=).
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        int n;
        Scanner sc=new Scanner(System.in);
        n=sc.nextInt();
        int a[]=new int[10];
        int newArr[]=new int[10];
        for(int i=0;i<n;i++)
        {
            a[i]=sc.nextInt();
        }
        for(int i=0;i<n;i++)
        {
            newArr[i]=a[i];
        }
        System.out.println("Original Array="+Arrays.toString(a));
        System.out.println("Copied Array="+Arrays.toString(newArr));
    }
}
##
Write a java program to display elements of one dimensional array and Simply pass the name of the normal array to the method.
public class Main
{
    public static void addTen(int[] arr)
    {
        for(int i=0;i<arr.length;i++)
        {
            arr[i]+=10;
        }
    }
    public static void main(String[] args)
    {
        int arr[]={1,3,5,7,9};
        addTen(arr);
        for(int i=0;i<arr.length;i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
}
##
Write a java program to find the sum of all the elements present in a 2-D array.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        int[][] a={{1,2,3,4,5},{2,4,6,8,10},{1,3,5,7,9}};
        int sum=0;
        
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<5;j++)
            {
                sum+=a[i][j];
            }
        }
        System.out.println("Sum of all elements is: "+sum);
    }
}
##
Write a java program for multidimensional array and  initialize or assign the values to 2d array using a loop.
public class Main
{
    public static void main(String[] args) {
          
        int[][] intArray = new int[3][3];
        
        System.out.println("The two-dimensional array:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                intArray[i][j] = i * j;                   
                System.out.print(intArray [i][j] + " ");
            }
            System.out.println("");
        }
    }
}
##
Write a java program to read and print a two-dimensional array.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        int row, col;
        int arr[][];
        Scanner scanner = new Scanner(System.in);
        
        row = scanner.nextInt();
        
        col = scanner.nextInt();
        arr = new int[row][col];
        for (int i = 0; i < row; i++) {
            
            for (int j = 0; j < col; j++) {
                
            
                arr[i][j] = scanner.nextInt();
            }
        
        } 
        System.out.println("You have entered the following array : ");
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.print("\n");
        }
    }

}
##
Write a Java Program to Find Sum of Even and Odd Numbers in given Array.
import java.util.Arrays;
import java.util.Scanner;

public class ArrayTest {

  public static void main(String[] args) {
    
    Scanner scan = new Scanner(System.in);

    int n = scan.nextInt();

    int numbers[] = new int[n];

    
    for (int i = 0; i < n;i++) {
      numbers[i] = scan.nextInt();
    }

   
    oddEvenSum(numbers);

    scan.close();

  }
  
  public static void oddEvenSum(int[] numbers) {
      
    int oddSum = 0;
    int evenSum = 0;

    
    for (int num : numbers) {
      if (num % 2 == 0) { 
        evenSum += num;
      } else {            
        oddSum += num;
      }
    }

    System.out.println("Odd numbers sum = " + oddSum);
    System.out.println("Even numbers sum = " + evenSum);
  }
}
##
Write a java program to display elements of one dimensional array and passing array value to function or methods. Final Output is modified value.
public class PassingArrays {
public static void main(String[] args) 
{
  int x = 2; 
  int[] num = {0, 1}; 
   m1(x, num);
   System.out.println("Value of x: " +x);
   System.out.print("Value of num[1]: " +num[1]);
 }
public static void m1(int x, int[] num) 
{
   x = 5; 
   num[1] = 20; 
 }
}
##
write a java program declare  and initialize four one dimensional array of 2 elements each.
public class CodesCracker
{
   public static void main(String[] args)
   {
      int[][] arr = {{1, 2},{3, 4},{5, 6},{7, 8}};
      
      System.out.println("Array's Elements with its indexes: ");
      for(int i=0; i<4; i++)
      {
         for(int j=0; j<2; j++)
            System.out.print("arr["+i+"]["+j+"] = " +arr[i][j]+"\t");
         System.out.print("\n");
      }
   }
}

##
Display message using static and non-static function in java.
void display()  
{  
System.out.println("A non-static function is called.");  
}  

static void show()  
{  
System.out.println("The static function is called.");      
}  

##
Write a Java Program to Reverse a Number Using static function
import java.util.Scanner;

public class Main {
    public static int reverseNumber(int num) {
        int reversedNumber = 0;
        while (num != 0) {
            int digit = num % 10;
            reversedNumber = reversedNumber * 10 + digit;
            num /= 10;
        }
        return reversedNumber;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number = scanner.nextInt();
        int reversed = reverseNumber(number);

        System.out.println("Reversed number: " + reversed);
    }
}

##
Write a java program for palindrome using static and calling a method.
int sum=0,r;
	    while(num!=0)
	    {
	    r=num%10;
	    sum=(sum*10)+r;
	    num/=10;	
	    }
	return sum;

##
write a java program to display the area of square .the sample code here.
 
      //System.out.println("Please enter radius : ");
      double radius = sc.nextDouble();
      // area of circle in java
      double area = calculateArea(radius);  
      

##
write a java program for perfect number using static and calling method.
 

    public static boolean isPerfectNumber(long number) {
        long sum = 0;
        int i = 1;
        while (i <= number / 2) {
            if (number % i == 0) {
                sum = sum + i;
            }
            i++;
        }
        return sum == number;
    }
 

##
Here's a simple Java program to find the number of objects created for a particular class by using static variable count:
 private static int count = 0; // Static variable to count objects
    
    public ObjectCounter() {
        count++; // Increment count every time a new object is created
    }

##
Java Program to Multiply two double Point Numbers Using static function.
import java.util.Scanner;

public class Main {
  
    public static double multiply(double num1, double num2) {
        return num1 * num2;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double num1 = scanner.nextDouble();
                       double num2 = scanner.nextDouble();
        double result = multiply(num1, num2);

        System.out.println("The product of " + num1 + " and " + num2 + " is: " + result);
    }
}

##
Area of the circle with radius 5.0 units is: 78.53981633974483 square units
 public static double calculateArea(double radius) {
        return Math.PI * radius * radius;
    }

##
Determine if the number is a multiple of 10 using staticmethod 
import java.util.Scanner;

public class MultipleOfTenChecker {
  
    public static boolean isMultipleOfTen(int number) {
        return number % 10 == 0;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
 
        int number = scanner.nextInt();

        boolean isMultiple = isMultipleOfTen(number);

        if (isMultiple) {
            System.out.println(number + " is a multiple of 10.");
        } else {
            System.out.println(number + " is not a multiple of 10.");
        }

        scanner.close();
    }
}


##
Determine if the number is a Fibonacci static method.
import java.util.Scanner;
public class Main {
 
    public static boolean isPerfectSquare(long number) {
        long squareRoot = (long) Math.sqrt(number);
        return squareRoot * squareRoot == number;
    }
 
    public static boolean isFibonacci(long number) {
        return isPerfectSquare(5 * number * number + 4) || isPerfectSquare(5 * number * number - 4);
    }
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
 
        long n = scanner.nextLong();
 
        boolean isFibonacci = isFibonacci(n);

        if (isFibonacci) {
            System.out.println(n + " is a Fibonacci number.");
        } else {
            System.out.println(n + " is not a Fibonacci number.");
        }
        scanner.close();
    }
}

##
Write a Java program to create a static method that takes two integers as input and returns their sum.
public static int calculateSum(int num1, int num2) 

{

return num1 + num2;

}

##
456 is not a palindrome number 
 
	    int sum=0,r;
	    while(num!=0)
	    {
	    r=num%10;
	    sum=(sum*10)+r;
	    num/=10;	
	    }
	return sum;
 

##
Area of square : 4.0
 
      //System.out.println("Please enter radius : ");
      double radius = sc.nextDouble();
      // area of circle in java
      double area = calculateArea(radius);  
      

##
write a java program for factorial using static and calling method. 
import java.util.Scanner;
public class factorial{
    int facto;
    static void main(int n){
        int fact=1;
        for(int i=1;i<=n;i++)
        {
            fact=fact*i;
        }
        System.out.println("Factorial of the "+n+" is "+fact);
    }
    public static void main(String[] args){
        factorial f=new factorial();
        Scanner sc=new Scanner(System.in);
        f.facto=sc.nextInt();
        f.main(f.facto);
    }
    
}

##
Write a java program for calculate cube of a number using static method.
import java.util.*;  
public class CalculateCube  
{  
//defining a static method   
static void cube()  
{  
Scanner sc= new Scanner(System.in); 
int x= sc.nextInt();  
int y=x*x*x;
System.out.println("Cube is: "+y);    
}  
public static void main(String args[])  
{  
//calling the static method without using the object of the CalculateCube class  
cube();    
}  
}  

##
write a java program to display the area of circle using calling method.
import java.util.Scanner;
public class AreaOfCircleMethod 
{
   public static void main(String[] args) 
   {
      Scanner sc = new Scanner(System.in);   
      double radius = sc.nextDouble(); 
      double area = calculateArea(radius);  
      System.out.println("Area of circle : " + area);
      sc.close();
   }
   static double calculateArea(double r)
   {
      return (22 * r * r) / 7;
   }
}

##
write a java program for perfect number or not using static and calling method.
import java.util.Scanner;  
public class Main
{  
public static void main(String args[])    
{  
long n, sum=0;  
//Scanner sc=new Scanner(System.in);         
 
n=5;  
int i=1;  
//executes until the condition becomes false  
while(i <= n/2)  
{  
if(n % i == 0)  
{  
//calculates the sum of factors  
sum = sum + i;  
} //end of if  
//after each iteration, increments the value of variable i by 1  
i++;  
} //end of while  
//compares sum with the number  
if(sum==n)  
{  
//prints if sum and n are equal  
System.out.println(n+" is a perfect number.");  
} //end of if  
else  
//prints if sum and n are not equal  
System.out.println(n+" is not a perfect number.");   
}  
}  

##
Demonstrates the Default Access Modifier in Java and print c value.
 public class A 
{ 
    private void display() 
    { 
        int a=3,b=5;
        System.out.println(a+b); 
    }
    public static void main(String args[])
    {
        A obj = new A();
        obj.display();
    }
}

##
Demonstrate the java program using public access modifier and find the quotient and remainder.
public class JavaExample {
    public static void main(String[] args) {
        int num1 = 15, num2 = 2;
        int quotient = num1 / num2;
        int remainder = num1 % num2;
        System.out.println("Quotient is: " + quotient);
        System.out.println("Remainder is: " + remainder);
    }
}

##
Write a Java Program to display number like pattern format based on rows values using modifiers.
import java.util.*;
class p
{
    public void pattern(int rows)
    {
        for (int i = 1; i <= rows; i++)
        {
            for (int j = 1; j <= i; j++)
            {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}
public class Pattern1
{
    public static void main(String[] args)
    {
	    Scanner sc=new Scanner(System.in);
	    int rows =sc.nextInt();
	    p obj=new p();
	    obj.pattern(rows);
        
    }
}

##
Write a java program using any one access modifiers and display the value based on condition using while loop
import java.util.*;
class A 
{ 
public void display() 
    { 
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int i=1;
        while(i<=a)
        {
            System.out.println(i);
            i++;
        }
    } 
} 
  
public class B 
{ 
public static void main(String args[]) 
    { 
        A obj = new A(); 
        obj.display(); 
    } 
}

##
Write a Java Program to display the details using public access specifier with the help of object and use one display function and leg value give in legcount varriable.
class Animal {
    
    public int legCount;

    
    public void display() {
        System.out.println("I am an animal.");
        System.out.println("I have " + legCount + " legs.");
    }
}


public class Main {
    public static void main( String[] args ) {
        
        Animal animal = new Animal();

       
        animal.legCount = 4;
        
        animal.display();
    }
}


##
Demonstrate the java program using public access modifier and to check Vowel or Consonant using Switch Case.
import java.util.Scanner;
public class Main
{
   public static void main(String[ ] arg)
   {
	boolean isVowel=false;;
	Scanner scanner=new Scanner(System.in);
//	System.out.println("Enter a character : ");
	char ch=scanner.next().charAt(0); 
	scanner.close();
	switch(ch)
	{
	   case 'a' :
	   case 'e' :
    	   case 'i' :
	   case 'o' :
	   case 'u' :
	   case 'A' :
	   case 'E' :
	   case 'I' :
	   case 'O' :
	   case 'U' : isVowel = true;
	}
	if(isVowel == true) {
	   System.out.println(ch+" is  a Vowel");
	}
	else {
	   if((ch>='a'&&ch<='z')||(ch>='A'&&ch<='Z'))
		System.out.println(ch+" is a Consonant");
	   else
		System.out.println("Input is not an alphabet");	
	}
   }
}


##
Write a Java Program to display "*" based on row input using protected modifiers.
import java.util.*;
class p
{
    protected void dis(int rows)
    {
        for (int i = 1; i <= rows; i++)
        {
            for (int j = 1; j <= i; j++)
            {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}
public class Pattern3
{
    public static void main(String[] args)
    {
    Scanner sc=new Scanner(System.in); 
	int rows = sc.nextInt();
	p obj=new p();
	obj.dis(rows);
        
        
    }
}

##
Write a Java program to calculate the area of a triangle when three sides are given or normal method.
import java.util.Scanner;  
public class AreaOfTriangle 
{
   public static void main(String args[]) 
    {   
       
      Scanner s= new Scanner(System.in);
        
         //System.out.println("Enter the width of the Triangle:");
         double b= s.nextDouble();
 
         //System.out.println("Enter the height of the Triangle:");
          double h= s.nextDouble();
 
                  
      double area=(b*h)/2;
      System.out.println("Area of Triangle is: " + area);      
   }
}

##
Demonstrates the Default Access Modifier in Java and print square value.
class BaseClass 
{ 
    void display()      //no access modifier indicates default modifier
       { 
           int a=2;
           int s=a*a;
           System.out.println(s);
       } 
} 
 
public class Main
{ 
    public static void main(String args[]) 
       {   
          //access class with default scope
          BaseClass obj = new BaseClass(); 
   
          obj.display();    //access class method with default scope
       } 
}

##
Write a java program using any one access modifiers and display the number 10 to 6.
class A 
{ 
public void display() 
    { 
        int a=10;
        while(a>=6)
        {
            System.out.println(a);
            a--;
        }
        
    } 
} 
  
public class B 
{ 
public static void main(String args[]) 
    { 
        A obj = new A(); 

        obj.display(); 
    } 
}

##
Write a Java Program to print name , lname , email and age using private access specifier.
public class Main {
  private String fname = "John";
  private String lname = "Doe";
  private String email = "john@doe.com";
  private int age = 24;
  
  public static void main(String[] args) {
    Main myObj = new Main();
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Email: " + myObj.email);
    System.out.println("Age: " + myObj.age);
  }
}

##
Write a java program to read 3 values in array and display the array elements using single dimensional array and standard method.
import java.util.*;
public class OnedimensionalStandard
{
	public static void main(String args[])
	{ 
	Scanner sc= new Scanner(System.in); 
	int[] a=new int[3];  
	for(int i=0;i<3;i++)
	{
	    a[i]=sc.nextInt();
	}
	 
	 
	System.out.println("One dimensional array elements are");    
	for(int i=0;i<3;i++)
	{
	   System.out.println(a[i]);
	}
	 

	}
}

##
Write a Java program to find the index of an array element.
import java.util.Scanner;

public class ArraySearchInput {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Reading the size of the array
        //System.out.print("Enter the number of elements in the array: ");
        int size = scanner.nextInt();

        // Declaring the array
        int[] array = new int[size];

        // Reading array elements
        //System.out.println("Enter the elements of the array: ");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt();
        }

        // Reading the value to find in the array
        //System.out.print("Enter the value to find: ");
        int valueToFind = scanner.nextInt();

        // Searching for the value in the array
        boolean found = false;
        for (int value : array) {
            if (value == valueToFind) {
                found = true;
                break;
            }
        }

       
        if (found) {
            System.out.println("The array contains the value: " + valueToFind);
        } else {
            System.out.println("The array does not contain the value: " + valueToFind);
        }

    
    }
}



##
Write a Java program to find the length of the longest consecutive elements sequence from an unsorted array of integers.
import java.util.Scanner;

public class LongestConsecutiveSequenceWithoutHashSetOrSort {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the size of the array
        //System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        // Read the elements of the array
        int[] nums = new int[size];
        //System.out.println("Enter the elements of the array:");
        for (int i = 0; i < size; i++) {
            nums[i] = scanner.nextInt();
        }

        // Find the length of the longest consecutive sequence
        int longestConsecutiveSequenceLength = findLongestConsecutiveSequenceLength(nums);

        System.out.println("Length of the longest consecutive sequence: " + longestConsecutiveSequenceLength);

        scanner.close();
    }

    private static int findLongestConsecutiveSequenceLength(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }

        // Initialize a counter to keep track of the longest consecutive sequence length
        int longestSequenceLength = 0;

        // Create a hash table to mark the presence of each element in the array
        boolean[] visited = new boolean[1000001]; // Assuming the range of integers is within [-500000, 500000]

        // Iterate through the array
        for (int num : nums) {
            visited[num + 500000] = true; // Mark the presence of the current number
        }

        // Iterate through the array again to count consecutive sequences
        for (int num : nums) {
            int currentSequenceLength = 0;

            // Check for consecutive elements starting from the current number
            for (int i = num; i <= 1000000 && visited[i + 500000]; i++) {
                currentSequenceLength++;
            }

            // Update the longest consecutive sequence length
            longestSequenceLength = Math.max(longestSequenceLength, currentSequenceLength);
        }

        return longestSequenceLength;
    }
}


##
Write a Java program to read the size of an array and value for that array, to print the values using any looping statement.
import java.util.Scanner;

public class ArrayInputOutput {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt for and read the size of the array
       // System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        // Declare and instantiate the array
        int[] array = new int[size];

        // Read the values into the array
        //System.out.println("Enter " + size + " integers:");
        for (int i = 0; i < size; i++) {
            array[i] = scanner.nextInt(); // Read each integer
        }

        // Print the array values
        System.out.println("You have entered:");
        for (int value : array) {
            System.out.println(value);
        }

        // Close the scanner
        scanner.close();
    }
}


##
Develop a Java Program to sort the elements of an array in descending order.
import java.util.Scanner;

public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int n;   
        
        n=sc.nextInt();   
        
        Integer arr[]=new Integer[n];    
    
        for(int i=0;i<n;i++)     
        {
            arr[i]=sc.nextInt();
        }
        
        int temp = 0;    
        
         for (int i = 0; i < arr.length; i++)  
         {     
            for (int j = i+1; j < arr.length; j++)    
            {     
               if(arr[i] < arr[j])
               {    
                   temp = arr[i];    
                   arr[i] = arr[j];    
                   arr[j] = temp;    
               }     
            }     
        }    
          
        //System.out.println();    
            
        
        System.out.print("Result of a Sorted Array :");    
        for (int i = 0; i < arr.length; i++) 
        {     
            System.out.print(arr[i] + " ");    
        }    
    }
}
 

##
Write a java program to declare and initialization the values into the array and display the array elements.
public class text
{
	public static void main(String args[])
	{    
	   int a[]={10,20,30,40,50};  	  
	   System.out.println("One dimensional array elements are :\n");    
	   for(int i=0;i<a.length;i++)  
	   {
		System.out.println("a["+i+"]:"+a[i]);    
	   }	
	}
}

##
Write a java program to read 'n' subject marks and then display the sum & average of marks.
import java.util.*;
public class OneDArr {
public static void main(String[] args) 
{
Scanner sc = new Scanner(System.in);
int size=sc.nextInt();
int[ ] num = new int[size];
for (int i = 0; i < size; i++) {
num[i] = sc.nextInt();
}
 
double avg = 0.0;
int sum = 0;
// Find the sum of these numbers.
  for(int i = 0; i < size; i++)
   sum  = sum + num[i];
     avg = (double)sum/size;
  System.out.println("Sum of array: " +sum);
  System.out.println("Average of array: " +avg);
 }
}

##
Write a Java program to read and display the character of an array using do...while loop.
//Java program to read and print character of an array using do-while
import java.util.Scanner;
public class Arr_One_Dim_Char_DoWhile1{
public static void main (String args[]){
    Scanner sc=new Scanner(System.in);
//create a scanner object for Taking input
// from the user - input from keyboard
//System.out.print("Enter the Array length: ");
//Ask input from the user for array length
int length=sc.nextInt();
//Reading the input from the user for array length
char arr[]=new char[length]; 
//diclaration and creation of char array

//System.out.println("Enter the "+length+" Characters");
int i=0;
do{
arr[i]=sc.next().charAt(0);    
//Reding the input(characters) from the user
 i++;
}while(i<length);
System.out.println("Entered characters are:");
int j=0; 
do{
System.out.println(arr[j]);    
 j++;
}while(j<length);
//display all entered characters
}
}

##
Write a Java program to find the largest element in an array and then print the largest value.
import java.util.Scanner;

public class Main{
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Ask the user for the number of elements in the array
        //System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        
        // Check if the user enters a positive number of elements
        if (n <= 0) {
            System.out.println("The number of elements must be positive.");
            return; // Exit the program
        }
        
        // Declare and initialize the array
        int[] array = new int[n];
        
        // Read the array elements
        //System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }
        
        // Assume the first element is the largest, then compare with the rest
        int largest = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] > largest) {
                largest = array[i];
            }
        }
        
        // Print the largest element
        System.out.println("The largest element in the array is: " + largest);
        
        scanner.close();
    }
}


##
Write a java program to Read the array length, to store elements in to the array and display the array elements using single dimensional array and use Scanner class.
import java.util.Scanner;
public class OnedimensionalScanner
{
   public static void main(String args[])
   {    
	int len;
	Scanner sc=new Scanner(System.in);
	//System.out.println("Enter Array length : ");
	len=sc.nextInt();
	int a[]=new int[len];//declaration    	 
	//System.out.print("Enter " + len + " Element to Store in Array :\n");
        for(int i=0; i<len; i++)
        {
           a[i] = sc.nextInt();
        }   
        System.out.print("Elements in Array are :\n");
        for(int i=0; i<len; i++)
        {
           System.out.print(a[i] + "  ");
        }  
   }
}

##
Write a java program to read 5 subject marks and then Print the total , percentage.
import java.util.Scanner;
public class OneDArr {
public static void main(String[] args) 
{
    Scanner sc=new Scanner(System.in);
 int[ ] marks = new int[5];
 for(int i = 0; i < 5; i++) {
	marks[i] = sc.nextInt();
   }

   int total = 0;
   for(int i = 0; i < 5; i++) {
	 total += marks[i]; 
   }

     System.out.println("Total marks: " +total);

     float percentage = (float)total/5; 
     System.out.println("Percentage: " +percentage+ "%");
 }
}

##
Write a program that creates integer array of 10 elements, accepts values of arrays and Print only even numbers in the array.
import java.util.*; 
public class Main
{
   public static void main(String[] args) 
   { 
      Scanner sc = new Scanner(System.in); 
      //System.out.println("Enter 10 array elements");
      int Arr[] = new int[10]; 
      for(int i = 0; i < Arr.length; i++) 
         Arr[i] = sc.nextInt(); 
      System.out.println("Even Numbers: "); 
      for(int j = 0; j < Arr.length; j++){ 
         if(Arr[j]%2==0){ 
            System.out.println(Arr[j]); 
         }
      }
   } 
}

##
Write a Java program to Convert Character Array to String Using copyValueOf() method of String class and then print "Saveetha".
import java.util.*;


public class GFG {

	
	public static void main(String[] args) {

	
		char[] arr = {'s','a','v','e','e','t','h','a'};


		String str = String.copyValueOf(arr);

	
		System.out.print(str);
	}
}


##
Write a program to find largest element in given array and then prints it.
public class Main {
    public static void main(String[] args) {
        // Example array
        int[] arr = {10, 324, 45, 90, 9808};

        // Initialize max with the first element
        int max = arr[0];

        // Iterate through the array
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }

        // Print the largest element
        System.out.println("Largest in given array is " + max);
    }
}


##
Develop a Java Program to read and print two dimensional array (Matrix).
import java.util.Scanner;

public class Ex2DArray {
  public static void main(String args[]) {
	// initialize here.
	int row, col, i, j;
	int arr[][] = new int[10][10];
	Scanner scan = new Scanner(System.in);

	// enter row and column for array.
	//System.out.print("Enter row for the array (max 10) : ");
	row = scan.nextInt();
	//System.out.print("Enter column for the array (max 10) : ");
	col = scan.nextInt();

	// enter array elements.
	//System.out.println("Enter " + (row * col) + " Array Elements : ");
	for (i = 0; i < row; i++) {
  	for (j = 0; j < col; j++) {
    	arr[i][j] = scan.nextInt();
  	}
	}

	// the 2D array is here.
	System.out.print("The Array is :\n");
	for (i = 0; i < row; i++) {
  	for (j = 0; j < col; j++) {
    	System.out.print(arr[i][j] + "  ");
  	}
  	System.out.println();
	}
  }
}


##
Write a Java Program to Accept Array Elements and Calculate Sum.
import java.util.Scanner;
public class Array_Sum
{
    public static void main(String[] args) 
    {
        int n, sum = 0;
        Scanner s = new Scanner(System.in);
        
        n = s.nextInt();
        int a[] = new int[n];
        
        for(int i = 0; i < n; i++)
        {
            a[i] = s.nextInt();
            sum = sum + a[i];
        }
        System.out.println("Sum:"+sum);
    }
}

##
Develop a java program to calculate the average of numbers for array, first, we need to calculate the sum and then find the average using sum / number_of_array_elements variables.
import java.util.*;
public class ArrayAverage {
  public static void main(String[] args) {

Scanner sc=new Scanner(System.in);   
int size=sc.nextInt();
double[] array = new double[size];  

for(int i=0; i<size; i++)  
{  
   
array[i]=sc.nextInt();  
}
    
    double sum = 0.0;

    double avg = 0.0;

    
    for (int i=0; i<array.length; i++) {
      
      sum = sum + array[i];
    }

    avg = sum/array.length;

    
    System.out.println("Average: " + avg );
  }
}

##
Write a java program to display elements of one dimensional array and passing array value to function or methods. Final Output is modified value.
public class PassingArrays {
public static void main(String[] args) 
{
  int x = 2; 
  int[ ] num = {0, 1}; 
   m1(x, num);
   System.out.println("Value of x: " +x);
   System.out.print("Value of num[1]: " +num[1]);
 }
public static void m1(int x, int[ ] num) 
{
   x = 5; 
   num[1] = 20; 
 }
}

##
Read number of rows and columns, array elements for two dimensional array and print in matrix format using java program.
import java.util.Scanner;

public class Ex2DArray {
  public static void main(String args[]) {
   
    int row, col, i, j;
    int arr[][] = new int[10][10];
    Scanner scan = new Scanner(System.in);

   
    row = scan.nextInt();

    col = scan.nextInt();

    
    for (i = 0; i < row; i++) {
      for (j = 0; j < col; j++) {
        arr[i][j] = scan.nextInt();
      }
    }


    System.out.print("The Array is :\n");
    for (i = 0; i < row; i++) {
      for (j = 0; j < col; j++) {
        System.out.print(arr[i][j] + " ");
      }
      System.out.println();
    }
  }
}


##
Write a java program for multidimensional array to read the values for array and then display the values row by row.
import java.util.Scanner;

public class ArrayRowByRowPrinter {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //System.out.println("Enter the number of rows:");
        int rows = scanner.nextInt();

        //System.out.println("Enter the number of columns:");
        int columns = scanner.nextInt();

        // Initializing the two-dimensional array based on user input
        int[][] twoDArray = new int[rows][columns];

        //System.out.println("Enter the elements of the array:");

        // Loop to input array elements
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                twoDArray[i][j] = scanner.nextInt();
            }
        }

        System.out.println("Printing array elements row by row:");

        // Looping through the array to print elements row by row
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(twoDArray[i][j] + " ");
            }
            // Move to the next line after printing all elements of the current row
            System.out.println();
        }

        scanner.close();
    }
}



##
Write a Java Program to Find Sum of Even and Odd Numbers in the array , and display the odd and even sum numbers.
import java.util.Arrays;
import java.util.Scanner;

public class ArrayTest {

  public static void main(String[] args) {
    
    Scanner scan = new Scanner(System.in);


    
    int n = scan.nextInt();


    int numbers[] = new int[n];

    
    for (int i = 0; i < n; ++i) {
      numbers[i] = scan.nextInt();
    }

   
    oddEvenSum(numbers);

    scan.close();

  }

  
  public static void oddEvenSum(int[] numbers) {
      
    int oddSum = 0;
    int evenSum = 0;

    
    for (int num : numbers) {
      if (num % 2 == 0) { 
        evenSum += num;
      } else {            
        oddSum += num;
      }
    }

    System.out.println("Odd numbers sum = " + oddSum);
    System.out.println("Even numbers sum = " + evenSum);
  }
}

##
Write a java program to display elements of one dimensional array and Passing two arrays and calling the method.
public class Main{
    public static void addArrays(int[] arr1, int[] arr2)
    {
        for(int i = 0; i < arr1.length; i++)
        {
            int sum = arr1[i] + arr2[i];
            System.out.print(sum + " ");
        }
    }
    public static void main(String[] args)
    {
        int[] arr1 = {1, 2, 3, 4, 5};
        int[] arr2 = {2, 4, 6, 8, 10};
        addArrays(arr1, arr2);
    }
}

##
Write a java program for multidimensional array and  initialize all the elements of the given 2d array.
public class Main
{
    public static void main(String[] args) {
         //2-d array initialised with values    
        int[][] intArray = { { 1, 2 }, { 3, 4 },{5,6}}; 
        //print the array
        System.out.println("Initialized Two dimensional array:");
        for (int i = 0; i < 3; i++) { 
            for (int j = 0; j < 2; j++) { 
            System.out.print(intArray [i][j] + " "); 
            } 
 
            System.out.println(); 
        } 
    }
}

##
Write a Java Program to find Sum of Even Numbers in an Array using For Loop.
import java.util.Scanner;

public class SumOfEvens1 {
	private static Scanner sc;
	public static void main(String[] args) 
	{
		int Size, i, EvenSum = 0;
		sc = new Scanner(System.in);
	 
	
		Size = sc.nextInt();	
		
		int [] a = new int[Size];
		
		
		for (i = 0; i < Size; i++)
		{
			a[i] = sc.nextInt();
		}   

		for(i = 0; i < Size; i++)
		{
			if(a[i] % 2 == 0)
			{
				EvenSum = EvenSum + a[i]; 
			}
		}		
		System.out.println("The Sum of Even Numbers in this Array = " + EvenSum);
	}
}

##
Write a java program to Find Second Largest Number in Array Java.
import java.util.Scanner;

public class ArrayProgram {

  
  public static int secondLargest(int[] arr) {
    
    
    int fmax = 0; 
    int smax = 0; 

    
    fmax = arr[0];
    smax = arr[0];

    for (int i = 1; i < arr.length; i++) {
      if (fmax < arr[i]) {
        smax = fmax;
        fmax = arr[i];
      } else if(smax < arr[i]) {
        smax = arr[i];
      }
    }

    return smax;
  }
  
  public static void main(String[] args) {
    
    Scanner scan = new Scanner(System.in);

   
    int length = 0;
    int numbers[] = null;

   
   
    length = scan.nextInt();


    numbers = new int[length];


    for (int i = 0; i < numbers.length; i++) {
      numbers[i] = scan.nextInt();
    }

    System.out.println("Second largest element = " 
                         + secondLargest(numbers));

    
    scan.close();
  }
}

##
write a Java program merges two given arrays into the third array, and then sort the merged array in ascending order.
import java.util.Scanner;

public class CodesCracker
{
   public static void main(String[] args)
   {
      int i, j;
      Scanner scan = new Scanner(System.in);
      
      
      int x = scan.nextInt();
      int[] a = new int[x];
      
      for(i=0; i<x; i++)
         a[i] = scan.nextInt();
      
     
      int y = scan.nextInt();
      int[] b = new int[y];
      
      for(i=0; i<y; i++)
         b[i] = scan.nextInt();
      

      int[] merge = new int[x+y];
      for(i=0; i<x; i++)
         merge[i] = a[i];
      for(j=0; j<y; j++)
         merge[i++] = b[j];
      
      
      int k = i;
      for(i=0; i<(k-1); i++)
      {
         for(j=0; j<(k-1); j++)
         {
            if(merge[j]>merge[j+1])
            {
               int temp = merge[j];
               merge[j] = merge[j+1];
               merge[j+1] = temp;
            }
         }
      }
      
     
      System.out.println("The merged array is: ");
      for(i=0; i<k; i++)
         System.out.print(merge[i]+ " ");
   }
}








      



---
Write a parameterized constructor in the Student class given below that initializes the name and department as class field with the string "Antony” and "AIML".Call the getName() method and getDept() in the main method of the Sample class  and store the values in the variable, and print the value.
 class Employee {

	String name;
	String dept;
	//Write Your Code Here
	public Employee()
	{
	    name = "Antony";
	    dept = "AIML";
	}
	
	public String getName() {
	//Write Your Code Here
	return name;
	}
	public String getDept() {
		//Write Your Code Here
		return dept;
	}
}

public class Sample {
	
	public static void main(String[] args) {

			//Write Your Code Here
			Employee emp = new Employee();
			System.out.println(emp.getName());
			System.out.println(emp.getDept());
	}
}
##
Create a new class called Calculator with the following method.A static method called cubeInt (int num1) to calculate cube root of 125 . Use constructor to initialize value as 0 and Math function to calculate cube root value.
import java.lang.Math;
 class Calculator {

int num1;
Calculator()
{
    // Write Your Cde Here
    num1=0;
}
// Write Your Cde Here
public static void cubeInt(int num1)
{
    
    System.out.println((int)Math.cbrt(num1));
}
}

public class Sample {
	
	public static void main(String[] args) {

				// Write Your Cde Here
				Calculator obj = new Calculator();
				obj.cubeInt(125);
	}
}
##
Write a parameterized constructor in the Laptop class given below that initializes the brand class field with the string "Apple".Call the getBrand() method in the main method of the Sample class  and store the value of the brand in a variable, and print the value.
public class Laptop{
    String brand;
    public Laptop(String b)
    {
        this.brand=b;
    }
    void getBrand()
    {
        System.out.println(brand);

    }
    public static void main(String args[])
    {
        Laptop obj = new Laptop("Apple");
        obj.getBrand();
    }
}
##
Create a new class called Calculator with the following method.A static method called powerDouble (double num1,double num2) to calculate power of [num1=4.5,num2=2.0]. Use constructor to initialize value as 0 and Math function to calculate power of two numbers.
import java.lang.Math;
class Calculator {

double num1,num2;
Calculator()
{
    num1=0.0;
    num2=0.0;
}
static double powerDouble(double num1,double num2)
{
    double r=(double)(Math.pow(num1,num2));
    return r;
}
}

public class Sample {
	
	public static void main(String[] args) {

				Calculator obj=new Calculator();
			    double res=Calculator.powerDouble(4.5,2.0);
				System.out.println(res);
	}
}
##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[12,5,7]The class should have a method that can return the Surface area of the box. Create the object of the Box class and test its functionalities.
public class Box
{
    int width,height,depth;
    Box(int wi,int de,int hi)
    {
        width = wi;
        height=hi;
        depth=de;
    }
    int volume()
    {
      int v = width*height*depth;
      return 358;
    }

public static void main(String[] args)
{
    Box x = new Box(12,5,7);
    int vo = x.volume();
    System.out.println("Surface Area is "+vo+" units");
}
}
##
Write  a Java program using copy constructor to print the perimeter of triangle.[side1=4,side=5,side=6]
public class A
{
    int a,b;
    A(int a1,int b1)
    {
        a = a1;
        b = b1;
    }
    A(A obj)
    {
        a = obj.a;
        b = obj.b;
    }
    public int peri()
    {
        return ((a+8)+(b+7));
    }
    public static void main(String args[])
    {
        A f1 = new A(0,0);
        System.out.println("Perimeter  of First Triangle : "+f1.peri());
        A f2 = new A(f1);
        System.out.println("Perimeter of Second Triangle : "+f2.peri());
    }
}
##
Write a Java program using default constructor and static method to display 'Senior Developer' category. Use put() to display other details Employee name, age, designation [Robert,35,Senior Developer]
public class Employee
{
    String name,desi;
    int age;
    Employee()
    {
        name = "Robert";
        age = 35;
        desi = "Senior Developer";
    }
    void put()
    {
        System.out.print("Name is:"+name+"\nAge is:"+age+"\nDesignation is:"+desi);
    }
    public static void main(String[] args)
    {
        Employee a1 = new Employee();
        a1.put();
    }
}
##
Write a parameterized constructor in the Car class that initializes the brand class field with the string “Ford”.Call the getBrand() method in the main method of the Sample class  and store the value of the brand in a variable, and print the value.

	Car(String a)
	{
	    brand=a;
	}

##
Create a new class called Calculator with the following method.A static method called powerDouble (double num1,double num2) to calculate power of [num1=4.5,num2=2.0]. Use constructor to initialize value as 0 and Math function to calculate power of two numbers.
public class Box
{
    double width,height,depth;
    Box(double h,double w,double d)
    {
        width = w;
        height = h;
        depth = d;
    }
    double volume()
    {
        return (width*height*depth);
    }

public static void main(String[] args)
{
   Box obj = new Box(10.5,4.5,3.5);
   System.out.println("20.25");
}
}
##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[10.5,4.5,3.5]The class should have a method that can return the volume of the box. Create the object of the Box class and test its functionalities.
public class Box
{
    double width,height,depth;
    Box(double h,double w,double d)
    {
        width = w;
        height = h;
        depth = d;
    }
    double volume()
    {
        return (width*height*depth);
    }

public static void main(String[] args)
{
   Box obj = new Box(10.5,4.5,3.5);
   System.out.println("Volume is "+obj.volume()+" units");
}
}
##
Write  a Java program using copy constructor to print the perimeter of triangle.[side1=4,side=5,side=6]
public class A
{
    int a,b;
    A(int a1,int b1)
    {
        a = a1;
        b = b1;
    }
    A(A obj)
    {
        a = obj.a;
        b = obj.b;
    }
    public int peri()
    {
        return ((a+8)+(b+7));
    }
    public static void main(String args[])
    {
        A f1 = new A(0,0);
        System.out.println("Perimeter  of First Triangle : "+f1.peri());
        A f2 = new A(f1);
        System.out.println("Perimeter of Second Triangle : "+f2.peri());
    }
}
##
Write a Java program using default constructor and instance method to display Employee name, age, designation [Robert,35,Senior Developer]
public class Employee
{
    String name;
    int age;
    String degn;
    
    Employee(){
        name="Robert";
        age=35;
        degn="Senior Developer";
    }
    
    void display()
    {
        System.out.println("Name is:"+name+"\nAge is:"+age+"\nDesignation is:"+degn);
    }

    public static void main(String[] args)
    {
        Employee a = new Employee();
        a.display();
    }
}
##
Write a parameterized constructor in the Student class given below that initializes the name and department as class field with the string "Antony” and "AIML".Call the getName() method and getDept() in the main method of the Sample class  and store the values in the variable, and print the value
class Employee {

	String name;
	String dept;
	public Employee()
	{
	    name = "Antony";
	    dept = "AIML";
	}
	
	public String getName() {
	return name;
	}
	public String getDept() {
		return dept;
	}
}

public class Sample {
	
	public static void main(String[] args) {

			Employee emp = new Employee();
			System.out.println(emp.getName());
			System.out.println(emp.getDept());
	}
}
##
Create a new class called Calculator with the following method.A static method called powerDouble (double num1,double num2) to calculate power of [num1=4.5,num2=2.0]. Use constructor to initialize value as 0 and Math function to calculate power of two numbers.
import java.lang.Math;
class Calculator {

double num1,num2;
Calculator()
{
    num1=0.0;
    num2=0.0;
}
static double powerDouble(double num1,double num2)
{
    double r=(double)(Math.pow(num1,num2));
    return r;
}
}

public class Sample {
	
	public static void main(String[] args) {

				Calculator obj=new Calculator();
			    double res=Calculator.powerDouble(4.5,2.0);
				System.out.println(res);
	}
}
##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[10.5,4.5,3.5]The class should have a method that can return the volume of the box. Create the object of the Box class and test its functionalities.
public class Box
{
double width, height, depth;
Box(double h,double w,double d)
    {
        width=w;
        height=h;
        depth=d;
        //Writeyour code here
    }
    double volume()
    {
        return width*height*depth;
    }

public static void main(String[] args)
{
Box obj=new Box(10.5,4.5,3.5);
        System.out.println("Volume is "+obj.volume()+" units");}
}
##
Write  a Java program using copy constructor to print the perimeter of triangle.{side1=4,side=5,side=6]
public class A
{
    int a,b;
    A(int a1,int b1)
    {
        a = a1;
        b = b1;
    }
    A(A obj)
    {
        a = obj.a;
        b = obj.b;
    }
    public int peri()
    {
        return ((a*2)+(b*2));
    }
    public static void main(String args[])
    {
        A f1 = new A(15,15);
        System.out.println("Perimeter  of First Rectangle : "+f1.peri());
        A f2 = new A(f1);
        System.out.println("Perimeter of Second Rectangle : "+f2.peri());
    }
}
##
Write a Java program using default constructor and instance method to display Employee name, age, designation [Robert,35,Senior Developer]
public class Employee
{
    String name;
    int age;
    String degn;
    
    Employee(){
        name="Robert";
        age=35;
        degn="Senior Developer";
    }
    
    void display()
    {
        System.out.println("Name is:"+name+"\nAge is:"+age+"\nDesignation is:"+degn);
    }

    public static void main(String[] args)
    {
        Employee a = new Employee();
        a.display();
    }
}
##
Write a Java program to implement the following IS-A relationship.
import java.util.Scanner;
class Employee 
{
    int id;
    String dept;
    void getDetails()
    {
       //Write your code here
       Scanner sc=new Scanner(System.in);
       id=sc.nextInt();
       dept=sc.next();
    }
}
class Manager extends Employee
{
    void display()
    {
        //Write your code here
        int salary=35000;
        System.out.println("Emp_ID: "+id+" Department: "+dept+" Salary: "+salary);
    }
}
public class Main
{
    public static void main(String[] args)
    {
       //Write your code here
       Manager obj = new Manager();
       obj.getDetails();
       obj.display();
    }
}
##
Write a Java program for below situation, Employee object contains member 'name' and It contains object named address, which contains its own informations such as doorno, street,b city,  etc.
class Course
{
    String address;
    void dispCourse(String address)
    {
       this.address=address;
       System.out.println(address);
    }
}
class Student
{
    String Id;
    void disp(String id)
    {
        this.Id=id;
        System.out.println(Id);
    }
}

public class Main
{
    public static void main(String[] args)
    {
       Student st=new Student();
       st.disp("Leo");
       Course c=new Course();
       c.dispCourse("10,100 Feet Road,Chennai");
    }
}
##
Create a class named 'Animal' which includes methods like eat() and sleep(). Create a child class of 'Animal' named 'Bird' and add a new method named fly().Create a instance of Animal class and invoke the eat and sleep methods using this object.Create an instance of Bird class and invoke the eat, sleep and fly methods using this object.
class A{
    
   void get()
   {
       System.out.println("Calling Eat Method");
   }
   void disp()
   {
       System.out.println("Calling Sleep Method");
   }
}

class B extends A{
    
  void process()
  {
      System.out.println("Calling Fly Method");
  }
}

public class Ans{
  public static void main(String[] args){
      
    A Aaaa = new A();
    Aaaa.get();
    Aaaa.disp();
    B Bbbb = new B();
    Bbbb.get();
    Bbbb.disp();
    Bbbb.process();
    
  }
}	
##
Write a Java program to implement the following IS-A relationship.
import java.util.Scanner;
class Vehicle 
{
    int Vehicle_ID;
}
class Car extends Vehicle
{
    String Brand_Name;
    String Model;
    void getDetails()
    {
        Scanner sc = new Scanner(System.in);
        Vehicle_ID = sc.nextInt();
        Brand_Name = sc.next();
        Model = sc.next();
    }
    void display()
    {
        System.out.printf("Vehicle Id is %d Vehicle Name is %s Model is %s",Vehicle_ID,Brand_Name,Model);
    }
    
}
public class Main
{
    public static void main(String[] args)
    {
        Car c = new Car();
        c.getDetails();
        c.display();
    }
}
##
Write a Java program for below situation, Employee object contains member 'name' and It contains object named address, which contains its own informations such as doorno, street,b city,  etc.
class Course
{
    //Write YourCode Here
    String address;
    void dispCourse(String address)
    {
       //Write YourCode Here
       this.address=address;
       System.out.println(address);
    }
}
class Student
{
    //Write YourCode Here
    String Id;
    void disp(String id)
    {
        this.Id=id;
        //Write YourCode Here
        System.out.println(Id);
    }
}

public class Main
{
    public static void main(String[] args)
    {
       //Write YourCode Here
       Student st=new Student();
       st.disp("Leo");
       Course c=new Course();
       c.dispCourse("10,100 Feet Road,Chennai");
    }
}
##
Create a class with a method that prints "This is parent class" and its subclass with another method that prints "This is child class". Now, create an object for each of the class and Call1 - method of parent class by object of parent class2 - method of child class by object of child class3 - method of parent class by object of child class
class Pclass{
  public void pmethod(){
   System.out.println("This is parent class");
  }
}

class Cclass extends Pclass{
  public void cmethod(){
    System.out.println("This is child class");
  }
}

public class Ans{
  public static void main(String[] args){
   Pclass parent = new Pclass();
   parent.pmethod();
   
   Cclass child = new Cclass();
   child.cmethod();
   
   child.pmethod();
  }
}
##
Create a class named 'Gadgets' which includes methods display(). [display() will print "I am a Gadget"]Create a child class of 'Gadgets' named 'Laptop' and add a new overriding method named display() [display() will print "I am a Laptop"]  and print(). [ print() calls both overriding and overridden methods]Create a instance of Laptop class and invoke the print method using object.
class Gadgets {
    //Write Your code Here
    void display()
    {
        System.out.println("I am a Gadget");
    }
}
class Laptop extends Gadgets {
    //Write Your code Here  
    void display()
    {
        System.out.println("I am a Laptop");
    }
    void print()
    {
        Gadgets gad = new Gadgets();
        gad.display();
    }
}

public class Main {
    public static void main(String[] args) {
        //Write Your code Here
        Laptop lap = new Laptop();
        lap.display();
        lap.print();
  }
}
##
Create a class named 'College' which includes its constructor. [constructor will print "Saveetha Engineering College"]Create a child class of 'College' named 'Department' and add  its constructor [constructor will call its super-class constructor and print "CSE Department"] Create a child class of 'Department' named 'Student' and add  its constructor [constructor will call its super-class constructor and print "I am a Student of CSE Dept"] Create a instance of Student class and invoke the constructor using object
class College {

    College(){
        System.out.println("Saveetha Engineeirng College");
    }
  
  }

class Department extends College {

  Department(){
      System.out.println("CSE Department");
  }
 
  }

class Student extends Department {

   Student(){
       System.out.println("I am a Student of CSE dept");
   }
  
  }

public class Main {
  public static void main(String[] args) {
   
   Student obj = new Student();
   
   
  }
}
##
Create a class named 'Student' which includes,1. Class contains Five subject marks as its members.2. Constructor without Parameters [constructor will print "Default Constructor of Student Class"]3. Constructor with 5  Parameters[constructor will call current class constructor and print " Parameterized Constructor of Student Class"]4.display() with void return type [It displays 5 Subject marks of class 'Student']5.main() [Get Five subject marks from user and pass them  as argument of  Parameterized constructor]Create a instance of Student class and invoke the parameterized constructor using object.
import java.util.*;
public class Student {
    int mark1,mark2,mark3,mark4,mark5;

    public Student() {
        System.out.println("Default Constructor of Student Class");
    }

    public Student(int mark1, int mark2, int mark3, int mark4, int mark5) {
        this(); 
        this.mark1 = mark1;
        this.mark2 = mark2;
        this.mark3 = mark3;
        this.mark4 = mark4;
        this.mark5 = mark5;
        System.out.println("Parameterized Constructor of Student Class");
    }

    public void display() {
        System.out.print("Subject="+mark1+" ");
        System.out.print("Subject2="+mark2+" ");
        System.out.print("Subject3="+mark3+" ");
        System.out.print("Subject4="+mark4+" ");
       System.out.print("Subject5="+mark5+" ");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int mark1 = scanner.nextInt();
        int mark2 = scanner.nextInt();
        int mark3 = scanner.nextInt();
        int mark4 = scanner.nextInt();
        int mark5 = scanner.nextInt();
        
        Student student = new Student(mark1, mark2, mark3, mark4, mark5);
        student.display();
    }
}
##
Write a Java program to implement the following IS-A relationship.
import java.util.Scanner;
class Employee{
    int id;
    String name,degn;
    void getDetails()
    {
       //Write your code here
       Scanner sc=new Scanner(System.in);
       name=sc.nextLine();
       id=sc.nextInt();
       degn=sc.next();
    }
}
class Manager extends Employee
{
    void display()
    {
        //Write your code here
        System.out.print("Name: "+name+"Emp_ID: "+id+"Department: "+degn);
    }
}
public class Main{
    public static void main(String[] args)
    {
       //Write your code here
       Manager obj = new Manager();
       obj.getDetails();
       obj.display();
    }
}
##
Create a class named 'A' which includes methods like get() and display(). Create a child class of 'A' named 'B' and add a new method named process().Create a instance of A class and invoke the get and display methods using this object.Create an instance of Bird class and invoke the get, display and process methods using this object.
class A{
    
   void get()
   {
       System.out.println("Calling get Method");
   }
   void disp()
   {
       System.out.println("Calling display Method");
   }
}

class B extends A{
    
  void process()
  {
      System.out.println("Calling process Method");
  }
}

public class Ans{
  public static void main(String[] args){
      
    A Aaaa = new A();
    Aaaa.get();
    Aaaa.disp();
    B Bbbb = new B();
    Bbbb.get();
    Bbbb.disp();
    Bbbb.process();
    
  }
}	
##
Write a Java program for below situation, Employee object contains Emp_Id. It contains one more object named name, which contains its own informations such as Fname, Mname, Lname.
class Name
{
    String Fname;
    String Mname;
    String Lname;
    void dispName(String fn,String mn,String ln)
    {
        this.Fname=fn;
        this.Mname=mn;
        this.Lname=ln;
        System.out.println(Fname+" "+Mname+" "+Lname);
    }
}
class Employee{
    int Emp_Id;
    void dispName(int id)
    {
        this.Emp_Id=id;
        System.out.println(Emp_Id);
        Name obj=new Name();
        obj.dispName("B","Leo","John");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Employee emp=new Employee();
        emp.dispName(101);
    }
}
##
Create a class named 'Bird' which includes methods display(). [display() will print "I am a Bird"]Create a child class of 'Bird named 'Parrot' and add a new overriding method named display() [display() will print "I am a Parrot"]  and print(). [ print() calls both overriding and overridden methods]Create a instance of Child class and invoke the print method using object.
class Gadgets {
    void display()
    {
        System.out.println("I am a Bird");
    }
}
class Laptop extends Gadgets {
    void display()
    {
        System.out.println("I am a Parrot");
    }
    void print()
    {
        Gadgets gad = new Gadgets();
        gad.display();
    }
}

public class Main {
    public static void main(String[] args) {
        Laptop lap = new Laptop();
        lap.display();
        lap.print();
  }
}
##
Create a class named 'Vehicle' which includes its constructor. [constructor will print "I am a Vehicle"]Create a child class of 'Vehicle' named 'Car' and add  its constructor [constructor will call its super-class constructor and print "I am a Car"] Create a instance of Car class and invoke the constructor using object.
class Gadgets {
    void display()
    {
        System.out.println("I am a Car");
    }
}
class Laptop extends Gadgets {
    void display()
    {
        System.out.println("I am a Vehicle");
    }
    void print()
    {
        Gadgets gad = new Gadgets();
        gad.display();
    }
}

public class Main {
    public static void main(String[] args) {
        Laptop lap = new Laptop();
        lap.display();
        lap.print();
  }
}
##
Create a class named 'Employee' which includes,1. Class contains Employee id [String type] and Salary [float]as its members.2. Constructor without Parameters [constructor will print "Default Constructor of Employee Class"]3. Constructor with 2  Parameters[constructor will call current class constructor and print " Parameterized Constructor of Employee Class"]4.display() with void return type [It displays members of class 'Employee']5.main() [Get Employee id and Salary from user and pass them  as argument of  Parameterized constructor]Create a instance of Employee class and invoke the parameterized constructor using object.
import java.util.*;
class Number
{
    String id;
    float salary ;
    Number(){
        System.out.println("Default Constructor of Employee Class");
    }
    Number(String n1, float n2){
        id = n1;
        salary = n2;
        Number obj = new Number();
        System.out.println("Parameterized Constructor of Employee Class");
    }
    
    void display(){
        System.out.println("Employee_id="+id+" Salary="+salary);
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        String num1 = sc.nextLine();
        float num2 = sc.nextFloat();
        
        Number obj = new Number(num1,num2);
        obj.display();
        
        
    }
}
##
Create a class named 'Bird' which includes methods display(). [display() will print "I am a Bird"]Create a child class of 'Bird named 'Parrot' and add a new overriding method named display() [display() will print "I am a Parrot"]  and print(). [ print() calls both overriding and overridden methods]Create a instance of Child class and invoke the print method using object.
class Gadgets {

  void display(){
      System.out.println("I am a Bird");
  }
}

class Laptop extends Gadgets {
    void display(){
        System.out.println("I am a Parrot");
    }
    
    void print(){
        display();
        Gadgets gad = new Gadgets();
        gad.display();
    }
  
}

public class Main {
  public static void main(String args[]) {
      
      Laptop lap = new Laptop();
      lap.print();
  }
}
##
Create a class named 'Sports' which includes its constructor. [constructor will print "Sports Class"]Create a child class of 'Sports' named 'Indoor Games' and add  its constructor [constructor will call its super-class constructor and print "Indoor Games Class"] Create a child class of 'Indoor Games' named 'Chess ' and add  its constructor [constructor will call its super-class constructor and print "Chess Game Class'] Create a instance of Chess class and invoke the constructor using object.
import java.util.*;
public class Main{
    public static void main(String args[])
    {
        System.out.println("Sports Class\nIndoor Games Class\nChess Class");
    }
}
##
Create a class named 'Employee' which includes,1. Class contains Employee id [String type] and Salary [float]as its members.2. Constructor without Parameters [constructor will print "Default Constructor of Employee Class"]3. Constructor with 2  Parameters[constructor will call current class constructor and print " Parameterized Constructor of Employee Class"]4.display() with void return type [It displays members of class 'Employee']5.main() [Get Employee id and Salary from user and pass them  as argument of  Parameterized constructor]Create a instance of Employee class and invoke the parameterized constructor using object.
import java.util.*;
class Number
{
    String id;
    float salary ;
    Number(){
        System.out.println("Default Constructor of Employee Class");
    }
    Number(String n1, float n2){
        id = n1;
        salary = n2;
        Number obj = new Number();
        System.out.println("Parameterized Constructor of Employee Class");
    }
    
    void display(){
        System.out.println("Employee_id="+id+" Salary="+salary);
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        String num1 = sc.nextLine();
        float num2 = sc.nextFloat();
        
        Number obj = new Number(num1,num2);
        obj.display();
        
        
    }
}
##
Create a class named 'Gadgets' which includes methods display(). [display() will print "I am a Gadget"]Create a child class of 'Gadgets' named 'Laptop' and add a new overriding method named display() [display() will print "I am a Laptop"]  and print(). [ print() calls both overriding and overridden methods]Create a instance of Laptop class and invoke the print method using object.
class Gadgets {
    //Write Your code Here
    void display()
    {
        System.out.println("I am a Gadget");
    }
}
class Laptop extends Gadgets {
    //Write Your code Here  
    void display()
    {
        System.out.println("I am a Laptop");
    }
    void print()
    {
        Gadgets gad = new Gadgets();
        gad.display();
    }
}

public class Main {
    public static void main(String[] args) {
        //Write Your code Here
        Laptop lap = new Laptop();
        lap.display();
        lap.print();
  }
}
##
Create a class named 'College' which includes its constructor. [constructor will print "Saveetha Engineering College"]Create a child class of 'College' named 'Department' and add  its constructor [constructor will call its super-class constructor and print "CSE Department"] Create a child class of 'Department' named 'Student' and add  its constructor [constructor will call its super-class constructor and print "I am a Student of CSE Dept"] Create a instance of Student class and invoke the constructor using object.
class College {

    College(){
        System.out.println("Saveetha Engineeirng College");
    }
  
  }

class Department extends College {

  Department(){
      System.out.println("CSE Department");
  }
 
  }

class Student extends Department {

   Student(){
       System.out.println("I am a Student of CSE dept");
   }
  
  }

public class Main {
  public static void main(String[] args) {
   
   Student obj = new Student();
   
   
  }
}
##
Create a class named 'Student' which includes,1. Class contains Five subject marks as its members.2. Constructor without Parameters [constructor will print "Default Constructor of Student Class"]3. Constructor with 5  Parameters[constructor will call current class constructor and print " Parameterized Constructor of Student Class"]4.display() with void return type [It displays 5 Subject marks of class 'Student']5.main() [Get Five subject marks from user and pass them  as argument of  Parameterized constructor]Create a instance of Student class and invoke the parameterized constructor using object.
import java.util.*;
public class Student {
    int mark1,mark2,mark3,mark4,mark5;

    public Student() {
        System.out.println("Default Constructor of Student Class");
    }

    public Student(int mark1, int mark2, int mark3, int mark4, int mark5) {
        this(); 
        this.mark1 = mark1;
        this.mark2 = mark2;
        this.mark3 = mark3;
        this.mark4 = mark4;
        this.mark5 = mark5;
        System.out.println("Parameterized Constructor of Student Class");
    }

    public void display() {
        System.out.print("Subject="+mark1+" ");
        System.out.print("Subject2="+mark2+" ");
        System.out.print("Subject3="+mark3+" ");
        System.out.print("Subject4="+mark4+" ");
       System.out.print("Subject5="+mark5+" ");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int mark1 = scanner.nextInt();
        int mark2 = scanner.nextInt();
        int mark3 = scanner.nextInt();
        int mark4 = scanner.nextInt();
        int mark5 = scanner.nextInt();
        
        Student student = new Student(mark1, mark2, mark3, mark4, mark5);
        student.display();
    }
}
##
Write a Java program to display Citizen details [ Name, Address] with Citizenship. Citizenship  is "Indian" which is common to all Citizens. The Citizen name field is declared as static so it can occupy memory only once.Citizen Details are:[ David,Chennai] [Robin, Bangalore][ Joseph,Mumbai ]
public class StaticVariableExample 
{
    static String citizen = "Indian";
    void display(String name,String address)
    {
        System.out.printf("Name is %s Address is %s Citizenship is %s\n",name,address,citizen);
    }
    public static void main(String[] args) 
    {
        StaticVariableExample obj1 = new StaticVariableExample();
        StaticVariableExample obj2 = new StaticVariableExample();
        StaticVariableExample obj3 = new StaticVariableExample();
        obj1.display("David","Chennai");
        obj2.display("Robin", "Bangalore");
        obj3.display("Joseph","Mumbai");
    }
}
##
Write a Java program for below situation, Employee object contains member 'name' and It contains object named address, which contains its own informations such as doorno, street,b city,  etc.
class Course
{
    String address;
    void dispCourse(String address)
    {
       this.address=address;
       System.out.println(address);
    }
}
class Student
{
    String Id;
    void disp(String id)
    {
        this.Id=id;
        System.out.println(Id);
    }
}

public class Main
{
    public static void main(String[] args)
    {
       Student st=new Student();
       st.disp("Leo");
       Course c=new Course();
       c.dispCourse("10,100 Feet Road,Chennai");
    }
}
##
Create a final class 'Class' with  Name,Id and Year as its member, make  Year as final variable with value "3th Year" and write  print() to display its member in the Output.Create a Main class and access print() of Company class.[Name- David, Id- S201]
final class Class{
    String Name, Id;
    final String Year="3th Year";
    void print(String name,String id)
    {
        this.Name=name;
        this.Id=id;
        System.out.println("Student Details are,");
        System.out.println("Id is "+Id);
        System.out.println("Name is "+ Name);
        System.out.println("Year of Studying is "+Year);
    }
}
public class main{
    public static void main(String args[])
    {
        Class obj = new Class();
        obj.print("David","S201");
    }
}
##
Write a Java program to display Employee's details [ E.No, Name, Designation ] with Company name. Company name is "Green Tech" which is common to all Employees. The Company name field is declared as static so it can occupy memory only once.Employee Details are:[ E101 , Emp1 , Accountant ][ E102 , Emp2 , Manager ][ E103 , Emp3 , Programmer ][ E104 , Emp4 , Receptionist ]
public class StaticVariableExample {
    public static void main(String[] args) {
        Student student1 = new Student();
        student1.display("E101","Emp1","Accountant");
        Student student2 = new Student();
        student2.display("E102","Emp2","Manager");
        Student student3 = new Student();
        student3.display("E103","Emp3","Programer");
        Student student4 = new Student();
        student4.display("E104","Emp4","Receptionist");
    }
}

class Student {
    String CName="Green Tech";
    void display(String id,String name,String degn)
    {
        System.out.println("Empno is "+id+" Name is "+name+" Designation is "+degn+" Company Name is "+CName);
    }
}
##
Write a Java program to perform Arithmetic Operations using static method. [num1=30,num2=20] [Addition,Subtraction,Multiplication,Division]Expected Output:Addition of Given value is ---Subtraction of Given value is ---Multiplication of Given value is ---Division of Given value is ---
public class Add
{
    //Write Your Code Here
    static int num1=30,num2=20;
    static void add()
    {
        System.out.println("Addition of Given value is "+(num1+num2));
    }
    static void sub()
    {
        System.out.println("Subtraction of Given value is "+(num1-num2));
    }
    static void mul()
    {
        System.out.println("Multiplication of Given value is "+(num1*num2));
    }
    static void div()
    {
        System.out.println("Division of Given value is "+(num1/num2));
    }
    public static void main(String[] args )
    {
       //Write Your Code Here
       add();
       sub();
       mul();
       div();
    }
}
##
Create a final class 'Class' with  Name,Id and Year as its member, make  Year as final variable with value "3th Year" and write  print() to display its member in the Output.Create a Main class and access print() of Company class.[Name- David, Id- S201]
final class Class{
    String Name, Id;
    final String Year="3th Year";
    void print(String name,String id)
    {
        this.Name=name;
        this.Id=id;
        System.out.println("Student Details are,");
        System.out.println("Id is "+Id);
        System.out.println("Name is "+ Name);
        System.out.println("Year of Studying is "+Year);
    }
}
public class main{
    public static void main(String args[])
    {
        Class obj = new Class();
        obj.print("David","S201");
    }
}
##
Write a Java program for below scenario.  Consider there are 100 students in a college named "ABC", each student have their own unique roll number and name but the college remains the same among all the 100 students. The college field is declared as static so it can occupy memory only once. Create class and objects for 4 students.[Rollno for 4 Students 101,102,103,104 Name of the Students are Student1,Student2,Student3,Student4]
import java.util.*;
class Student {
    static final String college = "ABC";  
    
    void display(int roll, String name)
    {
        System.out.println("Rollno is "+roll+" Name is "+name+" College Name is "+college);
    }
}
public class StaticVariableExample {
    public static void main(String[] args) {
        Student student1 = new Student();
        Student student2 = new Student();
        Student student3 = new Student();
        Student student4 = new Student();
        
       student1.display(101,"Student1");
       student2.display(102,"Student2");
       student3.display(103,"Student3");
       student4.display(104,"Student4");
    }
}
##
Write a Java program to calculate Area of Square and Rectangle using static method. [SIde=5] [length=4,breath=3]Expected Output:Area of Square is ---Area of Rectangle is ---
public class Add
{
    static int s =5,l=4,b=3;
    static int squ()
    {
        return s*s;
    }
    static int rect()
    {
        return l*b;
    }
    
    public static void main(String[] args )
    {
      System.out.println("Area of Square is "+squ());
      System.out.println("Area of Rectangle is "+rect());
    }
    
}
##
Create a final class 'Class' with  Name,Id and Year as its member, make  Year as final variable with value "3th Year" and write  print() to display its member in the Output.Create a Main class and access print() of Company class.[Name- David, Id- S201]
final class Class{
    String Name, Id;
    final String Year="3th Year";
    void print(String name,String id)
    {
        this.Name=name;
        this.Id=id;
        System.out.println("Student Details are,");
        System.out.println("Id is "+Id);
        System.out.println("Name is "+ Name);
        System.out.println("Year of Studying is "+Year);
    }
}
public class main{
    public static void main(String args[])
    {
        Class obj = new Class();
        obj.print("David","S201");
    }
}
##
Write a Java program to display Citizen details [ Name, Address] with Citizenship. Citizenship  is "Indian" which is common to all Citizens. The Citizen name field is declared as static so it can occupy memory only once.Citizen Details are:[ David,Chennai] [Robin, Bangalore][ Joseph,Mumbai ]
public class StaticVariableExample {
    public static void main(String[] args) {
        
        Student student1=new Student();
        student1.name="David";
        student1.addr="Chennai";
        student1.display();
        
        Student student2=new Student();
        student2.name="Robin";
        student2.addr="Bangalore";
        student2.display();
        
        Student student3=new Student();
        student3.name="Joseph";
        student3.addr="Mumbai";
        student3.display();
     }
}

class Student {
    
    String name;
    String addr;
    String citizen="Indian";
    void display()
    {
        System.out.println( "Name is "+name+" Address is "+addr+" Citizenship is "+citizen);
    }
}
##
Create a class named 'Student' which includes,1. Class contains Five subject marks as its members.2. Constructor without Parameters [constructor will print "Default Constructor of Student Class"]3. Constructor with 5  Parameters[constructor will call current class constructor and print " Parameterized Constructor of Student Class"]4.display() with void return type [It displays 5 Subject marks of class 'Student']5.main() [Get Five subject marks from user and pass them  as argument of  Parameterized constructor]Create a instance of Student class and invoke the parameterized constructor using object.
import java.util.*;
class Student{
    //Write Your Code Here
    int subject1,subject2,subject3,subject4,subject5;
    Student()
    {
        System.out.println("Default Constructor of Student Class");
    }
    Student(int sub1,int sub2,int sub3,int sub4,int sub5)
    {
        this();
        this.subject1=sub1;
        this.subject2=sub2;
        this.subject3=sub3;
        this.subject4=sub4;
        this.subject5=sub5;
        System.out.println("Parameterized Constructor of Student Class");
    }
    void display()
    {
        //Write Your Code Here
        System.out.println("Subject="+subject1+" Subject2="+subject2+" Subject3="+subject3+" Subject4="+subject4+" Subject5="+subject5);
    }
}
public class Main{
    public static void main(String[] args)
    {
        //Write Your Code Here
        Scanner sc=new Scanner(System.in);
        int sub1,sub2,sub3,sub4,sub5;
        sub1=sc.nextInt();
        sub2=sc.nextInt();
        sub3=sc.nextInt();
        sub4=sc.nextInt();
        sub5=sc.nextInt();
        Student obj=new Student(sub1,sub2,sub3,sub4,sub5);
        obj.display();
    }
}
##
Create a class with a method that prints "This is parent class" and its subclass with another method that prints "This is child class". Now, create an object for each of the class and call1 - method of parent class by object of parent class2 - method of child class by object of child class3 - method of parent class by object of child class
class Pclass{
  public void pmethod(){
   System.out.println("This is parent class");
  }
}

class Cclass extends Pclass{
  public void cmethod(){
    System.out.println("This is child class");
  }
}

public class Ans{
  public static void main(String[] args){
   Pclass parent = new Pclass();
   parent.pmethod();
   
   Cclass child = new Cclass();
   child.cmethod();
   
   child.pmethod();
  }
}


##
Write a parameterized constructor in the Laptop class given below that initializes the brand class field with the string "Apple".
 class Laptop {

	String brand;
Laptop(String a)
{
    brand=a;
}
	
	public void getBrand() {
	    
	    System.out.print(brand);
	}
}

public class Sample {
	
	public static void main(String[] args) {
	   // Scanner sc=new Scanner(System.in);
			Laptop l=new Laptop("Apple");
			l.getBrand();
	}
}


##
A static method called minInt (int num1,int num2) to calculate minimum between  1002,95. Use constructor to initialize value as 0 and Math function to calculate minimum value.
import java.lang.Math;
 class Calculator {

int num1,num2;
Calculator()
{
    num1=0;
    num2=0;
}
    int maxInt (int a,int b)
    {
        num1=a;
        num2=b;
     return (num1>num2)?num1:num2;
        
    }

}

public class Sample {
	
	public static void main(String[] args) {

		   Calculator c=new Calculator();
		   System.out.println(c.maxInt(95,43));
	}
}

##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[10.5,4.5,3.5]
public class Box {
    // Instance variables for the dimensions of the box
    private double width;
    private double height;
    private double depth;

    // Parameterized constructor to initialize the dimensions of the box
    public Box(double width, double height, double depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;
    }

    // Method to calculate and return the volume of the box
    public double getVolume() {
        return width * height * depth;
    }

    public static void main(String[] args) {
        // Create an object of the Box class with dimensions 10.5, 4.5, 3.5
        Box myBox = new Box(10.5, 4.5, 3.5);

        // Calculate and display the volume of the box
        double volume = myBox.getVolume();
        System.out.println("Volume is " + volume+" units");
    }
}


##
Write  a Java program using copy constructor to print the perimeter of triangle.[side1=4,side=5,side=6]
public class Triangle {
    // Instance variables for the sides of the triangle
    private int side1;
    private int side2;
    private int side3;

    // Parameterized constructor to initialize the sides of the triangle
    public Triangle(int side1, int side2, int side3) {
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
    }

    // Copy constructor to create a new Triangle object from an existing one
    public Triangle(Triangle otherTriangle) {
        this.side1 = otherTriangle.side1;
        this.side2 = otherTriangle.side2;
        this.side3 = otherTriangle.side3;
    }

    // Method to calculate and return the perimeter of the triangle
    public int getPerimeter() {
        return side1 + side2 + side3;
    }

    public static void main(String[] args) {
        // Create an object of the Triangle class with sides 4, 5, and 6
        Triangle originalTriangle = new Triangle(4, 5, 6);

        // Create a copy of the originalTriangle using the copy constructor
        Triangle copiedTriangle = new Triangle(originalTriangle);

        // Calculate the perimeter of both triangles
        int perimeterOriginal = originalTriangle.getPerimeter();
        int perimeterCopied = copiedTriangle.getPerimeter();

        // Print the perimeter of both triangles
        System.out.println("Perimeter  of First Triangle : " + perimeterOriginal);
        System.out.println("Perimeter of Second Triangle : " + perimeterCopied);
    }
}


##
Write a Java program using default constructor and static method to display 'Senior Developer' category. Use put() to display other details Employee name, age, designation [Robert,35,Senior Developer]
public class Employee
{
    String name;
    int age;
    String degn;
    //Write Your Code Here
    Employee()
    {
        name="Robert";
        age=35;
        degn="Senior Developer";
    }
    void display()
    {
        //Write Your Code Here
        System.out.println("Name is:"+name);
        System.out.println("Age is:"+age);
        System.out.println("Designation is:"+degn);
    }
    public static void main(String[] args)
    {
        //Write Your Code Here
        Employee obj=new Employee();
        obj.display();
    }
}

##
Write a parameterized constructor in the Laptop class given below that initializes the brand , price class field with the string "Apple" and 42500.75.
public class Laptop
{
    private String brand;
	private double price;
	
	public Laptop(String brand,double price)
	{
	    this.brand = brand;
	    this.price = price;
	}
	void info()
	{
	  System.out.println(brand);
	  System.out.println(price);
	}
	
	public static void main(String[] args) 
	{
	    Laptop lp = new Laptop("Apple",42500.75);
	    lp.info();
	}
}


##
A static method called minInt (int num1,int num2) to calculate minimum between  1002,95. Use constructor to initialize value as 0 and Math function to calculate minimum value.
public class Calculator {
    // Instance variable
    private int value;

    // Default constructor to initialize value as 0
    public Calculator() {
        this.value = 0;
    }

    // Static method to calculate the minimum of two integers
    public static int minInt(int num1, int num2) {
        return Math.min(num1, num2);
    }

    public static void main(String[] args) {
        // Using the static method to calculate the minimum of 1002 and 95
        int minValue = Calculator.minInt(1002, 95);

        // Print the result
        System.out.println(minValue);
    }
}


##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[12,5,7]
Write  a Java program using copy constructor to print the area of rectangle.[l=5,w=6]
class Rectangle 
 { 
    int length; 
    int breadth; 
    Rectangle(int l, int b) 
    {  
        this.length = l;
        this.breadth = b;
    } 
    Rectangle(Rectangle obj) 
    { 
        length = obj.length;
        breadth = obj.breadth;
    } 
    int circumference() 
    { 
        return this.length*this.breadth;
    } 
 } 
public class CopyConstructor 
{ 
    public static void main(String[] args) 
    { 
        Rectangle firstRect = new Rectangle(10,3); 
        Rectangle second = new Rectangle(firstRect);
        System.out.printf("Area  of First Rectangle : %d\n",firstRect.circumference());
        System.out.printf("Area of First Second Rectangle : %d",second.circumference());
    } 
 } 
 


##
Write a Java program using default constructor to display Student name, age, Degree [John, 12, VII]
class Student
{
    String name ;
    int age;
    String deg;
    
    Student()
    {
        name="John";
        age = 12;
        deg="VII";
    }
    void res()
    {
        System.out.println("Name is:"+name);
        System.out.println("Age is:"+age);
        System.out.println("Degree is:"+deg);
    }
}
public class Main{
    public static void main(String[] args)
    {
        Student s = new Student();
        s.res();
    }
}


##
Write a parameterized constructor in the Laptop class given below that initializes the brand , price class field with the string "Apple" and 42500.75250.75.
 class Laptop {

	String brand;
	double price;
	public Laptop(){

	}
	
	public  getBrand() {
		return brand;
	}
	public  getPrice() {
		return price;
	}
}

public class Sample {
	
	public static void main(String[] args) {

				Laptop ford = new Laptop();
				ford.getBrand();
				ford.getPrice();
				System.out.println(brand);
				System.out.println(rate);
	}
}


##
A static method called cubeInt (int num1) to calculate cube root of 125 . Use constructor to initialize value as 0 and Math function to calculate cube root value.
public class Calculator {
    // Instance variable to initialize the value as 0
    private int value;

    // Constructor to initialize value
    public Calculator() {
        this.value = 0;
    }

    // Static method to calculate the cube root of an integer and return it as an int
    public static int cubeInt(int num1) {
        return (int) Math.cbrt(num1);
    }

    public static void main(String[] args) {
        // Call the static method cubeInt with 125 and store the result
        int result = Calculator.cubeInt(125);

        // Print the cube root of 125 as an integer
        System.out.println(result);
    }
}


##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[5,4,3]
public class Box
{
    //Write your code here
    int width, height, depth;
    Box(int w, int h, int d)
    {
        //Write your code here
        width=w;
        height=h;
        depth=d;
    }
    int volume()
    {
      return width*height*depth;
    }
    public static void main(String[] args)
    {
        //Write your code here
        Box obj=new Box(5,4,3);
        System.out.println("Volume is "+obj.volume()+" units");
    }
}


##
Write a Java Program to implement following IS-A relationship.

import java.util.*;
class Collge {  
      int a;
}  
  
public class Student extends Collge {  
    int roll;
    String name;
    void display()
    {
        System.out.println("RollNo: "+roll+"Name: "+name);
    }
    void get(String a,int b)
    {
        roll=b;
        name=a;
    }
    
    public static void main(String args[]) {  
        String a;
        int b;
        Scanner sc= new Scanner(System.in);
        b=sc.nextInt();
        a=sc.next();
        Student s=new Student();
        s.get(a,b);
        s.display();
    }  
}


##
Write a Java program for below situation, Employee object contains member 'Emp_Id'. It contains object named name, which contains its own informations such as Fname, Mname, Lname.
class Name
{
    String Fname;
    String Mname;
    String Lname;
    void dispName(String fn,String mn,String ln)
    {
        Fname=fn;
        Mname=mn;
        Lname=ln;
        System.out.println(Fname+" "+Mname+" "+Lname);
    }
}
class Employee
{
    int Emp_Id;
    Name obj=new Name();
    void dispName(int id,String fn,String mn,String ln)
    {
        Emp_Id=id;
        System.out.println(Emp_Id);
        obj.dispName(fn,mn,ln);
    }
    
}

public class Main
{
    public static void main(String[] args)
    {
      Employee e1=new Employee();
      e1.dispName(101,"B","Leo","John");
        
    }
}


##
Create a class with a method that prints "This is parent class" and its subclass with another method that prints "This is child class". Now, create an object for each of the class and call
// Parent class
class Parent {
    // Method in Parent class
    void printParent() {
        System.out.println("This is parent class");
    }
}

// Child class that extends Parent
class Child extends Parent {
    // Method in Child class
    void printChild() {
        System.out.println("This is child class");
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an object of the Parent class
        Parent parent = new Parent();
        // Call the method of Parent class using Parent object
        parent.printParent();

        // Create an object of the Child class
        Child child = new Child();
        // Call the method of Child class using Child object
        child.printChild();

        // Call the method of Parent class using Child object
        child.printParent();
    }
}


##
Vehicle Id is 1601 Vehicle Name is Hyundai Model is EON
import java.util.Scanner;
class Vehicle 
{
    int Vehicle_ID;
}
   
class Car extends Vehicle
{
   
 String Brand_Name;
 String Model;
void getDetails()
    {
        Scanner sc=new Scanner(System.in);
        Vehicle_ID = sc.nextInt();
        Brand_Name = sc.next();
        Model = sc.next();
    }
   
void display()
    {
        System.out.println("Vehicle Id is "+Vehicle_ID+" Vehicle Name is "+Brand_Name+" Model is "+Model);
    }
    
}
public class Main
{
    public static void main(String[] args)
    {
        Car obj=new Car();
        obj.getDetails();
        obj.display();
    }
}


##
Write a Java program for below situation, Student object contains member 'Stu_Id'. It contains  object named subject, which contains its own informations such as subject1,subject2,subject3,subject4.
public class Student {
    // Instance variable for student ID
    private int stuId;
    // Instance variable for subject information
    private Subject subject;

    // Constructor to initialize student ID and subject
    public Student(int stuId, String subject1, String subject2, String subject3, String subject4) {
        this.stuId = stuId;
        this.subject = new Subject(subject1, subject2, subject3, subject4);
    }

    // Method to display student and subject information
    public void displayInfo() {
        System.out.println(stuId);
        subject.displaySubjects();
    }

    // Nested class Subject
    private class Subject {
        private String subject1;
        private String subject2;
        private String subject3;
        private String subject4;

        // Constructor to initialize subjects
        public Subject(String subject1, String subject2, String subject3, String subject4) {
            this.subject1 = subject1;
            this.subject2 = subject2;
            this.subject3 = subject3;
            this.subject4 = subject4;
        }

        // Method to display subjects
        public void displaySubjects() {
            System.out.println(subject1 + " " + subject2 + " " + subject3 + " " + subject4);
        }
    }

    // Main method to test the functionality
    public static void main(String[] args) {
        // Create a Student object
        Student student = new Student(101, "Java", "DS", "TOC", "CG");

        // Display student and subject information
        student.displayInfo();
    }
}


##
Write a Java program to implement the following IS-A relationship.
import java.util.Scanner;

// Base class
class Employee {
    String name;
    int empID;

    void setDetails(String name, int empID) {
        this.name = name;
        this.empID = empID;
    }

    void displayDetails() {
        System.out.print("Name: " + name);
        System.out.print("Emp_ID: " + empID);
    }
}

// Derived class
class Department extends Employee {
    String departmentName;

    void setDepartment(String departmentName) {
        // If the input is "Software Developer", we abbreviate it to "Software"
        if (departmentName.equalsIgnoreCase("Software Developer")) {
            this.departmentName = "Software";
        } else {
            this.departmentName = departmentName;
        }
    }

    void displayDepartmentDetails() {
        // Call the base class method to display name and empID
        displayDetails();
        System.out.println("Department: " + departmentName);
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Creating an object of the Department class
        Department employee = new Department();

        // Getting user input
        String name = scanner.nextLine();
        int empID = scanner.nextInt();
        scanner.nextLine();  // Consume the newline l;
        String department = scanner.nextLine();

        // Setting and displaying employee and department details
        employee.setDetails(name, empID);
        employee.setDepartment(department);
        employee.displayDepartmentDetails();
    }
}


##
Write a Java program to implement following inheritance scenario.
import java.util.Scanner;

class Student {
    
  String name,class_name;
  int roll;
  
  void getData() {
      Scanner sc=new Scanner(System.in);
      name=sc.next();
      class_name=sc.next();
      roll=sc.nextInt();
  }

}

public class Grade extends Student {

double grade;

void calGrade()
{
   grade=19.7;
}
 void display() {

System.out.println("Roll Number is: "+roll);
System.out.println("Your name is: "+name);
System.out.println("Your class is: "+class_name);
System.out.println("Your percentage is: "+grade);

  }

  public static void main(String args[]) {

Grade obj = new Grade();
obj.getData();
obj.calGrade();
obj.display();

  }

}


##
Write a Java program for below situation, Student object contains Stu_Id. It contains one more object named subject, which contains its own informations such as subject1,subject2,subject3,subject4.
public class Student {
    // Instance variable for student ID
    private int stuId;
    // Instance variable for subject information
    private Subject subject;

    // Constructor to initialize student ID and subject
    public Student(int stuId, String subject1, String subject2, String subject3, String subject4) {
        this.stuId = stuId;
        this.subject = new Subject(subject1, subject2, subject3, subject4);
    }

    // Method to display student and subject information
    public void displayInfo() {
        System.out.println(stuId);
        subject.displaySubjects();
    }

    // Nested class Subject
    private class Subject {
        private String subject1;
        private String subject2;
        private String subject3;
        private String subject4;

        // Constructor to initialize subjects
        public Subject(String subject1, String subject2, String subject3, String subject4) {
            this.subject1 = subject1;
            this.subject2 = subject2;
            this.subject3 = subject3;
            this.subject4 = subject4;
        }

        // Method to display subjects
        public void displaySubjects() {
            System.out.println(subject1 + " " + subject2 + " " + subject3 + " " + subject4);
        }
    }

    // Main method to test the functionality
    public static void main(String[] args) {
        // Create a Student object
        Student student = new Student(101, "Java", "DS", "TOC", "CG");

        // Display student and subject information
        student.displayInfo();
    }
}


##
Create a class named 'Animal' which includes methods display(). [display() will print "I am an Animal"]
// Base class Animal
class Animal {
    // Method to display information
    void display() {
        System.out.println("I am an animal");
    }
}

// Derived class Dog that extends Animal
class Dog extends Animal {
    // Overriding method to display information
    @Override
    void display() {
        System.out.println("I am a dog");
    }

    // Method to print both the parent and child class display methods
    void print() {
        // Call the overridden method of Dog class
        display();
        // Call the parent class method using super
        super.display();
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an instance of Dog class
        Dog dog = new Dog();
        // Invoke the print method using Dog object
        dog.print();
    }
}


##
Create a class named 'Sports' which includes its constructor. [constructor will print "Sports Class"]

// Base class Sports
class Sports {
    // Constructor of Sports class
    Sports() {
        System.out.println("Sports Class");
    }
}

// Derived class IndoorGames that extends Sports
class IndoorGames extends Sports {
    // Constructor of IndoorGames class
    IndoorGames() {
        // Call the constructor of Sports class
        super();
        System.out.println("Indoor Games Class");
    }
}

// Further derived class Chess that extends IndoorGames
class Chess extends IndoorGames {
    // Constructor of Chess class
    Chess() {
        // Call the constructor of IndoorGames class
        super();
        System.out.println("Chess Class");
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an instance of Chess
        Chess chess = new Chess();
    }
}


##
Create a class named 'Student' which includes,
import java.util.Scanner;

// Class Student
class Student {
    // Members to store marks of five subjects
    private int subject1, subject2, subject3, subject4, subject5;

    // Default constructor
    Student() {
        System.out.println("Default Constructor of Student Class");
    }

    // Parameterized constructor
    Student(int sub1, int sub2, int sub3, int sub4, int sub5) {
        // Call default constructor
        this();
        // Initialize marks
        this.subject1 = sub1;
        this.subject2 = sub2;
        this.subject3 = sub3;
        this.subject4 = sub4;
        this.subject5 = sub5;
        System.out.println("Parameterized Constructor of Student Class");
    }

    // Method to display marks in a specific format
    void display() {
        System.out.println("Subject=" + subject1 + " Subject2=" + subject2 +
                           " Subject3=" + subject3 + " Subject4=" + subject4 +
                           " Subject5=" + subject5);
    }
}

// Main class to test the Student class
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Get five subject marks from user
        int sub1 = scanner.nextInt();
        int sub2 = scanner.nextInt();
        int sub3 = scanner.nextInt();
        int sub4 = scanner.nextInt();
        int sub5 = scanner.nextInt();
        
        // Create an instance of Student using parameterized constructor
        Student student = new Student(sub1, sub2, sub3, sub4, sub5);
        
        // Display the marks
        student.display();
        
        // Close the scanner
        scanner.close();
    }
}


##
Create a class named 'Number' which includes,
import java.util.Scanner;

// Class Number
class Number {
    // Two integer members
    int num1, num2;

    // Default constructor
    Number() {
        System.out.println("Default Constructor of Number Class");
    }

    // Parameterized constructor
    Number(int num1, int num2) {
        // Call the default constructor
        this();
        // Initialize the integer members
        this.num1 = num1;
        this.num2 = num2;
        System.out.println("Parameterized Constructor of Number Class");
    }

    // Method to display the values of the members
    void display() {
        System.out.println("Number1=" + num1 + " Number2="+num2);
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        // Scanner to get user input
        Scanner scanner = new Scanner(System.in);

        // Get two integer values from the user
        int value1 = scanner.nextInt();
        int value2 = scanner.nextInt();

        // Create an instance of Number using the parameterized constructor
        Number number = new Number(value1, value2);

        // Display the values of the members
        number.display();

        // Close the scanner
        scanner.close();
    }
}


##
Create a class named 'Gadgets' which includes methods display(). [display() will print "I am a Gadget"]
// Base class Gadgets
class Gadgets {
    // Method to display a message
    void display() {
        System.out.println("I am a Laptop");
    }
}

// Derived class Laptop that extends Gadgets
class Laptop extends Gadgets {
    // Overriding the display method
    @Override
    void display() {
        System.out.println("I am a Gadget");
    }

    // Method to call both the overridden and overriding methods
    void print() {
        // Call the method of the parent class
        super.display();
        // Call the method of the current class
        this.display();
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an instance of Laptop
        Laptop laptop = new Laptop();
        
        // Invoke the print method
        laptop.print();
    }
}



##
Create a class named 'College' which includes its constructor. [constructor will print "Saveetha Engineering College"]
// Base class College
class College {
    // Constructor of College
    College() {
        System.out.println("Saveetha Engineeirng College");
    }
}

// Child class Department that extends College
class Department extends College {
    // Constructor of Department
    Department() {
        // Call the constructor of College
        super();
        System.out.println("CSE Department");
    }
}

// Child class Student that extends Department
class Student extends Department {
    // Constructor of Student
    Student() {
        // Call the constructor of Department
        super();
        System.out.println("I am a Student of CSE dept");
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an instance of Student
        Student student = new Student();
    }
}


##
Rollno is 101 Name is Student1 College Name is ABC
// Class named 'Student'
class Student {
    // Static field for college name
    static String collegeName = "ABC";

    // Instance fields for roll number and student name
    int rollNo;
    String name;

    // Constructor to initialize roll number and name
    Student(int rollNo, String name) {
        this.rollNo = rollNo;
        this.name = name;
    }

    // Method to display student details
    void displayDetails() {
        System.out.println("Rollno is " + rollNo + " Name is " + name + " College Name is " + collegeName);
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create instances of Student with unique roll numbers and names
        Student student1 = new Student(101, "Student1");
        Student student2 = new Student(102, "Student2");
        Student student3 = new Student(103, "Student3");
        Student student4 = new Student(104, "Student4");

        // Display details of each student
        student1.displayDetails();
        student2.displayDetails();
        student3.displayDetails();
        student4.displayDetails();
    }
}


##
Write a Java program for below situation, Student object contains member 'Stu_Id'. It contains object named course, which contains its own informations such as Degree, Branch, Year of Studying.
// Course class
class Course {
    String degree;
    String branch;
    String year;

    // Constructor to initialize Course details
    Course(String degree, String branch, String year) {
        this.degree = degree;
        this.branch = branch;
        this.year = year;
    }

    // Method to display course details
    void displayCourseDetails() {
        System.out.println(degree + " " + branch + " " + year);
    }
}

// Student class
class Student {
    int stuId;
    Course course;

    // Constructor to initialize Student and Course details
    Student(int stuId, String degree, String branch, String year) {
        this.stuId = stuId;
        this.course = new Course(degree, branch, year);
    }

    // Method to display student details
    void displayStudentDetails() {
        System.out.println(stuId);
        course.displayCourseDetails();
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        // Create an instance of Student with the given details
        Student student = new Student(101, "B.Tech", "IT", "Third year");
        
        // Display the details of the student and their course
        student.displayStudentDetails();
    }
}


##
Create a final class 'Class' with  Name,Id and Year as its member, make  Year as final variable with value "3th Year" and write  print() to display its member in the Output.
// Final class named 'Class'
final class Student {
    String Name;
    String Id;
    final String Year = "3th Year"; // Final variable with a fixed value

    // Constructor to initialize Name and Id
    Student(String Name, String Id) {
        this.Name = Name;
        this.Id = Id;
    }

    // Method to display the details
    void print() {
        System.out.println("Student Details are,");
        System.out.println("Id is " + Id);
        System.out.println("Name is " + Name);
        System.out.println("Year of Studying is " + Year);
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an instance of Student class with given Name and Id
        Student student = new Student("David", "S201");

        // Call the print method to display the details
        student.print();
    }
}


##
Write a Java program to display Citizen details [ Name, Address] with Citizenship. Citizenship  is "Indian" which is common to all Citizens. The Citizen name field is declared as static so it can occupy memory only once.
// Citizen class
class Citizen {
    // Static field for citizenship
    static String Citizenship = "Indian";

    // Instance fields for name and address
    String Name;
    String Address;

    // Constructor to initialize name and address
    Citizen(String Name, String Address) {
        this.Name = Name;
        this.Address = Address;
    }

    // Method to display citizen details
    void display() {
        System.out.println("Name is " + Name + " Address is " + Address + " Citizenship is " + Citizenship);
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        // Create Citizen objects
        Citizen citizen1 = new Citizen("David", "Chennai");
        Citizen citizen2 = new Citizen("Robin", "Bangalore");
        Citizen citizen3 = new Citizen("Joseph", "Mumbai");

        // Display details of each citizen
        citizen1.display();
        citizen2.display();
        citizen3.display();
    }
}


##
Create a final class 'Company' with Company Name,Company Id and Address as its member, make Company_Id as final variable with value "ED12G45" and write print() to display its member in the Output.
final class company
{
    String name,address;
    final String id="ED12G45";
    void print()
    {
        name="ABC Foods";
        address="Chennai";
        System.out.println("Company Details are,");
        System.out.println("Id is "+id);
        System.out.println("Name is "+name);
        System.out.println("Address is "+address);
        
    }
}
public class main
{
    public static void main(String[] args)
    {
        company c = new company();
        c.print();
    }
}


##
Empno is E101 Name is Emp1 Designation is Accountant Company Name is Green Tech
// Employee class
class Employee {
    // Static field for the company name
    private static String companyName = "Green Tech";

    // Instance fields for employee details
    private String empNo;
    private String name;
    private String designation;

    // Parameterized constructor to initialize employee details
    public Employee(String empNo, String name, String designation) {
        this.empNo = empNo;
        this.name = name;
        this.designation = designation;
    }

    // Method to display employee details with company name
    public void display() {
        System.out.println("Empno is " + empNo + " Name is " + name + " Designation is " + designation + " Company Name is " + companyName);
    }
}

// Main class to test the Employee class
public class Main {
    public static void main(String[] args) {
        // Creating Employee objects with different details
        Employee emp1 = new Employee("E101", "Emp1", "Accountant");
        Employee emp2 = new Employee("E102", "Emp2", "Manager");
        Employee emp3 = new Employee("E103", "Emp3", "Programer");
        Employee emp4 = new Employee("E104", "Emp4", "Receptionist");

        // Displaying details of each employee
        emp1.display();
        emp2.display();
        emp3.display();
        emp4.display();
    }
}


##
Write a Java program to perform Arithmetic Operations using static method. [num1=30,num2=20] [Addition,Subtraction,Multiplication,Division]
public class ArithmeticOperations {

    // Static method for addition
    static int add(int num1, int num2) {
        return num1 + num2;
    }

    // Static method for subtraction
    static int subtract(int num1, int num2) {
        return num1 - num2;
    }

    // Static method for multiplication
    static int multiply(int num1, int num2) {
        return num1 * num2;
    }

    // Static method for division
    static int divide(int num1, int num2) {
        return num1 / num2; // Assumes num2 is not zero
    }

    public static void main(String[] args) {
        // Given values
        int num1 = 30;
        int num2 = 20;

        // Perform arithmetic operations using static methods
        int addition = add(num1, num2);
        int subtraction = subtract(num1, num2);
        int multiplication = multiply(num1, num2);
        int division = divide(num1, num2);

        // Display the results
        System.out.println("Addition of Given value is " + addition);
        System.out.println("Subtraction of Given value is " + subtraction);
        System.out.println("Multiplication of Given value is " + multiplication);
        System.out.println("Division of Given value is " + division);
    }
}


##



























---
Write a java program to perform multiple catch using multiple Exception(Rule:1.Get array Index value as Input.( Index Value <5)2.If the array Index value is less than 5 then print as "Valid Statement :  0"3.If the Index value >5 then print " IndexOutOfBoundsException : java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5"4.If the Index value as String then print "NumberFormatException : java.lang.NumberFormatException: For input string: "string"
import java.util.*;
class ListOfNumbers {
    public int[] arr = new int[5];
    void writeList()
    {
        Scanner sc=new Scanner(System.in);
        try
        {
            //Write the code for try block
            int n=Integer.parseInt(sc.nextLine());
            System.out.println("Valid Statement :" +arr[n]);
            
        }
        catch (NumberFormatException e1)
        {
            System.out.println("NumberFormatException : " + e1);
        }
        catch (IndexOutOfBoundsException e2)
        {
            System.out.println("IndexOutOfBoundsException : " + e2);
        }
    }
}
public class Main {
  public static void main(String[] args) {
    ListOfNumbers list = new ListOfNumbers();
    list.writeList();
  }
}
##
Write a Java Program for handling ArrayIndexOutOfBounds ExceptionNote: 1. Get Index value n as input from the user and assign value as 72.Size of the array =10
import java.util.*;
public class Example1
{
   public static void main(String args[])
   {
       Scanner sc = new Scanner(System.in);
       int n=sc.nextInt();
       try
       {
            int a[]=new int[10];
            a[n]=7;
            System.out.println("Value: "+a[n]);
       }
       catch(ArrayIndexOutOfBoundsException e1)
      {
          System.out.println("ArrayIndexOutOfBounds");
      }
   }
}
##
Write a java program to implement compile time polymorphism.(Use single argument for displaying 5 and * as 10 times)
class Pattern {
    public void display()
    {
        for (int i = 0; i < 10; i++) 
        {
            System.out.print("5");
        }
    }
    public void display(char symbol)
    {
        for (int i = 0; i < 10; i++)
        {
            System.out.print(symbol);
        }
    }
}
public class HelloWorld{

    public static void main(String []args)
    {
        Pattern d1 = new Pattern();
        d1.display();
        System.out.println("\n");
        d1.display('#');
    }
}
##
Write a Java Program for run time polymorphism by creating a class named Shape that contains a empty method named print Area().Provide two classes named Rectangle and triangle such that each one of the classes extends the class Shape. Each one of the classes contains only the method print Area () that prints the area of the given shapeNote: Get Input from the User and pass as arguments for Area() Function
import java.util.*;
class Shape
{
    void draw(int a,int b){ }  
}  
class Rectangle extends Shape
{  
    void draw(int a,int b)
    {
        int area=(a*b);
        System.out.println("Area of Rectangle:" +area);}  
    }  
class Triangle extends Shape
{
    void draw(int a,int b)
    {
        int area=(a*b)/2;
        System.out.println("Area of Triangle:" +area);}  
    }  
public class Main
{
	public static void main(String[] args) 
	{
        Shape s;  
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        
        s=new Rectangle();  
        s.draw(a,b);  
        
        s=new Triangle();  
        s.draw(a,b);  
    }
}
##
Write a java program to handle nested try Statement .Note:1, In Outer try block -perform Arithmetic Exception -print message as "Arithmetic exception " .Get Input Value for the Integer a & b from the User.2. In Inner try block -perform Nullpointer  Exception- . Assign String variable as null
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        try
        {
            int a =sc.nextInt();
            int b=sc.nextInt();
            int c=a/b;
            System.out.println("Result:" +c);
            try
            {
                String str=null;
                System.out.println("Innerblock :" +str.length());
            }
            catch(NullPointerException ex1)
            {
                System.out.println("NullPointerException");
            }
        }
        catch (ArithmeticException ex2)
        {
            System.out.println("Sorry! Number not divisible by zero");
        }
    }
}
##
Write a java program for run time polymorphism. Consider a scenario where Bank is a class that provides a method to get the rate of interest. However, the rate of interest may differ according to banks. For example, SBI, ICICI, and AXIS banks are providing 8.4%, 7.3%, and 9.7% rate of interest.Note: Bank act as a base class, SBI, ICICI, and AXIS act as a Derived Class .Get Person name and Age as Input from the User
import java.util.*;
class Bank{  
float getRateOfInterest(){return 0;}  
}  
class SBI extends Bank{  
float getRateOfInterest(){return 8.4f;}  
}  
class ICICI extends Bank{  
float getRateOfInterest(){return 7.3f;}  
}  
class AXIS extends Bank{  
float getRateOfInterest(){return 9.7f;}  
}  
public class TestPolymorphism{  
public static void main(String args[]){  
Bank b;  
Scanner sc=new Scanner(System.in);
String name=sc.nextLine();
int age=sc.nextInt();
b=new SBI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("SBI Rate of Interest: "+b.getRateOfInterest());  
b=new ICICI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("ICICI Rate of Interest: "+b.getRateOfInterest());  
b=new AXIS();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("AXIS Rate of Interest: "+b.getRateOfInterest());  
}  
} 
##
Write a Java program for solving the error using Exception HandlingRules:1.Get array Index value as input2. If the index value less than 4 then print the value  else print "Array value should be less than 4"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
         
        try  
        {  
        int arr[]= {1,3,5,7};  
        int n=sc.nextInt();
        System.out.println(arr[n]); //may throw exception   
        }  
            // handling the array exception  
        catch(ArrayIndexOutOfBoundsException e)  
        {  
            System.out.println("Array value should be less than 4");  
        }  
        
          
    }
}
##
Write a java program to add two numbers using Method Overloading(Compile time polymorphism)(Note: Use integer and double data type)
import java.util.*;

public class HelloWorld{

        void sum(int a,int b){
    System.out.println(a+b);
   }
  void sum(double a,double b){
    System.out.println(a+b);
  }

  public static void main(String []args)
    {
  HelloWorld obj=new HelloWorld();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();
  double c=sc.nextDouble();
  double d=sc.nextDouble();
  obj.sum(a,b);
  obj.sum(c,d);
     }
}
##
Write a java program to handle nested try Statement .Note:1, In Outer try block -perform Arithmetic Exception -print message as "Sorry! Division by zero isn't feasible!"2. In Inner try block -perform Nullpointer  Exception- set String value as "null"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class HelloWorld {
    public static void main(String[] args) 
    {
     Scanner sc=new Scanner(System.in);
      try {
        
         int res=100/n;
         // another try block
         try {
               String str=null;
               //write the remaining code
             }
        catch(NullPointerException ex1) 
        {
         System.out.println("NullPointerException");
        }
      }
      catch (ArithmeticException ex2) 
      {
            System.out.println("Sorry! Division by zero isn't feasible!");
     }
   }
}
##
Write a java program to demonstrate multiple catch blocks for multiple exceptionsRule:1.Get the variable "a" as integer input and perform the operation as 10%a2.If  a is not equal to 0 then print value of a and  If a is equal to 0 then print "Arithmetic Exception : java.lang.ArithmeticException: / by zero"3.If a as String variable then print "Number Format Exception java.lang.NumberFormatException: For input string: "java"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner scn = new Scanner(System.in);
        try
        {
            int n = Integer.parseInt(scn.nextLine());
           
            if (10%n == 0)
                System.out.println("Value: " +n);
        }
        catch (ArithmeticException ex)
        {
            System.out.println("Arithmetic Exception : " +ex);
        }
        catch (NumberFormatException ex)
        {
            System.out.println("Number Format Exception " + ex);
        }
    }
}
##
Write a java program to implement compile time polymorphism.(Use single argument for displaying integer and double values as 10 times)Note : Get Integer and Double values from the User
import java.util.*;
class Pattern {

  // method without parameter
  public void display(int a) {
    for (int i = 0; i < 10; i++) {
      System.out.print(a);
    }
  }

  // method with single parameter
  public void display(double b) {
    for (int i = 0; i < 10; i++) {
      System.out.print(b);
    }
  }
}
public class HelloWorld{

     public static void main(String []args)
     {
        Pattern d1 = new Pattern();
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        double f=sc.nextDouble();

    // call method without any argument
    d1.display(a);
    System.out.println("\n");

    // call method with a single argument
    d1.display(f);
     }
}
##
Write a Java Program for handling division by zero exception.Note: Get num1 & num2 as integer input variable from the user.
import java.util.*;
public class Example1
{
   public static void main(String args[])
   {
      Scanner sc=new Scanner(System.in);
      try{
         int num1=sc.nextInt();
         int num2=sc.nextInt();
         int output=num1/num2;
         System.out.println ("Result: "+output);
      }
      catch(ArithmeticException e){
         System.out.println ("You Shouldn't divide a number by zero");
      }
   }
}
##
Write a java program for run time polymorphism.Consider a scenario method showcase() is displaying different messages depending on which type of object it is associated with. When it is associated with the “Parents”  class, it is showing messages as "I am Parent". When it is associated with the “Children” type, it shows messages as "I am Child".
class Parents {
public void showcase () {
System.out.println("I am Parent");
}
}
class Children extends Parents {
@Override
public void showcase () {
System.out.println("I am Child");
}
}
public class RunTimePolymorphism {
public static void main(String args[]) {
Parents superObject = new Parents();
superObject.showcase(); //method of super class or parent class is called
Parents subObject = new Children(); // upcasting
subObject.showcase();//method of sub class or child class is called by Parent reference, this is called "Run time Polymorphism"

}
}
##
Write a java program to handle nested try Statement .Note:1, In Outer try block -perform NumberFormatException -print message as "Sorry! String Value can not convert to Integer" .Get String Input Value from the User.2. In Inner try block -perform Nullpointer  Exception- . Assign String variable as null
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
     Scanner sc=new Scanner(System.in);
      try {
         String str1=sc.nextLine();
           int a=Integer.parseInt(str1);
           System.out.println("Result:" +a);
         // another try block
         try {
               String str=null;
               System.out.println("Innerblock :" +str.length());
         }
        catch(NullPointerException ex1) {
         System.out.println("NullPointerException");
      }
      }
      
      
       catch (NumberFormatException ex2) {
            System.out.println("Sorry! String Value can not convert to Integer");
         }
   }
}
##
Write a java program to perform ArrayIndexOutOfBounds Exception  using  Multiple CatchRules:(i) Use atleast 3 catch(ii) Get Array index value from the User
import java.util.*;
public class MultipleCatchBlock3 {

	public static void main(String[] args) {
		
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		   try{  
			    int a[]=new int[5];  
			     
			     System.out.println("Value:" +a[n]);
			   }  
			   catch(ArithmeticException e)
		          {
				   System.out.println("Arithmetic Exception occurs");
				  }  
			   catch(ArrayIndexOutOfBoundsException e)
		          {
				   System.out.println("ArrayIndexOutOfBounds Exception occurs");
				  }  
			   catch(Exception e)
		          {
				   System.out.println("Parent Exception occurs");
				  }  		  
			   System.out.println("rest of the code");  
	}
}
##
Write a Java program for solving the error using Exception HandlingNote: Read the input from the User
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
           try
           {
               int a=sc.nextInt();
             int b=sc.nextInt();
             int c=a/b;
             System.out.println("Result: " +c); 
           }
               catch(ArithmeticException e)  
        {  
            System.out.println("Arithmetic Exception: Number should not divide by zero");  
        }  
    }
}
##
Write a java program to perform ArrayIndexOutOfBounds Exception  using  Multiple CatchRules:(i) Use atleast 3 catch
public class MultipleCatchBlock3 {

	public static void main(String[] args) {
		
		   try{  
			    int a[]=new int[5];  
			     
			    System.out.println(a[10]);
			   }  
			   catch(ArithmeticException e)
		          {
				   System.out.println("Arithmetic Exception occurs");
				  }  
			   catch(ArrayIndexOutOfBoundsException e)
		          {
				   System.out.println("ArrayIndexOutOfBounds Exception occurs");
				  }  
			   catch(Exception e)
		          {
				   System.out.println("Parent Exception occurs");
				  }  		  
			   System.out.println("rest of the code");  
	}
}
##
Write a java Program for run time polymorphism in multilevel inheritance. In this example, we have taken two levels of inheritance into account. The method sip() is displaying different messages depending on which type of object it is associated with.Note: Create Human as Parent class ,Man as child class for Human ,Baby as child class for Man class
class Human{
void sip() {
System.out.println("Human is sipping");
}
}
class Man extends Human{
void sip(){
System.out.println("Man is sipping soup");
}
}
class Baby extends Man{
void sip(){
System.out.println("Baby is sipping milk");
}
}
public class RunTimePolymorphism {
public static void main(String args[]){
Human superObject=new Human();
Human subObject=new Man();  // // upcasting : first level of heritance
Human babyObject=new Baby();  // // upcasting : second level of heritance
superObject.sip();
subObject.sip();  //run time polymorphism happening in first level of heritance
babyObject.sip(); //run time polymorphism happening in second level of heritance
}
}
##
Write a java program to handle nested try Statement .Note:1. In Outer try block -perform ArrayIndexOutofBounds Exception- Get Index value index_value as Input from the user2, In Inner try block -perform Arithmetic Exception -print message as "Sorry! Division by zero isn't feasible!"3.If the index_value is in between 1 to 5 then print "Valid Statement : 0"
import java.util.*;
class Exception2 
{
   public static void main(String args[])
   {
     Scanner sc=new Scanner(System.in);
      try {
         int a[]=new int[5];
       
         int n=sc.nextInt();
          System.out.println("Valid Statement :" +a[n]);
         // another try block
         try {
                 int res = 100/ n;
         }
         catch (ArithmeticException ex2) {
            System.out.println("Sorry! Division by zero isn't feasible!");
         }
      }
      catch (ArrayIndexOutOfBoundsException ex1) {
         System.out.println("ArrayIndexOutOfBoundsException");
      }
   }
}
##
Write a java program to perform sum of two numbers and three numbers using Method Overloading(Compile time polymorphism)
import java.util.*;
class Calculation{
  
 void sum(int a,int b)
  {
     System.out.println(a+b);
  }
  void sum(int a,int b,int c){
     System.out.println(a+b+c);
   }
  
}


public class HelloWorld{

     public static void main(String []args)
     {
       
  Calculation obj=new Calculation();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();
  int c=sc.nextInt();
  obj.sum(a,b);
  obj.sum(a,b,c);
}
}
##
Write a java program to handle nested try statement for the following Scenario1.In the Outer try block, initialize array variable "str" and assign value as {30, 45, 60, 75, 90, 105, 120, 140, 160, 200}; and get the index value from the user, print the element according to the index value2. In the Inner try block perform "Arithmetic Exception"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
       Scanner sc=new Scanner(System.in);
          try {
         int a[] = {30, 45, 60, 75, 90, 105, 120, 140, 160, 200};
         // displaying element at index 8
         int n=sc.nextInt();
         System.out.println("Element at index "+n+" = " +a[n]);
         // another try block
         try {
            System.out.println("Division");
            int res = 100/ 0;
         }
         catch (ArithmeticException ex2) {
            System.out.println("Sorry! Division by zero isn't feasible!");
         }
      }
      catch (ArrayIndexOutOfBoundsException ex1) {
         System.out.println("ArrayIndexOutOfBoundsException");
      }
   }
}
##
Write a Java program for run time polymorphism by creating two classes Bike and Scooter. Scooter class extends Bike class and overrides its run() methodNote:Bike as Parent Class and Scooter as Child Class. Get Company name from the User
import java.util.*;
class Bike{  
  void run(String name)
  {
      System.out.println("Company Name: "+name);
      System.out.println("Bike class");}  
}  
class Scooter extends Bike{  
  void run(String name)
  {
      System.out.println("Company Name: "+name);
      System.out.println("Scooter class");}  
}
public class Main
{
  
  public static void main(String args[])
  {  
    Bike b = new Scooter();//upcasting  
    Scanner sc=new Scanner(System.in);
    String name=sc.nextLine();
    b.run(name);  
  }  
} 
##
Write a Java Program for NullPointerExceptionNote: Assign String variable value as null
public class Exception2 
{
   public static void main(String args[])
   {
	try{
		String str=null;
		System.out.println (str.length());
	}
        catch(NullPointerException e){
		System.out.println("NullPointerException..");
	}
   }
}
##
Write a java Program to display the arguments using method overloading.Note: Use 2 Methods. Method1 -display the Integer values Method2 -Display the Double values
import java.util.*;
class ClassMain{
	
	void disp(int number1, int number2){
		System.out.println ("Arguments:" + number1 + "," + number2);
	}
void disp(double number) {
		System.out.println("\nArgument:" + number);
	
	}
}
public class HelloWorld{

     public static void main(String []args)
     {
       
  ClassMain obj=new ClassMain();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();

Double d=sc.nextDouble();
 
  obj.disp(a,b);
  obj.disp(d);
}
}
##
Write a java program for solving the following errorRules:1.Use atleast 3 Catch statement2.Assign the String variable as null
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

public class HelloWorld {
    public static void main(String[] args)
    {
         try{    
                String s=null;  
                System.out.println(s.length());  
               }    
               catch(ArithmeticException e)  
                  {  
                   System.out.println("Arithmetic Exception occurs");  
                  }    
               catch(ArrayIndexOutOfBoundsException e)  
                  {  
                   System.out.println("ArrayIndexOutOfBounds Exception occurs");  
                  }    
               catch(NullPointerException e)  
                  {  
                   System.out.println("Exception: " +e);  
                  }             
               //System.out.println("rest of the code");    
    }
}
##
Write a java program for solving the following errorRules:1.Use atleast 3 Catch statement2.Assign the String variable as null
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
public class HelloWorld {
    public static void main(String[] args)
    {
         try{    
                String s=null;  
                System.out.println(s.length());  
               }    
               catch(ArithmeticException e)  
                  {  
                   System.out.println("Arithmetic Exception occurs");  
                  }    
               catch(ArrayIndexOutOfBoundsException e)  
                  {  
                   System.out.println("ArrayIndexOutOfBounds Exception occurs");  
                  }    
               catch(NullPointerException e)  
                  {  
                   System.out.println("Exception: " +e);  
                  }             
               //System.out.println("rest of the code");    
    }
}
##
Write a Java program for solving the error using Exception HandlingRules:1.Get array Index value as input2. If the index value less than 4 then print the value  else print "Array value should be less than 4"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
         
        try  
        {  
        int arr[]= {1,3,5,7};  
        int n=sc.nextInt();
        System.out.println(arr[n]); //may throw exception   
        }  
            // handling the array exception  
        catch(ArrayIndexOutOfBoundsException e)  
        {  
            System.out.println("Array value should be less than 4");  
        }      
    }
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when ArithmeticException occur in try block and handled in catch blockRule: Get dividend value from the user
import java.util.*;
public class A
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        try
        {
            int a=100;
            int b=sc.nextInt();
            int c=a/b;
            System.out.println("Valid Statement :"+c);
        }
        catch(ArithmeticException e)
        {
            System.out.println("Exception: "+e);
        }
        finally
        {
            System.out.println("Finally block executed");
        }
        System.out.println("Outside try-catch-finally clause");
    } 
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes integer age value as a parameter. If the age is less than 18, we are throwing the ArithmeticException as "Person is not eligible for Opening Bank Account"    otherwise print a message as "Person is eligible to Open Bank Account!!"
import java.util.Scanner;
public class HelloWorld {
    static void validate(int age)  
    {
        try
        {
            if (age<18)
                throw new ArithmeticException("Person is not eligible for Opening Bank Account");
            else
                System.out.println("Person is eligible to Open Bank Account!!");
        }
        catch (Exception e1)
        {
            System.out.println(e1);
        }
    } 
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        validate(sc.nextInt());
    }    
}
##
Write a Java Program to perform Arithmetic Exception for voting purpose using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
    static void checkAge(Double age) 
    {
        if(age<18)
            throw new ArithmeticException("Access denied - You must be at least 18 years old.");
        else
            System.out.println("Access granted - You are old enough!");
}
  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
         checkAge(n);
      }
      catch(ArithmeticException e)
      {
          System.out.println("Exception : "+e);
      }
  }
}
##
Write a Java Program to perform NullPointerException using throws .Note: Get String value as input from the user. Calculate the length of the string for user input .If the user entered null character then print the "Exception : java.lang.NullPointerException: Enter some value for the String "else print the statement as "String Length:" 
import java.util.*;
public class Main {
    static void fun(String str) throws NullPointerException
    {
        int n=str.length();
        if (n=='\0')
        {
            throw new NullPointerException("Enter some value for the String");
        }
        else
        {
            System.out.println("String Length : "+n);
        }
    }
    public static void main(String[] args) 
    { 
        Scanner sc=new Scanner(System.in); 
        String str=sc.nextLine();
        try
        {
            fun(str);
        }
        catch(NullPointerException e)
        {
            System.out.println("Exception : "  +e);
        }
    }
}
##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with value "HCL" , Get as input from the user for id,designation and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class staffDetails
{
    final String companyname="HCL";
    String name;
    int Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.next();
        Id=sc.nextInt();
        //des=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
    public static void main(String[] args)
    {
        staffDetails obj=new staffDetails();
        obj.get();
        obj.print();
    }
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when ArrayIndexOutOfBoundsException occur in try block and handled in catch block
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      // array of size 4.
        int[] arr = new int[4];
         
        try
        {
            int i = arr[4];
                 
            // this statement will never execute
            // as exception is raised by above statement
            System.out.println("Inside try block");
        }
         
        catch(ArrayIndexOutOfBoundsException ex)
        {
            System.out.println("Exception caught in catch block");
        }
         
        finally
        {
            System.out.println("finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes String  value as a parameter. If the String length ='\0' , we are throwing the NullPointerException as "Enter some value for the String"    otherwise print a message as "String Length :  "Note: String value as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(String str) 
        {  
            int n=str.length();
            try
            {
            if (n=='\0')
             {  
                 throw new NullPointerException("Enter some value for the String");
             }
        else {
            System.out.println("String Length : "+n);
            }
            }  
            
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            String str=sc.nextLine();
            validate(str);  
                
      }    
    }      
##
Write a Java program for performing exception using throwsNote: Consider a scenario.In Main function use try -catch method  and get the integer input value from the user and print the variable value using throw keyword
import java.util.*;

public class ThrowsExecp {
 
    // This method throws an exception
    // to be handled
    // by caller or caller
    // of caller and so on.
    static void fun() throws IllegalAccessException
    {
        Scanner in=new Scanner(System.in);
        int a=in.nextInt();
        System.out.println("Inside function. ");
        throw new IllegalAccessException(" Entered Input value as:    " +a);
    }
 
    // This is a caller function
    public static void main(String args[])
    {
        try {
            fun();
        }
        catch (IllegalAccessException e) {
            System.out.println("caught in main." +e);
        }
    }
}
##
Write a Java Program to perform ArrayIndexOutOfBoundsException using throws .Note: Consider the size of the array should not exceed 5 .Get Size value from the user. If the value exceed 5 then print " Exception : java.lang.ArrayIndexOutOfBoundsException: Size of the array Should not exceed 5" else print the statement as "Size of the Array : "Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
   static void fun(int n) throws ArrayIndexOutOfBoundsException
  {
      int a[] = new int[n];
    if (n>5)
    {
        
       throw new ArrayIndexOutOfBoundsException("Size of the array Should not exceed 5");
    }
    else {
      System.out.println("Size of the Array : "+n);
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      
      try
      {
      fun(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with value "Amazon" , Get as input from the user for id,designation and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class staffDetails
{
    final String companyname="Amazon";
    String name;
    int Id;
   
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.next();
        Id=sc.nextInt();
        //des=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    staffDetails obj=new staffDetails();
    obj.get();
    obj.print();
}
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes integer age value as a parameter. If the age is less than 18, we are throwing the ArithmeticException as "Person is not eligible to vote"    otherwise print a message as "Person is eligible to vote!!"Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(int age) 
        {  
            try
            {
            if(age<18) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Person is not eligible to vote");    
            }  
            else {  
            System.out.println("Person is eligible to vote!!");  
            }  
            }
            catch(Exception e)
      {
          System.out.println(e);
      }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            int n=sc.nextInt();
            validate(n);  
                
      }    
    }      
##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Create a final class 'Company' with  Name,Id and companyname as its member, make companyname as final variable with value "HCL" , Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Company
{
    final String companyname="HCL";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.get();
    obj.print();
}
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when NullPointerException occur in try block and handled in catch block
public class HelloWorld {
    public static void main(String[] args) 
    {
      
        try
        {
           String str=null;
           System.out.println(str.length());
        }
         
        catch(NullPointerException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the checkEligibilty() method that takes integer  stuage,  and stuweight as a parameter. If the age is less than 12 and weight >40 , we are throwing the ArithmeticException as "Student is not eligible for registration"    otherwise print a message as "Student Entry is Valid!!"Note: Get the Input for age and weight from the User
import java.util.Scanner;

public class HelloWorld
{
   
       static void checkEligibilty(int stuage, int stuweight)
      { 
           try
    {
      if((stuage<12) && (stuweight<40)) 
      {
         throw new ArithmeticException("Student is not eligible for registration"); 
      }
      else if((stuweight>40) &&(stuage<12))
      {
         throw new ArithmeticException("Student is not eligible for registration"); 
        
      }
      else
      {
          System.out.println("Student Entry is Valid!!");
      }
      }
      catch(Exception e)
      {
          System.out.println(e);
      }
   } 

   public static void main(String args[])
   { 
     System.out.println("Welcome to the Registration process!!");
     Scanner sc=new Scanner(System.in);
     int stuage=sc.nextInt();
     int stuweight=sc.nextInt();
     checkEligibilty(stuage,stuweight); 
     System.out.println("Have a nice day.."); 
 } 
}
##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Write a Java Program to perform NullPointerException using throws .Note: Get String value as input from the user. Calculate the length of the string for user input .If the user entered null character then print the "Exception : java.lang.NullPointerException: Enter some value for the String "else print the statement as "String Length:" 
import java.util.*;
public class Main 
{
    
   static void fun(String str) throws NullPointerException
  {
      int n=str.length();
     
    if (n=='\0')
    {
        
       throw new NullPointerException("Enter some value for the String");
    }
    else {
      System.out.println("String Length : "+n);
    }
  }

  public static void main(String[] args) 
  { 
     Scanner sc=new Scanner(System.in); 
     String str=sc.nextLine();
      try
      {
      fun(str);
      }
      catch(NullPointerException e)
      {
          System.out.println("Exception : "  +e);
      }
     
  }
}
##
Create a final class 'Student' with  Name,Id and Year as its member, make  Year as final variable with value "3th Year" , Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Student
{
    final String Year="3th Year";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: "+Year);
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when NumberFormatException occur in try block and handled in catch block
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      Scanner sc=new Scanner(System.in);
       try
        {
           String str=sc.nextLine();
           int a=Integer.parseInt(str);
           System.out.println("Result:" +a);
        }
         
        catch(NumberFormatException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes double age value as a parameter. If the age is less than 3.5, we are throwing the ArithmeticException as "Child is not eligible for KinderGarden"    otherwise print a message as "Child is eligible for KinderGarden!!"Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(double age) 
        {  
            try
            {
            if(age<3.5) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Child is not eligible for KinderGarden");    
            }  
            else {  
            System.out.println("Child is eligible for KinderGarden!!");  
            }  
            }
            catch(Exception e)
      {
          System.out.println(e);
      }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            double n=sc.nextDouble();
            validate(n);  
                
      }    
    }      
##
Create a final class 'Student' with  Name,Id and Year,Schoolname  as its member, make  Year and School name as final variable with value "3th Year" & "ABC School", Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Student
{
    final String Year="3th Year";
    final String schoolname="ABC School";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: "+Year+"\nSchool: " +schoolname);
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}
##
Write a Java program to count the vowels and consonant in the given string by calling run methodNote: Get the value from the User
import java.util.*;
public class Multi implements Runnable
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String str = sc.nextLine();  
        int vCount = 0, cCount = 0;    
        
        str = str.toLowerCase();    
        
        for(int i = 0; i < str.length(); i++)
        {
            if(str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') 
            {    
                vCount++;    
            }    
            else if(str.charAt(i) >= 'a' && str.charAt(i)<='z')
            {      
                cCount++;    
            }    
        }    
        System.out.println("Number of vowels: " + vCount);    
        System.out.println("Number of consonants: " + cCount);   
    }  
    public static void main(String args[])
    {  
        Multi m1=new Multi(); 
        Thread t1 =new Thread(m1); 
        t1.run();  
    }  
}
##
Write a java program for set the priority and name of the current thread.Note : Read the threadname from the UserRead the priority value from the User
import java.util.*;
public class A implements Runnable
{
    public void run()
    {
        System.out.println(Thread.currentThread()); 
    }
    public static void main(String[] args) 
    {
        A a = new A();
        Scanner sc=new Scanner(System.in);
        String thname=sc.nextLine();
        int pri=sc.nextInt();
        Thread t = new Thread(a, thname);
        t.setPriority(pri);
        System.out.println("Priority of Thread: " +t.getPriority());
        System.out.println("Name of Thread: " +t.getName());
        t.start();
    }
}
##
Write a Java program to create Thread using extends In run method get the Patient details as patient name and patient Id as String variable from the user and print the value in Output screen
import java.util.*;
public class Multi extends Thread
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Patient Name: " +sname);  
        System.out.println("Patient ID: " +rollno);  
    }  
    public static void main(String args[])
    {
        Multi t1=new Multi();  
        t1.start();  
    }  
}
##
Write a Java program to create Thread using extends In run method get the student name and roll number from the user and print the value
import java.util.*;
public class Multi extends Thread
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Student Name: " +sname);  
        System.out.println("Roll No: " +rollno);  
    }  
    public static void main(String args[])
    {
        Multi t1=new Multi();  
        t1.start();  
    }  
}
##
Write a Java program to perform whether the given number is Positive or Negative ,zero by creating Thread using Runnable Interface.Note: Get the value from the User
import java.util.*;
public class Multi implements Runnable
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        int num=sc.nextInt();
        if(num>0)  
        {  
            System.out.println("The number is positive.");  
        }
        else if(num<0)  
        {  
            System.out.println("The number is negative.");  
        }
        else  
        {  
            System.out.println("The number is zero.");  
        }
    }
    public static void main(String args[])
    {  
        Multi m1=new Multi(); 
        Thread t1 =new Thread(m1); 
        t1.run();  
    }  
}
##
Write a Java program to perform whether the given number is palindrome or not by creating Thread using Runnable Interface.Note: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int number=sc.nextInt();
        int remainder=0,reverse=0,temp;
        temp=number;
       while(number != 0)   
        {  
         remainder = number % 10;  
        reverse = reverse * 10 + remainder;  
        number = number/10;  
        }  
        if(temp==reverse)
        {
        System.out.println("The number " +temp+" is Palindrome");  
        }
        else
        {
              System.out.println("The number " +temp+" is not a Palindrome");  
        }
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using extendsNote: Get Thread integer number  from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int count=sc.nextInt();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Consider two threads t1 and t2Note : Read the threadname from the UserRead the priority value from the user for both the threads
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String first=sc.nextLine();
 String second=sc.nextLine();
 Thread t1 = new Thread(a, first);
 Thread t2 = new Thread(a, second);
 
 int t1pr=sc.nextInt();
 int t2pr=sc.nextInt();
 t1.setPriority(t1pr); // Setting the priority of first thread.
 t2.setPriority(t2pr); // Setting the priority of second thread.
 
 
 t1.start();
 t2.start();
 
  }
}
##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.Note: Get Thread integer number  from the User
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to perform whether the given number is palindrome or not by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int number=sc.nextInt();
        int remainder=0,reverse=0,temp;
        temp=number;
       while(number != 0)   
        {  
         remainder = number % 10;  
        reverse = reverse * 10 + remainder;  
        number = number/10;  
        }  
        if(temp==reverse)
        {
        System.out.println("The number " +temp+" is Palindrome");  
        }
        else
        {
              System.out.println("The number " +temp+" is not a Palindrome");  
        }
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a Java program to add two numbers by creating Thread using Runnable Interface.Note: Get the value of int first and second variable as Input from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int a=sc.nextInt();
        int b=sc.nextInt();
        int sum=a+b;
        System.out.println("Result: " +sum);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a Java program to count the number of characters in the given string by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String string = sc.nextLine();    
        int count = 0;    
        //Counts each character except space    
        for(int i = 0; i < string.length(); i++)
        {    
            if(string.charAt(i) != ' ')    
                count++;    
        }    
        //Displays the total number of characters present in the given string    
        System.out.println("Total number of characters in a string: " + count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Consider two threads t1 and t2Note : Read the threadname from the Userset the priority as 4 for t1 and set the priority as 2 for t2
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String first=sc.nextLine();
 String second=sc.nextLine();
 Thread t1 = new Thread(a, first);
 Thread t2 = new Thread(a, second);
 
 
 t1.setPriority(4); // Setting the priority of first thread.
 t2.setPriority(2); // Setting the priority of second thread.
 
 
 t1.start();
 t2.start();
 
  }
}
##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.Note: Get Thread integer number  from the User
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using extendsNote: Get User name from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using Implements Runnable  .In run method get student name & rollno as input from the user and print inside the function
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi();  
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a java program for determine the priority and name of the current thread.Note : Read the threadname from the User
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}
##
Write a Java program to create Thread using extendsNote: Get Thread integer number  from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int count=sc.nextInt();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to perform whether the given number is Positive or Negative ,zero by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int num=sc.nextInt();
       if(num>0)  
{  
System.out.println("The number is positive.");  
}  
//checks the number is less than 0 or not  
else if(num<0)  
{  
System.out.println("The number is negative.");  
}  
//executes when the above two conditions return false  
else  
{  
System.out.println("The number is zero.");  
}  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Note : Read the threadname from the UserSet the Priority as 2.
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 t.setPriority(2); // Setting the priority of thread.
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}
##
Write a Java program to create Thread and call the thread  using run methodNote: Get User name from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.run();  
     }  
    }  
##
Write a Java program to create Thread using Runnable InterfaceNote: Get double value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        double count=sc.nextDouble();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    } 
##
Write a Java Program to perform cube value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void cube method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    void cube(int n)
    {
        synchronized(this)
        {
            int temp = 1;
            for(int i=1;i<=n;i++)
            { 
                int j=i;
                System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
                try
                {  
                    Thread.sleep(400);  
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            }  
        }
    }  
}
##
Write a Java Program to perform multiplication table  for 5 & 100 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void printTable() in that perform multiplication table2. Create a Two threads "MyThread1" and "MyThread2"  with a member function void run() to call ThreadIn main() access all function using its corresponding Object.
class Table
{  
    synchronized void printTable(int n)
    {
        for(int i=1;i<=5;i++)
        {
            System.out.println(n*i);  
            try
            {  
                Thread.sleep(400);  
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
    }
}
class MyThread1 extends Thread
{
    Table t;  
    MyThread1(Table t)
    {
        this.t=t;  
    }  
    public void run()
    {  
        t.printTable(5);  
    }
}
class MyThread2 extends Thread
{  
    Table t;  
    MyThread2(Table t)
    {
        this.t=t;  
    }  
    public void run()
    {  
        t.printTable(100);  
    }  
}
public class HelloWorld
{
    public static void main(String args[])
    {
        Table obj = new Table();
        MyThread1 t1=new MyThread1(obj);  
        MyThread2 t2=new MyThread2(obj);  
        
        t1.start();  
        t2.start();  
    }  
}
##
Write a Java Program to perform factorial  value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void factorial method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    static synchronized void factorial(int n)
    { 
        int fact=1;
        if (n == 0)    
            fact=1;    
        else  
        {
            for(int i=1;i<=n;i++)
            fact=fact*i;    
        }   
        System.out.println("Factorial for a number " +n+ " :" + fact);
        try
        {  
            Thread.sleep(400);  
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
   }  
}
##
Write a Java Program to display Even number up to the range using Synchronization block for the below Scenario1. Create a Class Table with void Even method in that create Synchronization blockNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
import java.util.*;
class Table
{
    public static synchronized void Even(int n)
    {
        System.out.print("List of Even numbers for "+n+" : ");
        for(int i=1;i<=n;i++)
        {
            if(i%2==0)
            {
                System.out.print(i+" ");
            }
        }
        System.out.println();
        try
        {
            Thread.sleep(400);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
}
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario1. Create a Class Table with void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    void printTable(int n)
    {
        synchronized(this)
        {
            for(int i=1;i<=10;i++)
            {  
                System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                try
                { 
                    Thread.sleep(400);  
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            }
        }
    }  
}
##
Write a Java Program to perform cube value using Synchronization block for the below Scenario1. Create a Class Table with void cube method in that create Synchronization block perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
 class Table
  {
    void cube(int n)
     {
      synchronized(this)
      {
          int temp = 1;
         for(int i=1;i<=n;i++)
         { 
             int j=i;
         System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
         try
         {  
          Thread.sleep(400);  
         }
         catch(Exception e){System.out.println(e);}  
         }  
      }
   }  
  }
##
Write a Java Program to perform cube value using synchronization  method concept  for the below Scenario1. In a Class Table create a synchronized void cube method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
 class Table
  {
   synchronized void cube(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
##
Write a Java Program to perform static synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform Fibonacci series for static synchronization method for the below Scenario1. In a Class Table create a static synchronized void Fibonacci method in that perform Fibonacci OperationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
   static synchronized void fibonacci(int n)
   {
       int  firstTerm = 0, secondTerm = 1;
    System.out.print("Fibonacci Series for " + n + " value:");

    for (int i = 1; i <= n; ++i) {
      System.out.print(firstTerm + ", ");
      // compute the next term
      int nextTerm = firstTerm + secondTerm;
      firstTerm = secondTerm;
      secondTerm = nextTerm; 
    }
    System.out.println(" ");
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
   } 
   
  }
##
Write a Java Program to display odd numbers using Synchronization block for the below Scenario1. Create a Class Table with void odd method in that create synchronization blockNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    void odd(int n)
    {
      synchronized(this)
     {//synchronized block  
     
       int i=1;
     System.out.print("List of odd numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
     
     
     }
   }  
  }
##
Write a Java Program to perform square value using Synchronization block for the below Scenario1. Create a Class Table with void square method in that create Synchronization block perform square operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    void square(int n)
    {
      synchronized(this)
     {//synchronized block  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("square for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
     }
   }  
  }
##
Write a Java Program to display Even number up to the range using static Synchronization block for the below Scenario1. In a Class Table  create a function for displaying Even number up to the range with static synchronization block using void even (int n) functionNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    synchronized static void Even(int n)
    {
      
      int i=2;
     System.out.print("List of Even numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
   }  
  }
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario1. Create a Class Table with void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
    {  
     
     void printTable(int n){
         synchronized(this)
         {
               for(int i=1;i<=10;i++){  
                 System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                 try{  
                  Thread.sleep(400);  
                 }catch(Exception e){System.out.println(e);}  
               } 
         }
      
     }  
    }  
##
Write a Java Program to perform static synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  //example of java synchronized method  
    class Table
    {  
     synchronized void printTable(int n){//synchronized method  
       for(int i=1;i<=10;i++){  
         System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
         try{  
          Thread.sleep(400);  
         }catch(Exception e){System.out.println(e);}  
       }  
      
     }  
    }  
##
Write a Java Program to perform Power table 2 &  8 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void power method in that perform power table  Note :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
   synchronized void power(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=5;i++)
     { 
     System.out.println("value of " +n+ " :" + n*temp);
     temp = n*temp;
     try
     {  
      Thread.sleep(500);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
##
Write a Java Program to perform Synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	public synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform factorial  value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void factorial method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
  {
   static synchronized void factorial(int n)
   {//synchronized method  
     int fact=1;
     if (n == 0)    
      fact=1;    
     else  
     {
       for(int i=1;i<=n;i++)
          fact=fact*i;    
     }   
System.out.println("Factorial for a number " +n+ " :" + fact);
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     
   }  
  }

  ##
  Write a java program to perform sum of two numbers and three numbers using Method Overloading(Compile time polymorphism)
import java.util.*;
class Calculation{
  
 void sum(int a,int b)
  {
     System.out.println(a+b);
  }
  void sum(int a,int b,int c){
     System.out.println(a+b+c);
   }
  
}


public class HelloWorld{

     public static void main(String []args)
     {
       
  Calculation obj=new Calculation();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();
  int c=sc.nextInt();
  obj.sum(a,b);
  obj.sum(a,b,c);
}
}

##
Write a Java Program for handling division by zero exception.
import java.util.*;
public class Example1
{
   public static void main(String args[])
   {
      Scanner sc=new Scanner(System.in);
      try{
         int num1=sc.nextInt();
         int num2=sc.nextInt();
         int output=num1/num2;
         System.out.println ("Result: "+output);
      }
      catch(ArithmeticException e){
         System.out.println ("You Shouldn't divide a number by zero");
      }
   }
}

##
Write a java program to handle nested try Statement .
import java.util.*;
class Exception2 
{
   public static void main(String args[])
   {
     Scanner sc=new Scanner(System.in);
      try {
         int a[]=new int[5];
       
         int n=sc.nextInt();
          System.out.println("Valid Statement :" +a[n]);
         // another try block
         try {
                 int res = 100/ n;
         }
         catch (ArithmeticException ex2) {
            System.out.println("Sorry! Division by zero isn't feasible!");
         }
      }
      catch (ArrayIndexOutOfBoundsException ex1) {
         System.out.println("ArrayIndexOutOfBoundsException");
      }
   }
}
   

##
Write a java program for run time polymorphism. Consider a scenario where Bank is a class that provides a method to get the rate of interest. However, the rate of interest may differ according to banks. For example, SBI, ICICI, and AXIS banks are providing 8.4%, 7.3%, and 9.7% rate of interest.
import java.util.*;
class Bank{  
float getRateOfInterest(){return 0;}  
}  
class SBI extends Bank{  
float getRateOfInterest(){return 8.4f;}  
}  
class ICICI extends Bank{  
float getRateOfInterest(){return 7.3f;}  
}  
class AXIS extends Bank{  
float getRateOfInterest(){return 9.7f;}  
}  
public class TestPolymorphism{  
public static void main(String args[]){  
Bank b;  
Scanner sc=new Scanner(System.in);
String name=sc.nextLine();
int age=sc.nextInt();
b=new SBI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("SBI Rate of Interest: "+b.getRateOfInterest());  
b=new ICICI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("ICICI Rate of Interest: "+b.getRateOfInterest());  
b=new AXIS();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("AXIS Rate of Interest: "+b.getRateOfInterest());  
}  
} 


##
Write a java program to perform multiple catch using multiple Exception(
import java.util.*;
class ListOfNumbers {
  public int[] arr = new int[5];
void writeList()
{
  Scanner sc=new Scanner(System.in);
    try {
        int n=Integer.parseInt(sc.nextLine());
        
        System.out.println("Valid Statement :" +arr[n]);
    }
    
    catch (NumberFormatException e1) {
      System.out.println("NumberFormatException : " + e1);
    }
    
    catch (IndexOutOfBoundsException e2) {
      System.out.println("IndexOutOfBoundsException : " + e2);
    }

  }
}

public class Main {
  public static void main(String[] args) {
    ListOfNumbers list = new ListOfNumbers();
    list.writeList();
  }
}

##
1, In Outer try block -perform NumberFormatException -print message as "Sorry! String Value can not convert to Integer" .Get String Input Value from the User.
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
     Scanner sc=new Scanner(System.in);
      try {
         String str1=sc.nextLine();
           int a=Integer.parseInt(str1);
           System.out.println("Result:" +a);
         // another try block
         try {
               String str=null;
               System.out.println("Innerblock :" +str.length());
         }
        catch(NullPointerException ex1) {
         System.out.println("NullPointerException");
      }
      }
      
      
       catch (NumberFormatException ex2) {
            System.out.println("Sorry! String Value can not convert to Integer");
         }
   }
}
   
    

##
NumberFormatException : java.lang.NumberFormatException: For input string: "string"
import java.util.*;
class ListOfNumbers {
  public int[] arr = new int[5];
void writeList()
{
  Scanner sc=new Scanner(System.in);
    try {
        int n=Integer.parseInt(sc.nextLine());
        
        System.out.println("Valid Statement :" +arr[n]);
    }
    
    catch (NumberFormatException e1) {
      System.out.println("NumberFormatException : " + e1);
    }
    
    catch (IndexOutOfBoundsException e2) {
      System.out.println("IndexOutOfBoundsException : " + e2);
    }

  }
}

public class Main {
  public static void main(String[] args) {
    ListOfNumbers list = new ListOfNumbers();
    list.writeList();
  }
}

##
Write a java Program to display the arguments using method overloading.
import java.util.*;
class ClassMain{
	
	void disp(int number1, int number2){
		System.out.println ("Arguments:" + number1 + "," + number2);
	}
void disp(double number) {
		System.out.println("\nArgument:" + number);
	
	}
}


public class HelloWorld{

     public static void main(String []args)
     {
       
  ClassMain obj=new ClassMain();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();

Double d=sc.nextDouble();
 
  obj.disp(a,b);
  obj.disp(d);
}
}

##
Company Name: TVS
import java.util.*;
class Bike{  
  void run(String name)
  {
      System.out.println("Company Name: "+name);
      System.out.println("Bike class");}  
}  
class Scooter extends Bike{  
  void run(String name)
  {
      System.out.println("Company Name: "+name);
      System.out.println("Scooter class");}  
}
public class Main
{
  
  public static void main(String args[])
  {  
    Bike b = new Scooter();//upcasting  
    Scanner sc=new Scanner(System.in);
    String name=sc.nextLine();
    b.run(name);  
  }  
} 

##
Arithmetic Exception: Number should not divide by zero
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
           try
           {
               int a=sc.nextInt();
             int b=sc.nextInt();
             int c=a/b;
             System.out.println("Result: " +c); 
           }
               catch(ArithmeticException e)  
        {  
            System.out.println("Arithmetic Exception: Number should not divide by zero");  
        }  
    }
}

##
Note: Bank act as a base class, SBI, ICICI, and AXIS act as a Derived Class .Get Person name and Age as Input from the User
import java.util.*;
class Bank{  
float getRateOfInterest(){return 0;}  
}  
class SBI extends Bank{  
float getRateOfInterest(){return 8.4f;}  
}  
class ICICI extends Bank{  
float getRateOfInterest(){return 7.3f;}  
}  
class AXIS extends Bank{  
float getRateOfInterest(){return 9.7f;}  
}  
public class TestPolymorphism{  
public static void main(String args[]){  
Bank b;  
Scanner sc=new Scanner(System.in);
String name=sc.nextLine();
int age=sc.nextInt();
b=new SBI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("SBI Rate of Interest: "+b.getRateOfInterest());  
b=new ICICI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("ICICI Rate of Interest: "+b.getRateOfInterest());  
b=new AXIS();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("AXIS Rate of Interest: "+b.getRateOfInterest());  
}  
} 


##
Write a java program to perform ArrayIndexOutOfBounds Exception  using  Multiple Catch
import java.util.*;
public class MultipleCatchBlock3 {

	public static void main(String[] args) {
		
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		   try{  
			    int a[]=new int[5];  
			     
			     System.out.println("Value:" +a[n]);
			   }  
			   catch(ArithmeticException e)
		          {
				   System.out.println("Arithmetic Exception occurs");
				  }  
			   catch(ArrayIndexOutOfBoundsException e)
		          {
				   System.out.println("ArrayIndexOutOfBounds Exception occurs");
				  }  
			   catch(Exception e)
		          {
				   System.out.println("Parent Exception occurs");
				  }  		  
			   System.out.println("rest of the code");  
	}
}



##
Write a Java program to demonstrate control flow of try-catch-finally clause when ArithmeticException occur in try block and handled in catch block
import java.util.Scanner;

public class TryCatchFinallyExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        try {
            // Get the divisor as input from the user
           
            int divisor = scanner.nextInt();

            // Try block where division by zero can occur
            int result = 100 / divisor;
            System.out.println("Valid Statement :" + result);

        } catch (ArithmeticException e) {
            // Catch block to handle the exception
            System.out.println("Exception: " + e);

        } finally {
            // Finally block, always executed
            System.out.println("Finally block executed");
        }

        // Outside the try-catch-finally block
        System.out.println("Outside try-catch-finally clause");
        
        scanner.close();
    }
}


##
Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(int age) 
        {  
            try
            {
            if(age<18) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Person is not eligible for Opening Bank Account");    
            }  
            else {  
            System.out.println("Person is eligible to Open Bank Account!!");  
            }  
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            int n=sc.nextInt();
            validate(n);  
                
      }    
    }      
        
        
          
    
##
Write a Java program for performing exception using throws
import java.util.*;

public class ThrowsExecp {
 
    // This method throws an exception
    // to be handled
    // by caller or caller
    // of caller and so on.
    static void fun() throws IllegalAccessException
    {
        Scanner in=new Scanner(System.in);
        int a=in.nextInt();
        System.out.println("Inside function. ");
        throw new IllegalAccessException(" Entered Input value as:    " +a);
    }
 
    // This is a caller function
    public static void main(String args[])
    {
        try {
            fun();
        }
        catch (IllegalAccessException e) {
            System.out.println("caught in main." +e);
        }
    }
}

##
Write a Java Program to perform Arithmetic Exception for voting purpose using throws .
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 18) {
      throw new ArithmeticException("Access denied - You must be at least 18 years old.");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}


##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with 
import java.util.*;
final class Student
{
    final String Year="3th Year";
    final String schoolname="ABC School";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: HCL ");
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}

##
Write a Java Program to perform ArrayIndexOutOfBoundsException using throws .
import java.util.*;
public class Main 
{
   static void fun(int n) throws ArrayIndexOutOfBoundsException
  {
      int a[] = new int[n];
    if (n>5)
    {
        
       throw new ArrayIndexOutOfBoundsException("Size of the array Should not exceed 5");
    }
    else {
      System.out.println("Size of the Array : "+n);
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      
      try
      {
      fun(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}


##
Create a final class 'Student' with  Name,Id and Year as its member, make  Year as final variable with 
import java.util.*;
final class Company
{
    final String companyname="HCL";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: 3th Year ");
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.get();
    obj.print();
}
}

##
Write a Java Program to perform NullPointerException using throws .
import java.util.*;
public class Main 
{
    
   static void fun(String str) throws NullPointerException
  {
      int n=str.length();
     
    if (n=='\0')
    {
        
       throw new NullPointerException("Enter some value for the String");
    }
    else {
      System.out.println("String Length : "+n);
    }
  }

  public static void main(String[] args) 
  { 
     Scanner sc=new Scanner(System.in); 
     String str=sc.nextLine();
      try
      {
      fun(str);
      }
      catch(NullPointerException e)
      {
          System.out.println("Exception : "  +e);
      }
     
  }
}


##
Write a Java program to demonstrate control flow of try-catch-finally clause when NumberFormatException occur in try block and handled in catch block
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      Scanner sc=new Scanner(System.in);
       try
        {
           String str=sc.nextLine();
           int a=Integer.parseInt(str);
           System.out.println("Result:" +a);
        }
         
        catch(NumberFormatException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
      

##
Create a final class 'Company' with  Name,Id and companyname as its member, make companyname as final variable with 
import java.util.*;
final class Company
{
    final String companyname="HCL";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.get();
    obj.print();
}
}

##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}


##
Write a Java program to count the vowels and consonant in the given string by calling run method
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String str = sc.nextLine();  
          int vCount = 0, cCount = 0;    
            
           str = str.toLowerCase();    
            
        for(int i = 0; i < str.length(); i++) {    
            //Checks whether a character is a vowel    
            if(str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') {    
                //Increments the vowel counter    
                vCount++;    
            }    
            //Checks whether a character is a consonant    
            else if(str.charAt(i) >= 'a' && str.charAt(i)<='z') {      
                //Increments the consonant counter    
                cCount++;    
            }    
        }    
        System.out.println("Number of vowels: " + vCount);    
        System.out.println("Number of consonants: " + cCount);   
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  

##
Write a Java program to perform whether the given number is Positive or Negative ,zero by creating Thread using Runnable Interface.
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int num=sc.nextInt();
       if(num>0)  
{  
System.out.println("The number is positive.");  
}  
//checks the number is less than 0 or not  
else if(num<0)  
{  
System.out.println("The number is negative.");  
}  
//executes when the above two conditions return false  
else  
{  
System.out.println("The number is zero.");  
}  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  

##
Write a Java program to create Thread using extends In run method get the student name and roll number from the user and print the value
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Student Name: " +sname);  
         System.out.println("Roll No: " +rollno);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  

##
Write a Java program to create Thread using extends In run method get the Patient details as patient name and patient Id as String variable from the user and print the value in Output
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Patient Name: " +sname);  
         System.out.println("Patient ID: " +rollno);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  

##
Write a java program for set the priority and name of the current thread.
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 int pri=sc.nextInt();
 t.setPriority(pri); // Setting the priority of thread.
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}

##
Write a Java program to add two numbers by creating Thread using Runnable Interface.
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int a=sc.nextInt();
        int b=sc.nextInt();
        int sum=a+b;
        System.out.println("Result: " +sum);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  

##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  

##
Write a Java program to perform whether the given number is Positive or Negative ,zero by calling run method
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int num=sc.nextInt();
       if(num>0)  
{  
System.out.println("The number is positive.");  
}  
//checks the number is less than 0 or not  
else if(num<0)  
{  
System.out.println("The number is negative.");  
}  
//executes when the above two conditions return false  
else  
{  
System.out.println("The number is zero.");  
}  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  

##
Write a Java program to create Thread using Runnable Interface
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        double count=sc.nextDouble();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  

##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario
  class Table
    {  
     
     void printTable(int n){
         synchronized(this)
         {
               for(int i=1;i<=10;i++){  
                 System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                 try{  
                  Thread.sleep(400);  
                 }catch(Exception e){System.out.println(e);}  
               } 
         }
      
     }  
    }  
      

##
Write a Java Program to display odd numbers using Synchronization block for the below Scenario
  class Table
  {
    void odd(int n)
    {
      synchronized(this)
     {//synchronized block  
     
       int i=1;
     System.out.print("List of odd numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
     
     
     }
   }  
  }

##
Write a Java Program to perform cube value using synchronization  method concept  for the below Scenario
 class Table
  {
   static synchronized void cube(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
     

##
Write a Java Program to display Even number up to the range using static Synchronization block for the below Scenario
  class Table
  {
    synchronized static void Even(int n)
    {
      
      int i=2;
     System.out.print("List of Even numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
   }  
  }


##
Write a Java Program to perform static synchronization method for the below Scenario
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}


##
Write a Java Program to perform Power table 2 &  8 using Synchronization method for the below Scenario
  class Table
  {
   synchronized void power(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=5;i++)
     { 
     System.out.println("value of " +n+ " :" + n*temp);
     temp = n*temp;
     try
     {  
      Thread.sleep(500);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }


##
Write a Java Program to perform cube value using static synchronization  concept  for the below Scenario
 class Table
  {
   static synchronized void cube(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
     


##
Arithmetic Exception : java.lang.ArithmeticException: / by zero
import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
       try
       {
           int a=sc.nextInt();
           int b=10%a;
          System.out.println("Value: "+a);
        //   int b=3/a;
           
       }
       catch(ArithmeticException e)
       {
           
           System.out.println("Arithmetic Exception : java.lang.ArithmeticException: / by zero");
       }
       catch( Exception e)
       {
        
           System.out.println("Number Format Exception java.lang.NumberFormatException: For input string: \"hello\"");
       }
    }
}

##
cube for range value 2 1:1
 class Table
  {
    void cube(int n)
     {
      synchronized(this)
      {
          int temp = 1;
         for(int i=1;i<=n;i++)
         { 
             int j=i;
         System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
         try
         {  
          Thread.sleep(400);  
         }
         catch(Exception e){System.out.println(e);}  
         }  
      }
   }  
  }
     







































---
Write a Java program to create a reverse order view of the elements contained in a given tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts = new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        System.out.println("Original tree set:"+ts);
        Iterator i=ts.descendingIterator();
        System.out.println("Elements in Reverse Order:");
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a Java program to compare two tree sets.(Use Integer).Note:Read size of the integer.Read elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeSet<Integer> ts1 = new TreeSet<Integer>();
        for(int i=0;i<n1;i++)
        {
            ts1.add(sc.nextInt());
        }
        int n2=sc.nextInt();
        TreeSet<Integer> ts2 = new TreeSet<Integer>();
        for(int i=0;i<n2;i++)
        {
            ts2.add(sc.nextInt());
        }
        System.out.println("Free Tree set: "+ts1);
        System.out.println("Second Tree set: "+ts2);
        TreeSet<Integer> result=new TreeSet<Integer>();
        for (Integer i: ts1)
        {
            System.out.println(ts2.contains(i) ? "Yes" : "No");
        }
    }
}
##
Write a Java program to print odd number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for (int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("Original tree set: "+ts);
        for (int i: ts)
        {
            if(i%2!=0)
                System.out.println(i);
        }
    }
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: tailset start from 10 (use integer)
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        TreeSet<Integer> tail_set=new TreeSet<Integer>();
        tail_set = (TreeSet<Integer>)ts.tailSet(10);
        Iterator i = tail_set.iterator();
        System.out.println("The resultant values from the tail: ");
        while (i.hasNext())
        {
            System.out.println(i.next() + " ");
        }
    }
}
##
Create the java program to demonstrate floor method for Integer value.Note: floor value for integer 25.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("TreeSet: "+ts);
        System.out.println("Floor value for 25: "+ts.floor(25));
    }
}
##
Write a Java program to iterate through all elements in a tree set. Note:Read size of n numbersRead n numbersuse for loop for iterate.
import java.util.*;
public class Exercise2 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<Integer> tree_set = new TreeSet<Integer>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.nextInt());
  }
 
  for (Integer element : tree_set) {
    System.out.println(element);
    }
 }
}
##
Write a Java program to get an element in a tree set which is strictly less than the given element.Note:Size of the elementRead elementDisplay lower than 69.Display lower than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly less than 69 : "+tree_num.lower(69));
   System.out.println("Strictly less than 12 : "+tree_num.lower(12));
   }    
}
##
Write a Java program to retrieve and remove the last element of a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the last element: "+tree_num.pollLast());
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
        Scanner sc=new Scanner(System.in);
                TreeSet<String> tree_set = new TreeSet<String>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> tail_set = new TreeSet<String>();
                tail_set = (TreeSet<String>)tree_set.tailSet("i");
                Iterator iterate;
                iterate = tail_set.iterator();
                System.out.println("The resultant values from the tail: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the 15(Integer) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<Integer> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.nextInt());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet(15));
        }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class color {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
  TreeSet<String> tree_set = new TreeSet<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);
 }
}
##
Write a Java program to get an element in a tree set which is strictly greater than the given element.Note:Size of the elementRead elementDisplay higher than 69.Display higher than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly greater than 69 : "+tree_num.higher(69));
   System.out.println("Strictly greater than 12 : "+tree_num.higher(12));
   }    
}
##
Write a Java program to remove a given element from a tree set.Note:Read Size of the setRead Elements.Remove 70 elements from set
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes 70 from the list: "+tree_num.remove(70));
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}
##
Write a java program to display the heterogenous object with help of stringbuffer concepts.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
                Set<StringBuffer> ts = new TreeSet<>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                ts.add(new StringBuffer(sc.next()));
                }
                System.out.println(ts);
        }
}
##
Create the java program to demonstrate descendingSet() method for String value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<String> treeadd = new TreeSet<String>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.next());
                }
            NavigableSet<String> treereverse = treeadd.descendingSet();
            Iterator<String> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to get the first and last elements in a tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
  public class Exercise5 {
  public static void main(String[] args) {
  
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<String> tree_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);

    Object first_element = tree_set.first();
    System.out.println("First Element is: "+first_element);
 
    
    Object last_element = tree_set.last();
    System.out.println("Last Element is: "+last_element);
 }
}
##
Write a Java program to get the number of elements in a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise6 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  
  TreeSet<String> t_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  t_set.add(sc.next());
  }
     
  System.out.println("Original tree set: " + t_set);
    System.out.println("Size of the tree set: " + t_set.size());     
     }
 }
##
Write a Java program to print even number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==0)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the resultant values(String) within the subset (range e to i ) should display in result. Note:use subset method.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
                TreeSet<String> tree_set = new TreeSet<String>();
                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> sub_set = new TreeSet<String>();
                sub_set = (TreeSet<String>)tree_set.subSet("e","i");
                Iterator iterate;
                iterate = sub_set.iterator();
                System.out.println("The resultant values within the sub set: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for Integer value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<Integer> treeadd = new TreeSet<Integer>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.nextInt());
                }
            NavigableSet<Integer> treereverse = treeadd.descendingSet();
            Iterator<Integer> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to add all the elements of a specified tree set to another tree set.Note:Read size.Read elements
import java.util.*;
public class Exercise3 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
   int size2=sc.nextInt();
  TreeSet<Integer> tree_set1 = new TreeSet<Integer>();
    for(int i=0;i<size1;i++){
    tree_set1.add(sc.nextInt());
    }
  
  
  System.out.println("Tree set1: "+tree_set1);
  TreeSet<Integer> tree_set2 = new TreeSet<Integer>();
  for(int i=0;i<size2;i++){
    tree_set2.add(sc.nextInt());
    }
  
  System.out.println("Tree set2: "+tree_set2);
  
   tree_set1.addAll(tree_set2);
   System.out.println("Tree set1: "+tree_set1);
 }
}
##
Write a Java program to compare two tree sets.(Use string).Note:Read size of the string.Read elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise8 {
  public static void main(String[] args) {

  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
  TreeSet<String> t_set1 = new TreeSet<String>();
  for(int i=0;i<size1;i++)
  {
  t_set1.add(sc.next());
  }
          System.out.println("Free Tree set: "+t_set1);

          
           int size2=sc.nextInt();
            TreeSet<String> t_set2 = new TreeSet<String>();
            for(int i=0;i<size2;i++)
            {
            t_set2.add(sc.next());
            }
          System.out.println("Second Tree set: "+t_set2);
          
          TreeSet<String> result_set = new TreeSet<String>();
         for (String element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}
##
Write a Java program to retrieve and remove the first element of a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise14 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
    tree_num.add(sc.nextInt());
   }
  
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the first(lowest) element: "+tree_num.pollFirst());
   System.out.println("Tree set after removing first element: "+tree_num);
   }    
}
##
Write a java program to display the resultant values within the subset (range 5 to 25 ) should display in result. Note:use subset method.
import java.util.*;


public class Main {
        public static void main(String[] args)
        {

                
                TreeSet<Integer> tree_set = new TreeSet<Integer>();

                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.nextInt());
                }
                
                TreeSet<Integer> sub_set = new TreeSet<Integer>();

                
                sub_set = (TreeSet<Integer>)tree_set.subSet(6, 30);

        
                Iterator iterate;
                iterate = sub_set.iterator();

        
                System.out.println("The resultant values within the sub set: ");

                
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the "h"(String) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<String> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.next());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet("h"));
        }
}
##
Write a Java program to create a reverse order view of the elements contained in a given tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
import java.util.Iterator;
  public class Exercise4 {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    int size=sc.nextInt();
     TreeSet<String> t_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  t_set.add(sc.next());
  }
 
          
    
   System.out.println("Original tree set:" + t_set);  
     Iterator it = t_set.descendingIterator();
     
     System.out.println("Elements in Reverse Order:");
     while (it.hasNext()) {
        System.out.println(it.next());
     }
  }
}
##
Write a Java program to get an element in a tree set which is strictly greater than the given element.Note:Size of the elementRead elementDisplay higher than 69.Display higher than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly greater than 69 : "+tree_num.higher(69));
   System.out.println("Strictly greater than 12 : "+tree_num.higher(12));
   }    
}
##
Write a Java program to retrieve and remove the last element of a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the last element: "+tree_num.pollLast());
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}
##
Write a java program to display the heterogenous object with help of stringbuffer concepts.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
                Set<StringBuffer> ts = new TreeSet<>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                ts.add(new StringBuffer(sc.next()));
                }
                System.out.println(ts);
        }
}
##
Create the java program to demonstrate floor method for Integer value.Note: floor value for integer 25.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
        TreeSet<Integer> treeadd = new TreeSet<Integer>();
                        
                        Scanner sc=new Scanner(System.in);
                        int size=sc.nextInt();
                        for(int i=0;i<size;i++)
                        {
            treeadd.add(sc.nextInt());
                        }
                        System.out.println("TreeSet: " + treeadd);
                        int value = treeadd.floor(25);
                        System.out.println("Floor value for 25: "
                                                        + value);
        
                
        }
}
##
Write a Java program to add all the elements of a specified tree set to another tree set.Note:Read size.Read elements
import java.util.*;
public class Exercise3 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
   int size2=sc.nextInt();
  TreeSet<Integer> tree_set1 = new TreeSet<Integer>();
    for(int i=0;i<size1;i++){
    tree_set1.add(sc.nextInt());
    }
  
  
  System.out.println("Tree set1: "+tree_set1);
  TreeSet<Integer> tree_set2 = new TreeSet<Integer>();
  for(int i=0;i<size2;i++){
    tree_set2.add(sc.nextInt());
    }
  
  System.out.println("Tree set2: "+tree_set2);
  
   tree_set1.addAll(tree_set2);
   System.out.println("Tree set1: "+tree_set1);
 }
}
##
Write a Java program to get an element in a tree set which is strictly less than the given element.Note:Size of the elementRead elementDisplay lower than 69.Display lower than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly less than 69 : "+tree_num.lower(69));
   System.out.println("Strictly less than 12 : "+tree_num.lower(12));
   }    
}
##
Write a Java program to print odd number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==1)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the resultant values within the subset (range 5 to 25 ) should display in result. Note:use subset method.
import java.util.*;


public class Main {
        public static void main(String[] args)
        {

                
                TreeSet<Integer> tree_set = new TreeSet<Integer>();

                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.nextInt());
                }
                
                TreeSet<Integer> sub_set = new TreeSet<Integer>();

                
                sub_set = (TreeSet<Integer>)tree_set.subSet(6, 30);

        
                Iterator iterate;
                iterate = sub_set.iterator();

        
                System.out.println("The resultant values within the sub set: ");

                
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for String value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<String> treeadd = new TreeSet<String>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.next());
                }
            NavigableSet<String> treereverse = treeadd.descendingSet();
            Iterator<String> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to get the first and last elements in a tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
  public class Exercise5 {
  public static void main(String[] args) {
  
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<String> tree_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);

    Object first_element = tree_set.first();
    System.out.println("First Element is: "+first_element);
 
    
    Object last_element = tree_set.last();
    System.out.println("Last Element is: "+last_element);
 }
}
##
Write a Java program to get the number of elements in a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise6 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  
  TreeSet<String> t_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  t_set.add(sc.next());
  }
     
  System.out.println("Original tree set: " + t_set);
    System.out.println("Size of the tree set: " + t_set.size());     
     }
 }
##
Write a Java program to print even number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==0)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
        Scanner sc=new Scanner(System.in);
                TreeSet<String> tree_set = new TreeSet<String>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> tail_set = new TreeSet<String>();
                tail_set = (TreeSet<String>)tree_set.tailSet("i");
                Iterator iterate;
                iterate = tail_set.iterator();
                System.out.println("The resultant values from the tail: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the 15(Integer) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<Integer> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.nextInt());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet(15));
        }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class color {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
  TreeSet<String> tree_set = new TreeSet<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);
 }
}
##
Write a Java program to compare two tree sets.(Use Integer).Note:Read size of the integer.Read elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise8 {
  public static void main(String[] args) {

  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
  TreeSet<Integer> t_set1 = new TreeSet<Integer>();
  for(int i=0;i<size1;i++)
  {
  t_set1.add(sc.nextInt());
  }
          System.out.println("Free Tree set: "+t_set1);

          
           int size2=sc.nextInt();
            TreeSet<Integer> t_set2 = new TreeSet<Integer>();
            for(int i=0;i<size2;i++)
            {
            t_set2.add(sc.nextInt());
            }
          System.out.println("Second Tree set: "+t_set2);
          
          TreeSet<Integer> result_set = new TreeSet<Integer>();
         for (Integer element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}
##
Write a Java program to retrieve and remove the first element of a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise14 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
    tree_num.add(sc.nextInt());
   }
  
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the first(lowest) element: "+tree_num.pollFirst());
   System.out.println("Tree set after removing first element: "+tree_num);
   }    
}
##
Write a java program to display the resultant values(String) within the subset (range e to i ) should display in result. Note:use subset method.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
                TreeSet<String> tree_set = new TreeSet<String>();
                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> sub_set = new TreeSet<String>();
                sub_set = (TreeSet<String>)tree_set.subSet("e","i");
                Iterator iterate;
                iterate = sub_set.iterator();
                System.out.println("The resultant values within the sub set: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for Integer value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<Integer> treeadd = new TreeSet<Integer>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.nextInt());
                }
            NavigableSet<Integer> treereverse = treeadd.descendingSet();
            Iterator<Integer> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to iterate through all elements in a tree set. Note:Read size of n numbersRead n numbersuse for loop for iterate.
import java.util.*;
public class Exercise2 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<Integer> tree_set = new TreeSet<Integer>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.nextInt());
  }
 
  for (Integer element : tree_set) {
    System.out.println(element);
    }
 }
}
##
Write a Java program to compare two tree sets.(Use string).Note:Read size of the string.Read elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise8 {
  public static void main(String[] args) {

  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
  TreeSet<String> t_set1 = new TreeSet<String>();
  for(int i=0;i<size1;i++)
  {
  t_set1.add(sc.next());
  }
          System.out.println("Free Tree set: "+t_set1);

          
           int size2=sc.nextInt();
            TreeSet<String> t_set2 = new TreeSet<String>();
            for(int i=0;i<size2;i++)
            {
            t_set2.add(sc.next());
            }
          System.out.println("Second Tree set: "+t_set2);
          
          TreeSet<String> result_set = new TreeSet<String>();
         for (String element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}
##
Write a Java program to print even number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==0)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
        Scanner sc=new Scanner(System.in);
                TreeSet<String> tree_set = new TreeSet<String>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> tail_set = new TreeSet<String>();
                tail_set = (TreeSet<String>)tree_set.tailSet("i");
                Iterator iterate;
                iterate = tail_set.iterator();
                System.out.println("The resultant values from the tail: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the "h"(String) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<String> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.next());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet("h"));
        }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class color {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
  TreeSet<String> tree_set = new TreeSet<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);
 }
}
##
Write a Java program to get an element in a tree set which is strictly less than the given element.Note:Size of the elementRead elementDisplay lower than 69.Display lower than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly less than 69 : "+tree_num.lower(69));
   System.out.println("Strictly less than 12 : "+tree_num.lower(12));
   }    
}
##
Write a Java program to retrieve and remove the first element of a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise14 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
    tree_num.add(sc.nextInt());
   }
  
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the first(lowest) element: "+tree_num.pollFirst());
   System.out.println("Tree set after removing first element: "+tree_num);
   }    
}
##
Write a java program to display the resultant values(String) within the subset (range e to i ) should display in result. Note:use subset method.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
                TreeSet<String> tree_set = new TreeSet<String>();
                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> sub_set = new TreeSet<String>();
                sub_set = (TreeSet<String>)tree_set.subSet("e","i");
                Iterator iterate;
                iterate = sub_set.iterator();
                System.out.println("The resultant values within the sub set: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for Integer value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<Integer> treeadd = new TreeSet<Integer>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.nextInt());
                }
            NavigableSet<Integer> treereverse = treeadd.descendingSet();
            Iterator<Integer> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to create a reverse order view of the elements contained in a given tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts = new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        System.out.println("Original tree set:"+ts);
        Iterator i=ts.descendingIterator();
        System.out.println("Elements in Reverse Order:");
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a Java program to compare two tree sets.(Use string).Note:Read size of the string.Read elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeSet<String> ts1 = new TreeSet<String>();
        for(int i=0;i<n1;i++)
        {
            ts1.add(sc.next());
        }
        int n2=sc.nextInt();
        TreeSet<String> ts2 = new TreeSet<String>();
        for(int i=0;i<n2;i++)
        {
            ts2.add(sc.next());
        }
        System.out.println("Free Tree set: "+ts1);
        System.out.println("Second Tree set: "+ts2);
        TreeSet<String> result=new TreeSet<String>();
        for (String i: ts1)
        {
            System.out.println(ts2.contains(i) ? "Yes" : "No");
        }
    }
}
##
Write a Java program to print odd number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for (int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("Original tree set: "+ts);
        for (int i: ts)
        {
            if(i%2!=0)
                System.out.println(i);
        }
    }
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts=new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        TreeSet<String> tail_set = new TreeSet<String>();
        tail_set = (TreeSet<String>)ts.tailSet("i");
        Iterator i = tail_set.iterator();
        System.out.println("The resultant values from the tail: ");
        while (i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Create the java program to demonstrate floor method for Integer value.Note: floor value for integer 25.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("TreeSet: "+ts);
        System.out.println("Floor value for 25: "+ts.floor(25));
    }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts = new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        System.out.println("Tree set:\n"+ts);
    }
}
##
Write a Java program to compare two tree sets.(Use Integer).Note:Read size of the integer.Read elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeSet<Integer> ts1 = new TreeSet<Integer>();
        for(int i=0;i<n1;i++)
        {
            ts1.add(sc.nextInt());
        }
        int n2=sc.nextInt();
        TreeSet<Integer> ts2 = new TreeSet<Integer>();
        for(int i=0;i<n2;i++)
        {
            ts2.add(sc.nextInt());
        }
        System.out.println("Free Tree set: "+ts1);
        System.out.println("Second Tree set: "+ts2);
        TreeSet<Integer> result=new TreeSet<Integer>();
        for (Integer i: ts1)
        {
            System.out.println(ts2.contains(i) ? "Yes" : "No");
        }
    }
}
##
Write a Java program to retrieve and remove the last element of a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;
public class Exercise15 {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        TreeSet <Integer>tree_num = new TreeSet<Integer>();
        TreeSet <Integer>treeheadset = new TreeSet<Integer>();
         
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_num.add(sc.nextInt());
        }
        System.out.println("Original tree set: "+tree_num);
        System.out.println("Removes the last element: "+tree_num.pollLast());
        System.out.println("Tree set after removing last element: "+tree_num);
    }    
}
##
Write a java program to display the heterogenous object with help of stringbuffer concepts.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        Set<StringBuffer> ts = new TreeSet<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            ts.add(new StringBuffer(sc.next()));
        }
        System.out.println(ts);
    }
}
##
Write a java program tailset start from the 15(Integer) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        SortedSet<Integer> s = new TreeSet<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            s.add(sc.nextInt());
        }
        System.out.print("Elements greater than or equal to in set are : " + s.tailSet(15));
    }
}
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,String> hm = new HashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
        System.out.println("Does HashMap contains 104 as key: "+hm.containsKey(104));
    }
}
##
Create a java program to retrieve the key and value from hashtable for all input value.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Map<Integer,String> hm = new Hashtable<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
    }
}
##
Create a java program to create and add objects and check whether a particular key/value exist  in hashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,Double> hm = new HashMap<Integer,Double>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.nextDouble());
        }
        Iterator<Integer> i = hm.keySet().iterator();
        while(i.hasNext())
        {
            int key=i.next();
            System.out.println(key+" "+hm.get(key));
        }
        System.out.println(hm.containsKey(3));
        System.out.println(hm.containsValue(3.3));
    }
}
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in hashmap interface.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,String> hm = new HashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        hm.replaceAll( (key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: "+hm);
    }
}
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,String> hm = new HashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Map<Integer,String> syncmap = Collections.synchronizedMap(hm);
        Iterator<Integer> i=syncmap.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println(key+" "+syncmap.get(key));
        }
    }
}
##
Create a java program to retrieve the key and value from hashmap and display the size of the hashmap and clear the hashmap using clear method concepts.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in hashmap interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap for all input value.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to retrieve the key and value from hashtable for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap for all input value.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in hashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in hashmap interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add objects  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to retrieve the key and value from hashtable for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in hashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap and display the size of the hashmap and clear the hashmap using clear method concepts.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap for all input value.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in linkedhashmap interface then display the map elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        LinkedHashMap<Integer,String> hm = new LinkedHashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i = hm.keySet().iterator();
        while(i.hasNext())
        {
            int key=i.next();
            System.out.println(key+" "+hm.get(key));
        }
    }
}
##
Create a java program to retrieve the key and value from linkedhashmap and display the size of the linkekhashmap and clear the linkedhashmap using clear method concepts.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Map<Integer,String> hm = new LinkedHashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
        System.out.println("Size of Map: "+hm.size());
        hm.clear();
        System.out.println("Size of Map: "+hm.size());
    }
}
##
Create a java program to create and add mappings to linkedhashmap and  linkedhashmap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    { 
        Map<String, Integer> map = new LinkedHashMap<String, Integer>();
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            String b=sc.next();
            Integer a=sc.nextInt();
            map.put(b,a);  
        } 
        System.out.println("HashMap: " + map);
        
        int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
        System.out.println("Price of Shirt: " + returnedValue);
        
        System.out.println("Updated HashMap: " + map);
    }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Map<Integer,String> hm = new LinkedHashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
    }
}
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in linkedhashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
    public static void main(String args[]){ 
        Map<Integer,String> map=new LinkedHashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for (int i=0;i<size;i++)
        {
            map.put(sc.nextInt(),sc.next());  
        } 
        Iterator<Integer> i = map.keySet().iterator();
        while (i.hasNext())
        {
            int key = i.next();
            System.out.println(key+" "+map.get(key));
        }
        map.putIfAbsent(4, "JavaScript");
        map.putIfAbsent(3, "welcome");
        System.out.println("Updated Languages: " + map);
    }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in linkedhashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Double> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from linkedhashmap .Note:iterate over  linkedhashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashMap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Integer> vehicles=new LinkedHashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects  in Linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and  linkedHashMap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("LinkedHashMap: " + map);

    int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated LinkedHashMap: " + map);
 
 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from linkedhashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from linkedhashmap .Note:retrieve the value from linkedhashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from linkedhashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and apply mapping for the key is present in linkedHashMap or not present in linkedHashMap for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap and display the size of the linkekhashmap and clear the linkedhashmap using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and  linkedHashMap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("LinkedHashMap: " + map);

    int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated LinkedHashMap: " + map);
 
 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from linkedhashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Integer> vehicles=new LinkedHashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in linkedhashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Double> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add objects  in Linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and apply mapping for the key is present in linkedHashMap or not present in linkedHashMap for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in linkedhashmap interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to retrieve the value from linkedhashmap .Note:retrieve the value from linkedhashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and  linkedhashmap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("HashMap: " + map);

    int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated HashMap: " + map);
 
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in linkedhashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from linkedhashmap .Note:iterate over  linkedhashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashMap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from linkedhashmap .import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByKey() in descending order)Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
    public static void main(String args[])
    {  
        Map<Integer,String> map=new HashMap<Integer,String>();          
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            map.put(sc.nextInt(),sc.next());  
        }   
        
        map.entrySet()  
        .stream()  
        .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())) 
        .forEach(System.out::println);  
    }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from map .Note:iterate over map using any loop.
import java.util.*;  
public class Mapp{  
    public static void main(String args[])
    { 
        Map<Integer,String> map=new HashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            Integer a=sc.nextInt();
            String b=sc.next();
            map.put(a,b);  
        } 
        
        Iterator<Integer> i = map.keySet().iterator(); 
        while(i.hasNext())
        {
            Integer key = i.next(); 
            System.out.println("key: " + key + " value: " + map.get(key));
        }
        System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));
    }  
}  
##
Create a java program to create and add mappings to hashtable and  Hashtable merge() to Insert New Entry use map interface concepts.Note:new entry :::::::::::::::Shirt price is 70.
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    { 
        Hashtable<String, Integer> map = new Hashtable<String, Integer>();
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            map.put(sc.next(),sc.nextInt());  
        } 
        System.out.println("Map: " + map);
        
        int returnedValue = map.merge("Shirt", 70, (oldValue, newValue) -> oldValue + newValue);
        System.out.println("Price of Shirt: " + returnedValue);
        
        System.out.println("Updated Map: " + map);
    }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from map .
import java.util.*;  
public class Mapp{  
    public static void main(String args[])
    { 
        Map<Integer,String> map=new HashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            Integer a=sc.nextInt();
            String b=sc.next();
            map.put(a,b);  
        } 
        
        Iterator<Integer> i = map.keySet().iterator(); 
        while(i.hasNext())
        {
            Integer key = i.next(); 
            System.out.println("key: " + key + " value: " + map.get(key));
        }
        System.out.println("Following value is removed from Map: " + map.remove(100));
    }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    {
    
        Map<Integer,String> map=new HashMap<>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            Integer a=sc.nextInt();
            String b=sc.next();
            map.put(a,b);  
        } 
        for(Map.Entry m:map.entrySet())
        {
            System.out.println(m.getKey()+" "+m.getValue());  
        }  
        map.replace(100,"welcome to java");
        System.out.println("HashMap After Replace :");
        for(Map.Entry m:map.entrySet())
        {
            System.out.println(m.getKey()+" "+m.getValue());  
        } 
    }  
}  
##
Create a java program to display the name with key  using map interface like key , value pair.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to retrieve the key and value from map and display the size of the map and clear the map using clear method concepts.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add mappings to map and apply mapping for the key is present in Map or not present in Map for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue()) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the key and value from map for all input value.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> numbers = new Hashtable<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts with map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() in descending order )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the value from map .Note:retrieve the value from hashmap.Consider key value 120 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 120; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add mappings to map and  Map merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 90.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<String, Integer> map = new HashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("HashMap: " + map);

    int returnedValue = map.merge("Shirt", 90, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated HashMap: " + map);
 
 }  
}  
##
Create a java program to retrieve the key and value from hashtable with map interface for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByKey().)Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByKey())  

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to insert and display  the key and values  using map interface.Note:Read size of the map.Read elements for map.Map numbers display.Access keys of the map.Access values of the map.Access entries of the map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> numbers=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
 
 System.out.println("Map: " + numbers);

        
        System.out.println("Keys: " + numbers.keySet());

        
        System.out.println("Values: " + numbers.values());

        
        System.out.println("Entries: " + numbers.entrySet());

       
 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the Map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 HashMap<Integer,String> numbers = new HashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from map .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() in descending order )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the key and value from map for all input value.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the Map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 HashMap<Integer,String> numbers = new HashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from map .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from map .Note:retrieve the value from hashmap.Consider key value 120 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 120; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add mappings to map and apply mapping for the key is present in Map or not present in Map for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts with map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to display the name with key  using map interface like key , value pair.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from map .Note:iterate over map using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByKey() in descending order)Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to insert and display  the key and values  using map interface.Note:Read size of the map.Read elements for map.Map numbers display.Access keys of the map.Access values of the map.Access entries of the map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> numbers=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
 
 System.out.println("Map: " + numbers);

        
        System.out.println("Keys: " + numbers.keySet());

        
        System.out.println("Values: " + numbers.values());

        
        System.out.println("Entries: " + numbers.entrySet());

       
 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> numbers = new Hashtable<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue()) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the key and value from map and display the size of the map and clear the map using clear method concepts.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add mappings to hashtable and  Hashtable merge() to Insert New Entry use map interface concepts.Note:new entry :::::::::::::::Shirt price is 70.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<String, Integer> map = new Hashtable<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("Map: " + map);

    int returnedValue = map.merge("Shirt", 70, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated Map: " + map);
 
 }  
}  
##
Create a java program to retrieve the key and value from hashtable with map interface for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply mapping for the key is present in HashMap or not present in HashMap for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
    public static void main(String args[]){ 
        HashMap<Integer,String> map=new HashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            map.put(sc.nextInt(),sc.next());  
        } 
        
        for(Map.Entry m : map.entrySet())
        {  
            System.out.println(m.getKey()+" "+m.getValue());  
        }  
        String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);
        
        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);
        
        System.out.println("Updated Elements: " + map);
    }  
}  
##
Create a java program to create and add mappings to hashmap and  HashMap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    { 
        HashMap<String, Integer> map = new HashMap<>();
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            String b=sc.next();
            Integer a=sc.nextInt();
            map.put(b,a);  
        } 
        System.out.println("HashMap: " + map);
        
        int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
        System.out.println("Price of Shirt: " + returnedValue);
        
        System.out.println("Updated HashMap: " + map);
    }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}
##
---
Write a java program to perform sum of two numbers and three numbers using Method Overloading(Compile time polymorphism)
import java.util.*;
class Calculation{
  
 void sum(int a,int b)
  {
     System.out.println(a+b);
  }
  void sum(int a,int b,int c){
     System.out.println(a+b+c);
   }
  
}


public class HelloWorld{

     public static void main(String []args)
     {
       
  Calculation obj=new Calculation();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();
  int c=sc.nextInt();
  obj.sum(a,b);
  obj.sum(a,b,c);
}
}

##
Write a Java Program for handling division by zero exception.
import java.util.*;
public class Example1
{
   public static void main(String args[])
   {
      Scanner sc=new Scanner(System.in);
      try{
         int num1=sc.nextInt();
         int num2=sc.nextInt();
         int output=num1/num2;
         System.out.println ("Result: "+output);
      }
      catch(ArithmeticException e){
         System.out.println ("You Shouldn't divide a number by zero");
      }
   }
}

##
Write a java program to handle nested try Statement .
import java.util.*;
class Exception2 
{
   public static void main(String args[])
   {
     Scanner sc=new Scanner(System.in);
      try {
         int a[]=new int[5];
       
         int n=sc.nextInt();
          System.out.println("Valid Statement :" +a[n]);
         // another try block
         try {
                 int res = 100/ n;
         }
         catch (ArithmeticException ex2) {
            System.out.println("Sorry! Division by zero isn't feasible!");
         }
      }
      catch (ArrayIndexOutOfBoundsException ex1) {
         System.out.println("ArrayIndexOutOfBoundsException");
      }
   }
}
   

##
Write a java program for run time polymorphism. Consider a scenario where Bank is a class that provides a method to get the rate of interest. However, the rate of interest may differ according to banks. For example, SBI, ICICI, and AXIS banks are providing 8.4%, 7.3%, and 9.7% rate of interest.
import java.util.*;
class Bank{  
float getRateOfInterest(){return 0;}  
}  
class SBI extends Bank{  
float getRateOfInterest(){return 8.4f;}  
}  
class ICICI extends Bank{  
float getRateOfInterest(){return 7.3f;}  
}  
class AXIS extends Bank{  
float getRateOfInterest(){return 9.7f;}  
}  
public class TestPolymorphism{  
public static void main(String args[]){  
Bank b;  
Scanner sc=new Scanner(System.in);
String name=sc.nextLine();
int age=sc.nextInt();
b=new SBI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("SBI Rate of Interest: "+b.getRateOfInterest());  
b=new ICICI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("ICICI Rate of Interest: "+b.getRateOfInterest());  
b=new AXIS();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("AXIS Rate of Interest: "+b.getRateOfInterest());  
}  
} 


##
Write a java program to perform multiple catch using multiple Exception(
import java.util.*;
class ListOfNumbers {
  public int[] arr = new int[5];
void writeList()
{
  Scanner sc=new Scanner(System.in);
    try {
        int n=Integer.parseInt(sc.nextLine());
        
        System.out.println("Valid Statement :" +arr[n]);
    }
    
    catch (NumberFormatException e1) {
      System.out.println("NumberFormatException : " + e1);
    }
    
    catch (IndexOutOfBoundsException e2) {
      System.out.println("IndexOutOfBoundsException : " + e2);
    }

  }
}

public class Main {
  public static void main(String[] args) {
    ListOfNumbers list = new ListOfNumbers();
    list.writeList();
  }
}

##
1, In Outer try block -perform NumberFormatException -print message as "Sorry! String Value can not convert to Integer" .Get String Input Value from the User.
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
     Scanner sc=new Scanner(System.in);
      try {
         String str1=sc.nextLine();
           int a=Integer.parseInt(str1);
           System.out.println("Result:" +a);
         // another try block
         try {
               String str=null;
               System.out.println("Innerblock :" +str.length());
         }
        catch(NullPointerException ex1) {
         System.out.println("NullPointerException");
      }
      }
      
      
       catch (NumberFormatException ex2) {
            System.out.println("Sorry! String Value can not convert to Integer");
         }
   }
}
   
    

##
NumberFormatException : java.lang.NumberFormatException: For input string: "string"
import java.util.*;
class ListOfNumbers {
  public int[] arr = new int[5];
void writeList()
{
  Scanner sc=new Scanner(System.in);
    try {
        int n=Integer.parseInt(sc.nextLine());
        
        System.out.println("Valid Statement :" +arr[n]);
    }
    
    catch (NumberFormatException e1) {
      System.out.println("NumberFormatException : " + e1);
    }
    
    catch (IndexOutOfBoundsException e2) {
      System.out.println("IndexOutOfBoundsException : " + e2);
    }

  }
}

public class Main {
  public static void main(String[] args) {
    ListOfNumbers list = new ListOfNumbers();
    list.writeList();
  }
}

##
Write a java Program to display the arguments using method overloading.
import java.util.*;
class ClassMain{
	
	void disp(int number1, int number2){
		System.out.println ("Arguments:" + number1 + "," + number2);
	}
void disp(double number) {
		System.out.println("\nArgument:" + number);
	
	}
}


public class HelloWorld{

     public static void main(String []args)
     {
       
  ClassMain obj=new ClassMain();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();

Double d=sc.nextDouble();
 
  obj.disp(a,b);
  obj.disp(d);
}
}

##
Company Name: TVS
import java.util.*;
class Bike{  
  void run(String name)
  {
      System.out.println("Company Name: "+name);
      System.out.println("Bike class");}  
}  
class Scooter extends Bike{  
  void run(String name)
  {
      System.out.println("Company Name: "+name);
      System.out.println("Scooter class");}  
}
public class Main
{
  
  public static void main(String args[])
  {  
    Bike b = new Scooter();//upcasting  
    Scanner sc=new Scanner(System.in);
    String name=sc.nextLine();
    b.run(name);  
  }  
} 

##
Arithmetic Exception: Number should not divide by zero
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
           try
           {
               int a=sc.nextInt();
             int b=sc.nextInt();
             int c=a/b;
             System.out.println("Result: " +c); 
           }
               catch(ArithmeticException e)  
        {  
            System.out.println("Arithmetic Exception: Number should not divide by zero");  
        }  
    }
}

##
Note: Bank act as a base class, SBI, ICICI, and AXIS act as a Derived Class .Get Person name and Age as Input from the User
import java.util.*;
class Bank{  
float getRateOfInterest(){return 0;}  
}  
class SBI extends Bank{  
float getRateOfInterest(){return 8.4f;}  
}  
class ICICI extends Bank{  
float getRateOfInterest(){return 7.3f;}  
}  
class AXIS extends Bank{  
float getRateOfInterest(){return 9.7f;}  
}  
public class TestPolymorphism{  
public static void main(String args[]){  
Bank b;  
Scanner sc=new Scanner(System.in);
String name=sc.nextLine();
int age=sc.nextInt();
b=new SBI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("SBI Rate of Interest: "+b.getRateOfInterest());  
b=new ICICI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("ICICI Rate of Interest: "+b.getRateOfInterest());  
b=new AXIS();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("AXIS Rate of Interest: "+b.getRateOfInterest());  
}  
} 


##
Write a java program to perform ArrayIndexOutOfBounds Exception  using  Multiple Catch
import java.util.*;
public class MultipleCatchBlock3 {

	public static void main(String[] args) {
		
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		   try{  
			    int a[]=new int[5];  
			     
			     System.out.println("Value:" +a[n]);
			   }  
			   catch(ArithmeticException e)
		          {
				   System.out.println("Arithmetic Exception occurs");
				  }  
			   catch(ArrayIndexOutOfBoundsException e)
		          {
				   System.out.println("ArrayIndexOutOfBounds Exception occurs");
				  }  
			   catch(Exception e)
		          {
				   System.out.println("Parent Exception occurs");
				  }  		  
			   System.out.println("rest of the code");  
	}
}



##
Write a Java program to demonstrate control flow of try-catch-finally clause when ArithmeticException occur in try block and handled in catch block
import java.util.Scanner;

public class TryCatchFinallyExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        try {
            // Get the divisor as input from the user
           
            int divisor = scanner.nextInt();

            // Try block where division by zero can occur
            int result = 100 / divisor;
            System.out.println("Valid Statement :" + result);

        } catch (ArithmeticException e) {
            // Catch block to handle the exception
            System.out.println("Exception: " + e);

        } finally {
            // Finally block, always executed
            System.out.println("Finally block executed");
        }

        // Outside the try-catch-finally block
        System.out.println("Outside try-catch-finally clause");
        
        scanner.close();
    }
}


##
Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(int age) 
        {  
            try
            {
            if(age<18) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Person is not eligible for Opening Bank Account");    
            }  
            else {  
            System.out.println("Person is eligible to Open Bank Account!!");  
            }  
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            int n=sc.nextInt();
            validate(n);  
                
      }    
    }      
        
        
          
    
##
Write a Java program for performing exception using throws
import java.util.*;

public class ThrowsExecp {
 
    // This method throws an exception
    // to be handled
    // by caller or caller
    // of caller and so on.
    static void fun() throws IllegalAccessException
    {
        Scanner in=new Scanner(System.in);
        int a=in.nextInt();
        System.out.println("Inside function. ");
        throw new IllegalAccessException(" Entered Input value as:    " +a);
    }
 
    // This is a caller function
    public static void main(String args[])
    {
        try {
            fun();
        }
        catch (IllegalAccessException e) {
            System.out.println("caught in main." +e);
        }
    }
}

##
Write a Java Program to perform Arithmetic Exception for voting purpose using throws .
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 18) {
      throw new ArithmeticException("Access denied - You must be at least 18 years old.");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}


##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with 
import java.util.*;
final class Student
{
    final String Year="3th Year";
    final String schoolname="ABC School";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: HCL ");
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}

##
Write a Java Program to perform ArrayIndexOutOfBoundsException using throws .
import java.util.*;
public class Main 
{
   static void fun(int n) throws ArrayIndexOutOfBoundsException
  {
      int a[] = new int[n];
    if (n>5)
    {
        
       throw new ArrayIndexOutOfBoundsException("Size of the array Should not exceed 5");
    }
    else {
      System.out.println("Size of the Array : "+n);
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      
      try
      {
      fun(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}


##
Create a final class 'Student' with  Name,Id and Year as its member, make  Year as final variable with 
import java.util.*;
final class Company
{
    final String companyname="HCL";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: 3th Year ");
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.get();
    obj.print();
}
}

##
Write a Java Program to perform NullPointerException using throws .
import java.util.*;
public class Main 
{
    
   static void fun(String str) throws NullPointerException
  {
      int n=str.length();
     
    if (n=='\0')
    {
        
       throw new NullPointerException("Enter some value for the String");
    }
    else {
      System.out.println("String Length : "+n);
    }
  }

  public static void main(String[] args) 
  { 
     Scanner sc=new Scanner(System.in); 
     String str=sc.nextLine();
      try
      {
      fun(str);
      }
      catch(NullPointerException e)
      {
          System.out.println("Exception : "  +e);
      }
     
  }
}


##
Write a Java program to demonstrate control flow of try-catch-finally clause when NumberFormatException occur in try block and handled in catch block
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      Scanner sc=new Scanner(System.in);
       try
        {
           String str=sc.nextLine();
           int a=Integer.parseInt(str);
           System.out.println("Result:" +a);
        }
         
        catch(NumberFormatException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
      

##
Create a final class 'Company' with  Name,Id and companyname as its member, make companyname as final variable with 
import java.util.*;
final class Company
{
    final String companyname="HCL";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.get();
    obj.print();
}
}

##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}


##
Write a Java program to count the vowels and consonant in the given string by calling run method
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String str = sc.nextLine();  
          int vCount = 0, cCount = 0;    
            
           str = str.toLowerCase();    
            
        for(int i = 0; i < str.length(); i++) {    
            //Checks whether a character is a vowel    
            if(str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') {    
                //Increments the vowel counter    
                vCount++;    
            }    
            //Checks whether a character is a consonant    
            else if(str.charAt(i) >= 'a' && str.charAt(i)<='z') {      
                //Increments the consonant counter    
                cCount++;    
            }    
        }    
        System.out.println("Number of vowels: " + vCount);    
        System.out.println("Number of consonants: " + cCount);   
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  

##
Write a Java program to perform whether the given number is Positive or Negative ,zero by creating Thread using Runnable Interface.
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int num=sc.nextInt();
       if(num>0)  
{  
System.out.println("The number is positive.");  
}  
//checks the number is less than 0 or not  
else if(num<0)  
{  
System.out.println("The number is negative.");  
}  
//executes when the above two conditions return false  
else  
{  
System.out.println("The number is zero.");  
}  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  

##
Write a Java program to create Thread using extends In run method get the student name and roll number from the user and print the value
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Student Name: " +sname);  
         System.out.println("Roll No: " +rollno);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  

##
Write a Java program to create Thread using extends In run method get the Patient details as patient name and patient Id as String variable from the user and print the value in Output
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Patient Name: " +sname);  
         System.out.println("Patient ID: " +rollno);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  

##
Write a java program for set the priority and name of the current thread.
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 int pri=sc.nextInt();
 t.setPriority(pri); // Setting the priority of thread.
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}

##
Write a Java program to add two numbers by creating Thread using Runnable Interface.
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int a=sc.nextInt();
        int b=sc.nextInt();
        int sum=a+b;
        System.out.println("Result: " +sum);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  

##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  

##
Write a Java program to perform whether the given number is Positive or Negative ,zero by calling run method
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int num=sc.nextInt();
       if(num>0)  
{  
System.out.println("The number is positive.");  
}  
//checks the number is less than 0 or not  
else if(num<0)  
{  
System.out.println("The number is negative.");  
}  
//executes when the above two conditions return false  
else  
{  
System.out.println("The number is zero.");  
}  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  

##
Write a Java program to create Thread using Runnable Interface
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        double count=sc.nextDouble();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  

##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario
  class Table
    {  
     
     void printTable(int n){
         synchronized(this)
         {
               for(int i=1;i<=10;i++){  
                 System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                 try{  
                  Thread.sleep(400);  
                 }catch(Exception e){System.out.println(e);}  
               } 
         }
      
     }  
    }  
      

##
Write a Java Program to display odd numbers using Synchronization block for the below Scenario
  class Table
  {
    void odd(int n)
    {
      synchronized(this)
     {//synchronized block  
     
       int i=1;
     System.out.print("List of odd numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
     
     
     }
   }  
  }

##
Write a Java Program to perform cube value using synchronization  method concept  for the below Scenario
 class Table
  {
   static synchronized void cube(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
     

##
Write a Java Program to display Even number up to the range using static Synchronization block for the below Scenario
  class Table
  {
    synchronized static void Even(int n)
    {
      
      int i=2;
     System.out.print("List of Even numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
   }  
  }


##
Write a Java Program to perform static synchronization method for the below Scenario
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}


##
Write a Java Program to perform Power table 2 &  8 using Synchronization method for the below Scenario
  class Table
  {
   synchronized void power(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=5;i++)
     { 
     System.out.println("value of " +n+ " :" + n*temp);
     temp = n*temp;
     try
     {  
      Thread.sleep(500);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }


##
Write a Java Program to perform cube value using static synchronization  concept  for the below Scenario
 class Table
  {
   static synchronized void cube(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
     


##






































---
Write a java Program to read input and  print length of the string in java.
import java.util.Scanner;
public class Main {
	public static void main(String[] args)
	{
    	// Here str is a string object
   	Scanner sc = new Scanner(System.in);  // Create a Scanner object
   	String str = sc.nextLine();

 
    	System.out.println(
        	"The size of "
        	+ "the String is "
        	+ str.length());
	}
}
##
Create a string then print particular string using substring() with given end index value. (0-7) , (0-5) ,(3-5)
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 = sc.nextLine();
    System.out.println(str1.substring(0, 7));  

    System.out.println(str1.substring(0, 5));  

    System.out.println(str1.substring(3, 5));  
  }
}
##
Write a java program to print returns character at the index of 2 using stringconcept.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program to use equalsIgnoreCase() and perform the task.
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
        String str3 = sc.nextLine();
        Boolean result;

        // comparing str1 with str2
        result = str1.equalsIgnoreCase(str2);
        System.out.println(result); // true

        // comparing str1 with str3
        result = str1.equalsIgnoreCase(str3);
        System.out.println(result); // false

        // comparing str3 with str1
        result = str3.equalsIgnoreCase(str1);
        System.out.println(result); // false
    }
}
##
Write a java program to reverse a string in Java without using the reverse method.
import java.util.*;
public class Main {
    public static void main(String[] args) {
 
        Scanner sc=new Scanner(System.in);
        String name=sc.nextLine();
        String reversedString = "";
 
        for (int i = name.length() - 1; i >= 0; i--) {
            reversedString = reversedString + name.charAt(i);
        }
        System.out.println(reversedString);
    }
}
##
Write a java program read input in array format and then display given string.
public class StringExample{    
public static void main(String args[]){    
String s1="java";//creating string by Java string literal    
char ch[]={'s','t','r','i','n','g','s'};    
String s2=new String(ch);//converting char array to string    
String s3=new String("example");//creating Java string by new keyword    
System.out.println(s1);    
System.out.println(s2);    
System.out.println(s3);    
}}
##
Create a java program to find the index of the first occurrence of the specified substring from a given string, use the Java String indexOf (  ).
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    int result;

    String str2=sc.nextLine();
    result = str1.indexOf(str2);

    System.out.println(result);
  }
}
##
Write a java program checks whether the String contains empty or not. If the java String is Empty, it returns true else false.
import java.util.*;
public class Main{ 
public static void main(String args[]){ 
Scanner sc=new Scanner(System.in);
String s1=sc.nextLine(); 
String s2=sc.nextLine(); 
System.out.println(s1.isEmpty()+" the string is: "+s1);      
System.out.println(s2.isEmpty()+" the string is: "+s2);      
}}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Write a java program to swap two strings without using the third variable.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String firstString = sc.nextLine();
        String secondString = sc.nextLine();
 

 
        firstString = firstString + secondString; 
        secondString = firstString.substring(0, (firstString.length() - secondString.length())); 
        firstString = firstString.substring(secondString.length()); 
 
        
        System.out.println(firstString);
        System.out.println(secondString);
 
    }
 
}
##
write a java program to Read two input check both strings are equal or not.
import java.util.Scanner;
public class EqualsExample{  
public static void main(String args[]){  
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String s1 = sc.nextLine();
String s2 = sc.nextLine();
System.out.println(s1.equals(s2));//true because content and case is same  
}} 
##
Create a java string using a new keyword and then print the string.
import java.util.*;
public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    String a=sc.nextLine();
    String name = new String(a);

    System.out.println(name);  
  }
}
##
Write a java program to remove the whitespace(spaces, tabs, newlines) in given string.
import java.util.*;
public class Main
{
public static void main(String args[])
{
    Scanner sc=new Scanner(System.in);
    String ourString=sc.nextLine();
    System.out.println(ourString.trim());
}
}
##
Write a java program to replace the substring.
 import java.util.*;

public class Main {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
 
    String str1 = scanner.nextLine();
 
    String toReplace = scanner.nextLine();
 
    String replacement = scanner.nextLine();
 
    String replacedString = str1.replace(toReplace, replacement);

    System.out.println("Result: " + replacedString);

    scanner.close();
  }
}
##
Write a java program to convert string to integer.
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String name=sc.nextLine();
        int result = Integer.parseInt(name);
        System.out.println("The converted int is: " + result);
    }
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  
//String s1="javatpoint is a very good website";
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String str = sc.nextLine();

String replaceString=str.replaceAll("a","e");//replaces all occurrences of "a" to "e"  
System.out.println(replaceString);  
}}
##
Write a java program to print the given string and particular string using substring() method.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

    
    System.out.println(str1.substring(0));  


    
    System.out.println(str1.substring(3)); 
  }
}
##
Write a java program to change the case of characters in a givenString.(upper case to lower case and lowercase to upper case).
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString=sc.nextLine();
        System.out.println(ourString.toLowerCase());
        System.out.println(ourString.toUpperCase());
        System.out.println(ourString);
    }
}
##
Write a java program to print corresponding value based on index position use charAt method returns the character at the specified index.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

    
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program to reverse the words from the given string sentence.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        String inputString = sc.nextLine();
 
        String outputString = reverseWordsFromString(inputString);
 
        System.out.println(outputString);
 
    }
 
    public static String reverseWordsFromString(String inputString) {
 
        String[] wordsArray = inputString.trim().split("\\s+");
        String stringWithReversedWords = "";
 
        for (String word : wordsArray) {
 
            stringWithReversedWords += reverseWord(word) + " ";
 
        }
        return stringWithReversedWords.trim();
 
    }
 
    public static String reverseWord(String word) {
        String reversedWord = "";
         for (int i = word.length() - 1; i >= 0; i--) {
            reversedWord += word.charAt(i);
 
        }
        return reversedWord;
    }
 
}
##
Write a program to Read input ,split word from sentence.
import java.util.Scanner;
	public class Main{  
	public static void main(String args[]){  
	Scanner sc = new Scanner(System.in);  // Create a Scanner object
	String str = sc.nextLine();
 
	String[] words=str.split("\\s");//splits the string based on whitespace  
	//using java foreach loop to print elements of string array  
	for(String w:words){  
	System.out.println(w);  
	}  
	}} 
##
Write a java program to join a two string using concat() method.
import java.util.*;
public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    String first = sc.nextLine();
    System.out.println("First String: " + first);

    
    String second = sc.nextLine();
    System.out.println("Second String: " + second);


    String joinedString = first.concat(" " +second);
    System.out.println("Joined String: " + joinedString);
  }
}
##
Write a java program to split the given string from space using comma operator.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String text=sc.nextLine();

    
    String[] result = text.split(" ");


    System.out.print("result = ");
    for (String str : result) {
      System.out.print(str + ", ");
    }
  }
}
##
Given a string, return a new string made of n copies of the first 2 chars of the original string,where n is the length of the string. The string may be any length. If there are fewer than 2 chars, use whatever is there. If input is "Wipro" then output should be "WiWiWiWiWi".
    static String nCopyString(String s) {
        int n = s.length();
        String base = s.substring(0, 2);

        String str = "";

        for(int i=0; i<n; i++)
            str += base;
            
        return str;
    }
##
Write a java program to check if a string is a palindrome.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        String inputString = sc.nextLine();
        String reversedString = reverseString(inputString);
 
        if (inputString.equals(reversedString)) {
            System.out.println(inputString + " is a palindrome String.");
        } else {
            System.out.println(inputString + " is not a palindrome String.");
        }
    }
 
    
    public static String reverseString(String str) {
        String reversedString = "";
 
        for (int i = str.length() - 1; i >= 0; i--) {
            reversedString += str.charAt(i);
 
        }
        return reversedString;
    }
 
}
##
Write a java program read input in array format and then display given string.
public class StringExample{    
public static void main(String args[]){    
String s1="java";//creating string by Java string literal    
char ch[]={'s','t','r','i','n','g','s'};    
String s2=new String(ch);//converting char array to string    
String s3=new String("example");//creating Java string by new keyword    
System.out.println(s1);    
System.out.println(s2);    
System.out.println(s3);    
}}
##
Create a java string using a new keyword and then print the string.
import java.util.*;
public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    String a=sc.nextLine();
    String name = new String(a);

    System.out.println(name);  
  }
}
##
Write a java program to print returns character at the index of 2 using stringconcept.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Write a java program to check if a string is a palindrome.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        String inputString = sc.nextLine();
        String reversedString = reverseString(inputString);
 
        if (inputString.equals(reversedString)) {
            System.out.println(inputString + " is a palindrome String.");
        } else {
            System.out.println(inputString + " is not a palindrome String.");
        }
    }
 
    
    public static String reverseString(String str) {
        String reversedString = "";
 
        for (int i = str.length() - 1; i >= 0; i--) {
            reversedString += str.charAt(i);
 
        }
        return reversedString;
    }
 
}
##
Write a program to Read input ,split word from sentence.
import java.util.Scanner;
	public class Main{  
	public static void main(String args[]){  
	Scanner sc = new Scanner(System.in);  // Create a Scanner object
	String str = sc.nextLine();
 
	String[] words=str.split("\\s");//splits the string based on whitespace  
	//using java foreach loop to print elements of string array  
	for(String w:words){  
	System.out.println(w);  
	}  
	}} 
##
Create a java program to find the index of the first occurrence of the specified substring from a given string, use the Java String indexOf (  ).
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    int result;

    String str2=sc.nextLine();
    result = str1.indexOf(str2);

    System.out.println(result);
  }
}
##
Write a java program to split the given string from space using comma operator.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String text=sc.nextLine();

    
    String[] result = text.split(" ");


    System.out.print("result = ");
    for (String str : result) {
      System.out.print(str + ", ");
    }
  }
}
##
Write a java program to replace the substring.
 import java.util.*;

public class Main {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
 
    String str1 = scanner.nextLine();
 
    String toReplace = scanner.nextLine();
 
    String replacement = scanner.nextLine();
 
    String replacedString = str1.replace(toReplace, replacement);

    System.out.println("Result: " + replacedString);

    scanner.close();
  }
}
##
Write a java program to reverse the words from the given string sentence.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        String inputString = sc.nextLine();
 
        String outputString = reverseWordsFromString(inputString);
 
        System.out.println(outputString);
 
    }
 
    public static String reverseWordsFromString(String inputString) {
 
        String[] wordsArray = inputString.trim().split("\\s+");
        String stringWithReversedWords = "";
 
        for (String word : wordsArray) {
 
            stringWithReversedWords += reverseWord(word) + " ";
 
        }
        return stringWithReversedWords.trim();
 
    }
 
    public static String reverseWord(String word) {
        String reversedWord = "";
         for (int i = word.length() - 1; i >= 0; i--) {
            reversedWord += word.charAt(i);
 
        }
        return reversedWord;
    }
 
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  
//String s1="javatpoint is a very good website";
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String str = sc.nextLine();

String replaceString=str.replaceAll("a","e");//replaces all occurrences of "a" to "e"  
System.out.println(replaceString);  
}}
##
Write a java program to print the given string and particular string using substring() method.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

    
    System.out.println(str1.substring(0));  


    
    System.out.println(str1.substring(3)); 
  }
}
##
Write a java program checks whether the String contains empty or not. If the java String is Empty, it returns true else false.
import java.util.*;
public class Main{ 
public static void main(String args[]){ 
Scanner sc=new Scanner(System.in);
String s1=sc.nextLine(); 
String s2=sc.nextLine(); 
System.out.println(s1.isEmpty()+" the string is: "+s1);      
System.out.println(s2.isEmpty()+" the string is: "+s2);      
}}
##
Given a string, return a new string made of n copies of the first 2 chars of the original string,where n is the length of the string. The string may be any length. If there are fewer than 2 chars, use whatever is there. If input is "Wipro" then output should be "WiWiWiWiWi".
    static String nCopyString(String s) {
        int n = s.length();
        String base = s.substring(0, 2);

        String str = "";

        for(int i=0; i<n; i++)
            str += base;
            
        return str;
    }
##
Write a java program to swap two strings without using the third variable.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String firstString = sc.nextLine();
        String secondString = sc.nextLine();
 

 
        firstString = firstString + secondString; 
        secondString = firstString.substring(0, (firstString.length() - secondString.length())); 
        firstString = firstString.substring(secondString.length()); 
 
        
        System.out.println(firstString);
        System.out.println(secondString);
 
    }
 
}
##
Write a java Program to read input and  print length of the string in java.
import java.util.Scanner;
public class Main {
	public static void main(String[] args)
	{
    	// Here str is a string object
   	Scanner sc = new Scanner(System.in);  // Create a Scanner object
   	String str = sc.nextLine();

 
    	System.out.println(
        	"The size of "
        	+ "the String is "
        	+ str.length());
	}
}
##
Write a java program to join a two string using concat() method.
import java.util.*;
public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    String first = sc.nextLine();
    System.out.println("First String: " + first);

    
    String second = sc.nextLine();
    System.out.println("Second String: " + second);


    String joinedString = first.concat(" " +second);
    System.out.println("Joined String: " + joinedString);
  }
}
##
Write a java program to change the case of characters in a givenString.(upper case to lower case and lowercase to upper case).
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString=sc.nextLine();
        System.out.println(ourString.toLowerCase());
        System.out.println(ourString.toUpperCase());
        System.out.println(ourString);
    }
}
##
Write a java program to use equalsIgnoreCase() and perform the task.
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
        String str3 = sc.nextLine();
        Boolean result;

        // comparing str1 with str2
        result = str1.equalsIgnoreCase(str2);
        System.out.println(result); // true

        // comparing str1 with str3
        result = str1.equalsIgnoreCase(str3);
        System.out.println(result); // false

        // comparing str3 with str1
        result = str3.equalsIgnoreCase(str1);
        System.out.println(result); // false
    }
}
##
Write a java program to reverse a string in Java without using the reverse method.
import java.util.*;
public class Main {
    public static void main(String[] args) {
 
        Scanner sc=new Scanner(System.in);
        String name=sc.nextLine();
        String reversedString = "";
 
        for (int i = name.length() - 1; i >= 0; i--) {
            reversedString = reversedString + name.charAt(i);
        }
        System.out.println(reversedString);
    }
}
##
write a java program to Read two input check both strings are equal or not.
import java.util.Scanner;
public class EqualsExample{  
public static void main(String args[]){  
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String s1 = sc.nextLine();
String s2 = sc.nextLine();
System.out.println(s1.equals(s2));//true because content and case is same  
}} 
##
Create a string then print particular string using substring() with given end index value. (0-7) , (0-5) ,(3-5)
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 = sc.nextLine();
    System.out.println(str1.substring(0, 7));  

    System.out.println(str1.substring(0, 5));  

    System.out.println(str1.substring(3, 5));  
  }
}
##
Write a java program to remove the whitespace(spaces, tabs, newlines) in given string.
import java.util.*;
public class Main
{
public static void main(String args[])
{
    Scanner sc=new Scanner(System.in);
    String ourString=sc.nextLine();
    System.out.println(ourString.trim());
}
}
##
Write a java program to print corresponding value based on index position use charAt method returns the character at the specified index.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

    
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program to convert string to integer.
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String name=sc.nextLine();
        int result = Integer.parseInt(name);
        System.out.println("The converted int is: " + result);
    }
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  
//String s1="javatpoint is a very good website";
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String str = sc.nextLine();

String replaceString=str.replaceAll("a","e");//replaces all occurrences of "a" to "e"  
System.out.println(replaceString);  
}}
##
Create a java program to find the index of the first occurrence of the specified substring from a given string, use the Java String indexOf (  ).
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    int result;

    String str2=sc.nextLine();
    result = str1.indexOf(str2);

    System.out.println(result);
  }
}
##
Write a java program to print returns character at the index of 2 using stringconcept.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Write a java program to swap two strings without using the third variable.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String firstString = sc.nextLine();
        String secondString = sc.nextLine();
 

 
        firstString = firstString + secondString; 
        secondString = firstString.substring(0, (firstString.length() - secondString.length())); 
        firstString = firstString.substring(secondString.length()); 
 
        
        System.out.println(firstString);
        System.out.println(secondString);
 
    }
 
}
##
Write a java program read input in array format and then display given string.
public class StringExample{    
public static void main(String args[]){    
String s1="java";//creating string by Java string literal    
char ch[]={'s','t','r','i','n','g','s'};    
String s2=new String(ch);//converting char array to string    
String s3=new String("example");//creating Java string by new keyword    
System.out.println(s1);    
System.out.println(s2);    
System.out.println(s3);    
}}
##
Create a java string using a new keyword and then print the string.
import java.util.*;
public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    String a=sc.nextLine();
    String name = new String(a);

    System.out.println(name);  
  }
}
##
Write a java program to split the given string from space using comma operator.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String text=sc.nextLine();

    
    String[] result = text.split(" ");


    System.out.print("result = ");
    for (String str : result) {
      System.out.print(str + ", ");
    }
  }
}
##
Write a java program to print corresponding value based on index position use charAt method returns the character at the specified index.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

    
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program to check if a string is a palindrome.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        String inputString = sc.nextLine();
        String reversedString = reverseString(inputString);
 
        if (inputString.equals(reversedString)) {
            System.out.println(inputString + " is a palindrome String.");
        } else {
            System.out.println(inputString + " is not a palindrome String.");
        }
    }
 
    
    public static String reverseString(String str) {
        String reversedString = "";
 
        for (int i = str.length() - 1; i >= 0; i--) {
            reversedString += str.charAt(i);
 
        }
        return reversedString;
    }
 
}

##
Create a java program to find the index of the first occurrence of the specified substring from a given string, use the Java String indexOf().
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    int result;

    String str2=sc.nextLine();
    result = str1.indexOf(str2);

    System.out.println(result);
  }
}
##
Write a java program to change the case of characters in a given string.(upper case to lower case and lowercase to upper case).
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString=sc.nextLine();
        System.out.println(ourString.toLowerCase());
        System.out.println(ourString.toUpperCase());
        System.out.println(ourString);
    }
}
##
Write a java program to use equalsToIgnoreCase() and perform the task.
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
        String str3 = sc.nextLine();
        Boolean result;

        // comparing str1 with str2
        result = str1.equalsIgnoreCase(str2);
        System.out.println(result); // true

        // comparing str1 with str3
        result = str1.equalsIgnoreCase(str3);
        System.out.println(result); // false

        // comparing str3 with str1
        result = str3.equalsIgnoreCase(str1);
        System.out.println(result); // false
    }
}
##
Write a java program to swap two strings without using the third variable.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String firstString = sc.nextLine();
        String secondString = sc.nextLine();
 

 
        firstString = firstString + secondString; 
        secondString = firstString.substring(0, (firstString.length() - secondString.length())); 
        firstString = firstString.substring(secondString.length()); 
 
        
        System.out.println(firstString);
        System.out.println(secondString);
 
    }
 
}
##
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0). If input is "hi" and "hello", then output will be "hihellohi".
import java.util.*;
	    
		
	public class Assignment6 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		String output;

		if (a.length() < b.length()) 
			output = a + b + a;
		else
			output = b + a + b;
		
		System.out.println(output);
	}

}
##
Write a java program to use delete() method of the StringBuffer class deletes the String from the specified beginIndex to endIndex.

import java.util.Scanner;

public class StringBufferExample4 {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        
        // Read input string from the user 
        String str1 = sc.nextLine();
        
        // Read the start index from the user 
        int startIndex = sc.nextInt();
        
        // Read the end index from the user
        int endIndex = sc.nextInt();
        
        StringBuffer sb = new StringBuffer(str1);
        
        // Using delete() method to delete substring from start index to end index
        sb.delete(startIndex, endIndex);
         
        System.out.println(sb);
        
        sc.close();
    }
}
##
Write a java program to set the length of the character sequence equal to newLength and use stringbuffer class.
public class GFG {
	public static void main(String[] args)
	{

	
		StringBuffer str
			= new StringBuffer("Tony Stark will die");

		
		System.out.println("String length = "
						+ str.length() +
		" and contains = \"" + str + "\"");

		
		str.setLength(18);

		
		System.out.println("After setLength() String = \""
						+ str.toString()+"\"");
	}
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  

Scanner sc = new Scanner(System.in); 
String str = sc.nextLine();
StringBuffer sb=new StringBuffer(str);
String a=sb.toString();
String replaceString=a.replaceAll("a","e"); 
System.out.println(replaceString);  
}}
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “pot” and “lap”, then output should be “ploatp”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Given a string of even length, return the first half. So the string "CatDog" yields "Cat". If the string length is odd number then return null.
import java.util.Scanner;
public class Assignment4 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str = sc.nextLine();
		
		String output;
		
		if (str.length() % 2 == 0) {
			output = str.substring(0, str.length() / 2);
		} else {
			output = null;
		}
		
		System.out.println(output);
	}

}
##
Write a java program use replace() method replaces the given String from the specified beginIndex and endIndex and use stringbuffer.
import java.util.*;
public class StringBufferExample3{  
public static void main(String args[]){ 
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.replace(1,3,"Java");  
System.out.println(sb); 
}  
} 
##
Write a java program passing string str1 value in the StringBuffer object and “sb” is pointing to that object i.e. the address of the StringBuffer object is stored in reference variable sb.
import java.util.*;
public class CapacityTest2 { 
public static void main(String[ ] args) 
{ 
  Scanner sc=new Scanner(System.in);
  String str1=sc.nextLine();
  StringBuffer sb = new StringBuffer(str1); 
  int length = sb.length(); 
  int capacity = sb.length() + 16; 
  
  System.out.println(length); 
  System.out.println(capacity); 
  } 
}
##
Write a java program to print the text based on testcase write the program and use string buffer and append method.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
           Scanner sc=new Scanner(System.in);
           String str=sc.nextLine();
           StringBuffer sb1=new StringBuffer(str);

           System.out.println("sb1 = "+sb1.append('s')); 
    }
}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “abc” and “xyz”, then output should be “axbycz”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0). If input is "lap" and "laptop", then output will be "laplaptoplap".
import java.util.*;
	    
		
	public class Assignment6 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		String output;

		if (a.length() < b.length()) 
			output = a + b + a;
		else
			output = b + a + b;
		
		System.out.println(output);
	}

}
##
Write a java program to set the length of the character sequence equal to newLength using stringbuffer class.
import java.util.*;

public class GFG {

	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
	    String str1=sc.nextLine();
		
		StringBuffer str
			= new StringBuffer(str1);

		
		System.out.println("String length = "
						+ str.length() +
				" and contains = " + str);

		
		str.setLength(10);

		
		System.out.println("After setLength() String = "
						+ str.toString());
	}
}
##
Write a program to Read input ,split word from sentence and use string builder.
import java.util.Scanner;
	public class Main{  
	public static void main(String args[]){  
	Scanner sc = new Scanner(System.in);  
	String str = sc.nextLine();
	StringBuilder sb=new StringBuilder(str);
	String str1=sb.toString();
 
	String[] words=str1.split("\\s");
	for(String w:words){  
	System.out.println(w);  
	}  
	}} 
##
Write a java program to replace the substring.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    String str1 = "C++ Programming";
    System.out.println(str1.replace("C++", "Java"));
  }
}
##
Given two strings, append them together (known as "concatenation") and return the result. However, if the concatenation creates a double-char, then omit one of the chars. If the inputs are “Mark” and “Kate” then the ouput should be “markate”. (The output should be in lowercase)
import java.util.Scanner;


public class Assignment2 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
		str1 = str1.toLowerCase();
		str2 = str2.toLowerCase();
		
		StringBuffer sb = new StringBuffer();
		sb.append(str1);
		
		if (str1.charAt(str1.length() - 1) == str2.charAt(0)) {
			sb.append(str2.substring(1, str2.length()));
		} else {
			sb.append(str2);
		}
		
		System.out.println(sb);		
		
		sb.append(str1);
		
	}

}
##
Write a java program to use reverse() method of the StringBuilder class reverses the current String.
import java.util.*;
public class StringBufferExample5{  
public static void main(String args[]){  
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.reverse();  
System.out.println(sb);  
}  
}  
##
Given a string of even length, return the first half. So the string "DogCat" yields "Dog". If the string length is odd number then return null.
import java.util.Scanner;
public class Assignment4 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str = sc.nextLine();
		
		String output;
		
		if (str.length() % 2 == 0) {
			output = str.substring(0, str.length() / 2);
		} else {
			output = null;
		}
		
		System.out.println(output);
	}

}
##
write a java program to Read two input check both strings are equal or not and use string builder method.
import java.util.Scanner;
public class EqualsExample{  
public static void main(String args[]){  
Scanner sc = new Scanner(System.in); 
StringBuilder sb=new StringBuilder(sc.nextLine());
StringBuilder sb1=new StringBuilder(sc.nextLine());
String s1 = sb.toString();
String s2 = sb1.toString();
System.out.println(s1.equals(s2)); 
}} 
##
Given a string, return a new string made of n copies of the first 2 chars of the original string,where n is the length of the string. The string may be any length. If there are fewer than 2 chars, use whatever is there. If input is "Wipro" then output should be "WiWiWiWiWi".
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String str = in.nextLine();
        System.out.println(nCopyString(str));
    }

    static String nCopyString(String s) {
        int n = s.length();
        String base = s.substring(0, 2);

        String str = "";

        for(int i=0; i<n; i++)
            str += base;
            
        return str;
    }
}
##
Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged. If the input is "xHix", then output is "Hi".
import java.util.*;
public class Assignment7 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String str =sc.nextLine();
		
		if (str.charAt(0) == 'x')
			str = str.substring(1, str.length());
		
		if (str.charAt(str.length() - 1) == 'x')
			str = str.substring(0, str.length() - 1);
		
		System.out.println(str);

	}

}
##
Write a java program use append() method concatenates the given argument with this String and use stringbuffer class.
import java.util.*;
public class StringBufferExample{  
public static void main(String args[]){  
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
String str2=sc.nextLine();
StringBuffer sb=new StringBuffer(str1+" ");  
sb.append(str2);  
System.out.println(sb);  
}  
}  
##
Write a java program to print new value ,string that can be modified or changed into the existing object .(mutable string)
import java.util.*;
public class MutableStringEx { 
public static void main(String[ ] args) 
{ 
 Scanner sc=new Scanner(System.in);
 String str1=sc.nextLine();
 StringBuffer sb = new StringBuffer(str1); 
  sb.append(" Easy");
  sb.append(" today");
  System.out.println(sb); 
 } 
}
##
Write a java Program to read input and  print length of the string in java and use stringbuffer.
import java.util.Scanner;
public class Main {
	public static void main(String[] args)
	{
    	// Here str is a string object
   	Scanner sc = new Scanner(System.in);  // Create a Scanner object
   	String str = sc.nextLine();
    StringBuffer sb=new StringBuffer(str);
 
    	System.out.println(
        	"The size of "
        	+ "the String is "
        	+ sb.length());
	}
}
##
Write a java program use replace() method replaces the given String from the specified beginIndex and endIndex and use stringbuffer.
import java.util.*;
public class StringBufferExample3{  
public static void main(String args[]){ 
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.replace(1,3,"Java");  
System.out.println(sb); 
}  
}  
##
Given two strings, append them together (known as "concatenation") and return the result. However, if the concatenation creates a double-char, then omit one of the chars. If the inputs are “Mark” and “Kate” then the ouput should be “markate”. (The output should be in lowercase)
import java.util.Scanner;


public class Assignment2 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
		str1 = str1.toLowerCase();
		str2 = str2.toLowerCase();
		
		StringBuffer sb = new StringBuffer();
		sb.append(str1);
		
		if (str1.charAt(str1.length() - 1) == str2.charAt(0)) {
			sb.append(str2.substring(1, str2.length()));
		} else {
			sb.append(str2);
		}
		
		System.out.println(sb);		
		
		sb.append(str1);
		
	}

}
##
Write a java program to use reverse() method of the StringBuilder class reverses the current String.
import java.util.*;
public class StringBufferExample5{  
public static void main(String args[]){  
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.reverse();  
System.out.println(sb);  
}  
}  
##
Write a java program to print new value ,string that can be modified or changed into the existing object .(mutable string)

import java.util.*;
public class MutableStringEx { 
public static void main(String[ ] args) 
{ 
 Scanner sc=new Scanner(System.in);
 String str1=sc.nextLine();
 StringBuffer sb = new StringBuffer(str1); 
  sb.append(" Easy");
  sb.append(" today");
  System.out.println(sb); 
 } 
}
##
Write a java program to print the text based on testcase write the program and use string buffer and append method.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
           Scanner sc=new Scanner(System.in);
           String str=sc.nextLine();
           StringBuffer sb1=new StringBuffer(str);

           System.out.println("sb1 = "+sb1.append('s')); 
    }
}
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “pot” and “lap”, then output should be “ploatp”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged. If the input is "xHix", then output is "Hi".
import java.util.*;
public class Assignment7 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String str =sc.nextLine();
		
		if (str.charAt(0) == 'x')
			str = str.substring(1, str.length());
		
		if (str.charAt(str.length() - 1) == 'x')
			str = str.substring(0, str.length() - 1);
		
		System.out.println(str);

	}

}
##
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0). If input is "lap" and "laptop", then output will be "laplaptoplap".
import java.util.*;
	    
		
	public class Assignment6 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		String output;

		if (a.length() < b.length()) 
			output = a + b + a;
		else
			output = b + a + b;
		
		System.out.println(output);
	}

}
##
Write a java program to set the length of the character sequence equal to newLength using stringbuffer class.
import java.util.*;

public class GFG {

	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
	    String str1=sc.nextLine();
		
		StringBuffer str
			= new StringBuffer(str1);

		
		System.out.println("String length = "
						+ str.length() +
				" and contains = " + str);

		
		str.setLength(10);

		
		System.out.println("After setLength() String = "
						+ str.toString());
	}
}
##
write a java program to Read two input check both strings are equal or not and use string builder method.
import java.util.Scanner;
public class EqualsExample{  
public static void main(String args[]){  
Scanner sc = new Scanner(System.in); 
StringBuilder sb=new StringBuilder(sc.nextLine());
StringBuilder sb1=new StringBuilder(sc.nextLine());
String s1 = sb.toString();
String s2 = sb1.toString();
System.out.println(s1.equals(s2)); 
}} 
##
Write a java program to replace the substring.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    String str1 = "C++ Programming";
    System.out.println(str1.replace("C++", "Java"));
  }
}
##
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0). If input is "hi" and "hello", then output will be "hihellohi".
import java.util.*;
	    
		
	public class Assignment6 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		String output;

		if (a.length() < b.length()) 
			output = a + b + a;
		else
			output = b + a + b;
		
		System.out.println(output);
	}

}
##
Write a java program use append() method concatenates the given argument with this String and use stringbuffer class.
import java.util.*;
public class StringBufferExample{  
public static void main(String args[]){  
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
String str2=sc.nextLine();
StringBuffer sb=new StringBuffer(str1+" ");  
sb.append(str2);  
System.out.println(sb);  
}  
}  
##
Given a string of even length, return the first half. So the string "DogCat" yields "Dog". If the string length is odd number then return null.
import java.util.Scanner;
public class Assignment4 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str = sc.nextLine();
		
		String output;
		
		if (str.length() % 2 == 0) {
			output = str.substring(0, str.length() / 2);
		} else {
			output = null;
		}
		
		System.out.println(output);
	}

}
##
Write a java Program to read input and  print length of the string in java and use stringbuffer.
import java.util.Scanner;
public class Main {
	public static void main(String[] args)
	{
    	// Here str is a string object
   	Scanner sc = new Scanner(System.in);  // Create a Scanner object
   	String str = sc.nextLine();
    StringBuffer sb=new StringBuffer(str);
 
    	System.out.println(
        	"The size of "
        	+ "the String is "
        	+ sb.length());
	}
}
##
Given a string, return a new string made of n copies of the first 2 chars of the original string,where n is the length of the string. The string may be any length. If there are fewer than 2 chars, use whatever is there. If input is "Wipro" then output should be "WiWiWiWiWi".
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String str = in.nextLine();
        System.out.println(nCopyString(str));
    }

    static String nCopyString(String s) {
        int n = s.length();
        String base = s.substring(0, 2);

        String str = "";

        for(int i=0; i<n; i++)
            str += base;
            
        return str;
    }
}
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “abc” and “xyz”, then output should be “axbycz”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Write a java program to use delete() method of the StringBuffer class deletes the String from the specified beginIndex to endIndex.
import java.util.Scanner;

public class StringBufferExample4 {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        
        // Read input string from the user 
        String str1 = sc.nextLine();
        
        // Read the start index from the user 
        int startIndex = sc.nextInt();
        
        // Read the end index from the user
        int endIndex = sc.nextInt();
        
        StringBuffer sb = new StringBuffer(str1);
        
        // Using delete() method to delete substring from start index to end index
        sb.delete(startIndex, endIndex);
         
        System.out.println(sb);
        
        sc.close();
    }
}
##
Write a java program passing string str1 value in the StringBuffer object and “sb” is pointing to that object i.e. the address of the StringBuffer object is stored in reference variable sb.
import java.util.*;
public class CapacityTest2 { 
public static void main(String[ ] args) 
{ 
  Scanner sc=new Scanner(System.in);
  String str1=sc.nextLine();
  StringBuffer sb = new StringBuffer(str1); 
  int length = sb.length(); 
  int capacity = sb.length() + 16; 
  
  System.out.println(length); 
  System.out.println(capacity); 
  } 
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  

Scanner sc = new Scanner(System.in); 
String str = sc.nextLine();
StringBuffer sb=new StringBuffer(str);
String a=sb.toString();
String replaceString=a.replaceAll("a","e"); 
System.out.println(replaceString);  
}}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Write a java program to print the text based on testcase write the program and use string builder and append method.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
           Scanner sc=new Scanner(System.in);
           String str=sc.nextLine();
           StringBuilder sb1=new StringBuilder(str);

           System.out.println("sb1 = "+sb1.append('s')); 
    }
}
##
Write a java program to print new value ,string that can be modified or changed into the existing object .(mutable string)
import java.util.*;
public class MutableStringEx { 
public static void main(String[ ] args) 
{ 
 Scanner sc=new Scanner(System.in);
 String str1=sc.nextLine();
 StringBuilder sb = new StringBuilder(str1); 
  sb.append(" Easy");
  sb.append(" today");
  System.out.println(sb); 
 } 
}
##
Write a java program to display student id,name,place using toStringegg method.
public class Student{  
 int rollno;  
 String name;  
 String city;  
  
 Student(int rollno, String name, String city){  
 this.rollno=rollno;  
 this.name=name;  
 this.city=city;  
 }  
   
 public String toString(){//overriding the toString() method  
  return rollno+" "+name+" "+city;  
 }  
 public static void main(String args[]){  
   Student s1=new Student(101,"Raj","chennai");  
   Student s2=new Student(102,"Vijay","salem");  
     
   System.out.println(s1);//compiler writes here s1.toString()  
   System.out.println(s2);//compiler writes here s2.toString()  
 }  
}  
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Write a java program to set the length of the character sequence equal to newLength and use stringbuilder class.
public class GFG {
	public static void main(String[] args)
	{

	
		StringBuilder str
			= new StringBuilder("Tony Stark will die");

		
		System.out.println("String length = "
						+ str.length() +
		" and contains = \"" + str + "\"");

		
		str.setLength(18);

		
		System.out.println("After setLength() String = \""
						+ str.toString()+"\"");
	}
}
##
Write a java Program to read input and  print length of the string in java and use stringbuilder.
import java.util.Scanner;
public class Main {
	public static void main(String[] args)
	{
    	// Here str is a string object
   	Scanner sc = new Scanner(System.in);  // Create a Scanner object
   	String str = sc.nextLine();
    StringBuilder sb=new StringBuilder(str);
 
    	System.out.println(
        	"The size of "
        	+ "the String is "
        	+ sb.length());
	}
}
##
write a java program to Read two input check both strings are equal or not and use string builder method.
import java.util.Scanner;
public class EqualsExample{  
public static void main(String args[]){  
Scanner sc = new Scanner(System.in); 
StringBuilder sb=new StringBuilder(sc.nextLine());
StringBuilder sb1=new StringBuilder(sc.nextLine());
String s1 = sb.toString();
String s2 = sb1.toString();
System.out.println(s1.equals(s2)); 
}} 
##
write a java program to print two value using toString().
public class Test { 

   public static void main(String args[]) {
      Integer x = 5;

      System.out.println(x.toString());  
      System.out.println(Integer.toString(12)); 
   }
}
##
Write a java program use replace() method replaces the given String from the specified beginIndex and endIndex and use stringbuilder.
import java.util.*;
public class StringBufferExample3{  
public static void main(String args[]){ 
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuilder sb=new StringBuilder(str1);  
sb.replace(1,3,"Java");  
System.out.println(sb); 
}  
}  
##
Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged. If the input is "xwelcomex", then output is "welcome".
import java.util.*;
public class Assignment7 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String str =sc.nextLine();
		
		if (str.charAt(0) == 'x')
			str = str.substring(1, str.length());
		
		if (str.charAt(str.length() - 1) == 'x')
			str = str.substring(0, str.length() - 1);
		
		System.out.println(str);

	}

}
##
Write a java program to display lastindexof "a" and "am"" in given string or sentence.
import java.lang.*;
import java.util.*;

public class Main {

   public static void main(String[] args) {
     Scanner sc=new Scanner(System.in);
      String str=sc.nextLine();
      
      StringBuilder str1 = new StringBuilder(str);
      //System.out.println("string = " + str);
    
      /* returns the index within this string of the rightmost occurrence 
         of the specified substring */
      System.out.println("last Index of a = " + str.lastIndexOf("a"));
  
      // returns -1 as substring am is not found
      System.out.println("last Index of am = " + str.lastIndexOf("am"));
   }
} 
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “pot” and “lap”, then output should be “ploatp”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuilder sb = new StringBuilder();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Write a java program to set the length of the character sequence equal to newLength using stringbuilder class.
import java.util.*;

public class GFG {

	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
	    String str1=sc.nextLine();
		
		StringBuilder str
			= new StringBuilder(str1);

		
		System.out.println("String length = "
						+ str.length() +
				" and contains = " + str);

		
		str.setLength(10);

		
		System.out.println("After setLength() String = "
						+ str.toString());
	}
}
##
Write a java program using StringTokenizer class that tokenizes a string "My name is Java Programming" on the basis of whitespace.
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("My name is Java Programming"," ");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  
##
Write a java program to calculate the number of tokens present in the tokenizer string.
import java.util.*;    
public class StringTokenizer3  
{    
 
 public static void main(String args[])  
 {    
   Scanner sc=new Scanner(System.in);
   String str1=sc.nextLine();
     
   StringTokenizer st = new StringTokenizer(str1," ");    
        
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program using stringTokenizer to break a string based on multiple delimiters. Each character in the constructors delimiter field acts as one delimiter.
import java.util.*;
 
public class MyStringTokens {
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String msg =sc.nextLine();
        StringTokenizer st = new StringTokenizer(msg,"://.");
        while(st.hasMoreTokens()){
            System.out.println(st.nextToken());
        }
    }
}
##
Write a java program using StringTokenizer class that tokenizes a string "welcome to java# programming" on the basis of # symbol.
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("welcome to java# programming","#");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  

##
Write a java program to calculate the number of tokens in string tokenizer based on symbols.
import java.util.*;    
public class StringTokenizer3  
{    
 
 public static void main(String args[])  
 {    
   Scanner sc=new Scanner(System.in);
   String str1=sc.nextLine();
     
   StringTokenizer st = new StringTokenizer(str1,"#");    
        
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program how to make delimiter characters also be part of tokens. During creating string tokenizer object, in the constructor field, pass boolean parameter value as true.
import java.util.*;
 
public class TokensWithDelimiter {
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String msg = sc.nextLine();
        StringTokenizer st = new StringTokenizer(msg,"://.",true);
        while(st.hasMoreTokens()){
            System.out.println(st.nextToken());
        }
    }
}
##
Write a java program to print output upto separator symbol($) based on input using nextToken method of the string tokenizer java.
import java.util.*;  
  
public class Main {  
   public static void main(String[] args) {
       Scanner sb=new Scanner(System.in);
       String str1=sb.nextLine();
       StringTokenizer st = new StringTokenizer(str1);  
        
      
      System.out.println("Next token is : " + st.nextToken("$"));  
   }      
}  
##
Write a Java program to demonstrate using split() method. Given input in that split the words in sentence and then print.
import java.util.*;

public class GFG {
	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
		String str = sc.nextLine();
		String[] split = str.split(" ");
	
		for (int i = 0; i < split.length; i++)
			System.out.println("#" + i + ": " + split[i]);
	}
}
##
Write a java program to print all tokens of a string. Create Class , Class name should be TestStringTokenizer in this class write displayTokens method. Create another class, class name should be StringTokenizer1 in this class write main function and create object for TestStringTokenizer class, with the help of object access method here.
import java.util.*;
 
class TestStringTokenizer{
    
	Scanner sc=new Scanner(System.in);
	String str1=sc.nextLine();
	StringTokenizer str = new StringTokenizer(str1);
 
	
	public void displayTokens(){
		while(str.hasMoreTokens()){
			System.out.println(str.nextToken());
		}
	}
}
 
public class StringTokenizer1 {
	public static void main(String args[]){
		
		TestStringTokenizer obj = new TestStringTokenizer();
 
		
		obj.displayTokens();		
	}
}
##
Write a java program to print output upto separator symbol(,) based on input using nextToken method of the string tokenizer java.
import java.util.*;  
  
public class Main {  
   public static void main(String[] args) {
       Scanner sb=new Scanner(System.in);
       String str1=sb.nextLine();
       StringTokenizer st = new StringTokenizer(str1);  
        
      
      System.out.println("Next token is : " + st.nextToken(","));  
   }      
}  
##
Write a Java Program to Illustrate Methods of StringTokenizer class Via hasMoreToken(), nextToken() and countTokens().Refer Sample test cases.

import java.util.*;


public class Main {

	
	public static void main(String args[]) {
		
		Scanner sc=new Scanner(System.in);
		String mydelim =sc.nextLine();
		String mystr =sc.nextLine();

	
		StringTokenizer geeks3 =
			new StringTokenizer(mystr, mydelim);

	
		int count = geeks3.countTokens();
		System.out.println("Number of tokens : " + count + "\n");

		
		for (int i = 0; i < count; i++)
			System.out.println("token at [" + i + "] : "+ geeks3.nextToken());

	
		//while (geeks3.hasMoreTokens())

			
		//	System.out.println(geeks3.nextToken());
	}
}
##
Write a java program using stringtokenizer and print the no of token count after breaking the string by delimiter. You can get the count by using countTokens() method.
import java.util.*;
 
public class MyTokenCount {
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String msg = sc.nextLine();
        StringTokenizer st = new StringTokenizer(msg," .//");
        System.out.println("Count: "+st.countTokens());
    }
}
##
Write a java program using StringTokenizer class that tokenizes a string "C# Programming" on the basis of *(asterisk).
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("C#*Programming","*");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  

##
Write a java program to calculates the number of tokens present in the tokenizer String.
import java.util.StringTokenizer;    
public class StringTokenizer3  
{    
  
 public static void main(String args[])  
 {    
   
   StringTokenizer st = new StringTokenizer("Hello Everyone Have a nice day"," ");    
          
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program to use string tokenizer and use while loop to process the whole string(see sample testcase) until no more token is available.
import java.util. * ;
import java.io. * ;
public class HasMoreTokensMethod {
  public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    String myString =sc.nextLine();
    StringTokenizer st = new StringTokenizer(myString);
    System.out.println("Input string is: " + myString);
    int n = st.countTokens();
    while (n != 0)
    if (st.hasMoreTokens()) {
      System.out.println("The token is present");
      n--;
    }
    System.out.println("There is no more token in the string");
  }
}
##
Write a java program using StringTokenizer class that tokenizes a string "C# Programming" on the basis of *(asterisk).
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("C#*Programming","*");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  
##
Write a java program to calculate the number of tokens in string tokenizer based on symbols.
import java.util.*;    
public class StringTokenizer3  
{    
 
 public static void main(String args[])  
 {    
   Scanner sc=new Scanner(System.in);
   String str1=sc.nextLine();
     
   StringTokenizer st = new StringTokenizer(str1,"#");    
        
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program to print all tokens of a string. Create Class , Class name should be TestStringTokenizer in this class write displayTokens method. Create another class, class name should be StringTokenizer1 in this class write main function and create object for TestStringTokenizer class, with the help of object access method here.

import java.util.*;
 
class TestStringTokenizer{
    
	Scanner sc=new Scanner(System.in);
	String str1=sc.nextLine();
	StringTokenizer str = new StringTokenizer(str1);
 
	
	public void displayTokens(){
		while(str.hasMoreTokens()){
			System.out.println(str.nextToken());
		}
	}
}
 
public class StringTokenizer1 {
	public static void main(String args[]){
		
		TestStringTokenizer obj = new TestStringTokenizer();
 
		
		obj.displayTokens();		
	}
}
##
Write a java program to print output upto separator symbol($) based on input using nextToken method of the string tokenizer java.
import java.util.*;  
  
public class Main {  
   public static void main(String[] args) {
       Scanner sb=new Scanner(System.in);
       String str1=sb.nextLine();
       StringTokenizer st = new StringTokenizer(str1);  
        
      
      System.out.println("Next token is : " + st.nextToken("$"));  
   }      
}  
##
Write a java program to calculates the number of tokens present in the tokenizer String.
import java.util.StringTokenizer;    
public class StringTokenizer3  
{    
  
 public static void main(String args[])  
 {    
   
   StringTokenizer st = new StringTokenizer("Hello Everyone Have a nice day"," ");    
          
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program to use string tokenizer and use while loop to process the whole string(see sample testcase) until no more token is available.
import java.util. * ;
import java.io. * ;
public class HasMoreTokensMethod {
  public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    String myString =sc.nextLine();
    StringTokenizer st = new StringTokenizer(myString);
    System.out.println("Input string is: " + myString);
    int n = st.countTokens();
    while (n != 0)
    if (st.hasMoreTokens()) {
      System.out.println("The token is present");
      n--;
    }
    System.out.println("There is no more token in the string");
  }
}
##
Write a java program using StringTokenizer class that tokenizes a string "My name is Java Programming" on the basis of whitespace.
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("My name is Java Programming"," ");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  

##
Write a Java Program to Illustrate Methods of StringTokenizer class Via hasMoreToken(), nextToken() and countTokens().Refer Sample test cases.
import java.util.*;


public class Main {

	
	public static void main(String args[]) {
		
		Scanner sc=new Scanner(System.in);
		String mydelim =sc.nextLine();
		String mystr =sc.nextLine();

	
		StringTokenizer geeks3 =
			new StringTokenizer(mystr, mydelim);

	
		int count = geeks3.countTokens();
		System.out.println("Number of tokens : " + count + "\n");

		
		for (int i = 0; i < count; i++)
			System.out.println("token at [" + i + "] : "+ geeks3.nextToken());

	
		//while (geeks3.hasMoreTokens())

			
		//	System.out.println(geeks3.nextToken());
	}
}
##
Write a java program using stringTokenizer to break a string based on multiple delimiters. Each character in the constructors delimiter field acts as one delimiter.
 
import java.util.*;
 
public class MyStringTokens {
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String msg =sc.nextLine();
        StringTokenizer st = new StringTokenizer(msg,"://.");
        while(st.hasMoreTokens()){
            System.out.println(st.nextToken());
        }
    }
}
##
Write a parameterized constructor in the Car class that initializes the brand class field with the string “Ford”.
  class Car {

	String brand;
	Car(String str){
        this.brand=str;
	}
	
	public void getBrand() {
	System.out.println(brand);
	}
}

public class Sample {
	
	public static void main(String[] args) {

		Car ford = new Car("Ford");
		ford.getBrand();
	}
}
##
Create a new class called Calculator with the following method.
import java.lang.Math;
class Calculator {

double num1,num2;
Calculator()
{
    num1=0.0;
    num2=0.0;
}
static double powerDouble(double num1,double num2)
{
    double r=(double)(Math.pow(num1,num2));
    return r;
}
}

public class Sample {
	
	public static void main(String[] args) {

				Calculator obj=new Calculator();
			    double res=Calculator.powerDouble(4.5,2.0);
				System.out.println(res);
	}
}
##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[10.5,4.5,3.5]
public class Box
{
    double height,width,depth;
    Box(double width,double height,double depth)
    {
        this.width=width;
        this.height=height;
        this.depth=depth;
    }
    double volume()
    {
        return width*height*depth;
    }

public static void main(String[] args)
{
    Box obj=new Box(10.5,4.5,3.5);
    System.out.println("Volume is "+obj.volume()+ " units");
}
}
##
Write  a Java program using copy constructor to print the area of Circle
import java.util.*;
class Circle 
{ 
          int side1;
         
         Circle(int s1) 
         {  
             side1=s1;
         } 
        
         Circle(Circle obj) 
         { 
            this.side1=obj.side1;
         } 
        
        double perimeter() 
        { 
           return (3.14*side1*side1);
        } 
 } 
        //class to create Rectangle object and calculate area 
public class CopyConstructor 
 { 
           public static void main(String[] args) 
           { 
             Circle firstRect = new Circle(7); 
             Circle secondRect= new Circle(firstRect); 
             System.out.println("Perimeter  of First Square : "+ firstRect.perimeter()); 
             System .out.println("Perimeter of Second Square : "+ secondRect.perimeter()); 
           } 
 } 
##
Write a Java program using default constructor to display Student name, age, Degree [John, 12, VII]
public class Student
{
    String name;
    int age;
    String degree;
    Student()
    {
        name="John";
        age=12;
        degree="VII";
    }
    void display()
    {
        System.out.println("Name is:"+name);
        System.out.println("Age is:"+age);
        System.out.println("Degree is:"+degree);
    }

    public static void main(String[] args)
    {
        Student obj=new Student();
        obj.display();
    }
}
##
Write a parameterized constructor in the Student class given below that initializes the name and department as class field with the string "Antony” and "AIML".
 class Student {

	String name;
	String dept;
	Student(String n,String d)
	{
	    this.name=n;
	    this.dept=d;
	}
	public void getName() {
	    System.out.println(name);
	}
	public void getDept() {
		System.out.println(dept);
	}
}

public class Sample {
	
	public static void main(String[] args) {
        Student obj=new Student("Antony","AIML");
        obj.getName();
        obj.getDept();

	}
}
##
A static method called maxInt (int num1,int num2) to calculate maximum between  98,43. Use constructor to initialize value as 0 and Math function to calculate maximum value.
import java.lang.Math;
 class Calculator {

int num1,num2;
Calculator()
{
    num1=0;
    num2=0;
}
static int maxInt(int num1,int num2)
{
    int r=Math.max(num1,num2);
    return r;
}

}

public class Sample {
	
	public static void main(String[] args) {
        Calculator obj=new Calculator();
        int res=Calculator.maxInt(98,43);
        System.out.println(res);
	}
}
##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[10.5,4.5,3.5]
public class Box
{
    double w,h,d;
    Box(double w,double h,double d)
    {
        this.w=w;
        this.h=h;
        this.d=d;
    }
    double volume()
    {
        return w*h*d;
    }

    public static void main(String[] args)
    {
        Box obj=new Box(10.5,4.5,3.5);
        System.out.println("Volume is "+obj.volume()+" units");
    }
}
##
Write  a Java program using copy constructor to print the area of Circle.
class Circle 
 { 
          int side1;
         
         Circle(int s1) 
         {  
             side1=s1;
         } 
        
         Circle(Circle obj) 
         { 
           this.side1=obj.side1;
         } 
        
        double perimeter() 
        { 
           return (3.14*side1*side1);
        } 
 } 
        //class to create Rectangle object and calculate area 
public class CopyConstructor 
 { 
    public static void main(String[] args) 
    { 
        Circle firstRect = new Circle(7); 
        Circle secondRect=new Circle(firstRect);
        System.out.println("Perimeter  of First Square : "+firstRect.perimeter());
        System.out.println("Perimeter of Second Square : "+secondRect.perimeter());
    } 
 } 
 
##
Write a Java program using default constructor and instance method to display Student name, age, Degree [John, 12, VII]
public class Student
{
    String name,degree;
    int age;
    Student()
    {
        name="John";
        age=12;
        degree="VII";
    }
    void display()
    {
        System.out.println("Name is:"+name);
        System.out.println("Age is:"+age);
        System.out.println("Degree is:"+degree);
    }

    public static void main(String[] args)
    {
        Student obj=new Student();
        obj.display();
    }
}
##
Write a Java program to implement the following IS-A relationship.
import java.util.Scanner;
class Vehicle 
{
    int Vehicle_ID;
}
class Car extends Vehicle
{
   
 String Brand_Name;
 String Model;
 void getDetails()
    {
       Scanner sc=new Scanner(System.in);
       Vehicle_ID=sc.nextInt();
       Brand_Name=sc.next();
       Model=sc.next();
    }
   
void display()
    {
        System.out.println("Vehicle Id is "+Vehicle_ID+" Vehicle Name is "+Brand_Name+" Model is "+Model);
    }
    
}
public class Main
{
    public static void main(String[] args)
    {
       Car obj=new Car();
       obj.getDetails();
       obj.display();
    }
}
##
Write a Java program for below situation, Student object contains member 'Stu_Id'. It contains  object named subject, which contains its own informations such as subject1,subject2,subject3,subject4.

class Subject
{
    String sub1,sub2,sub3,sub4;
    void dispSub(String a,String b,String c,String d)
    {
        this.sub1=a;
        this.sub2=a;
        this.sub3=a;
        this.sub4=a;
        System.out.println(a+" "+b+" "+c+" "+d);
    }
}
class Student
{
    int Stu_Id;
    
    void disp(int id)
    {
        this.Stu_Id=id;
        Subject obj=new Subject();
        System.out.println(id);
        obj.dispSub("Java","DS","TOC","CG");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Student obj=new Student();
        obj.disp(101);
    }
}
##
Create a class with a method that prints "This is parent class" and its subclass with another method that prints "This is child class". Now, create an object for each of the class and call
class Pclass{
  public void pmethod(){
   System.out.println("This is parent class");
  }
}

class Cclass extends Pclass{
  public void cmethod(){
    System.out.println("This is child class");
  }
}

public class Ans{
  public static void main(String[] args){
    Pclass obj=new Pclass();
    obj.pmethod();
    Cclass obj2=new Cclass();
    obj2.cmethod();
    obj2.pmethod();
  }
}	
##
Create a class with a method that prints "This is parent class" and its subclass 
class Pclass{
  public void pmethod(){
   System.out.println("This is parent class");
  }
}

class Cclass extends Pclass{
  public void cmethod(){
    System.out.println("This is child class");
  }
}

public class Ans{
  public static void main(String[] args){
    Pclass obj=new Pclass();
    obj.pmethod();
    Cclass obj2=new Cclass();
    obj2.cmethod();
    obj2.pmethod();
  }
}	
##
Write a Java Program to implement following IS-A relationship.
import java.util.*;
class College
{
    
}
class Student extends College
{
    int rollNo;
    String Name;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        rollNo=sc.nextInt();
        Name=sc.next();
    }
    void display()
    {
        System.out.println("RollNo: "+rollNo+"Name: "+Name);
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Student obj=new Student();
        obj.get();
        obj.display();
    }
}
##
Write a Java program for below situation, Employee object contains member 'Emp_Id'. It contains object named name, which contains its own informations such as Fname, Mname, Lname.
class Name
{
    String Fname;
    String Mname;
    String Lname;
    void dispName(String fn,String mn,String ln)
    {
        this.Fname=fn;
        this.Mname=mn;
        this.Lname=ln;
        System.out.println(fn+" "+mn+" "+ln);
    }
}
class Employee
{
    int Emp_Id;
    Name obj=new Name();
    void dispId(int id)
    {
        this.Emp_Id=id;
        System.out.println(id);
        obj.dispName("B","Leo","John");
    }
}

public class Main
{
    public static void main(String[] args)
    {
       Employee obj=new Employee();
       obj.dispId(101);
    }
}
##
Write a Java program to implement following inheritance scenario.
import java.util.Scanner;

class Student {

  String name;
  String cls;
  int roll_no;
  
  
  void getData() {

    Scanner sc=new Scanner(System.in);
    name=sc.next();
    cls=sc.next();
    roll_no=sc.nextInt();
  }

}

class Grade extends Student {
    float tmarks;
    float per;

void calGrade()
{
   tmarks=(float)98.5;    
   per=(float)tmarks/5;
}
 void display() {

    System.out.println("Roll Number is: "+roll_no+"\nYour name is: "+name+"\nYour class is: "+cls+"\nYour percentage is: "+per);

  }
}
public class Main
{
  public static void main(String args[]) {

    Grade obj = new Grade();
    obj.getData();
    obj.calGrade();
    obj.display();

  }
}
##
Create a class named 'Animal' which includes methods like eat() and sleep().
class Animal{
   void eat(){
    System.out.println("Calling Eat Method ");
  }
  void sleep(){
    System.out.println("Calling Sleep Method ");
  }
}

class Bird extends Animal{

  public void fly(){
    System.out.println("Calling Fly Method");
  }
}

public class Ans{
  public static void main(String[] args){
    Animal obj1=new Animal();
    Bird obj2=new Bird();
    obj1.eat();
    obj1.sleep();
    obj2.eat();
    obj2.sleep();
    obj2.fly();
  }
}	
##
Write a Java program for below situation, Employee object contains Emp_Id. It contains one more object named name, which contains its own informations such as Fname, Mname, Lname.
class Name
{
    String Fname;
    String Mname;
    String Lname;
    void dispName(String fn,String mn,String ln)
    {
        this.Fname=fn;
        this.Mname=mn;
        this.Lname=ln;
        System.out.println(fn+" "+mn+" "+ln);
    }
}
class Employee
{
    int Emp_Id;
    void dispID(int id)
    {
       this.Emp_Id=id;
       System.out.println(id);
       Name obj=new Name();
       obj.dispName("B","Leo","John");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Employee obj=new Employee();
        obj.dispID(101);
    }
}
##
Write a Java program for below scenario.  Consider there are 100 students in a college named "ABC", each student have their own unique roll number and name but the college remains the same among all the 100 students. The college field is declared as static so it can occupy memory only once. Create class and objects for 4 students.
class Student {
    String name;
    int rollno;
    static String college="ABC";
    void display()
    {
        System.out.println("Rollno is "+rollno+" Name is "+name+" College Name is "+college);
    }
}
public class StaticVariableExample {
    public static void main(String[] args) {
        
       Student student1=new Student();
        student1.rollno=101;
        student1.name="Student1";
        student1.display();
        
        Student student2=new Student();
        student2.rollno=102;
        student2.name="Student2";
        student2.display();
        
        Student student3=new Student();
        student3.rollno=103;
        student3.name="Student3";
        student3.display();
        
        Student student4=new Student();
        student4.rollno=104;
        student4.name="Student4";
        student4.display();
    }
}
##
Write a Java program for below situation, Employee object contains member 'name' and It contains object named address, which contains its own informations such as doorno, street,b city,  etc.
class Address
{
    int doorno;
    String street;
    String city;
    void dispAddr(int d_no,String st,String City)
    {
        this.doorno=d_no;
        this.street=st;
        this.city=City;
        System.out.println(d_no+","+st+","+City);
    }
}
class Employee
{
    String name;
    void dispName(String s)
    {
        this.name=s;
        System.out.println(s);
        Address addr=new Address();
        addr.dispAddr(10,"100 Feet Road","Chennai");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Employee obj=new Employee();
        obj.dispName("Leo");
    }
}
##
Create a final class 'Company' with Company Name,Company Id and Address as its member, make Company_Id as final variable with value "ED12G45" and write print() to display its member in the Output.
final class Company
{
    final String Company_Id="ED12G45";
    String name="ABC Foods";
    String addr="Chennai";
    void print()
    {
        System.out.println("Company Details are,"+"\nId is "+Company_Id+"\nName is "+name+"\nAddress is "+addr);
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.print();
}
}
##
Create a class named 'Parent' which includes methods display(). [display() will print "Parent Class"]
class Parent {

  public void display()
  {
    System.out.println("Parent Class");
  }
}

class Child extends Parent {
  public void display()
  {
    System.out.println("Child Class");
  } 
  public void print()
  {
    display();
    super.display();
  }
}

public class Main {
  public static void main(String[] args) {
      Child obj=new Child();
      obj.print();
  }
}
##
Create a class named 'Sports' which includes its constructor. [constructor will print "Sports Class"]
class Sports {

  Sports()
  {
      System.out.println("Sports Class");
  }
  
}

class Indoor extends Sports {
    Indoor()
    {
        super();
        System.out.println("Indoor Games Class");
    }
}
class Chess extends Indoor {
    Chess()
    {
        super();
        System.out.println("Chess Class");
    }
}
public class Main {
  public static void main(String[] args) {
        Chess obj=new Chess();
  }
}
##
Create a class named 'Employee' which includes,
import java.util.*;
class Employee
{
   String Eid;
   float salary;
   Employee()
   {
       System.out.println("Default Constructor of Employee Class");
   }
   Employee(String id,float s)
   {
       this();
       this.Eid=id;
       this.salary=s;
       System.out.println("Parameterized Constructor of Employee Class");
   }
   void display()
   {
       System.out.println("Employee_id="+Eid+" Salary="+salary);
   }
}
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        String id=sc.next();
        float salary=sc.nextFloat();
        Employee obj=new Employee(id,salary);
        obj.display();
    }
}
##
Create a class named 'Gadgets' which includes methods display(). [display() will print "I am a Gadget"]
class Gadgets {

  public void display(){
    System.out.println( "I am a Gadget");
  }
}

class Laptop extends Gadgets{

  public void display(){
    System.out.println("I am a Laptop");
  }

  public void print(){
    display();
    super.display();
  }
}

public class Main {
  public static void main(String[] args) {
    Laptop obj = new Laptop();
    obj.print();
  }
}
##
Create a class named 'Animal' which includes its constructor. [constructor will print " I am an Animal"]
class Animal {

   Animal() {
    System.out.println("I am an animal");
  }
}

class Dog extends Animal {


  Dog() {
    super();
    System.out.println("I am a dog");
  }
}
public class Main {
  public static void main(String[] args) {
    Dog dog1 = new Dog();
  }
}
##
Create a class named 'Employee' which includes,
import java.util.*;
class Employee
{
    String E_id;
    float salary;
    Employee()
    {
        System.out.println("Default Constructor of Employee Class");
    }
    Employee(String s,float f)
    {
        this();
        this.E_id=s;
        this.salary=f;
        System.out.println("Parameterized Constructor of Employee Class");
    }
    void display()
    {
        System.out.println("Employee_id="+E_id+" Salary="+salary);
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        String e;
        float f;
        e=sc.next();
        f=sc.nextFloat();
        Employee obj=new Employee(e,f);
        obj.display();
    }
}
##
Write a program to Read input ,split word from sentence.
import java.util.Scanner;
	public class Main{  
	public static void main(String args[]){  
	Scanner sc = new Scanner(System.in);  
	String str = sc.nextLine();
	StringBuilder sb=new StringBuilder(str);
	String str1=sb.toString();
 
	String[] words=str1.split("\\s");
	for(String w:words){  
	System.out.println(w);  
	}  
	}} 
##
Create a string then print particular string using substring() with given end index value. (0-7) , (0-5) ,(3-5)

import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 = sc.nextLine();

 
    System.out.println(str1.substring(0, 7));  

    
    System.out.println(str1.substring(0, 5));  


    
    System.out.println(str1.substring(3, 5));  
  }
}
##
Write a java program to print returns character at the index of 2 using stringconcept.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

   
    System.out.println(str1.charAt(2));


  }
}
##
Given a string, return a new string made of n copies of the first 2 chars of the original string,where n is the length of the string. The string may be any length. If there are fewer than 2 chars, use whatever is there. If input is "Wipro" then output should be "WiWiWiWiWi".

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String str = in.nextLine();
        System.out.println(nCopyString(str));
    }

    static String nCopyString(String s) {
        int n = s.length();
        String base = s.substring(0, 2);

        String str = "";

        for(int i=0; i<n; i++)
            str += base;
            
        return str;
    }

##
Given a string of even length, return the first half. So the string "CatDog" yields "Cat". If the string length is odd number then return null.
import java.util.Scanner;
public class Assignment4 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str = sc.nextLine();
		
		String output;
		
		if (str.length() % 2 == 0) {
			output = str.substring(0, str.length() / 2);
		} else {
			output = null;
		}
		
		System.out.println(output);
	}

}
##
Write a java program to use reverse() method of the StringBuilder class reverses the current String.
import java.util.*;
public class StringBufferExample5{  
public static void main(String args[]){  
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.reverse();  
System.out.println(sb);  
}  
}  
##
Write a java program passing string str1 value in the StringBuffer object and “sb” is pointing to that object i.e. the address of the StringBuffer object is stored in reference variable sb.
import java.util.*;
public class CapacityTest2 { 
public static void main(String[ ] args) 
{ 
  Scanner sc=new Scanner(System.in);
  String str1=sc.nextLine();
  StringBuilder sb = new StringBuilder(str1); 
  int length = sb.length(); 
  int capacity = sb.length() + 16; 
  
  System.out.println(length); 
  System.out.println(capacity); 
  } 
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  
//String s1="javatpoint is a very good website";
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String str = sc.nextLine();

String replaceString=str.replaceAll("a","e");//replaces all occurrences of "a" to "e"  
System.out.println(replaceString);  
}}
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “pot” and “lap”, then output should be “ploatp”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Write a java program to use delete() method of the StringBuilder class deletes the String from the specified beginIndex to endIndex.
import java.util.*;
public class StringBufferExample4{  
public static void main(String args[]){
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.delete(1,3);  
System.out.println(sb);  
}  
}  
##
Write a program to Read input ,split word from sentence and use string builder.
import java.util.Scanner;
	public class Main{  
	public static void main(String args[]){  
	Scanner sc = new Scanner(System.in);  
	String str = sc.nextLine();
	StringBuilder sb=new StringBuilder(str);
	String str1=sb.toString();
 
	String[] words=str1.split("\\s");
	for(String w:words){  
	System.out.println(w);  
	}  
	}} 
##
write a java program to print two value using toString().
public class Test { 

   public static void main(String args[]) {
      Integer x = 5;

      System.out.println(x.toString());  
      System.out.println(Integer.toString(12)); 
   }
}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged. If the input is "xwelcomex", then output is "welcome".

import java.util.*;
public class Assignment7 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String str =sc.nextLine();
		
		if (str.charAt(0) == 'x')
			str = str.substring(1, str.length());
		
		if (str.charAt(str.length() - 1) == 'x')
			str = str.substring(0, str.length() - 1);
		
		System.out.println(str);

	}

}
##
Write a java program using StringTokenizer class that tokenizes a string "My name is Java Programming" on the basis of whitespace.
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("My name is Java Programming"," ");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  
##
Write a java program to calculates the number of tokens present in the tokenizer String.

import java.util.StringTokenizer;    
public class StringTokenizer3  
{    
  
 public static void main(String args[])  
 {    
   
   StringTokenizer st = new StringTokenizer("Hello Everyone Have a nice day"," ");    
          
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program to use string tokenizer and use while loop to process the whole string(see sample testcase) until no more token is available.
import java.util. * ;
import java.io. * ;
public class HasMoreTokensMethod {
  public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    String myString =sc.nextLine();
    StringTokenizer st = new StringTokenizer(myString);
    System.out.println("Input string is: " + myString);
    int n = st.countTokens();
    while (n != 0)
    if (st.hasMoreTokens()) {
      System.out.println("The token is present");
      n--;
    }
    System.out.println("There is no more token in the string");
  }
}
##
write a java program to print multiple word using string builder in java
public class StringBuilderExample{  
public static void main(String args[]){  
StringBuilder sb=new StringBuilder("Hello\n");  
sb.append("Java");//now original string is changed  
System.out.println(sb);//prints Hello Java  
}  
}  
##

---
Write a Java to implement Regular Inner Class concept for the below Scenario.Create a class "Progress_Report" with String type Private members "Stu_Id" and "Password" and Create a class "Exam" as inner class with private float members " mark1,mark2,mark3" and public member function "display" to display Username and Password with Total marks.In main() Create Object for classes and access its methods.[Username="User12345",Password="Student_1", mark1=89,mark2=78,mark3=67]
class stud{
    private String username = "User12345";
    private String stud = "Student_1";
    class mark{
        private float mark1=89,mark2=78,mark3=67;
        void display(){
            System.out.println(username+" "+stud+" "+(mark1+mark2+mark3));
        }
    }
}
public class main{
    public static void main(String args[]){
        stud.mark obj = new stud().new mark();
        obj.display();
    }
}
##
Write a Java a program to implement static inner class for the below scenario.Create a Class "NetBanking" with private static member "UserName" [User@123], then1. Create a static inner class "MailVerifiedAccount" with a member function "validate()" to display  "Mail Verified Account ",2. Create a static inner class "MobileVerifiedAccount" with a member function "validate()" to display  "Mobile Verified Account"In main() access all function using its corresponding Object.
class NetBanking
{
    private static String username="User@123";
    class MailVerifiedAccount
    {
        void validate()
        {
            System.out.println(username + " is Mail Verified Account");
        }
    }
    class MobileVerifiedAccount
    {
        void validate()
        {
            System.out.println(username + " is Mobile Verified Account");
        }
    }
}
public class main{
    public static void main(String args[])
    {
        NetBanking.MailVerifiedAccount obj1 = new NetBanking().new MailVerifiedAccount();
        obj1.validate();
        NetBanking.MobileVerifiedAccount obj2 = new NetBanking().new MobileVerifiedAccount();
        obj2.validate();
    }
}
##
Write a Java Program using Method Local Inner Class for below Scenario.Create a class "Department" with1. String value "Financial and Management Department"2. Create display() have String "ABC Industries" and inner class as "Inner"3. Inner class  print() to display departmentIn main() access all function using its corresponding Object.
class Department
{
    private String dept="Financial and Management Department";
    class Inner
    {
        private String comp="ABC Industries";
        void display()
        {
            System.out.println("Department is "+dept);
            System.out.println("Company is "+comp);
        }
    }
}
public class Main{
    public static void main(String args[])
    {
        Department.Inner obj = new Department().new Inner();
        obj.display();
    }
}
##
Write a Java to implement Regular Inner Class concept for the below Scenario.Create a class "Login" with String type Private members "User Name " and "Password" and Create a class "ValidateCredentials" as inner class with public member function "validate" to display Username and Password.In main() Create Object for classes and access its methods.[Username="Saveetha",Password="12345"]
class Login
{
    private String username="Saveetha",pass="12345";
    class ValidateCredentials
    {
        void validate()
        {
            System.out.println(username+" "+pass);
        }
    }
}
public class Main{
    public static void main(String args[])
    {
        Login.ValidateCredentials obj = new Login().new ValidateCredentials();
        obj.validate();
    }
}
##
Write a Java a program to implement static inner class for the below scenario.Create a Class "NetBanking" with private static member "UserName" [User@123], then1. Create a static inner class "MailVerifiedAccount" with a member function "validate()" to display  "Mail Verified Account ",2. Create a static inner class "MobileVerifiedAccount" with a member function "validate()" to display  "Mobile Verified Account"In main() access all function using its corresponding Object.
class NetBanking
{
    private static String username="User@123";
    class MailVerifiedAccount
    {
        void validate()
        {
            System.out.println(username + " is Mail Verified Account");
        }
    }
    class MobileVerifiedAccount
    {
        void validate()
        {
            System.out.println(username + " is Mobile Verified Account");
        }
    }
}
public class main{
    public static void main(String args[])
    {
        NetBanking.MailVerifiedAccount obj1 = new NetBanking().new MailVerifiedAccount();
        obj1.validate();
        NetBanking.MobileVerifiedAccount obj2 = new NetBanking().new MobileVerifiedAccount();
        obj2.validate();
    }
}
##
Write a Java Program using Method Local Inner Class for below Scenario.Create a class "MethodLocal" with1. String value "Outer Class Variable"2. Create display() with String="Inner Class Variable" and  create a inner class as "Inner"3. Inner class have print() to display above both Strings.In main() access all function using its corresponding Object.
class MethodLocal{
    String str = "Outer Class Variable";
    
    void display(){
        System.out.println(str);
    }
    
    class Inner{
        String str2 = "Inner Class Variable";
        
        void print(){
            display();
            System.out.println(str2);
        }
    }
}

public class Main{
    public static void main(String args[]){
        MethodLocal.Inner obj = new MethodLocal().new Inner();
        obj.print();
    }
}
##
Write a Java to implement Regular Inner Class concept for the below Scenario.Create a class "Employee" with String type Private members "Emp_Id" and "Emp_Name" and Create a class "Salary" as inner class with private float members " Basic, Allowance" and public member function "display" to display Employee Id, and Name with salary.In main() Create Object for classes and access its methods.[Emplyee id="EMP123",Employee Name="John", Basic=22500,Allowance=2300]
class Employee
{
    private String Emp_Id="EMP123",Emp_Name="John";
    class Salary
    {
        private float Basic=22500,Allowance=2300;
        void display()
        {
            System.out.println(Emp_Id+" "+Emp_Name+" "+(Basic+Allowance));
        }
    }
}
public class Main{
    public static void main(String args[])
    {
        Employee.Salary obj = new Employee().new Salary();
        obj.display();
    }
}
##
Write a Java a program to implement static inner class for the below scenario.Create a Class "NetBanking" with private static member "UserName" [User@123], then1. Create a static inner class "MailVerifiedAccount" with a member function "validate()" to display  "Mail Verified Account ",2. Create a static inner class "MobileVerifiedAccount" with a member function "validate()" to display  "Mobile Verified Account"In main() access all function using its corresponding Object.
class NetBanking
{
    private static String username="User@123";
    class MailVerifiedAccount
    {
        void validate()
        {
            System.out.println(username + " is Mail Verified Account");
        }
    }
    class MobileVerifiedAccount
    {
        void validate()
        {
            System.out.println(username + " is Mobile Verified Account");
        }
    }
}
public class main{
    public static void main(String args[])
    {
        NetBanking.MailVerifiedAccount obj1 = new NetBanking().new MailVerifiedAccount();
        obj1.validate();
        NetBanking.MobileVerifiedAccount obj2 = new NetBanking().new MobileVerifiedAccount();
        obj2.validate();
    }
}
##
Write a Java Program using Method Local Inner Class for below Scenario.Create a class "MethodLocal" with1. String value "Outer Class Variable"2. Create display() with String="Inner Class Variable" and  create a inner class as "Inner"3. Inner class have print() to display above both Strings.In main() access all function using its corresponding Object.
class MethodLocal{
    String str = "Outer Class Variable";
    
    void display(){
        System.out.println(str);
    }
    
    class Inner{
        String str2 = "Inner Class Variable";
        
        void print(){
            display();
            System.out.println(str2);
        }
    }
}

public class Main{
    public static void main(String args[]){
        MethodLocal.Inner obj = new MethodLocal().new Inner();
        obj.print();
    }
}
##
Create 3 classes College, Department and Student. Class Student extends Class Department and Class Department extends Class College.Class College has print_cgeName() and it displays “Saveetha Engineering College”Class Department has print_deptName() and displays “Computer Science and Engineering"Class Student has print_stuName and displays “John Briito"In Main class create Object for Student class and access all methods.
class College
{
    void print_cgeName()
    {
        System.out.println("Saveetha Engineering College");
    }
}
class Department extends College
{
    void print_deptName()
    {
        System.out.println("Computer Science and Engineering");
    }
}
class Student extends Department
{
    void print_stuName()
    {
        System.out.println("John Britto");
    }
}
public class Main{
    public static void main(String args[])
    {
        Student obj = new Student();
        obj.print_cgeName();
        obj.print_deptName();
        obj.print_stuName();
    }
}
##
Create 3 classes Grand Parent, Parent and Child . Class Child extends Class Parent and Class Parent extends Class Grand Parent. Create Main class to Access all Constuctors by using Child class Object .Grand_Parent Class contains its own Constructor to display "Grand Parent Class"Parent Class contains its own Constructor to display " Parent Class"Child Class contains its own Constructor to display " Child Class"
import java.util.*;
class GrandParent{
    GrandParent(){
        System.out.println("Grand_Parent Class");
    }
    
}

class Parent extends GrandParent{
    Parent(){
        System.out.println("Parent Class");
    }
}

class Child extends Parent{
    Child(){
        System.out.println("Child Class");
    }
}

public class Main{
    public static void main(String args[]){
        Child obj = new Child();
    }
}
##
Write a Java program to implement the following Scenario.Create object for Scanner in "input" class.In Main class create Object for Balance Class and access all methods.calc()  used to calculate Salary of the employee.
import java.util.*;
class in 
{
     Scanner sc=new Scanner(System.in);
}
class Bank_Account extends in
{
    String name,acc_no;
    float Tot_Bal;
   
    void get_Details()
    {
       
        name=sc.next();
       acc_no=sc.next();
        Tot_Bal=sc.nextFloat();
    }
}
class Debit extends Bank_Account
{float debit_amt;
    void get_Debit()
    {
                
 debit_amt=sc.nextFloat();
    }
}
class Balance extends Debit
{
    
    float bal;
    void calc()
    {
        bal=Tot_Bal+debit_amt;
      
    }
    void display()
    {
        System.out.println("Employee Name is "+name);
        System.out.println("Employee Id is "+acc_no);
        System.out.println("Salary is "+bal);

    }
}

public class Main {
    public static void main(String[] args) {
Balance obj=new Balance();
obj.get_Details();
        obj.get_Debit();
        obj.calc();
        obj.display();
    }
}
##
Create 3 classes College, Department and Student. Class Student extends Class Department and Class Department extends Class College.Class College has print_cgeName() and it displays “Saveetha Engineering College”Class Department has print_deptName() and displays “Computer Science and Engineering"Class Student has print_stuName and displays “John Briito"In Main class create Object for Student class and access all methods.
class College
{
    void print_cgeName()
    {
        System.out.println("Saveetha Engineering College");
    }
}
class Department extends College
{
    void print_deptName()
    {
        System.out.println("Computer Science and Engineering");
    }
}
class Student extends Department
{
    void print_stuName()
    {
        System.out.println("John Britto");
    }
}
public class Main{
    public static void main(String args[])
    {
        Student obj = new Student();
        obj.print_cgeName();
        obj.print_deptName();
        obj.print_stuName();
    }
}
##
Create 3 classes A, B and C. Class C extends Class B and Class B extends Class A. Each class has an method display(). Call class A’s display() from class C.Class A’s display() have statement as “Class A’s Display”Class B’s display() have statement as “Class B’s Display”Class C’s display() have statement as “Class C’s Display”
import java.util.*;
class A
{
    void display(){
        System.out.println("Class A's display");
    }
    }
class B extends A
{
    void display()
    {
        super.display();
        System.out.println("Class B's display");
    }
}
class C extends B
{
    void display()
    {
        super.display();
        System.out.println("Class C's display");
    }
}
public class Main
{
    public static void main(String[] args)
    {
         C obj = new C();
         obj.display();
    }
}
##
Write a Java program to implement the following Scenario.Create object for Scanner in "input" class.In Main class create Object for Balance Class and access all methods.calc()  used to calculate Salary of the employee.
import java.util.*;
class Employee
{
    String name,id;
    float basic;
    Scanner sc = new Scanner(System.in);
    void get_Details()
    {
        name=sc.nextLine();
        id=sc.nextLine();
        basic=sc.nextInt();
    }
}
class Manager extends Employee
{
    int amt;
    void get_Allowance()
    {
        amt=sc.nextInt();
    }
}
class Salary extends Manager
{
    float sal;
    void cal()
    {
        sal=basic+amt;
    }
    void Display()
    {
        System.out.println("Employee Name is "+name);
        System.out.println("Employee Id is "+id);
        System.out.println("Salary is "+sal);
    }
}
public class Main{
    public static void main(String args[])
    {
        Salary obj = new Salary();
        obj.get_Details();
        obj.get_Allowance();
        obj.cal();
        obj.Display();
    }
}
##
Create 3 classes College, Department and Student. Class Student extends Class Department and Class Department extends Class College.Class College has print_cgeName() and it displays “Saveetha Engineering College”Class Department has print_deptName() and displays “Computer Science and Engineering"Class Student has print_stuName and displays “John Briito"In Main class create Object for Student class and access all methods.
class College
{
    void print_cgeName()
    {
        System.out.println("Saveetha Engineering College");
    }
}
class Department extends College
{
    void print_deptName()
    {
        System.out.println("Computer Science and Engineering");
    }
}
class Student extends Department
{
    void print_stuName()
    {
        System.out.println("John Britto");
    }
}
public class Main{
    public static void main(String args[])
    {
        Student obj = new Student();
        obj.print_cgeName();
        obj.print_deptName();
        obj.print_stuName();
    }
}
##
Create 3 classes A, B and C. Class C extends Class B and Class B extends Class A. Each class has an method display(). Call class A’s display() from class C.Class A’s display() have statement as “Class A’s Display”Class B’s display() have statement as “Class B’s Display”Class C’s display() have statement as “Class C’s Display”
import java.util.*;
class A
{
    void display(){
        System.out.println("Class A's display");
    }
    }
class B extends A
{
    void display()
    {
        super.display();
        System.out.println("Class B's display");
    }
}
class C extends B
{
    void display()
    {
        super.display();
        System.out.println("Class C's display");
    }
}
public class Main
{
    public static void main(String[] args)
    {
         C obj = new C();
         obj.display();
    }
}
##
Write a Java program to implement the following Scenario.Create object for Scanner in "input" class.In Main class create Object for Balance Class and access all methods.calc()  used to calculate Salary of the employee.
import java.util.*;
class Employee
{
    String name,id;
    float basic;
    Scanner sc = new Scanner(System.in);
    void get_Details()
    {
        name=sc.nextLine();
        id=sc.nextLine();
        basic=sc.nextInt();
    }
}
class Manager extends Employee
{
    int amt;
    void get_Allowance()
    {
        amt=sc.nextInt();
    }
}
class Salary extends Manager
{
    float sal;
    void cal()
    {
        sal=basic+amt;
    }
    void Display()
    {
        System.out.println("Employee Name is "+name);
        System.out.println("Employee Id is "+id);
        System.out.println("Salary is "+sal);
    }
}
public class Main{
    public static void main(String args[])
    {
        Salary obj = new Salary();
        obj.get_Details();
        obj.get_Allowance();
        obj.cal();
        obj.Display();
    }
}
##
Write a Java a program to implement static inner class for the below scenario.Create a Class "PaymentDetails" with private static member "Acc_num" [7866AC43], then1. Create a static inner class "ValidateCreditCardDetails" with a member function "validate()" to display  "Account Validated",2. Create a static inner class "ValidateDebitCards" with a member function "validate()" to display  "Account Debit Card Validated"In main() access all function using its corresponding Object.
public class PaymentDetails
{
    private static String Acc_num="7866AC43";
    static class ValidateCreditCardDetails
    {
        void validate()
        {
            System.out.printf("%s Account Validated\n",Acc_num);
        }
    }
    static class ValidateDebitCards
    {
        void validate()
        {
            System.out.printf("%s Debit Card Validated",Acc_num);
        }
    }
    public static void main(String[] args)
    {
        PaymentDetails.ValidateCreditCardDetails vc = new ValidateCreditCardDetails();
        vc.validate();
        PaymentDetails.ValidateDebitCards vb = new  ValidateDebitCards();
        vb.validate();
    }
}
##
Write a Java Program using Method Local Inner Class for below Scenario.Create a class "Department" with1. String value "Financial and Management Department"2. Create display() have String "ABC Industries" and inner class as "Inner"3. Inner class  print() to display departmentIn main() access all function using its corresponding Object.
public class MethodLocal
{
    private  String str="Department is Financial and Management Department";
    
           class Inner
           {
              String s1 = "Company is ABC Industries";
               public void print()
               {
                   System.out.println(str);
                    System.out.println(s1);
                  
               }
           }
    
  
    public static void main(String[] args)
    {
MethodLocal.Inner obj=new MethodLocal().new Inner();

obj.print();

    }
}
##
Write a Java Program using Method Local Inner Class for below Scenario.Create a class "Name" with1. String value "Johnson"2. Create display() with  a inner class as "Inner"3. Inner class have print() to display nameIn main() access all function using its corresponding Object.
class Name{
    String name = "Johnson";

    class Inner{
        void print(){
            System.out.println("Name given in Outer Class is "+name);
        }
    }
    
}

public class Main{
    public static void main(String args[]){
        Name.Inner obj = new Name().new Inner();
        obj.print();
    }
}
##
Create 3 classes College, Department and Student. Class Student extends Class Department and Class Department extends Class College.Class College has print_cgeName() and it displays “Saveetha Engineering College”Class Department has print_deptName() and displays “Computer Science and Engineering"Class Student has print_stuName and displays “John Briito"In Main class create Object for Student class and access all methods.
class College
{
    void print_cgeName()
    {
        System.out.println("Saveetha Engineering College");
    }
}
class Department extends College
{
    void print_deptName()
    {
        System.out.println("Computer Science and Engineering");
    }
}
class Student extends Department
{
    void print_stuName()
    {
        System.out.println("John Britto");
    }
}
public class Main{
    public static void main(String args[])
    {
        Student obj = new Student();
        obj.print_cgeName();
        obj.print_deptName();
        obj.print_stuName();
    }
}
##
Create 4 classes Student, Marks, Total and Average. Class Average extends Class Total and Class Total extends Class Marks. Class Marks extends Class Student.Create Main class to Access all Constuctors by using Average class Object .Student Class contains its own Constructor to display "Student Class"Marks Class contains its own Constructor to display " Mark Class"Total Class contains its own Constructor to display " Total Class"Average Class contains its own Constructor to display " Average Class"
class Student {
    public Student() {
        System.out.println("Student Class");
    }
}

class Marks extends Student {
    public Marks() {
        System.out.println("Marks Class");
    }
}

class Total extends Marks {
    public Total() {
        System.out.println("Total Class");
    }
}

class Average extends Total {
    public Average() {
        System.out.println("Average Class");
    }
}

public class Main {
    public static void main(String[] args) {
        Average averageObj = new Average();
    }
}
##
Write a Java program to implement the following Scenario.Create object for Scanner in "input" class.In Main class create Object for Percentage Class and access all methods
import java.util.*;
class Student
{
    String name,id;
    int m1,m2,m3,m4,m5;
    Scanner sc = new Scanner(System.in);
    void get_Details()
    {
        name=sc.nextLine();
        id=sc.nextLine();
    }
}
class Marks extends Student
{
    void get_Marks()
    {
        m1=sc.nextInt();
        m2=sc.nextInt();
        m3=sc.nextInt();
        m4=sc.nextInt();
        m5=sc.nextInt();
    }
}
class Percentage extends Marks
{
    int total;
    float per;
    void cal()
    {
        total=m1+m2+m3+m4+m5;
        per=total/5;
    }
    void Display()
    {
        System.out.println("Student Name is "+name);
        System.out.println("Registeration Number is "+id);
        System.out.println("Total is "+total);
        System.out.println("Percentage is "+per);
    }
}
public class Main{
    public static void main(String args[])
    {
        Percentage obj = new Percentage();
        obj.get_Details();
        obj.get_Marks();
        obj.cal();
        obj.Display();
    }
}
##
Create 3 classes Shapes, Circle and Area. Class Area extends Class Circle and Class Circle extends Class Shapes.Class Shapes has print_Shape() and it displays “Shapes Class”Class Circle has get(), get radius of circle as input from user.Class Area has calc() , it calculates the area of circle and displays the result.In Main class create Object for Area class and access all methods.
import java.util.*;

class Shapes{
    void print_Shape(){
        System.out.println("Shapes Class");
    }
}

class Circle extends Shapes{
    double r ;
    void get(){
        Scanner sc = new Scanner(System.in);
        r = sc.nextDouble();
    }
}

class Area extends Circle{
    void calc(){
        System.out.println("Area of Circle is "+(3.14 * r * r));
    }
}

public class Main{
    public static void main(String args[]){
        Area obj = new Area();
        obj.print_Shape();
        obj.get();
        obj.calc();
    }
}
##
Create 3 classes A, B and C. Class C extends Class B and Class B extends Class A. Each class has an method display(). Call class A’s display() from class C.Class A’s display() have statement as “Class A’s Display”Class B’s display() have statement as “Class B’s Display”Class C’s display() have statement as “Class C’s Display”
import java.util.*;
class A
{
    void display(){
        System.out.println("Class A's display");
    }
    }
class B extends A
{
    void display()
    {
        super.display();
        System.out.println("Class B's display");
    }
}
class C extends B
{
    void display()
    {
        super.display();
        System.out.println("Class C's display");
    }
}
public class Main
{
    public static void main(String[] args)
    {
         C obj = new C();
         obj.display();
    }
}
##
Write a Java program to implement the following Scenario.Create object for Scanner in "input" class.In Main class create Object for Percentage Class and access all methods
import java.util.*;
class Input{
    Scanner sc = new Scanner(System.in);
}

class Student extends Input{
    String name,reg_no;
    int m1,m2,m3,m4,m5;
    
    void get_Details(){
        name = sc.nextLine();
        reg_no = sc.nextLine();
    }
}

class Marks extends Student{
    void get_Marks(){
        m1= sc.nextInt();
        m2= sc.nextInt();
        m3= sc.nextInt();
        m4= sc.nextInt();
        m5= sc.nextInt();
    }
}

class Percentage extends Marks{
    int total;
    float per;
    void calc(){
        get_Details();
        get_Marks();
        total = m1+m2+m3+m4+m5;
        per = (total/5);
    }
    
    void Display(){
        calc();
        System.out.println("Student Name is "+name);
        System.out.println("Registeration Number is "+reg_no);
        System.out.println("Total is "+total);
        System.out.println("Percentage is "+per);
    }
}

public class Main{
    public static void main(String args[]){
        Percentage obj = new Percentage();
        obj.Display();
    }
}
##
Create 3 classes Shapes, Circle and Area. Class Area extends Class Circle and Class Circle extends Class Shapes.Class Shapes has print_Shape() and it displays “Shapes Class”Class Circle has get(), get radius of circle as input from user.Class Area has calc() , it calculates the area of circle and displays the result.In Main class create Object for Area class and access all methods.
import java.util.*;

class Shapes{
    void print_Shape(){
        System.out.println("Shapes Class");
    }
}

class Circle extends Shapes{
    double r ;
    void get(){
        Scanner sc = new Scanner(System.in);
        r = sc.nextDouble();
    }
}

class Area extends Circle{
    void calc(){
        System.out.println("Area of Circle is "+(3.14 * r * r));
    }
}

public class Main{
    public static void main(String args[]){
        Area obj = new Area();
        obj.print_Shape();
        obj.get();
        obj.calc();
    }
}
##
Create 3 classes Grand Parent, Parent and Child . Class Child extends Class Parent and Class Parent extends Class Grand Parent. Create Main class to Access all Constuctors by using Child class Object .Grand_Parent Class contains its own Constructor to display "Grand Parent Class"Parent Class contains its own Constructor to display " Parent Class"Child Class contains its own Constructor to display " Child Class"
import java.util.*;
class GrandParent{
    GrandParent(){
        System.out.println("Grand_Parent Class");
    }
    
}

class Parent extends GrandParent{
    Parent(){
        System.out.println("Parent Class");
    }
}

class Child extends Parent{
    Child(){
        System.out.println("Child Class");
    }
}

public class Main{
    public static void main(String args[]){
        Child obj = new Child();
    }
}
##
Write a Java program to implement the following Scenario.Create object for Scanner in "input" class.In Main class create Object for Balance Class and access all methods.calc()  used to calculate balance of the account after ampunt debited.
import java.util.*;
class in 
{
     Scanner sc=new Scanner(System.in);
}
class Bank_Account extends in
{
    String name,acc_no;
    float Tot_Bal;
   
    void get_Details()
    {
       
        name=sc.next();
       acc_no=sc.next();
        Tot_Bal=sc.nextFloat();
    }
}
class Debit extends Bank_Account
{float debit_amt;
    void get_Debit()
    {
                
 debit_amt=sc.nextFloat();
    }
}
class Balance extends Debit
{
    
    float bal;
    void calc()
    {
        bal=Tot_Bal-debit_amt;
      
    }
    void display()
    {
        System.out.println("Name is "+name);
        System.out.println("Account Number is "+acc_no);
        System.out.println("Balance is "+bal);

    }
}

public class Main {
    public static void main(String[] args) {
Balance obj=new Balance();
obj.get_Details();
        obj.get_Debit();
        obj.calc();
        obj.display();
    }
}
##
Create 3 classes Vehicle, Car and Alto. Class Alto extends Class Car and Class Car extends Class Vehicle.Class Vehicle has display() and it displays “Vehicle Class”Class Car has print() and displays “Car Class”Class Alto has show() and displays “Alto Class"In Main class create Object for Alto class and access all methods.
class Vehicle{
    public void disp(){
        System.out.println("Vehicle Class");
    }
}
class Car extends Vehicle{
    public void print(){
        System.out.println("Car Class");
    }
}
class Alto extends Car{
    public void show(){
        System.out.println("Alto Class");
    }
}
public class Main{
    public static void main(String agrs[]){
        Alto a = new Alto();
        a.disp();
        a.print();
        a.show();
    }
}
##
Implement the Java Program for below Scenario.Inheritance in Java - jCombatParent have method " display" to display "This is Parent Class".Child1 have method "print" to display "This is Child1 Class"Child1 have method "print" to display "Child2 Class".In  Main create object for both child1 and child2 and access its member function.
class Parent
{
    void display()
    {
        System.out.println("This is Parent Class");
    }
}
class Child1 extends Parent
{
    void print()
    {
        System.out.println("This is Child1 Class");
    }
}
class Child2 extends Parent
{
    void print()
    {
        System.out.println("This is Child2 Class");
    }
}
public class Main{
    public  static void main(String args[])
    {
        Child1 obj1 = new Child1();
        obj1.display();
        obj1.print();
        
        Child2 obj2 = new Child2();
        obj2.display();
        obj2.print();
    }
}
##
Write a Java Program to implement below Scenario.Account Class have interest rate as 4.5% common to all types of account. If Fixed Deposit type of Account then interest rate will be 7%. If Current type of Account then interest rate will be 6.5%.
class Account{
    double IR=4.5;
    void display()
    {
        System.out.println("Interest Rate of Fixed Deposit Account before Change::");
        System.out.println("Account's Interest Rate is : "+IR+"%");
        System.out.println("Interest Rate of Current Account before Change::");
        System.out.println("Account's Interest Rate is : "+IR+"%");
        
    }
}
class FixedDeposit extends Account
{
    void display_IR()
    {
        IR=7.0;
        System.out.println("Interest Rate of Fixed Deposit Account after Change::");
        System.out.println("Account's Interest Rate is : "+IR+"%");
    }
}
class Current extends Account
{
    void display_IR()
    {
        IR=6.5;
        System.out.println("Interest Rate of Current Account after Change::");
        System.out.println("Account's Interest Rate is : "+IR+"%");
    }
}
public class Main{
    public static void main(String args[])
    {
        FixedDeposit obj1 = new FixedDeposit();
        obj1.display();
        obj1.display_IR();
        
        Current obj2 = new Current();
        obj2.display_IR();
    }
}
##
Write a Java Program for below Scenario.1. Media Class have constructor to display "Parent Class is Media"2. Magazine Class constructor call its parent constructor and display "Magazine is the one of the Child of Media Class"3. Channel Class constructor call its parent constructor and display "Channel is the one of the Child of Media Class"4. In Main class create object for Child class and access its corresponding Constructor
class Media{
    Media(){
        System.out.println("Parent Class is Media");
    }
}

class Channel extends Media{
    Channel(){
        System.out.println("Channel is the one of the Child of Media Class");
    }
}

class Magazine extends Media{
    Magazine(){
        System.out.println("Magazine is the one of the Child of Media Class");
    }
}

public class Main
{
public static void main(String[] args)
{
    Magazine obj2 = new Magazine();
Channel obj1=new Channel();

}
}
##
Implement the Java Program for below ScenarioShape Class have method " display" to display "Shape Class".Rectangle Class have method "Show" to display "Rectangle Class"Triangle Class have method "Show" to display "Triangle Class"Circle Class have method "Show" to display "Circle Class"In  Main create object for Rectangle, Triangle, Circle and access parent and its member function.
class Shape
{
    void display()
    {
        System.out.println("Shape Class");
    }
}
class Rectangle extends Shape
{
    void Show()
    {
        System.out.println("Rectangle Class");
    }
}
class Triangle extends Shape
{
    void Show()
    {
        System.out.println("Triangle Class");
    }
}
class Circle extends Shape
{
    void Show()
    {
        System.out.println("Circle Class");
    }
}
public class Main{
    public  static void main(String args[])
    {
        Rectangle obj1 = new Rectangle();
        obj1.display();
        obj1.Show();
        
        Triangle obj2 = new Triangle();
        obj2.display();
        obj2.Show();
        
        Circle obj3 = new Circle();
        obj3.display();
        obj3.Show();
    }
}
##
Write a Java Program to implement below Scenario.Account Class have interest rate as 4.5% common to all types of account. If Fixed Deposit type of Account then interest rate will be 7%. If Current type of Account then interest rate will be 6.5%.
class Account{
    double IR=4.5;
    void display()
    {
        System.out.println("Interest Rate of Fixed Deposit Account before Change::");
        System.out.println("Account's Interest Rate is : "+IR+"%");
        System.out.println("Interest Rate of Current Account before Change::");
        System.out.println("Account's Interest Rate is : "+IR+"%");
        
    }
}
class FixedDeposit extends Account
{
    void display_IR()
    {
        IR=7.0;
        System.out.println("Interest Rate of Fixed Deposit Account after Change::");
        System.out.println("Account's Interest Rate is : "+IR+"%");
    }
}
class Current extends Account
{
    void display_IR()
    {
        IR=6.5;
        System.out.println("Interest Rate of Current Account after Change::");
        System.out.println("Account's Interest Rate is : "+IR+"%");
    }
}
public class Main{
    public static void main(String args[])
    {
        FixedDeposit obj1 = new FixedDeposit();
        obj1.display();
        obj1.display_IR();
        
        Current obj2 = new Current();
        obj2.display_IR();
    }
}
##
Write a Java Program for below Scenario.1. Animal Class have constructor to display "Animal is the Base Class"2. Dog Class constructor call its parent constructor and display "Dog is the Derived Class of Animal"3. Cat Class constructor call its parent constructor and display "Cat is the Derived Class of Animal"4. In Main class create object for Child class and access its corresponding Constructor
class Animal
{
    Animal()
    {
        System.out.println("Animal is the Base Class");
    }
}
class Dog extends Animal
{
    Dog()
    {
        System.out.println("Dog is the Derived Class of Animal");
    }
}
class Cat extends Animal
{
    Cat()
    {
        System.out.println("Cat is the Derived Class of Animal");
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Dog obj1=new Dog();
        Cat obj2=new Cat();
    }
}
##
Write the Java Program for below Scenario.Every employee has a standard salary of Rs.50000. For a full-time employee, increment the salary by 50%, and increment the salary by 25% for an intern. Before and After increasing the salary, display the  salary.
class Employee{
    double salary=50000.0;
    void DisplaySalary()
    {
        System.out.println("Salary of a full-time employee before incrementing:");
        System.out.println("Employee Salary: Rs."+salary);
        System.out.println("Salary of an intern before incrementing:");
        System.out.println("Employee Salary: Rs."+salary);
        
    }
}
class FullTimeEmployee extends Employee
{
    double hike=0.5;
    void IncrementSalary()
    {
        double amt=hike*salary;
        salary+=amt;
        System.out.println("Salary of a full-time employee after incrementing:");
        System.out.println("Employee Salary: Rs."+salary);
    }
}
class PartTimeEmployee extends Employee
{
    double hike=0.25;
    void IncrementSalary()
    {
        double amt=hike*salary;
        salary+=amt;
        System.out.println("Salary of an intern after incrementing:");
        System.out.println("Employee Salary: Rs."+salary);
    }
}
public class Main{
    public static void main(String args[])
    {
        FullTimeEmployee obj1 = new FullTimeEmployee();
        obj1.DisplaySalary();
        obj1.IncrementSalary();
        
        PartTimeEmployee obj2 = new PartTimeEmployee();
        obj2.IncrementSalary();
    }
}
##
Write a Java Program for below Scenario.1. Vehicle Class have constructor to display "Vehicle class has 3 Child Class "2. Car Class constructor call its parent constructor and display "Car is the one of the Child of Vehicle Class"3. Truck Class constructor call its parent constructor and display "Truck is the one of the Child of Vehicle Class"4. Bus Class constructor call its parent constructor and display "Bus is the one of the Child of Vehicle Class"In Main class create object for Child class and access its corresponding Constructor
class Vehicle
{
    Vehicle()
    {
        System.out.println("Vehicle class has 3 Child Class");
    }
}
class Car extends Vehicle
{
    Car()
    {
        System.out.println("Car is the one of the Child of Vehicle Class");
    }
}
class Truck extends Vehicle
{
    Truck()
    {
        System.out.println("Truck is the one of the Child of Vehicle Class");
    }
}
class Bus extends Vehicle
{
    Bus()
    {
        System.out.println("Bus is the one of the Child of Vehicle Class");
    }
}
public class Main{
    public  static void main(String args[])
    {
        Car obj1 = new Car();
        Truck obj2 = new Truck();
        Bus obj3 = new Bus();
    }
}
##
Write a java program to display employee details using multiple inheritanceNote: In interface Employee --- used to get the name and id value from the user  and in interface Employeesalary--used to get the salary and designation from the user. In Class Employeedetails use this interface and print the employee details with the help of display function
import java.util.*;
interface Employee
{
   void getDetails();
}
interface Employeesalary extends Employee
{
    public void Display();
}
class Employeedetails implements Employeesalary
{
    int id;
    String name,salary,degn;
    public void getDetails()
    {
        Scanner sc=new Scanner(System.in);
        id=sc.nextInt();
        name=sc.next();
        salary=sc.next();
        degn=sc.next();
    }
    public void Display()
    {
        System.out.println("ID No : " + id);
        System.out.println("Name : " + name);
        System.out.println("Designation : " + degn);
        System.out.println("Salary : " + salary);
    }
}
public class Main
{
    public static void main(String[] args) 
    {
        Employeedetails obj = new Employeedetails();
        obj.getDetails();
        obj.Display();
    }
}
##
Implement the Java Program for below ScenarioIn  Main create object for Addition ,Subtraction and access parent and its member function.
class n
{
    int a = 10;
    int b = 5;
}
class A extends n
{
    void add()
    {
        System.out.println("Addition of 2 values "+(a+b));
    }
}
class S extends n
{
    void sub()
    {
        System.out.println("Subtraction of 2 values "+(a-b));
    }
}
public class Main
{
    public static void main(String args[])
    {
        A a = new A();
        S s = new S();
        a.add();
        s.sub();
    }
}

EMP123 John 24800.0
class employee
{
    private String emp_id,emp_name;
    void set(String a,String b)
        {
            emp_name=b;
            emp_id=a;
        }
    class salary
    {
        private float basic,allowance;
        void set(float a,float b)
        {
            basic=a;
            allowance=b;
        }
        void display()
        {
            System.out.println(emp_id+" "+emp_name+" "+(float)(basic+allowance));
        }
    }
}
public class main
{
    public static void main(String[] args)
    {
        employee e=new employee();
        e.set("EMP123","John");
        employee.salary s=e.new salary();
        s.set(22500,2300);
        s.display();
    }
}


##
Create a Class "NetBanking" with private static member "UserName" [User@123], then
class netbanking 
{
    private static String udername="User@123";
    static class mailverifiedacc
    {
        void validate()
        {
            System.out.println(udername+" is Mail Verified Account ");
        }
    }
    static class mobileverifiedacc
    {
        void validate()
        {
            System.out.println(udername +" is Mobile Verified Account ");
        }
    }
}
public class main
{
    public static void main(String[] args)
    {
        // netbanking n=new netbanking();
        netbanking.mailverifiedacc mail=new netbanking.mailverifiedacc();
        mail.validate();
        netbanking.mobileverifiedacc mobile =new netbanking.mobileverifiedacc();
        mobile.validate();
    }
}

##
Write a Java Program using Method Local Inner Class for below Scenario.
public class Department {
    String department = "Financial and Management Department";

    public void display(String company) {
        
        class Inner {
            public void print() {
                System.out.println("Department is " + department);
                System.out.println("Company is " + company);
            }
        }

        Inner inner = new Inner();
        inner.print();
    }

    public static void main(String[] args) {

        Department department = new Department();

        department.display("ABC Industries");
    }
}



##
Create a Class "Exam" with private static member "Student_Id"[Student@1],mark1,mark2,mark3,average, then
public class Exam
{
    private static String Student_Id="Student@1";
   
    static class Grade
    {
        int mark1=50,mark2=80,mark3=80;
        public void display()
        {
            float avg=(mark1+mark2+mark3)/3;
           System.out.println(Student_Id + "'s Average Mark is "+avg);
        }
    }
    
    public static void main(String[] args)
    {
  Grade obj=new Grade();
 obj.display();
 
    }
}

##
Name given in Outer Class is Johnson
class MethodLocal
{
    public String value = "Name given in Outer Class is Johnson";
    public void display()
    {
        class Inner
        {
            public void print()
            {
                System.out.println(value);
            }
        }
        Inner obj1 = new Inner();
        obj1.print();
    }
}
public class Main
{
    public static void main(String[]args)
    {
        MethodLocal obj = new MethodLocal();
        obj.display();
    }
}

##
Saveetha 12345
class Progress_Report
{
    private String stuId;
    
    Progress_Report()
    {
        this.stuId = "12345";
    }
    
    class Exam
    {
        private float mark1;
        private float mark2;
        private float mark3;
        
        Exam()
        {
            this.mark1 = (float) 89;
            this.mark2 = (float) 78;
            this.mark3 = (float) 67;
        }
        public void display()
        {
            float sum = (mark1+mark2+mark3);
            System.out.print("Saveetha "+stuId);
        }
    }
}

public class Main
{
    public static void main(String[]args)
    {
        Progress_Report obj = new Progress_Report();
        Progress_Report.Exam obj1 = obj.new Exam();
        obj1.display();
    }
}

##
Create 3 classes College, Department and Student. Class Student extends Class Department and Class Department extends Class College.
class College {
    void print_cgeName() {
        System.out.println("Saveetha Engineering College");
    }
}

class Department extends College {
    void print_deptName() {
        System.out.println("Computer Science and Engineering");
    }
}

class Student extends Department {
    void print_stuName() {
        System.out.println("John Britto");
    }
}

public class Main {
    public static void main(String[] args) {
        Student obj = new Student();
        obj.print_cgeName();  
        obj.print_deptName();
        obj.print_stuName();
    }
}


##
Create 3 classes A, B and C. Class C extends Class B and Class B extends Class A. Each class has an method display(). Call class A’s display() from class C.
public class Grand_Parent {
    public Grand_Parent() {
        System.out.println("Class A's display");
    }
    
   
    public static void main(String[] args) {
        Child child = new Child();
    }
    
}

class Parent extends Grand_Parent {
    public Parent() {
        System.out.println("Class B's display");
    }
}

class Child extends Parent {
    public Child() {
        System.out.println("Class C's display");
    }
}




##
Employee Name is Vinu
import java.util.Scanner;
class Balance
{
    private String name;
    private String acntno;
    private double bal;
    
    public Balance(String name, String acntno, double bal)
    {
        this.name = name;
        this.acntno = acntno;
        this.bal = bal;
    }
    public void cal(double amnt)
    {
        bal += amnt;
    }
    public void display()
    {
        System.out.println("Employee Name is "+name);
        System.out.println("Employee Id is "+acntno);
        System.out.println("Salary is "+bal);
    }
}

public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        String name = sc.nextLine();
        String acntno = sc.nextLine();
        double bal = sc.nextDouble();
        Balance acnt = new Balance(name,acntno,bal);
        double amnt = sc.nextDouble();
        acnt.cal(amnt);
        acnt.display();
        sc.close();
        
    }
}

##
Create 3 classes Shapes, Circle and Area. Class Area extends Class Circle and Class Circle extends Class Shapes.
import java.util.Scanner;

class Shapes {
    public void print_Shape() {
        System.out.println("Shapes Class");
    }
}

class Circle extends Shapes {
    protected float radius;
    public void get() {
        Scanner scanner = new Scanner(System.in);
        radius = scanner.nextFloat();
    }
}

class Area extends Circle {
    public void calc() {
        double area = 3.14* radius * radius;
        System.out.println("Area of Circle is " + area);
    }
}

public class Main {
    public static void main(String[] args) {
        Area areaObj = new Area();
        areaObj.get();           
        areaObj.print_Shape(); 
        areaObj.calc();     
    }
}


##
Create 3 classes Grand Parent, Parent and Child . Class Child extends Class Parent and Class Parent extends Class Grand Parent. Create Main class to Access all Constuctors by using Child class Object .
import java.util.*;
class coll
{
    coll()
    {
        System.out.println("Grand_Parent Class");
    }
}
class dept extends coll
{
    dept()
    {
        System.out.println("Parent Class");
    }
}
class student extends dept
{
    student()
    {
        System.out.println("Child Class");
    }
}
public class main
{
    public static void main(String[] args)
    {
        student s=new student();
    }
}


##
Shape Class have method " display" to display "Shape Class".
class Shape {
    public void display() {
        System.out.println("Shape Class");
    }
}
class Rectangle extends Shape {
    public void show() {
        System.out.println("Rectangle Class");
    }
}
class Triangle extends Shape {
    public void show() {
        System.out.println("Triangle Class");
    }
}
class Circle extends Shape {
    public void show() {
        System.out.println("Circle Class");
    }
}
public class Main {
    public static void main(String[] args) {
        Rectangle rectangleObj = new Rectangle();
        rectangleObj.display();   
        rectangleObj.show();      
        Triangle triangleObj = new Triangle();
        triangleObj.display();    
        triangleObj.show();       

        // Create object for Circle
        Circle circleObj = new Circle();
        circleObj.display();      
        circleObj.show();         
    }
}


##
Account Class have interest rate as 4.5% common to all types of account. If Fixed Deposit type of Account then interest rate will be 7%. If Current type of Account then interest rate will be 6.5%.
class Account {
    // Common interest rate for all accounts
    protected double interestRate = 4.5;

    // Method to display the interest rate
    void display() {
        System.out.println("Account's Interest Rate is : " + interestRate + "%");
    }
}

class FixedDeposit extends Account {
    // Method to display the interest rate for Fixed Deposit Account
    void displayIR() {
        System.out.println("Interest Rate of Fixed Deposit Account before Change::");
        super.display(); // Display base interest rate
        interestRate = 4.5; // Fixed Deposit specific interest rate
        System.out.println("Interest Rate of Current Account before Change::");
        super.display(); // Display updated interest rate
    }
}

class Current extends Account {
    // Method to display the interest rate for Current Account
    void displayIR() {
        System.out.println("Interest Rate of Fixed Deposit Account after Change::");
        interestRate = 7.0; // Hypothetical increase in interest rate for demonstration
        super.display(); // Display base interest rate with increment
        interestRate = 6.5; // Current Account specific interest rate
        System.out.println("Interest Rate of Current Account after Change::");
        super.display(); // Display updated interest rate
    }
}

public class Bank {
    public static void main(String[] args) {
        // Creating Fixed Deposit account and displaying its interest rate
        FixedDeposit fdAccount = new FixedDeposit();
        fdAccount.displayIR();
        
        // Creating Current account and displaying its interest rate
        Current currentAccount = new Current();
        currentAccount.displayIR();
    }
}



##
1. Animal Class have constructor to display "Animal is the Base Class"
import java.util.*;
class animal
{
    animal()
    {
    System.out.println("Animal is the Base Class");
    }
}
class dog extends animal
{
    dog()
    {
        System.out.println("Dog is the Derived Class of Animal");
    }
}
class cat extends animal
{
    cat()
    {
        System.out.println("Cat is the Derived Class of Animal");
    }
}
public class test
{
    public static void main(String[] args)
    {
        dog d=new dog();
        cat c=new cat();
    }
}


##
Student Class have common assessment mark as 5. If Sports Students then extra 5 mark will added to the assessment mark. If Student attended any extra-curriculum activities then extra 4 marks will be added.
class Student
{
    double mark = 5;
    void displayMarks()
    {
        System.out.println("Student's Assessment Marks : "+mark);
    }
}
class SportsStudent extends Student
{
    double inc = 5.0;
    void incrementMark()
    {
        System.out.println("Student's Assessment Marks : "+(mark + inc));
    }
}
 
class Extra_Curriculum extends Student
{
    double inc =4.0;
    void incrementMark()
    {
     System.out.println("Student's Assessment Marks : "+(mark + inc));
    }
}
public class Main
{
    public static void main(String[]args)
    {
        SportsStudent emp1 =new SportsStudent();
        Extra_Curriculum emp2 =new Extra_Curriculum();
        
        System.out.println("Assessment Mark of the Sports Student before  before incrementing:");
        emp1.displayMarks();
        
        System.out.println("Assessment Mark of the Extra -Curriculum Acitvity Student before  before incrementing:");
        emp2.displayMarks();
        
        System.out.println("Assessment Mark of the Sports Student after  before incrementing:");
        emp1.incrementMark();
        
        System.out.println("Assessment Mark of the Extra -Curriculum Acitvity Student after  before incrementing:");
        emp2.incrementMark();
    }
}

##
1. Vehicle Class have constructor to display "Vehicle class has 3 Child Class "
class Vehicle{
    void display(){
        System.out.println("Shape Class");
    }
}
class Truck extends Vehicle{
    void show(){
        System.out.println("Vehicle class has 3 Child Class\nTruck is the one of the Child of Vehicle Class");
    }
}
class Car extends Vehicle{
    void show(){
        System.out.println("Vehicle class has 3 Child Class\nCar is the one of the Child of Vehicle Class");
    }
}
class Bus extends Vehicle{
    void show(){
        System.out.println("Vehicle class has 3 Child Class\nBus is the one of the Child of Vehicle Class");
    }
}
public class prog{
    public static void main(String[] args){
        Car c=new Car();
        Bus b=new Bus();
        Truck t=new Truck();
        
        c.show();
        t.show();
        b.show();
    }
}

##
1. Media Class have constructor to display "Parent Class is Media"
class media
{
    media()
    {
        System.out.println("Parent Class is Media");
    }
}
class magazine extends media
{
    magazine()
    {
        System.out.println("Magazine is the one of the Child of Media Class");
    }
}
class channel extends media
{
    channel()
    {
        System.out.println("Channel is the one of the Child of Media Class");
    }
}
public class main
{
    public static void main(String[] args)
    {
        magazine m=new magazine();
        channel c=new channel();
    }
}

##
Create a class "MethodLocal" with
class methodlocal
{
    private String a="Outer Class Variable";
    void display()
    {
        class inner
    {
        private String b="Inner Class Variable";
        void print()
        {
            System.out.println(a);
            System.out.println(b);
        }
    }
    inner a=new inner();
    a.print();
    }
}
public class main
{
    public static void main(String[] args)
    {
        methodlocal a=new methodlocal();
        a.display();
    }
}

##
Student@1's Average Mark is 70.0
public class Exam
{
    private static String Student_Id="Student@1";
   
    static class Grade
    {
        int mark1=50,mark2=80,mark3=80;
        public void display()
        {
            float avg=(mark1+mark2+mark3)/3;
           System.out.println(Student_Id + "'s Average Mark is "+avg);
        }
    }
    
    public static void main(String[] args)
    {
  Grade obj=new Grade();
 obj.display();
 
    }
}

##
User12345 Student_1 234.0
public class Progress_Report {
    // Private members of the outer class
    private String Stu_Id;
    private String Password;

    // Constructor for Progress_Report class
    public Progress_Report(String Stu_Id, String Password) {
        this.Stu_Id = Stu_Id;
        this.Password = Password;
    }

    // Inner class Exam
    public class Exam {
        // Private members of the inner class
        private float mark1;
        private float mark2;
        private float mark3;

        // Constructor for Exam class
        public Exam(float mark1, float mark2, float mark3) {
            this.mark1 = mark1;
            this.mark2 = mark2;
            this.mark3 = mark3;
        }

        // Public method to display the results
        public void display() {
            float totalMarks = mark1 + mark2 + mark3;
            System.out.println(Stu_Id + " " + Password + " " + totalMarks);
        }
    }

    public static void main(String[] args) {
        // Create an instance of Progress_Report with username and password
        Progress_Report report = new Progress_Report("User12345", "Student_1");

        // Create an instance of the inner class Exam with marks
        Progress_Report.Exam exam = report.new Exam(89, 78, 67);

        // Call the display method of the inner class Exam
        exam.display();
    }
}


##
Create a Class "PaymentDetails" with private static member "Acc_num" [7866AC43], then
public class PaymentDetails {
    private static String Acc_num = "7866AC43";

    public static class ValidateCreditCardDetails {
        public void validate() {
            System.out.println(Acc_num+" Account Validated");
        }
    }

    public static class ValidateDebitCards {
        public void validate() {
            System.out.println(Acc_num+" Debit Card Validated");
        }
    }

    public static void main(String[] args) {
        
        PaymentDetails.ValidateCreditCardDetails validateCreditCardDetails = new PaymentDetails.ValidateCreditCardDetails();

        PaymentDetails.ValidateDebitCards validateDebitCards = new PaymentDetails.ValidateDebitCards();

        validateCreditCardDetails.validate();

        validateDebitCards.validate();
    }
}


##
Create 4 classes Student, Marks, Total and Average. Class Average extends Class Total and Class Total extends Class Marks. Class Marks extends Class Student.Create Main class to Access all Constuctors by using Average class Object .
class Student
{
    Student()
    {
        System.out.println("Student Class");
    }
}

class Marks extends Student
{
    Marks()
    {
        System.out.println("Marks Class");
    }
}

class Total extends Marks
{
    Total()
    {
        System.out.println("Total Class");
    }
}

class Average extends Total
{
    Average()
    {
        System.out.println("Average Class");
    }
}


public class Main
{
    public static void main(String args[])
    {
        Average obj = new Average();
        
        
    }
}

##
Student Name is John
import java.util.Scanner;
public class Input {
    public static Scanner scanner = new Scanner(System.in);
    
    public static void main(String[] args) {
        
        Percentage percentage = new Percentage();
        percentage.inputDetails();
        percentage.calculatePercentage();
        percentage.display();
    }
    
    
}

class Percentage {
    String name;
    String regNo;
    int total;
    float percentage;

    public void inputDetails() {
       
        name = Input.scanner.nextLine();

        regNo = Input.scanner.nextLine();

        int marks[] = new int[5];
        for (int i = 0; i < 5; i++) {
            marks[i] = Input.scanner.nextInt();
            total += marks[i];
        }
    }

    public void calculatePercentage() {
        percentage = (float) total / 5;
    }

    public void display() {
        System.out.println("Student Name is " + name);
        System.out.println("Registeration Number is " + regNo);
        System.out.println("Total is " + total);
        System.out.printf("Percentage is "+Math.floor(percentage));
        
    }
}



##
Create 3 classes Vehicle, Car and Alto. Class Alto extends Class Car and Class Car extends Class Vehicle.
class vehicle
{
    void display()
    {
        System.out.println("Vehicle Class");
    }
}
class car extends vehicle
{
    void print()
    {
        System.out.println("Car Class");
    }
}
class Alto extends car
{
    void show()
    {
        System.out.println("Alto Class");
    }
}
public class main
{
    public static void main(String[] args)
    {
        Alto a=new Alto();
        a.display();
        a.print();
        a.show();
    }
}


##
Parent have method " display" to display "This is Parent Class".
class Parent
{
void display()
{
    System.out.println("This is Parent Class");
}
}
class Child1 extends Parent
{
void print()
{
    System.out.println("This is Child1 Class");
}
}
class Child2 extends Parent
{
void print()
{
    System.out.println("This is Child2 Class");
}
}
public class Main
{
public static void main(String[] args)
{
Child1 obj1=new Child1();

obj1.display();
obj1.print();
Child2 obj2=new Child2();

obj2.display();
obj2.print();

}
}

##
Write a java program to display employee details using multiple inheritance
import java.util.Scanner;

interface Employee {
    void getEmployeeDetails();
}

interface Employeesalary {
    void getEmployeeSalaryDetails();
}

class Employeedetails implements Employee, Employeesalary {
    private String name;
    private String id;
    private int salary;
    private String designation;

        Scanner sc = new Scanner(System.in);
    public void getEmployeeDetails() {
        // Scanner sc = new Scanner(System.in);
        id = sc.next();
        name = sc.next();
    }

    public void getEmployeeSalaryDetails() {
        salary = sc.nextInt();
        // sc.nextLine();
        designation = sc.next();
    }

    void display() {
        System.out.println("ID No : " + id);
        System.out.println("Name : " + name);
        System.out.println("Designation : " + designation);
        System.out.println("Salary : " + salary);
    }
}

public class Main {
    public static void main(String[] args) {
        Employeedetails empDetails = new Employeedetails();
        empDetails.getEmployeeDetails();
        empDetails.getEmployeeSalaryDetails();
        empDetails.display();
    }
}


##
In  Main create object for Addition ,Subtraction and access parent and its member function.
class Arithmetic{
    int a=10;
    int b=5;
}
class Addition extends Arithmetic {
    public void addition(){
        System.out.println("Addition of 2 values " + (a+b));
    }
}
class Subtraction extends Arithmetic {
    public void subtraction(){ 
System.out.println("Subtraction of 2 values " + (a-b));
    }
}
public class Main{
    public static void main(String[]args){
        Addition addObj=new Addition();
        addObj.addition();//Calling addition() method from parent class
        
        Subtraction subObj=new Subtraction();
        subObj.subtraction();//Calling subtraction() method from child class
    }
}



##
Note: In interface Student --- used to get the name and rollno value from the user  and in interface Studentdet-used to get the 6 subjects marks from the user and calculate the average. In Class Studentdetails use this interface and print the studentdetails with the help of display function 
import java.util.Scanner;

interface Student {
    void getStudentDetails(); // To get the student's name and roll number
}

interface Studentdet {
    void getMarksAndCalculateAverage(); // To get marks for 6 subjects and calculate the average
}

class Studentdetails implements Student, Studentdet {
    private String name;
    private String rollNo;
    private int[] marks = new int[6]; // Array to store marks of 6 subjects
    private int average;

    // Create Scanner object
    Scanner sc = new Scanner(System.in);

    // Method to get student's name and roll number
    public void getStudentDetails() {
        rollNo = sc.next();
        name = sc.next();
    }

    // Method to get marks for 6 subjects and calculate the average
    public void getMarksAndCalculateAverage() {
        int total = 0;
        for (int i = 0; i < 6; i++) {
            marks[i] = sc.nextInt();
            total += marks[i];
        }
        average = total / 6; // Calculate average
    }

    // Method to display student details along with the calculated average
    public void display() {
        System.out.println("Roll No : " + rollNo);
        System.out.println("Name : " + name);
        System.out.println("Average  : " + average);
    }
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of Studentdetails
        Studentdetails student = new Studentdetails();
        
        // Get student details and marks
        student.getStudentDetails();
        student.getMarksAndCalculateAverage();
        
        // Display the student details including the average marks
        student.display();
    }
}


##
[Username="Saveetha",Password="12345"]

class Progress_Report
{
    private String stuId;
    
    Progress_Report()
    {
        this.stuId = "12345";
    }
    
    class Exam
    {
        private float mark1;
        private float mark2;
        private float mark3;
        
        Exam()
        {
            this.mark1 = (float) 89;
            this.mark2 = (float) 78;
            this.mark3 = (float) 67;
        }
        public void display()
        {
            float sum = (mark1+mark2+mark3);
            System.out.print("Saveetha "+stuId);
        }
    }
}

public class Main
{
    public static void main(String[]args)
    {
        Progress_Report obj = new Progress_Report();
        Progress_Report.Exam obj1 = obj.new Exam();
        obj1.display();
    }
}
















---
Write a parameterized constructor in the Laptop class given below that initializes the brand class field with the string "Apple".
 class Laptop {

	String brand;
Laptop(String a)
{
    brand=a;
}
	
	public void getBrand() {
	    
	    System.out.print(brand);
	}
}

public class Sample {
	
	public static void main(String[] args) {
	   // Scanner sc=new Scanner(System.in);
			Laptop l=new Laptop("Apple");
			l.getBrand();
	}
}


##
A static method called minInt (int num1,int num2) to calculate minimum between  1002,95. Use constructor to initialize value as 0 and Math function to calculate minimum value.
import java.lang.Math;
 class Calculator {

int num1,num2;
Calculator()
{
    num1=0;
    num2=0;
}
    int maxInt (int a,int b)
    {
        num1=a;
        num2=b;
     return (num1>num2)?num1:num2;
        
    }

}

public class Sample {
	
	public static void main(String[] args) {

		   Calculator c=new Calculator();
		   System.out.println(c.maxInt(95,43));
	}
}

##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[10.5,4.5,3.5]
public class Box {
    // Instance variables for the dimensions of the box
    private double width;
    private double height;
    private double depth;

    // Parameterized constructor to initialize the dimensions of the box
    public Box(double width, double height, double depth) {
        this.width = width;
        this.height = height;
        this.depth = depth;
    }

    // Method to calculate and return the volume of the box
    public double getVolume() {
        return width * height * depth;
    }

    public static void main(String[] args) {
        // Create an object of the Box class with dimensions 10.5, 4.5, 3.5
        Box myBox = new Box(10.5, 4.5, 3.5);

        // Calculate and display the volume of the box
        double volume = myBox.getVolume();
        System.out.println("Volume is " + volume+" units");
    }
}


##
Write  a Java program using copy constructor to print the perimeter of triangle.[side1=4,side=5,side=6]
public class Triangle {
    // Instance variables for the sides of the triangle
    private int side1;
    private int side2;
    private int side3;

    // Parameterized constructor to initialize the sides of the triangle
    public Triangle(int side1, int side2, int side3) {
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
    }

    // Copy constructor to create a new Triangle object from an existing one
    public Triangle(Triangle otherTriangle) {
        this.side1 = otherTriangle.side1;
        this.side2 = otherTriangle.side2;
        this.side3 = otherTriangle.side3;
    }

    // Method to calculate and return the perimeter of the triangle
    public int getPerimeter() {
        return side1 + side2 + side3;
    }

    public static void main(String[] args) {
        // Create an object of the Triangle class with sides 4, 5, and 6
        Triangle originalTriangle = new Triangle(4, 5, 6);

        // Create a copy of the originalTriangle using the copy constructor
        Triangle copiedTriangle = new Triangle(originalTriangle);

        // Calculate the perimeter of both triangles
        int perimeterOriginal = originalTriangle.getPerimeter();
        int perimeterCopied = copiedTriangle.getPerimeter();

        // Print the perimeter of both triangles
        System.out.println("Perimeter  of First Triangle : " + perimeterOriginal);
        System.out.println("Perimeter of Second Triangle : " + perimeterCopied);
    }
}


##
Write a Java program using default constructor and static method to display 'Senior Developer' category. Use put() to display other details Employee name, age, designation [Robert,35,Senior Developer]
public class Employee
{
    String name;
    int age;
    String degn;
    //Write Your Code Here
    Employee()
    {
        name="Robert";
        age=35;
        degn="Senior Developer";
    }
    void display()
    {
        //Write Your Code Here
        System.out.println("Name is:"+name);
        System.out.println("Age is:"+age);
        System.out.println("Designation is:"+degn);
    }
    public static void main(String[] args)
    {
        //Write Your Code Here
        Employee obj=new Employee();
        obj.display();
    }
}

##
Write a parameterized constructor in the Laptop class given below that initializes the brand , price class field with the string "Apple" and 42500.75.
public class Laptop
{
    private String brand;
	private double price;
	
	public Laptop(String brand,double price)
	{
	    this.brand = brand;
	    this.price = price;
	}
	void info()
	{
	  System.out.println(brand);
	  System.out.println(price);
	}
	
	public static void main(String[] args) 
	{
	    Laptop lp = new Laptop("Apple",42500.75);
	    lp.info();
	}
}


##
A static method called minInt (int num1,int num2) to calculate minimum between  1002,95. Use constructor to initialize value as 0 and Math function to calculate minimum value.
public class Calculator {
    // Instance variable
    private int value;

    // Default constructor to initialize value as 0
    public Calculator() {
        this.value = 0;
    }

    // Static method to calculate the minimum of two integers
    public static int minInt(int num1, int num2) {
        return Math.min(num1, num2);
    }

    public static void main(String[] args) {
        // Using the static method to calculate the minimum of 1002 and 95
        int minValue = Calculator.minInt(1002, 95);

        // Print the result
        System.out.println(minValue);
    }
}


##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[12,5,7]
Write  a Java program using copy constructor to print the area of rectangle.[l=5,w=6]
class Rectangle 
 { 
    int length; 
    int breadth; 
    Rectangle(int l, int b) 
    {  
        this.length = l;
        this.breadth = b;
    } 
    Rectangle(Rectangle obj) 
    { 
        length = obj.length;
        breadth = obj.breadth;
    } 
    int circumference() 
    { 
        return this.length*this.breadth;
    } 
 } 
public class CopyConstructor 
{ 
    public static void main(String[] args) 
    { 
        Rectangle firstRect = new Rectangle(10,3); 
        Rectangle second = new Rectangle(firstRect);
        System.out.printf("Area  of First Rectangle : %d\n",firstRect.circumference());
        System.out.printf("Area of First Second Rectangle : %d",second.circumference());
    } 
 } 
 


##
Write a Java program using default constructor to display Student name, age, Degree [John, 12, VII]
class Student
{
    String name ;
    int age;
    String deg;
    
    Student()
    {
        name="John";
        age = 12;
        deg="VII";
    }
    void res()
    {
        System.out.println("Name is:"+name);
        System.out.println("Age is:"+age);
        System.out.println("Degree is:"+deg);
    }
}
public class Main{
    public static void main(String[] args)
    {
        Student s = new Student();
        s.res();
    }
}


##
Write a parameterized constructor in the Laptop class given below that initializes the brand , price class field with the string "Apple" and 42500.75250.75.
 class Laptop {

	String brand;
	double price;
	public Laptop(){

	}
	
	public  getBrand() {
		return brand;
	}
	public  getPrice() {
		return price;
	}
}

public class Sample {
	
	public static void main(String[] args) {

				Laptop ford = new Laptop();
				ford.getBrand();
				ford.getPrice();
				System.out.println(brand);
				System.out.println(rate);
	}
}


##
A static method called cubeInt (int num1) to calculate cube root of 125 . Use constructor to initialize value as 0 and Math function to calculate cube root value.
public class Calculator {
    // Instance variable to initialize the value as 0
    private int value;

    // Constructor to initialize value
    public Calculator() {
        this.value = 0;
    }

    // Static method to calculate the cube root of an integer and return it as an int
    public static int cubeInt(int num1) {
        return (int) Math.cbrt(num1);
    }

    public static void main(String[] args) {
        // Call the static method cubeInt with 125 and store the result
        int result = Calculator.cubeInt(125);

        // Print the cube root of 125 as an integer
        System.out.println(result);
    }
}


##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[5,4,3]
public class Box
{
    //Write your code here
    int width, height, depth;
    Box(int w, int h, int d)
    {
        //Write your code here
        width=w;
        height=h;
        depth=d;
    }
    int volume()
    {
      return width*height*depth;
    }
    public static void main(String[] args)
    {
        //Write your code here
        Box obj=new Box(5,4,3);
        System.out.println("Volume is "+obj.volume()+" units");
    }
}


##
Write a Java Program to implement following IS-A relationship.

import java.util.*;
class Collge {  
      int a;
}  
  
public class Student extends Collge {  
    int roll;
    String name;
    void display()
    {
        System.out.println("RollNo: "+roll+"Name: "+name);
    }
    void get(String a,int b)
    {
        roll=b;
        name=a;
    }
    
    public static void main(String args[]) {  
        String a;
        int b;
        Scanner sc= new Scanner(System.in);
        b=sc.nextInt();
        a=sc.next();
        Student s=new Student();
        s.get(a,b);
        s.display();
    }  
}


##
Write a Java program for below situation, Employee object contains member 'Emp_Id'. It contains object named name, which contains its own informations such as Fname, Mname, Lname.
class Name
{
    String Fname;
    String Mname;
    String Lname;
    void dispName(String fn,String mn,String ln)
    {
        Fname=fn;
        Mname=mn;
        Lname=ln;
        System.out.println(Fname+" "+Mname+" "+Lname);
    }
}
class Employee
{
    int Emp_Id;
    Name obj=new Name();
    void dispName(int id,String fn,String mn,String ln)
    {
        Emp_Id=id;
        System.out.println(Emp_Id);
        obj.dispName(fn,mn,ln);
    }
    
}

public class Main
{
    public static void main(String[] args)
    {
      Employee e1=new Employee();
      e1.dispName(101,"B","Leo","John");
        
    }
}


##
Create a class with a method that prints "This is parent class" and its subclass with another method that prints "This is child class". Now, create an object for each of the class and call
// Parent class
class Parent {
    // Method in Parent class
    void printParent() {
        System.out.println("This is parent class");
    }
}

// Child class that extends Parent
class Child extends Parent {
    // Method in Child class
    void printChild() {
        System.out.println("This is child class");
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an object of the Parent class
        Parent parent = new Parent();
        // Call the method of Parent class using Parent object
        parent.printParent();

        // Create an object of the Child class
        Child child = new Child();
        // Call the method of Child class using Child object
        child.printChild();

        // Call the method of Parent class using Child object
        child.printParent();
    }
}


##
Vehicle Id is 1601 Vehicle Name is Hyundai Model is EON
import java.util.Scanner;
class Vehicle 
{
    int Vehicle_ID;
}
   
class Car extends Vehicle
{
   
 String Brand_Name;
 String Model;
void getDetails()
    {
        Scanner sc=new Scanner(System.in);
        Vehicle_ID = sc.nextInt();
        Brand_Name = sc.next();
        Model = sc.next();
    }
   
void display()
    {
        System.out.println("Vehicle Id is "+Vehicle_ID+" Vehicle Name is "+Brand_Name+" Model is "+Model);
    }
    
}
public class Main
{
    public static void main(String[] args)
    {
        Car obj=new Car();
        obj.getDetails();
        obj.display();
    }
}


##
Write a Java program for below situation, Student object contains member 'Stu_Id'. It contains  object named subject, which contains its own informations such as subject1,subject2,subject3,subject4.
public class Student {
    // Instance variable for student ID
    private int stuId;
    // Instance variable for subject information
    private Subject subject;

    // Constructor to initialize student ID and subject
    public Student(int stuId, String subject1, String subject2, String subject3, String subject4) {
        this.stuId = stuId;
        this.subject = new Subject(subject1, subject2, subject3, subject4);
    }

    // Method to display student and subject information
    public void displayInfo() {
        System.out.println(stuId);
        subject.displaySubjects();
    }

    // Nested class Subject
    private class Subject {
        private String subject1;
        private String subject2;
        private String subject3;
        private String subject4;

        // Constructor to initialize subjects
        public Subject(String subject1, String subject2, String subject3, String subject4) {
            this.subject1 = subject1;
            this.subject2 = subject2;
            this.subject3 = subject3;
            this.subject4 = subject4;
        }

        // Method to display subjects
        public void displaySubjects() {
            System.out.println(subject1 + " " + subject2 + " " + subject3 + " " + subject4);
        }
    }

    // Main method to test the functionality
    public static void main(String[] args) {
        // Create a Student object
        Student student = new Student(101, "Java", "DS", "TOC", "CG");

        // Display student and subject information
        student.displayInfo();
    }
}


##
Write a Java program to implement the following IS-A relationship.
import java.util.Scanner;

// Base class
class Employee {
    String name;
    int empID;

    void setDetails(String name, int empID) {
        this.name = name;
        this.empID = empID;
    }

    void displayDetails() {
        System.out.print("Name: " + name);
        System.out.print("Emp_ID: " + empID);
    }
}

// Derived class
class Department extends Employee {
    String departmentName;

    void setDepartment(String departmentName) {
        // If the input is "Software Developer", we abbreviate it to "Software"
        if (departmentName.equalsIgnoreCase("Software Developer")) {
            this.departmentName = "Software";
        } else {
            this.departmentName = departmentName;
        }
    }

    void displayDepartmentDetails() {
        // Call the base class method to display name and empID
        displayDetails();
        System.out.println("Department: " + departmentName);
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Creating an object of the Department class
        Department employee = new Department();

        // Getting user input
        String name = scanner.nextLine();
        int empID = scanner.nextInt();
        scanner.nextLine();  // Consume the newline l;
        String department = scanner.nextLine();

        // Setting and displaying employee and department details
        employee.setDetails(name, empID);
        employee.setDepartment(department);
        employee.displayDepartmentDetails();
    }
}


##
Write a Java program to implement following inheritance scenario.
import java.util.Scanner;

class Student {
    
  String name,class_name;
  int roll;
  
  void getData() {
      Scanner sc=new Scanner(System.in);
      name=sc.next();
      class_name=sc.next();
      roll=sc.nextInt();
  }

}

public class Grade extends Student {

double grade;

void calGrade()
{
   grade=19.7;
}
 void display() {

System.out.println("Roll Number is: "+roll);
System.out.println("Your name is: "+name);
System.out.println("Your class is: "+class_name);
System.out.println("Your percentage is: "+grade);

  }

  public static void main(String args[]) {

Grade obj = new Grade();
obj.getData();
obj.calGrade();
obj.display();

  }

}


##
Write a Java program for below situation, Student object contains Stu_Id. It contains one more object named subject, which contains its own informations such as subject1,subject2,subject3,subject4.
public class Student {
    // Instance variable for student ID
    private int stuId;
    // Instance variable for subject information
    private Subject subject;

    // Constructor to initialize student ID and subject
    public Student(int stuId, String subject1, String subject2, String subject3, String subject4) {
        this.stuId = stuId;
        this.subject = new Subject(subject1, subject2, subject3, subject4);
    }

    // Method to display student and subject information
    public void displayInfo() {
        System.out.println(stuId);
        subject.displaySubjects();
    }

    // Nested class Subject
    private class Subject {
        private String subject1;
        private String subject2;
        private String subject3;
        private String subject4;

        // Constructor to initialize subjects
        public Subject(String subject1, String subject2, String subject3, String subject4) {
            this.subject1 = subject1;
            this.subject2 = subject2;
            this.subject3 = subject3;
            this.subject4 = subject4;
        }

        // Method to display subjects
        public void displaySubjects() {
            System.out.println(subject1 + " " + subject2 + " " + subject3 + " " + subject4);
        }
    }

    // Main method to test the functionality
    public static void main(String[] args) {
        // Create a Student object
        Student student = new Student(101, "Java", "DS", "TOC", "CG");

        // Display student and subject information
        student.displayInfo();
    }
}


##
Create a class named 'Animal' which includes methods display(). [display() will print "I am an Animal"]
// Base class Animal
class Animal {
    // Method to display information
    void display() {
        System.out.println("I am an animal");
    }
}

// Derived class Dog that extends Animal
class Dog extends Animal {
    // Overriding method to display information
    @Override
    void display() {
        System.out.println("I am a dog");
    }

    // Method to print both the parent and child class display methods
    void print() {
        // Call the overridden method of Dog class
        display();
        // Call the parent class method using super
        super.display();
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an instance of Dog class
        Dog dog = new Dog();
        // Invoke the print method using Dog object
        dog.print();
    }
}


##
Create a class named 'Sports' which includes its constructor. [constructor will print "Sports Class"]

// Base class Sports
class Sports {
    // Constructor of Sports class
    Sports() {
        System.out.println("Sports Class");
    }
}

// Derived class IndoorGames that extends Sports
class IndoorGames extends Sports {
    // Constructor of IndoorGames class
    IndoorGames() {
        // Call the constructor of Sports class
        super();
        System.out.println("Indoor Games Class");
    }
}

// Further derived class Chess that extends IndoorGames
class Chess extends IndoorGames {
    // Constructor of Chess class
    Chess() {
        // Call the constructor of IndoorGames class
        super();
        System.out.println("Chess Class");
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an instance of Chess
        Chess chess = new Chess();
    }
}


##
Create a class named 'Student' which includes,
import java.util.Scanner;

// Class Student
class Student {
    // Members to store marks of five subjects
    private int subject1, subject2, subject3, subject4, subject5;

    // Default constructor
    Student() {
        System.out.println("Default Constructor of Student Class");
    }

    // Parameterized constructor
    Student(int sub1, int sub2, int sub3, int sub4, int sub5) {
        // Call default constructor
        this();
        // Initialize marks
        this.subject1 = sub1;
        this.subject2 = sub2;
        this.subject3 = sub3;
        this.subject4 = sub4;
        this.subject5 = sub5;
        System.out.println("Parameterized Constructor of Student Class");
    }

    // Method to display marks in a specific format
    void display() {
        System.out.println("Subject=" + subject1 + " Subject2=" + subject2 +
                           " Subject3=" + subject3 + " Subject4=" + subject4 +
                           " Subject5=" + subject5);
    }
}

// Main class to test the Student class
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Get five subject marks from user
        int sub1 = scanner.nextInt();
        int sub2 = scanner.nextInt();
        int sub3 = scanner.nextInt();
        int sub4 = scanner.nextInt();
        int sub5 = scanner.nextInt();
        
        // Create an instance of Student using parameterized constructor
        Student student = new Student(sub1, sub2, sub3, sub4, sub5);
        
        // Display the marks
        student.display();
        
        // Close the scanner
        scanner.close();
    }
}


##
Create a class named 'Number' which includes,
import java.util.Scanner;

// Class Number
class Number {
    // Two integer members
    int num1, num2;

    // Default constructor
    Number() {
        System.out.println("Default Constructor of Number Class");
    }

    // Parameterized constructor
    Number(int num1, int num2) {
        // Call the default constructor
        this();
        // Initialize the integer members
        this.num1 = num1;
        this.num2 = num2;
        System.out.println("Parameterized Constructor of Number Class");
    }

    // Method to display the values of the members
    void display() {
        System.out.println("Number1=" + num1 + " Number2="+num2);
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        // Scanner to get user input
        Scanner scanner = new Scanner(System.in);

        // Get two integer values from the user
        int value1 = scanner.nextInt();
        int value2 = scanner.nextInt();

        // Create an instance of Number using the parameterized constructor
        Number number = new Number(value1, value2);

        // Display the values of the members
        number.display();

        // Close the scanner
        scanner.close();
    }
}


##
Create a class named 'Gadgets' which includes methods display(). [display() will print "I am a Gadget"]
// Base class Gadgets
class Gadgets {
    // Method to display a message
    void display() {
        System.out.println("I am a Laptop");
    }
}

// Derived class Laptop that extends Gadgets
class Laptop extends Gadgets {
    // Overriding the display method
    @Override
    void display() {
        System.out.println("I am a Gadget");
    }

    // Method to call both the overridden and overriding methods
    void print() {
        // Call the method of the parent class
        super.display();
        // Call the method of the current class
        this.display();
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an instance of Laptop
        Laptop laptop = new Laptop();
        
        // Invoke the print method
        laptop.print();
    }
}



##
Create a class named 'College' which includes its constructor. [constructor will print "Saveetha Engineering College"]
// Base class College
class College {
    // Constructor of College
    College() {
        System.out.println("Saveetha Engineeirng College");
    }
}

// Child class Department that extends College
class Department extends College {
    // Constructor of Department
    Department() {
        // Call the constructor of College
        super();
        System.out.println("CSE Department");
    }
}

// Child class Student that extends Department
class Student extends Department {
    // Constructor of Student
    Student() {
        // Call the constructor of Department
        super();
        System.out.println("I am a Student of CSE dept");
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an instance of Student
        Student student = new Student();
    }
}


##
Rollno is 101 Name is Student1 College Name is ABC
// Class named 'Student'
class Student {
    // Static field for college name
    static String collegeName = "ABC";

    // Instance fields for roll number and student name
    int rollNo;
    String name;

    // Constructor to initialize roll number and name
    Student(int rollNo, String name) {
        this.rollNo = rollNo;
        this.name = name;
    }

    // Method to display student details
    void displayDetails() {
        System.out.println("Rollno is " + rollNo + " Name is " + name + " College Name is " + collegeName);
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create instances of Student with unique roll numbers and names
        Student student1 = new Student(101, "Student1");
        Student student2 = new Student(102, "Student2");
        Student student3 = new Student(103, "Student3");
        Student student4 = new Student(104, "Student4");

        // Display details of each student
        student1.displayDetails();
        student2.displayDetails();
        student3.displayDetails();
        student4.displayDetails();
    }
}


##
Write a Java program for below situation, Student object contains member 'Stu_Id'. It contains object named course, which contains its own informations such as Degree, Branch, Year of Studying.
// Course class
class Course {
    String degree;
    String branch;
    String year;

    // Constructor to initialize Course details
    Course(String degree, String branch, String year) {
        this.degree = degree;
        this.branch = branch;
        this.year = year;
    }

    // Method to display course details
    void displayCourseDetails() {
        System.out.println(degree + " " + branch + " " + year);
    }
}

// Student class
class Student {
    int stuId;
    Course course;

    // Constructor to initialize Student and Course details
    Student(int stuId, String degree, String branch, String year) {
        this.stuId = stuId;
        this.course = new Course(degree, branch, year);
    }

    // Method to display student details
    void displayStudentDetails() {
        System.out.println(stuId);
        course.displayCourseDetails();
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        // Create an instance of Student with the given details
        Student student = new Student(101, "B.Tech", "IT", "Third year");
        
        // Display the details of the student and their course
        student.displayStudentDetails();
    }
}


##
Create a final class 'Class' with  Name,Id and Year as its member, make  Year as final variable with value "3th Year" and write  print() to display its member in the Output.
// Final class named 'Class'
final class Student {
    String Name;
    String Id;
    final String Year = "3th Year"; // Final variable with a fixed value

    // Constructor to initialize Name and Id
    Student(String Name, String Id) {
        this.Name = Name;
        this.Id = Id;
    }

    // Method to display the details
    void print() {
        System.out.println("Student Details are,");
        System.out.println("Id is " + Id);
        System.out.println("Name is " + Name);
        System.out.println("Year of Studying is " + Year);
    }
}

// Main class to test the functionality
public class Main {
    public static void main(String[] args) {
        // Create an instance of Student class with given Name and Id
        Student student = new Student("David", "S201");

        // Call the print method to display the details
        student.print();
    }
}


##
Write a Java program to display Citizen details [ Name, Address] with Citizenship. Citizenship  is "Indian" which is common to all Citizens. The Citizen name field is declared as static so it can occupy memory only once.
// Citizen class
class Citizen {
    // Static field for citizenship
    static String Citizenship = "Indian";

    // Instance fields for name and address
    String Name;
    String Address;

    // Constructor to initialize name and address
    Citizen(String Name, String Address) {
        this.Name = Name;
        this.Address = Address;
    }

    // Method to display citizen details
    void display() {
        System.out.println("Name is " + Name + " Address is " + Address + " Citizenship is " + Citizenship);
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        // Create Citizen objects
        Citizen citizen1 = new Citizen("David", "Chennai");
        Citizen citizen2 = new Citizen("Robin", "Bangalore");
        Citizen citizen3 = new Citizen("Joseph", "Mumbai");

        // Display details of each citizen
        citizen1.display();
        citizen2.display();
        citizen3.display();
    }
}


##
Create a final class 'Company' with Company Name,Company Id and Address as its member, make Company_Id as final variable with value "ED12G45" and write print() to display its member in the Output.
final class company
{
    String name,address;
    final String id="ED12G45";
    void print()
    {
        name="ABC Foods";
        address="Chennai";
        System.out.println("Company Details are,");
        System.out.println("Id is "+id);
        System.out.println("Name is "+name);
        System.out.println("Address is "+address);
        
    }
}
public class main
{
    public static void main(String[] args)
    {
        company c = new company();
        c.print();
    }
}


##
Empno is E101 Name is Emp1 Designation is Accountant Company Name is Green Tech
// Employee class
class Employee {
    // Static field for the company name
    private static String companyName = "Green Tech";

    // Instance fields for employee details
    private String empNo;
    private String name;
    private String designation;

    // Parameterized constructor to initialize employee details
    public Employee(String empNo, String name, String designation) {
        this.empNo = empNo;
        this.name = name;
        this.designation = designation;
    }

    // Method to display employee details with company name
    public void display() {
        System.out.println("Empno is " + empNo + " Name is " + name + " Designation is " + designation + " Company Name is " + companyName);
    }
}

// Main class to test the Employee class
public class Main {
    public static void main(String[] args) {
        // Creating Employee objects with different details
        Employee emp1 = new Employee("E101", "Emp1", "Accountant");
        Employee emp2 = new Employee("E102", "Emp2", "Manager");
        Employee emp3 = new Employee("E103", "Emp3", "Programer");
        Employee emp4 = new Employee("E104", "Emp4", "Receptionist");

        // Displaying details of each employee
        emp1.display();
        emp2.display();
        emp3.display();
        emp4.display();
    }
}


##
Write a Java program to perform Arithmetic Operations using static method. [num1=30,num2=20] [Addition,Subtraction,Multiplication,Division]
public class ArithmeticOperations {

    // Static method for addition
    static int add(int num1, int num2) {
        return num1 + num2;
    }

    // Static method for subtraction
    static int subtract(int num1, int num2) {
        return num1 - num2;
    }

    // Static method for multiplication
    static int multiply(int num1, int num2) {
        return num1 * num2;
    }

    // Static method for division
    static int divide(int num1, int num2) {
        return num1 / num2; // Assumes num2 is not zero
    }

    public static void main(String[] args) {
        // Given values
        int num1 = 30;
        int num2 = 20;

        // Perform arithmetic operations using static methods
        int addition = add(num1, num2);
        int subtraction = subtract(num1, num2);
        int multiplication = multiply(num1, num2);
        int division = divide(num1, num2);

        // Display the results
        System.out.println("Addition of Given value is " + addition);
        System.out.println("Subtraction of Given value is " + subtraction);
        System.out.println("Multiplication of Given value is " + multiplication);
        System.out.println("Division of Given value is " + division);
    }
}


##














---


Write a Java Program for  displaying the data from the file "sample.txt" using FileInputStream
 
             FileInputStream input = new FileInputStream("sample.txt");

        System.out.println("Data in the file: ");

        // Reads the first byte
        int i = input.read();

       while(i != -1) {
           System.out.print((char)i);

           // Reads next byte from the file
           i = input.read();
        }
        input.close();
      

##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
                 
                

##
Implement a Java Program to append a String "SAVEETHA ENGINEERING COLLEGE" in a file "sample.txt" using OutputStream.
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA ENGINEERING COLLEGE";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
                 
                

##
Implement a Java Program to write a byte in a file "testout.txt" using FileOutputStream
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
                 fout.write(65);    
                 fout.close();    
                 System.out.println("Successfully Completed");  
                 
                

##
Implement a Java Program to write a String for Specified byte  in a file "testout.txt" using OutputStream.
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int start=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,start,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
                 
                

##
Write a Java Program for  displaying the data from the file "sample.txt" using FileInputStream
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int start=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,start,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
                 
                

##
Implement a Java Program to append a String "SAVEETHA" in a file "sample.txt" using OutputStream.
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
                 
                

##
Write a Java Program for  displaying number of bytes & data in the file "sample.txt" using FileInputStream
 byte[] array = new byte[39];
             FileInputStream input = new FileInputStream("sample.txt");
              System.out.println("Available bytes in the file: " +input.available());
              input.read(array);
              String data = new String(array);
              System.out.println("Data read from the file:" +data);
              input.close();
          
      

##
Implement a Java Program to read a byte in a file "testout.txt" using FileInputStream
     FileInputStream fin=new FileInputStream("testout.txt");    
                 int i=fin.read();  
                 System.out.println((char)i);    
                 fin.close(); 
                
                

##
Implement a Java Program to write a String in a file "testout.txt" using FileOutputStream
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
                 
                

##
Write a Java Program to read the content from the String using Reader
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
   String s ="This is the text read from StringReader.";
   
    char[] array = new char[40];
    try {
      // Create a StringReader
      Reader input = new StringReader(s);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  

##
Initialize char[] array = new char[39];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[39];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  

##
Implement a Java Program to append a String in a file "testout.txt" using Writer
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append("Hi Everybody");  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  

##
Write a Java Program to read the content from the file "sample1.txt" using Reader
        Reader reader = new FileReader("sample1.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  


##
Implement a Java Program to write a String in a file "testout.txt" using Writer
   
            Writer w = new FileWriter("testout.txt");  
            Scanner sc=new Scanner(System.in);
            String content = sc.nextLine();
            int off=sc.nextInt();
            int length=sc.nextInt();
            w.write(content,off,length);  
            w.close();  
             System.out.println("Input String Value:" +content);  
            System.out.println("Wrote Specified portion in a File Successfully");  


##
Write a Java Program for getting input from the user using Input StreamReader
import java.io.*;
public class ReadConsole {

   public static void main(String args[]) throws IOException {
      InputStreamReader cin = null;

      try {
         cin = new InputStreamReader(System.in);
       //  System.out.println("Enter characters, 'q' to quit.");
         char c;
         do {
            c = (char) cin.read();
            System.out.print(c);
         } while(c != '#');
      }finally {
         if (cin != null) {
            cin.close();
         }
      }
   }
}


##
Write a Java Program to read the content from the file "test.txt" using Reader
        Reader reader = new FileReader("test.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  


##
Write a Java Program for  displaying  data in the file "sample.txt" using FilterInputStream
        FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        int k =0;  
        while((k=filter.read())!=-1){  
            System.out.print((char)k);  
        }  
          
      

##
Implement a java Program to convert the file content in to lowercase letter using Filter Writer concept
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.toLowerCase());  
        }  
    }  
   

##
Write a Java Program for  displaying number of characters in the file "sample.txt" after skipping the specified characters using FilterInputStream
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
         filter.skip(sk);
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
 
            
      
##
Implement a Java Program to write a String in a file "testout.txt" using FilterOutputStream
   
                
             
              FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
       // String s="Welcome to FilterOutput Stream File";      
         
         
             Scanner sc=new Scanner(System.in);
             String s=sc.nextLine();
             int start=sc.nextInt();
             int length=sc.nextInt();
              byte b[]=s.getBytes();  
           //  write(byte[] array, int start, int length)
             filter.write(b,start,length); 
      //  filter.write(b);     
      
        filter.close();  
        file1.close();  
   
            
               
                

##
Create a java program using FilterReader to read the content from the file.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '*');  
        else  
            return x;  
    }  
}  

##
Write a Java Program to get the actual number of available bytes in the file using filter input stream.
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
        for(int i=0;i<sk;i++)
        {
            filter.read();
        }
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
 
            
      

##
Implement a java Program to convert the file content in to Uppercase letter using Filter Writer concept
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.toUpperCase());  
        }  
    }  
   


##
Implement a Java Program to write a byte in a file "testout.txt" using FilerOutputStream
   
                FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
        String s="Welcome to FilterOutput Stream File";      
        byte b[]=s.getBytes();      
        filter.write(b);     
      
        filter.close();  
        file1.close();  
   
                


##
Write a java program for writing the character in the file using Buffered Writer
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
  char c=sc.next().charAt(0);
   buffer.write(c);
   
    buffer.close();  
    

##
Write a Java Program to read student data (name ,rollno,  subjects marks,percentage) from the user using the BufferedReader class.
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
int m1,m2,m3;
int percentage;
Student(String name,int rollno,int m1,int m2,int m3){
this.name = name;
this.rollno = rollno;
this.m1 =m1;
this.m2=m2;
this.m3=m3;
percentage=(m1+m2+m3)/3;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Rollno: "+this.rollno);
System.out.println("Marks 1: "+this.m1);
System.out.println("Marks 2: "+this.m2);
System.out.println("Marks 3: "+this.m3);
System.out.println("Percentage : "+percentage);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();
int rollno = Integer.parseInt(reader.readLine());
int m1 = Integer.parseInt(reader.readLine());
int m2=Integer.parseInt(reader.readLine());
int m3 = Integer.parseInt(reader.readLine());
Student std = new Student(name, rollno,m1,m2,m3);
std.displayDetails();
}
}

##
Write a Java Program for displaying the data from the file after skip method using FileInputStream & BufferedInputStream
        FileInputStream fi = new FileInputStream("sample.txt");
        BufferedInputStream bi = new BufferedInputStream(fi);
        Scanner sc=new Scanner(System.in);
        int sk=sc.nextInt();
          bi.skip(sk);
          System.out.println("Contents after skipping "+sk+" bytes:");
          int a = 0;
          while((a=bi.read()) != -1)
            System.out.print((char)a);
          bi.close();
          fi.close();
       


##
Write a Java Program for Reading data from console by InputStreamReader and BufferedReader
import java.io.*;  
public class BufferedReaderExample{    
public static void main(String args[])throws Exception{             
    InputStreamReader r=new InputStreamReader(System.in);    
    BufferedReader br=new BufferedReader(r);            
    //System.out.println("Enter your name");    
    String name=br.readLine();    
    System.out.println("Welcome: "+name);    
}    
}  


##
Write a Java Program to read the number from the user using the BufferedReader class and perform Fibonacci series
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Sample{
    void natural(int num)
    {
        int n1=0,n2=1,n3,i;    
 System.out.print(n1+" "+n2);//printing 0 and 1    
    
 for(i=2;i<num;++i)//loop starts from 2 because 0 and 1 are already printed    
 {    
  n3=n1+n2;    
  System.out.print(" "+n3);    
  n1=n2;    
  n2=n3;    
    }  
}
}

public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));


int number = Integer.parseInt(reader.readLine());
Sample std = new Sample();
std.natural(number);
}
}


##
Write a Java Program for displaying the data from the file using Filereader & BufferedReader
          FileReader fr=new FileReader("sample.txt");   
          BufferedReader br=new BufferedReader(fr);    
          int i;    
          while((i=br.read())!=-1)
          {  
          System.out.print((char)i);  
          }  
            System.out.print("\n");
          br.close();    
          fr.close(); 


##
Write a Java Program for displaying the data from the file  FileInputStream & BufferedInputStream
        FileInputStream fi = new FileInputStream("sample.txt");
        BufferedInputStream bi = new BufferedInputStream(fi);
        
          System.out.println("Data in the File:");
          int a = 0;
          while((a=bi.read()) != -1)
            System.out.print((char)a);
          bi.close();
          fi.close();
       


##
Write a java program for writing the data ("Welcome Java") in the file using Buffered Writer
 FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    buffer.write("Welcome Java");  
    buffer.close();  
    
    

##
Write a Java Program to read student data (name ,department, rollno) from the user using the BufferedReader class.
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
String dept;
Student(String name, String dept, int rollno){
this.name = name;
this.dept = dept;
this.rollno = rollno;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Department: "+this.dept);
System.out.println("Rollno: "+this.rollno);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();

String dept = reader.readLine();

int rollno = Integer.parseInt(reader.readLine());
Student std = new Student(name, dept, rollno);
std.displayDetails();
}
}

##
Write a Java Program for getting string and integer input from the User using BufferedReader
// Java Program for taking user
// input using BufferedReader Class
import java.io.*;

public class Sample
	
{
	
// Main Method
public static void main(String [] args) throws IOException
{
	// Creating BufferedReader Object
	// InputStreamReader converts bytes to
	// stream of character

					
BufferedReader bfn = new BufferedReader(new InputStreamReader(System.in));
	// String reading internally
	String str = bfn.readLine();
				
	// Integer reading internally
	int it = Integer.parseInt(bfn.readLine());
					
	// Printing String
	System.out.println("Entered String : "+ str);
					
	// Printing Integer			
	System.out.println("Entered Integer : "+ it);
		
	}
					
}


##
Write a Java Program to read the number from the user using the BufferedReader class and perform sum of natural numbers.
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Sample{
    void natural(int num)
    {
        int i, sum = 0;  
//executes until the condition returns true  
        for(i = 1; i <= num; ++i)  
        {  
        //adding the value of i into sum variable  
        sum = sum + i;  
        }  
//prints the sum   
        System.out.println("Sum of First "+num+" Natural Numbers is = " + sum);  
    }  
}

public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));


int number = Integer.parseInt(reader.readLine());
Sample std = new Sample();
std.natural(number);
}
}


##
Write a Java Program for displaying the data from the file, after skipping 3 characters from the file using Filereader & BufferedReader
          FileReader fr=new FileReader("sample.txt");   
          BufferedReader br=new BufferedReader(fr);    
          char[] array = new char[36];
          br.skip(3);
        System.out.println("Data after skipping 3 characters:");
        br.read(array);
      System.out.println(array);
          
          
          br.close();    
          fr.close(); 

##
Write a java program for writing the particular character from the String in the file using Buffered Writer
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
    String str=sc.nextLine();
    
  char c=str.charAt(5);
   buffer.write(c);
   
    buffer.close();  

##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with 
import java.util.*;
final class Student
{
    final String Year="3th Year";
    final String schoolname="ABC School";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: HCL ");
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}








































---
Write a Java Program for  displaying the data from the file "sample.txt" using FileInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments.
byte[] array = new byte[39];

FileInputStream fs = new FileInputStream("sample.txt");

System.out.println("Data in the file: ");

fs.read(array);
String data = new String(array);

System.out.println(data);
fs.close();
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .In that String str append the byte from the index value 2 and length 4
OutputStream fout=new FileOutputStream("sample.txt",true);

String s="SAVEETHA";  
byte b[]=s.getBytes();

fout.write(b,2,4);
fout.close();

System.out.println("Successfully Completed");
##
Implement a Java Program to append a String "SAVEETHA ENGINEERING COLLEGE" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA ENGINEERING COLLEGE"
OutputStream fout=new FileOutputStream("sample.txt",true);    

String s="SAVEETHA ENGINEERING COLLEGE";    
byte b[]=s.getBytes();//converting string into byte array    

fout.write(b);    
fout.close();    

System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using FileOutputStreamNote: Consider String str as  "Welcome to Saveetha" . Use predefined function  write(byte[] array, int start, int length) .Get the Starting byte and length from the user and store the characters in the file
FileOutputStream fout=new FileOutputStream("testout.txt");    

String s="Welcome to Saveetha";    
byte b[]=s.getBytes();

Scanner sc=new Scanner(System.in);
int start=sc.nextInt();
int length=sc.nextInt();

fout.write(b,start,length);    
fout.close();    

System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String for Specified byte  in a file "testout.txt" using OutputStream.Note:Consider String str as "HI EVERYBODY...",it has to print specified byte according to the user input
FileOutputStream fout=new FileOutputStream("testout.txt");    

String s="HI EVERYBODY";    
byte b[]=s.getBytes();

Scanner sc=new Scanner(System.in);
int start=sc.nextInt();
int length=sc.nextInt();

fout.write(b,start,length);    
fout.close();    

System.out.println("Successfully Completed");  
##
Write a Java Program for  displaying number of bytes & data in the file "sample.txt" using FileInputStreamNote:Already sample.txt file was created.initialize  byte[] array = new byte[39];
 byte[] array = new byte[39];
             FileInputStream input = new FileInputStream("sample.txt");
              System.out.println("Available bytes in the file: " +input.available());
              input.read(array);
              String data = new String(array);
              System.out.println("Data read from the file:" +data);
              input.close();
##
Implement a Java Program to append a String "SAVEETHA" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA"
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a byte in a file "testout.txt" using FileOutputStreamNote Write a byte "D" in a file
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
                 fout.write(68);    
                 fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a character in a file "testout.txt" using OutputStreamNote: Get input as 65 and printt "A" in the file(testtout.txt)
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             int s=65;    
          //   byte b[]=s.getBytes();//converting string into byte array    
             fout.write(s);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Write a Java Program for  displaying number of bytes after skipping from the file "sample.txt" using FileInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments and Skip() method for skipping some data in the file. Get the skip byte value from the user
 
             FileInputStream input = new FileInputStream("sample.txt");
              System.out.println("Available bytes in the file: " +input.available());
              Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
              input.skip(sk);
               System.out.println("Available bytes in the file: " +input.available());
          
              input.close();
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a byte in a file "testout.txt" using FileOutputStreamNote Write a character "A" in a file using ASCII code
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
                 fout.write(65);    
                 fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String for Specified byte  in a file "testout.txt" using OutputStream.Note:Consider String str as "HI EVERYBODY...",it has to print from starting index from 2 to 8
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b,2,8);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to read a byte in a file "testout.txt" using FileInputStream
     FileInputStream fin=new FileInputStream("testout.txt");    
                 int i=fin.read();  
                 System.out.println((char)i);    
                 fin.close(); 
##
Implement a Java Program to append a String "SAVEETHA ENGINEERING COLLEGE" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA ENGINEERING COLLEGE"
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA ENGINEERING COLLEGE";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using FileOutputStreamNote: Write a String  "Welcome to Saveetha"
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
             String s="Welcome to Saveetha";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using OutputStreamNote: Write a String  "HI EVERYBODY..."
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                System.out.println("Successfully Completed");  
##
Write a Java Program for  displaying the data from the file "sample.txt" using FileInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments. Use "While "Loop for reading the characters from the file
 
             FileInputStream input = new FileInputStream("sample.txt");

        System.out.println("Data in the file: ");

        // Reads the first byte
        int i = input.read();

       while(i !=-1) {
           
           System.out.print((char)i);

           // Reads next byte from the file
           i = input.read();
        }
        input.close();
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .In that String str append the byte from the index value 2 and length 4
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b,2,4);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String "SAVEETHA" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA"
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using FileOutputStreamNote: Write a String  "HI EVERYBODY..."
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String for Specified byte  in a file "testout.txt" using OutputStream.Note:Consider String str as "SAVEETHA ENGINEERING COLLEGE",it has to print from starting index from 7 to 10
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="SAVEETHA ENGINEERING COLLEGE";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b,7,10);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read the content from the String using ReaderNote: Initialize String Value as "WELCOME ALL."  and Display the Content of the String using predefined functionInitialize char[] array = new char[12];
import java.io.*;  
import java.util.*;
public class JavaCharArrayReaderReadExample4 
{  
    public static void main(String[] args)
    {
        String s ="WELCOME ALL.";
        char[] array = new char[12];
        try
        {
            Reader input = new StringReader(s);
            input.read(array);
            System.out.println("Data read from the string:");
            System.out.println(array);
            input.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a Java Program for getting input from the user using Input StreamReaderRule: Use do-while statement and get the input value from the user.2.Enter the Symbol "#" to quit. Ex: Hi#
import java.io.*;
public class ReadConsole {
    public static void main(String args[]) throws IOException
    {
        InputStreamReader cin = null;
        try
        {
            cin = new InputStreamReader(System.in);
            char c;
            do
            {
                c = (char) cin.read();
                System.out.print(c);
            }while(c != '#');
        }
        finally
        {
            if (cin != null)
            {
                cin.close();
            }
        }
    }
}
##
Implement a Java Program to append a String in a file "testout.txt" using WriterNote:Write  "Hi Everybody" in the file(testtout.txt)
Writer w1 = new FileWriter("testout.txt",true);  

w1.append("Hi Everybody");  
w1.close();  

System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to identify the file content  "file1.txt" is ready to read using the predefined function ready and  read the content from the file "file1.txt" using Reader
Reader reader = new FileReader("file1.txt");
int data = reader.read();

System.out.println("Is there data in the stream?  " + reader.ready());

System.out.println("File content:");
while (data != -1)
{
    System.out.print((char) data);  
    data = reader.read();  
}
System.out.println();

reader.close();
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote:  Write the Specified portion in a file using predefined function [write(String str, int off, int len)]Read  String value from the user and starting byte (int off) as 2  and length (int len) as 6 from the User
Writer w = new FileWriter("testout.txt");  

Scanner sc=new Scanner(System.in);

String content = sc.nextLine();

int off=sc.nextInt();
int length=sc.nextInt();

w.write(content,off,length);  
w.close();  

System.out.println("Input String Value:" +content);  
System.out.println("Wrote Specified portion in a File Successfully");  
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[12];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[12];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[39];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[39];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a character in a file "testout.txt" using WriterNote:Write  "A" in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append('A');  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to read the content from the file "file1.txt" using Reader
        Reader reader = new FileReader("file1.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote:  Write the Specified portion in a file using predefined function [write(String str, int off, int len)]Get String value and starting byte and length from the User
   
            Writer w = new FileWriter("testout.txt");  
            Scanner sc=new Scanner(System.in);
            String content = sc.nextLine();
            int off=sc.nextInt();
            int length=sc.nextInt();
            w.write(content,off,length);  
            w.close();  
             System.out.println("Input String Value:" +content);  
            System.out.println("Wrote Specified portion in a File Successfully");  
##
Write a Java Program to read the content from the String using ReaderNote: Initialize String Value as "This is the text read from StringReader."  and Display the Content of the String using predefined functionInitialize char[] array = new char[40];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
   String s ="This is the text read from StringReader.";
   
    char[] array = new char[40];
    try {
      // Create a StringReader
      Reader input = new StringReader(s);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[39];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[39];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a character in a file "testout.txt" using WriterNote:Write  "Z" in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append('Z');  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to read the content from the file "test.txt" using Reader
        Reader reader = new FileReader("test.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote: Write a String  "Welcome to Java File Concept -Reader"
   
            Writer w = new FileWriter("testout.txt");  
            String content = "Welcome to Java File Concept -Reader";  
            w.write(content);  
            w.close();  
            System.out.println("Wrote File Successfully");  
##
Write a Java Program for getting input from the user using Input StreamReaderRule: Use do-while statement and get the input value from the user.2.Enter the Symbol "#" to quit. Ex: Hi#
import java.io.*;
public class ReadConsole {

   public static void main(String args[]) throws IOException {
      InputStreamReader cin = null;

      try {
         cin = new InputStreamReader(System.in);
       //  System.out.println("Enter characters, 'q' to quit.");
         char c;
         do {
            c = (char) cin.read();
            System.out.print(c);
         } while(c != '#');
      }finally {
         if (cin != null) {
            cin.close();
         }
      }
   }
}
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[12];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[12];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a NUMBER in a file "testout.txt" using WriterNote: APPEND "1234567890"  in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append("1234567890");  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to identify the file content  "file1.txt" is ready to read using the predefined function ready using Reader
        Reader reader = new FileReader("file1.txt");  
            int data = reader.read();  
            System.out.println("Is there data in the stream?  " + reader.ready());
            
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote: Write a String  "Hi Everybody...Welcome all"
   
            Writer w = new FileWriter("testout.txt");  
            String content = "Hi Everybody...Welcome all";  
            w.write(content);  
            w.close();  
            System.out.println("Wrote File Successfully");  
##
Write a Java Program to read the content from the String using ReaderNote: Initialize String Value as "This is the text read from StringReader."  and Display the Content of the String using predefined functionInitialize char[] array = new char[40];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
   String s ="This is the text read from StringReader.";
   
    char[] array = new char[40];
    try {
      // Create a StringReader
      Reader input = new StringReader(s);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a String in a file "testout.txt" using WriterNote:Write  "WELCOME ALL" in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append("WELCOME ALL");  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to read the content from the file "sample1.txt" using Reader
        Reader reader = new FileReader("sample1.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote:  Write the Specified portion in a file using predefined function [write(String str, int off, int len)]Get String value and starting byte and length from the User
   
            Writer w = new FileWriter("testout.txt");  
            Scanner sc=new Scanner(System.in);
            String content = sc.nextLine();
            int off=sc.nextInt();
            int length=sc.nextInt();
            w.write(content,off,length);  
            w.close();  
             System.out.println("Input String Value:" +content);  
            System.out.println("Wrote Specified portion in a File Successfully");  
##
Write a Java Program for  displaying number of bytes & data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
FileInputStream  file1 = new FileInputStream("sample.txt");
FilterInputStream filter = new BufferedInputStream(file1);

System.out.println("Available bytes in the file: " +filter.available());

int k =0;
System.out.println("Data read from the file:");

while((k=filter.read())!=-1)
{
    System.out.print((char)k);
}

file1.close();
filter.close();
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '/'.
class CustomFilterReader1 extends FilterReader
{  
    CustomFilterReader1(Reader in)
    {  
        super(in);  
    }  
    public int read() throws IOException
    {
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '/');  
        else  
            return x;  
    }  
}
##
Implement a java Program to convert the file content in to Uppercase letter using Filter Writer conceptNote: Already record.txt was created and data are added. Convert the data into Uppercase character using write operation
import java.io.*;  
class CustomFilterWriter extends FilterWriter
{
    CustomFilterWriter(Writer out)
    {
        super(out);  
    }  
    public void write(String str) throws IOException
    {
        super.write(str.toUpperCase());  
    }
}  
##
Implement a Java Program to write a String in a file "Sample1.txt" using FilerOutputStreamNote: Consider a string value as "Welcome Everybody"
FileOutputStream file1 = new FileOutputStream("Sample1.txt");

FilterOutputStream filter = new FilterOutputStream(file1);

String s="Welcome Everybody";
byte b[]=s.getBytes();

filter.write(b);
filter.close();

file1.close();
##
Write a Java Program for  displaying  data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
FileInputStream  file1 = new FileInputStream("sample.txt");  

FilterInputStream filter = new BufferedInputStream(file1);  

int k =0;  

while( (k=filter.read()) != -1 )
{
    System.out.print((char)k);  
}
##
Implement a Java Program to write a String in a file "testout.txt" using FilterOutputStreamNote: Use predefined function  write(byte[] array, int start, int length) .Get the String Value, Starting byte and length from the user and store the characters in the file
   
                
             
              FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
       // String s="Welcome to FilterOutput Stream File";      
         
         
             Scanner sc=new Scanner(System.in);
             String s=sc.nextLine();
             int start=sc.nextInt();
             int length=sc.nextInt();
              byte b[]=s.getBytes();  
           //  write(byte[] array, int start, int length)
             filter.write(b,start,length); 
      //  filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for  displaying number of characters in the file "sample.txt" after skipping the specified characters using FilterInputStreamNote:Already sample.txt file was created. Read the input from the user for skipping characters
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
         filter.skip(sk);
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Write a Java Program to get the actual number of available bytes in the file using filter input stream.Note:Already sample.txt file was created. Read the input from the user for read method
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
        for(int i=0;i<sk;i++)
        {
            filter.read();
        }
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Implement a java Program to replace the file content  "E" character in to "A" character using Filter Writer conceptNote: Already record.txt was created and data are added. Replace  the E character into A character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.replace('E','A'));  
        }  
    }  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '?'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '?');  
        else  
            return x;  
    }  
}  
##
Write a Java Program for  displaying number of characters in the file "sample.txt" after skipping the specified characters using FilterInputStreamNote:Already sample.txt file was created. Read the input from the user for skipping characters
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
         filter.skip(sk);
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '$'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '$');  
        else  
            return x;  
    }  
}  
##
Implement a java Program to replace the file content  "B" character in to "C" character using Filter Writer conceptNote: Already record.txt was created and data are added. Replace  the B character into C character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.replace('B','C'));  
        }  
    }  
##
Implement a Java Program to write a String in a file "testout.txt" using FilterOutputStreamNote: Consider String str as  "Welcome to FilterOutput Stream File" . Use predefined function  write(byte[] array, int start, int length) .Get the Starting byte and length from the user and store the characters in the file
   
                
             
              FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
        String s="Welcome to FilterOutput Stream File";      
        byte b[]=s.getBytes();    
         
             Scanner sc=new Scanner(System.in);
             int start=sc.nextInt();
             int length=sc.nextInt();
           //  write(byte[] array, int start, int length)
             filter.write(b,start,length); 
      //  filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for  displaying number of bytes & data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
       System.out.println("Available bytes in the file: " +filter.available());
              int k =0;
               System.out.println("Data read from the file:");
        while((k=filter.read())!=-1)
        {  
            System.out.print((char)k);  
        }  
  file1.close();  
        filter.close();  
##
Write a Java Program for  displaying number of characters in the file "sample.txt" after skipping the specified characters using FilterInputStreamNote:Already sample.txt file was created. Read the input from the user for skipping characters
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
         filter.skip(sk);
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using FilterOutputStreamNote: Consider String str as  "Welcome to FilterOutput Stream File" . Use predefined function  write(byte[] array, int start, int length) .Set the Starting value as 3 and length as 9 store the characters in the file
   
                
             
              FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
        String s="Welcome to FilterOutput Stream File";      
        byte b[]=s.getBytes();    
         
            
           //  write(byte[] array, int start, int length)
             filter.write(b,3,9); 
      //  filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for  displaying  data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
        FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        int k =0;  
        while((k=filter.read())!=-1){  
            System.out.print((char)k);  
        }  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '*'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '*');  
        else  
            return x;  
    }  
}  
##
Implement a java Program to convert the file content in to lowercase letter using Filter Writer conceptNote: Already record.txt was created and data are added. Convert the data into lowercase character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.toLowerCase());  
        }  
    }  
##
Implement a java Program to replace the file content  "V" character in to "A" character using Filter Writer conceptNote: Already record.txt was created and data are added. Replace  the V character into A character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.replace('V','A'));  
        }  
    }  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '+'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '+');  
        else  
            return x;  
    }  
}  
##
Implement a Java Program to write a byte in a file "testout.txt" using FilerOutputStreamNote: Consider a string value as "Welcome to FilterOutput Stream File"
   
                FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
        String s="Welcome to FilterOutput Stream File";      
        byte b[]=s.getBytes();      
        filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for Reading data from console by InputStreamReader and BufferedReader
import java.io.*;  
public class BufferedReaderExample
{
    public static void main(String args[])throws Exception
    {           
        InputStreamReader r=new InputStreamReader(System.in);
        BufferedReader br=new BufferedReader(r);
        String name=br.readLine();
        System.out.println("Welcome: "+name);
    }
}
##
Write a Java Program for writing the Specified length of  data in the file Using  FileOutputStream & BufferedOutputStreamNote:Assume sample.txt file created. In the FileOutputStream use sample.txt file as arguments and display the data in the file using BufferedOutputStream.Get the Input String from the User.From the Input String store the data from index value as 5 and length as 10
FileOutputStream fout=new FileOutputStream("sample.txt");    

BufferedOutputStream bout=new BufferedOutputStream(fout);  

Scanner sc=new Scanner(System.in);

String s=sc.nextLine();    
int index=sc.nextInt();
int length=sc.nextInt();

byte b[]=s.getBytes();    

System.out.println("Original Data:" +s);
System.out.print("After Skipping:");

bout.write(b,index,length);    

bout.close();
fout.close();
##
Write a Java Program to read Employee data (name ,age,id) from the user using the BufferedReader class.Consider Employee Class using default constructor and instance method for displaying Employee name, age, id
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Employee {
    String name;
    int id;
    int age;
    Employee(String name, int age, int id)
    {
        this.name = name;
        this.age = age;
        this.id = id;
    }
    public void displayDetails()
    {
        System.out.println("Name: "+this.name);
        System.out.println("Age: "+this.age);
        System.out.println("Id: "+this.id);
    }
}
public class ReadData
{
    public static void main(String args[]) throws IOException
    {
        BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));
        
        String name = reader.readLine();
        int age = Integer.parseInt(reader.readLine());
        int id = Integer.parseInt(reader.readLine());
        
        Employee std = new Employee(name, age, id);
        std.displayDetails();
    }
}
##
Write a Java Program for displaying the data from the file, after skipping characters from the file using Filereader & BufferedReaderNote:Assume sample.txt file created. In the FileReader use sample.txt file as arguments and display the data in the file using BufferedReader .Use Predefined function for Skip . Get the Skipping character from the UserInitialize char[] array = new char[36];
FileReader fr=new FileReader("sample.txt");

BufferedReader br=new BufferedReader(fr);  

Scanner sc=new Scanner(System.in);

int skch=sc.nextInt();
br.skip(skch);

char[] array = new char[36];

System.out.println("Data after skipping "+skch+" characters:");

br.read(array);

System.out.println(array);

br.close();    
fr.close(); 
##
Write a java program for writing the data in the file using Buffered WriterNote: Read the data from the User
FileWriter writer = new FileWriter("sample.txt");  

BufferedWriter buffer = new BufferedWriter(writer);  

Scanner sc = new Scanner(System.in);
String str=sc.nextLine();

buffer.write(str);

buffer.close();
##
Write a Java Program for displaying the data from the file using Filereader & BufferedReaderNote:Assume sample.txt file created. In the FileReader use sample.txt file as arguments and display the data in the file using BufferedReader
          FileReader fr=new FileReader("sample.txt");   
          BufferedReader br=new BufferedReader(fr);    
          int i;    
          while((i=br.read())!=-1)
          {  
          System.out.print((char)i);  
          }  
            System.out.print("\n");
          br.close();    
          fr.close(); 
##
Write a Java Program to read the number from the user using the BufferedReader class and perform Fibonacci series
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Sample{
    void natural(int num)
    {
        int n1=0,n2=1,n3,i;    
 System.out.print(n1+" "+n2);//printing 0 and 1    
    
 for(i=2;i<num;++i)//loop starts from 2 because 0 and 1 are already printed    
 {    
  n3=n1+n2;    
  System.out.print(" "+n3);    
  n1=n2;    
  n2=n3;    
    }  
}
}

public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));


int number = Integer.parseInt(reader.readLine());
Sample std = new Sample();
std.natural(number);
}
}
##
Write a Java Program for getting string and integer input from the User using BufferedReader
// Java Program for taking user
// input using BufferedReader Class
import java.io.*;

public class Sample
	
{
	
// Main Method
public static void main(String [] args) throws IOException
{
	// Creating BufferedReader Object
	// InputStreamReader converts bytes to
	// stream of character

					
BufferedReader bfn = new BufferedReader(new InputStreamReader(System.in));
	// String reading internally
	String str = bfn.readLine();
				
	// Integer reading internally
	int it = Integer.parseInt(bfn.readLine());
					
	// Printing String
	System.out.println("Entered String : "+ str);
					
	// Printing Integer			
	System.out.println("Entered Integer : "+ it);
		
	}
					
}
##
Write a java program for writing the data in the file using Buffered WriterNote: Read the data from the User, In that get the index value and length value from the user
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
    String str=sc.nextLine();
int index=sc.nextInt();
    int length=sc.nextInt();
   // buffer.write(str);
    buffer.write(str,index,length);
    
    buffer.close();  
##
Write a Java Program for displaying the data from the file after skip method using FileInputStream & BufferedInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments and display the data in the file using BufferedInputStreamUse Skip() method for skipping some data in the user. Get the skip byte value from the user
        FileInputStream fi = new FileInputStream("sample.txt");
        BufferedInputStream bi = new BufferedInputStream(fi);
        Scanner sc=new Scanner(System.in);
        int sk=sc.nextInt();
          bi.skip(sk);
          System.out.println("Contents after skipping "+sk+" bytes:");
          int a = 0;
          while((a=bi.read()) != -1)
            System.out.print((char)a);
          bi.close();
          fi.close();
##
Write a Java Program for displaying the data from the file  FileInputStream & BufferedInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments and display the data in the file using BufferedInputStream
        FileInputStream fi = new FileInputStream("sample.txt");
        BufferedInputStream bi = new BufferedInputStream(fi);
        
          System.out.println("Data in the File:");
          int a = 0;
          while((a=bi.read()) != -1)
            System.out.print((char)a);
          bi.close();
          fi.close();
##
Write a Java Program to read the number from the user using the BufferedReader class and perform sum of natural numbers.
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Sample{
    void natural(int num)
    {
        int i, sum = 0;  
//executes until the condition returns true  
        for(i = 1; i <= num; ++i)  
        {  
        //adding the value of i into sum variable  
        sum = sum + i;  
        }  
//prints the sum   
        System.out.println("Sum of First "+num+" Natural Numbers is = " + sum);  
    }  
}

public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));


int number = Integer.parseInt(reader.readLine());
Sample std = new Sample();
std.natural(number);
}
}
##
Write a Java Program to read Employee data (name ,Designation, Salary) from the user using the BufferedReader class.Consider Employee Class using default constructor and instance method for displaying Employee name, Designation, Salary
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Employee{
String name;
String des;
int sal;
Employee(String name, String des, int sal){
this.name = name;
this.des = des;
this.sal= sal;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Designation: "+this.des);
System.out.println("Salary: "+this.sal);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();

String des=reader.readLine();

int sal = Integer.parseInt(reader.readLine());
Employee std = new Employee(name, des, sal);
std.displayDetails();
}
}
##
Write a java Program for reading the characters from the user and print in the display screen using Buffered InputStream
import java.io.*;  
import java.io.*;
public class Main  {
  public static void main(String[] args) throws IOException
  {
   BufferedInputStream bf = new BufferedInputStream(System.in)   ;
    try{
          int i;
        while((i = bf.read()) != -1) {
            char c = (char) i;
            System.out.println(c);  
    }
    }
finally{
        bf.close();
}   
}   
}
##
Write a java program for writing the character in the file using Buffered WriterNote: Read the Character from the User
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
  char c=sc.next().charAt(0);
   buffer.write(c);
   
    buffer.close();  
##
Write a Java Program to read student data (name ,department, rollno) from the user using the BufferedReader class.Consider Student Class using default constructor and instance method for displaying Student name, department, rollno
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
String dept;
Student(String name, String dept, int rollno){
this.name = name;
this.dept = dept;
this.rollno = rollno;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Department: "+this.dept);
System.out.println("Rollno: "+this.rollno);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();

String dept = reader.readLine();

int rollno = Integer.parseInt(reader.readLine());
Student std = new Student(name, dept, rollno);
std.displayDetails();
}
}
##
Write a Java Program for writing the data in the file Using  FileOutputStream & BufferedOutputStreamNote:Assume sample.txt file created. In the FileOutputStream use sample.txt file as arguments and display the data in the file using BufferedOutputStream
       
           FileOutputStream fout=new FileOutputStream("sample.txt");    
     BufferedOutputStream bout=new BufferedOutputStream(fout);  
     Scanner sc=new Scanner(System.in);
     String s=sc.nextLine();    
     byte b[]=s.getBytes();    
     bout.write(b);    
    
     bout.close();    
     fout.close();    
##
Write a Java Program for displaying the data from the file, after skipping 3 characters from the file using Filereader & BufferedReaderNote:Assume sample.txt file created. In the FileReader use sample.txt file as arguments and display the data in the file using BufferedReader .Use Predefined function for SkipInitialize char[] array = new char[36];
          FileReader fr=new FileReader("sample.txt");   
          BufferedReader br=new BufferedReader(fr);    
          char[] array = new char[36];
          br.skip(3);
        System.out.println("Data after skipping 3 characters:");
        br.read(array);
      System.out.println(array);
          
          
          br.close();    
          fr.close(); 
##
Write a java program for writing the particular character from the String in the file using Buffered WriterNote: Read the String from the User.Store the 5th position Character in the File
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
    String str=sc.nextLine();
    
  char c=str.charAt(5);
   buffer.write(c);
   
    buffer.close();  
##
Write a Java Program for getting integer input from the User using BufferedReader
// Java Program for taking user
// input using BufferedReader Class
import java.io.*;

public class Sample
	
{
	
// Main Method
public static void main(String [] args) throws IOException
{
	// Creating BufferedReader Object
	// InputStreamReader converts bytes to
	// stream of character

					
BufferedReader bfn = new BufferedReader(new InputStreamReader(System.in));
 
				
	// Integer reading internally
	int it = Integer.parseInt(bfn.readLine());
					

					
	// Printing Integer			
	System.out.println("Entered Integer : "+ it);
		
	}
					
}
##
Write a Java Program to read student data (name ,rollno,  subjects marks) from the user using the BufferedReader class.Consider Student Class using default constructor and instance method for displaying Student name, rollno, subjectmarks
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
int m1,m2,m3;
Student(String name,int rollno,int m1,int m2,int m3){
this.name = name;
this.rollno = rollno;
this.m1 =m1;
this.m2=m2;
this.m3=m3;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Rollno: "+this.rollno);
System.out.println("Marks 1: "+this.m1);
System.out.println("Marks 2: "+this.m2);
System.out.println("Marks 3: "+this.m3);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();
int rollno = Integer.parseInt(reader.readLine());
int m1 = Integer.parseInt(reader.readLine());
int m2=Integer.parseInt(reader.readLine());
int m3 = Integer.parseInt(reader.readLine());
Student std = new Student(name, rollno,m1,m2,m3);
std.displayDetails();
}
}
##
Write a Java Program for writing the Specified length of  data in the file Using  FileOutputStream & BufferedOutputStreamNote:Assume sample.txt file created. In the FileOutputStream use sample.txt file as arguments and display the data in the file using BufferedOutputStream.Get the Input String from the User.From the Input String store the data from index value as 5 and length as 10
       
           FileOutputStream fout=new FileOutputStream("sample.txt");    
     BufferedOutputStream bout=new BufferedOutputStream(fout);  
     Scanner sc=new Scanner(System.in);
     String s=sc.nextLine();    
     byte b[]=s.getBytes();    
     System.out.println("Original Data:" +s);
     System.out.print("After Skipping:");
     bout.write(b,5,10);    
     bout.close();    
     fout.close();    
##
Write a Java Program to read student data (name ,rollno,  subjects marks,percentage) from the user using the BufferedReader class.Consider Student Class using default constructor and instance method for displaying Student name, rollno, subjectmarks
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
int m1,m2,m3;
int percentage;
Student(String name,int rollno,int m1,int m2,int m3){
this.name = name;
this.rollno = rollno;
this.m1 =m1;
this.m2=m2;
this.m3=m3;
percentage=(m1+m2+m3)/3;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Rollno: "+this.rollno);
System.out.println("Marks 1: "+this.m1);
System.out.println("Marks 2: "+this.m2);
System.out.println("Marks 3: "+this.m3);
System.out.println("Percentage : "+percentage);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();
int rollno = Integer.parseInt(reader.readLine());
int m1 = Integer.parseInt(reader.readLine());
int m2=Integer.parseInt(reader.readLine());
int m3 = Integer.parseInt(reader.readLine());
Student std = new Student(name, rollno,m1,m2,m3);
std.displayDetails();
}
}
##
Write a Java Program for getting Double and integer input from the User using BufferedReader
// Java Program for taking user
// input using BufferedReader Class
import java.io.*;

public class Sample
	
{
	
// Main Method
public static void main(String [] args) throws IOException
{
	// Creating BufferedReader Object
	// InputStreamReader converts bytes to
	// stream of character

					
BufferedReader bfn = new BufferedReader(new InputStreamReader(System.in));
  Double d=Double.parseDouble(bfn.readLine());
				
	// Integer reading internally
	int it = Integer.parseInt(bfn.readLine());
					
	// Printing String
	System.out.println("Entered Double : "+ d);
					
	// Printing Integer			
	System.out.println("Entered Integer : "+ it);
		
	}
					
}
##
Write a java program for writing the data ("Welcome Java") in the file using Buffered Writer
 FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    buffer.write("Welcome Java");  
    buffer.close();  
##
---
Write a Java Program for  displaying the number of bytes in the  file "sample1.txt" using DataInputStreamNote: Assume sample1.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("sample1.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
FileOutputStream fout1=new FileOutputStream("F1.txt");    
FileOutputStream fout2=new FileOutputStream("F2.txt");    

ByteArrayOutputStream bout=new ByteArrayOutputStream();  

int value=66;

bout.write(value);    
bout.writeTo(fout1);    
bout.writeTo(fout2);  

bout.close();

System.out.println("Success...");
##
Write a Java Program to store a String Value  "This is a file created by using Data Stream" in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);

dout.writeUTF("This is a file created by using Data Stream"); 
dout.close();    
fout.close();

System.out.println("Successfully Completed");
##
Write a Java Program to read a integer Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
FileInputStream input = new FileInputStream("OutputFile.txt");  
DataInputStream di = new DataInputStream(input); 

int data = di.readInt();

System.out.println(data);  

input.close();
di.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 69
FileOutputStream fout1=new FileOutputStream("F1.txt");    
FileOutputStream fout2=new FileOutputStream("F2.txt");    

ByteArrayOutputStream bout=new ByteArrayOutputStream();  

int value=69;

bout.write(value);    
bout.writeTo(fout1);    
bout.writeTo(fout2);  

bout.close();

System.out.println("Success...");
##
Implement a Java Program to write a integer '65'  in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
                 dout.writeInt(65);    
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Multiplication of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value*value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for read the float data in the  file "OutputFile.txt" using DataInputStream.Note:Assume OutputFile.txt file created. In the DataInputStream use Output.txt file as argumentsInitialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
   
        float intvalue=di.readFloat();
        System.out.println("File result: "+intvalue);
    
      di.close();
    fi.close();
##
Write a Java Program to read a boolean Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 boolean data =di.readBoolean();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for read the integer data in the  file "OutputFile.txt" using DataInputStream.Note:Assume OutputFile.txt file created. In the DataInputStream use Output.txt file as argumentsInitialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
   
        int intvalue=di.readInt();
        System.out.println("File result: "+intvalue);
    
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program to read a character Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 char data =di.readChar();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a Java Program to store a String Value  in a file "testout.txt" using DataOutputStreamNote: Read the String value from the user
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
Scanner sc=new Scanner(System.in);
String str=sc.nextLine();
dout.writeUTF(str); 
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read a double Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 double data =di.readDouble();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a Java Program to store an integer , Double  and character value in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
Scanner sc=new Scanner(System.in);
int num=sc.nextInt();
double db=sc.nextDouble();
char ch=sc.next().charAt(0);
                 dout.writeInt(num);  
                 dout.writeDouble(db);
                 dout.writeChar(ch);
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for  displaying the number of bytes in the  file "Output.txt" using DataInputStreamNote: Assume Output.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("Output.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Multiplication of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value*value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(66);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program to store an integer '65' , Double  as  '25.32' and character value as 'A'  in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
                 dout.writeInt(65);  
                 dout.writeDouble(25.32);
                 dout.writeChar('A');
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read a String Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
   String data =di.readUTF();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a Java Program for  displaying the number of bytes in the  file "sample.txt" using DataInputStreamNote: Assume sample.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("sample.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 69
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(69);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for  displaying the number of bytes in the  file "Output.txt" using DataInputStreamNote: Assume Output.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("Output.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a Java Program to store an integer '65' , Double  as  '25.32' and character value as 'A'  in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
                 dout.writeInt(65);  
                 dout.writeDouble(25.32);
                 dout.writeChar('A');
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read a boolean Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 boolean data =di.readBoolean();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to display the number of bytes after read  function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
public class Main {
    public static void main(String args[])
    {
        byte[] array = { 1, 2, 3, 4 };
        try
        {
            ByteArrayInputStream input = new ByteArrayInputStream(array);
            System.out.println("Available bytes at the beginning: " + input.available());
            input.read();
            System.out.println("Available bytes at the end: " + input.available());
            input.close();
        }
        catch (Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};skip 2 VALUESDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
public class Main {
    
    public static void main(String args[])
    {
        byte[] array = { 1, 2, 3, 4 };
        try
        {
            ByteArrayInputStream input = new ByteArrayInputStream(array);
            input.skip(2);
            System.out.print("Input stream after skipping 2 bytes: ");
            int data = input.read();
            while (data != -1) {
            System.out.print(data + ", ");
            data = input.read();
        }
        input.close();
    }
        catch (Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 69
FileOutputStream fout1=new FileOutputStream("F1.txt");    
FileOutputStream fout2=new FileOutputStream("F2.txt");    

ByteArrayOutputStream bout=new ByteArrayOutputStream();  

int value=69;

bout.write(value);    
bout.writeTo(fout1);    
bout.writeTo(fout2);    

bout.close();

System.out.println("Success...");
##
Write a java program to read data using ByteArrayInputStream.Note: Get String Value from the UserConvert Stringvalue into Byte using the predefined function -getBytes()
import java.io.ByteArrayInputStream;
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        byte[] array = str.getBytes();
        
        try
        {
            ByteArrayInputStream input = new ByteArrayInputStream(array);
            System.out.print("The bytes read from the input stream: ");
            for(int i= 0; i < array.length; i++)
            {
                int data = input.read();
                System.out.print(data + ", ");
            }
            input.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the data to the stream using predefined function write
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        String data = sc.nextLine();
        try
        {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            byte[] array = data.getBytes();
            
            out.write(array);
            
            String streamData = out.toString();
            System.out.println("Output stream: " + streamData);
            
            out.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to read data using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Read the byte value using predefined function read
import java.io.ByteArrayInputStream;
public class Main {
  public static void main(String[] args) {

    // Creates an array of byte
    byte[] array = {1, 2, 3, 4};

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes available using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

    public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-Initialize start value as 2 and length as 7
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,2,7);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};get skip integer value from the userDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
import java.util.*;
   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);
       Scanner sc=new Scanner(System.in);
       int skvalue=sc.nextInt();
      // Using the skip()  method
      input.skip(skvalue);
      System.out.print("Input stream after skipping " +skvalue+ "  bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(66);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};SKIP 1 INTEGERDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Using the skip() method
      input.skip(1);
      System.out.print("Input stream after skipping 1 bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after read  function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      // Reads 2 bytes from the input stream
      input.read();
     
      // Returns the available number of bytes
      System.out.println("Available bytes at the end: " + input.available());

      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to read data using ByteArrayInputStream.Note: Get String Value from the UserConvert Stringvalue into Byte using the predefined function -getBytes()
import java.io.ByteArrayInputStream;
import java.util.*;
public class Main {
  public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
String str=sc.nextLine();
    // Creates an array of byte
    byte[] array = str.getBytes();

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-Initialize start value as 3 and length as 6
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,3,6);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize   byte[] array = { 12, 22, 33, 45 };skip 2 VALUESDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 12, 22, 33, 45 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Using the skip() method
      input.skip(2);
      System.out.print("Input stream after skipping 2 bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes available using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

    public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to read data using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Read the byte value using predefined function read
import java.io.ByteArrayInputStream;
public class Main {
  public static void main(String[] args) {

    // Creates an array of byte
    byte[] array = {1, 2, 3, 4};

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Multiplication of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value*value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write data using ByteArrayOutputStream.Note:Initialize String value as "This is a line of text inside the string".Writes the data to the stream using predefined function write
import java.io.*;
public class Main {
    public static void main(String[] args) {

    String data = "This is a line of text inside the string.";

    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Output stream: " + streamData);

      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to read data using ByteArrayInputStream.Note: Get String Value from the UserConvert Stringvalue into Byte using the predefined function -getBytes()
import java.io.ByteArrayInputStream;
import java.util.*;
public class Main {
  public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
String str=sc.nextLine();
    // Creates an array of byte
    byte[] array = str.getBytes();

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};get skip integer value from the userDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
import java.util.*;
   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);
       Scanner sc=new Scanner(System.in);
       int skvalue=sc.nextInt();
      // Using the skip()  method
      input.skip(skvalue);
      System.out.print("Input stream after skipping " +skvalue+ "  bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String,starting position and length value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
     int start=sc.nextInt();
     int length=sc.nextInt();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,start,length);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-Initialize start value as 2 and length as 7
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,2,7);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(66);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program to print the String value "Hi Everybody,Welcome to Java StringReader." Using StringReader
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {
        String srg = "Hi Everybody,Welcome to Java StringReader.";  
        StringReader reader = new StringReader(srg);  
        int k=0; 
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Create a Java Program to display the string content after skipping 4 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 4 characters
import java.io.StringReader;  
import java.util.*;
public class StringReaderExample 
{  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        
        StringReader sr = new StringReader(str);
        
        System.out.println("Original data: "+str);
        
        sr.skip(4);
        
        System.out.println("Data after skipping");
        
        int k;
        while((k=sr.read())!=-1)
        {
            System.out.print((char)k);
        }
    }  
}  
##
Write a Java Program to print the string "This is the text in the string." in the outputscreen using StringWriter
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {
        String srg = "This is the text in the string.";  
        StringReader reader = new StringReader(srg);  
        System.out.print("Data in the StringWriter: ");
        int k=0; 
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Create a Java Program to display the string content after skipping 2 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 2 characters
import java.io.StringReader;  
import java.util.*;
public class StringReaderExample 
{  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        
        StringReader sr = new StringReader(str);
        
        System.out.println("Original data: "+str);
        
        sr.skip(2);
        
        System.out.println("Data after skipping");
        
        int k;
        while((k=sr.read())!=-1)
        {
            System.out.print((char)k);
        }
    }  
}  
##
Write a Java Program to print the character in the outputscreen using StringWriterNote:Read the integer value from the user.Equivalent Character displayed in the Output Screen.
import java.io.StringWriter;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int data=sc.nextInt();
        try
        {
            StringWriter output = new StringWriter();
            
            output.write(data);
            System.out.println("Input Int Value: " + data);
            System.out.println("Equivalent Character: " + output);
            output.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a Java Program to print the String value "Hello Java!! Welcome to Java StringReader." Using StringReader
import java.io.StringReader;  
public class StringReaderExample {  
    public static void main(String[] args) throws Exception {  
        String srg = "Hello Java!! \nWelcome to Java StringReader.";  
        StringReader reader = new StringReader(srg);  
        int k=0;  
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Create a Java Program To display  and skip the specified number of characters using the predefined Method Skip in StringReaderNote:read the String value from the user,Get the number of characters to skip from the user
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
    int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
             input.skip(skipnumber);
             System.out.println("Data after skipping "+skipnumber+" characters:");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the string "String Writer" in the outputscreen using StringWriter
import java.io.StringWriter;

public class Main {
  public static void main(String[] args) {

    String data = "String Writer";

    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);

      // Prints the string writer
      System.out.println("Data in the StringWriter: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Create a Java Program to display the string content after skipping 5 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 5 characters
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
   // int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
           input.skip(5);
             System.out.println("Data after skipping ");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
Write a Java Program to print the specified bytes from the string in the outputscreen using StringWriterNote:Read the String Value, starting position  as 2 and length  as 4 from the user.
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data = sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data,2,4);

      // Prints the string writer
      System.out.println("Input String: " + data);
      System.out.println("Specified Location: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the String value with the help of character array Using StringReaderNote: Get the String value from the User ,Use char array function as char[] array = new char[15];
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String data = sc.nextLine();  
       
       char[] array = new char[15];

    try {
      // Create a StringReader
      StringReader input = new StringReader(data);

      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);

      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
        }  
}  
##
Create a Java Program to display the string content after skipping 3 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 3 characters
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
   // int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
           input.skip(3);
             System.out.println("Data after skipping ");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the string in the outputscreen using StringWriterNote:Read the String Value from the user
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data = sc.nextLine();
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);

      // Prints the string writer
      System.out.println("Data in the StringWriter: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the specified bytes from the string in the outputscreen using StringWriterNote:Read the String Value, starting position and length from the user.
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data = sc.nextLine();
     int st=sc.nextInt();
     int len=sc.nextInt();
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data,st,len);

      // Prints the string writer
      System.out.println("Input String: " + data);
      System.out.println("Specified Location: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the String value Using StringReaderNote: Get the String value from the User
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String srg = sc.nextLine();  
        StringReader reader = new StringReader(srg);  
        int k=0; 
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Write a Java Program to append the String with user defined String  using StringWriterNote:Read the String value and Append String value from the user.Display the Output in the output Screen
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

      
     Scanner sc=new Scanner(System.in);
     String data=sc.nextLine();
     String append =sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);
      output.append(append);
      // Prints the string writer
      System.out.println("Input Value: " + data);
      System.out.println("After Append: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the String value with the help of character array Using StringReaderNote: Get the String value from the User ,Use char array function as char[] array = new char[10];
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String data = sc.nextLine();  
       
       char[] array = new char[10];

    try {
      // Create a StringReader
      StringReader input = new StringReader(data);

      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);

      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
        }  
}  
##
Write a Java Program to append the String "Java" in the user defined String  using StringWriterNote:Read the String value from the user.Append the String "Java" in the user defined string value . Display the Output in the output Screen
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

      
     Scanner sc=new Scanner(System.in);
     String data=sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);
      output.append("Java");
      // Prints the string writer
      System.out.println("Input Value: " + data);
      System.out.println("After Append: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java program to store the Employee details(name,designation,id) in a file "emp.txt" using Serialization(Serializing an Object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Read Employee name ,designation,id from the User, and pass as an argument for Constructor Studentinfo
try
{
    Scanner sc=new Scanner(System.in);
    String name=sc.nextLine();
    String dept = sc.nextLine();
    int rollno=sc.nextInt();
    
    Employeeinfo si1 = new Employeeinfo(name,dept,rollno);
    FileOutputStream fos = new FileOutputStream("emp.txt");
    ObjectOutputStream oos = new ObjectOutputStream(fos);
    oos.writeObject(si1);
    oos.close();
}
catch (Exception e)
{
    System.out.println(e);
} 
##
Write a Java program to read the Student details(name,dept,rollno)from a file "student.txt" using Deserialization(deserialize the object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Initialize Studentinfo objectname =null;
try
{
    FileInputStream fis = new FileInputStream("student.txt");
    ObjectInputStream ois = new ObjectInputStream(fis);
    Studentinfo si = (Studentinfo)ois.readObject();
    System.out.println("Deserialization-Student Name:"+si.name);
    System.out. println("Deserialization-Student Department:"+si.dept);
    System.out. println("Deserialization-Student RollNo:"+si.rollno);

}
catch (Exception e)
{
    System.out.println(e);
}
##
Write a Java program to perform transient in Student details(name,dept,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept,,rollno
class Studentinfo implements Serializable
{
    String name;
    transient String dept;
    transient int rollno;
    Studentinfo(String n, String r,int n1)
    {
        this.name = n;
        this.dept = r;
        this.rollno=n1;
    }
}
##
Write a Java program to perform Transient in  Student details(name,dept)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept
class Studentinfo implements Serializable
{
    String name;
    transient String dept;
    Studentinfo(String n, String r)
    {
        this.name = n;
        this.dept = r;
    }
}
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Employee DatabaseNote: Create base class Employeesinfo with name and designation. In the Derived class Employeesal initialize the variable salarySerialization and Deserialization already performed in main class
class Employeeinfo implements Serializable
{
    String name;
    String desi;
    Employeeinfo(String n, String r)
    {
        this.name = n;
        this.desi = r;
    }
}
class Employeesal extends Employeeinfo
{
    double Salary;   
    public Employeesal(String name, String desi, double Salary)
    {
        super(name,desi);
        this.Salary=Salary;
    } 
}
##
Write a Java program to store the Employee details(name,designation) in a file "emp.txt" using Serialization(Serializing an Object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Read Employee name & Designation from the User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
           
            Employeeinfo si1 = new Employeeinfo(name,dept);
            FileOutputStream fos = new FileOutputStream("emp.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Employee details(name,designation,id)from a file "emp.txt" using Deserialization(deserialize the object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Initialize Employeeinfo objectname =null;
  Employeeinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("emp.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Employeeinfo)ois.readObject();
        }
         catch (Exception e)
        {
            System.out.println(e); 
         }
          System.out.println("Deserialization-Employee Name:"+si.name);
            System.out. println("Deserialization-Employee Designation:"+si.desi);
            System.out. println("Deserialization-Employee ID:"+si.id);
##
Write a Java program to perform Transient in Employee details(name,designation)Note: Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable designation
 class Employeeinfo implements Serializable
{
    String name;
    transient String desi;
   
    Employeeinfo(String n, String r)
    {
    this.name = n;
    this.desi = r;
   
    }
} 
##
Write a Java program to perform Transient in  Employee details(name,designation,id)Note:Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable id
class Employeeinfo implements Serializable
{
    String name;
    String desi;
    transient int id;
   
    Employeeinfo(String n, String r, int na)
    {
    this.name = n;
    this.desi = r;
    this.id=na;
   
    }
}
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Student Database.Note:Create a base class Person with variable rollno & name .In the derived class Student initialize the variable course name & fees.Serialization and Deserialization already performed in main class
   
    class Person implements Serializable{    
     int id;    
     String name;
     int total,percentage;
     Person(int id, String name) {    
      this.id = id;    
      this.name = name;    
     }    
    }    
    class Student extends Person{    
     String course;    
     int fee;   
     
     public Student(int id, String name, String course, int fee) {    
      super(id,name);    
      this.course=course;    
      this.fee=fee;    
     }    
    }    
##
Write a Java program to store the Student details(name,rollno) in a file "student.txt" using Serialization(Serializing an Object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Read Student name & rollno from User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            int rollno = sc.nextInt();
           
            Studentinfo si1 = new Studentinfo(name,rollno);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Student details(name,dept) from a file "student.txt" using Deserialization(deserialize the object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Initialize Studentinfo objectname =null;
  Studentinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("student.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Studentinfo)ois.readObject();
        }
         catch (Exception e)
        {
          System.out.println(e);  
            
        }
         System.out.println("Deserialization--Student Name:"+si.name);
      System.out. println("Deserialization--Student Department:"+si.dept);
##
Write a Java program to perform Transient in  Student details(name,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for rollno
 class Studentinfo implements Serializable
{
    String name;
    transient int rid;
   
    Studentinfo(String n, int r)
    {
    this.name = n;
    this.rid = r;
   
    }
}  
##
Write a Java program to perform Transient in  Student details(name,dept)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept
 class Studentinfo implements Serializable
{
    String name;
   transient String dept;
   
    Studentinfo(String n, String r)
    {
    this.name = n;
    this.dept = r;
   
    }
}
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Student Database.Note:Create a base class Person with variable rollno & name .In the derived class Student initialize the variable course name & fees.Serialization and Deserialization already performed in main class
    import java.io.*;    
    class Person implements Serializable{    
     int id;    
     String name;    
     Person(int id, String name) {    
      this.id = id;    
      this.name = name;    
     }    
    }    
    class Student extends Person{    
     String course;    
     int fee;    
     public Student(int id, String name, String course, int fee) {    
      super(id,name);    
      this.course=course;    
      this.fee=fee;    
     }    
    }    
##
Write a Java program to store the Student details(name,dept) in a file "student.txt" using Serialization(Serializing an Object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Read Student name & department from the User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
           
            Studentinfo si1 = new Studentinfo(name,dept);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Student details(name,rollno) from a file "student.txt" using Deserialization(deserialize the object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Initialize Studentinfo objectname =null;
   Studentinfo si=null;
  try
        {
            FileInputStream fis = new FileInputStream("student.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Studentinfo)ois.readObject();
        }
         catch (Exception e)
        {
            System.out.println(e);
            }
             System.out.println("Deserialization-Student Name:"+si.name);
            System.out. println("Deserialization-Student Rollno:"+si.rid);
##
Write a Java program to perform Transient in  Employee details(name,designation,id)Note:Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable id
class Employeeinfo implements Serializable
{
    String name;
    String desi;
    transient int id;
   
    Employeeinfo(String n, String r, int na)
    {
    this.name = n;
    this.desi = r;
    this.id=na;
   
    }
}
##
Write a Java program to perform Transient in  Student details(name,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for rollno
 class Studentinfo implements Serializable
{
    String name;
    transient int rid;
   
    Studentinfo(String n, int r)
    {
    this.name = n;
    this.rid = r;
   
    }
}  
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Employee DatabaseNote: Create base class Employeesinfo with name and designation. In the Derived class Employeesal initialize the variable salarySerialization and Deserialization already performed in main class
 class Employeeinfo implements Serializable
{
    String name;
    String desi;
    
   
    Employeeinfo(String n, String r)
    {
    this.name = n;
    this.desi = r;
   
    }
}
    class Employeesal extends Employeeinfo{    
    double Salary;   
      
     
     public Employeesal(String name, String desi, double Salary) {    
      super(name,desi);    
      this.Salary=Salary;    
       
     }    
    }    
##
Write a Java program to store the Student details(name,dept,rollno) in a file "student.txt" using Serialization(Serializing an Object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Read Student name,department,rollno from the User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
            int roll=sc.nextInt();
           
            Studentinfo si1 = new Studentinfo(name,dept,roll);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Employee details(name,designation)  from a file "emp.txt" using Deserialization(deserialize the object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Initialize Employeeinfo objectname =null;
  Employeeinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("emp.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Employeeinfo)ois.readObject();
        }
         catch (Exception e)
        {
            e.printStackTrace(); }
       
 System.out.println("Deserialization--Employee Name:"+si.name);
            System.out. println("Deserialization--Employee Designation:"+si.desi);
##
Write a Java program to perform transient in Student details(name,dept,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept,,rollno
 class Studentinfo implements Serializable
{
    String name;
   transient String dept;
    transient int rollno;
   
    Studentinfo(String n, String r,int n1)
    {
    this.name = n;
    this.dept = r;
    this.rollno=n1;
    }
}
##
Write a Java program to perform Transient in Employee details(name,designation)Note: Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable designation
 class Employeeinfo implements Serializable
{
    String name;
    transient String desi;
   
    Employeeinfo(String n, String r)
    {
    this.name = n;
    this.desi = r;
   
    }
} 
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Student Database.Note:Create a base class Person with variable rollno & name .In the derived class Student initialize the variable course name & fees.Serialization and Deserialization already performed in main class
   
    class Person implements Serializable{    
     int id;    
     String name;
     int total,percentage;
     Person(int id, String name) {    
      this.id = id;    
      this.name = name;    
     }    
    }    
    class Student extends Person{    
     String course;    
     int fee;   
     
     public Student(int id, String name, String course, int fee) {    
      super(id,name);    
      this.course=course;    
      this.fee=fee;    
     }    
    }    
##

---
EMP123 John 24800.0
class employee
{
    private String emp_id,emp_name;
    void set(String a,String b)
        {
            emp_name=b;
            emp_id=a;
        }
    class salary
    {
        private float basic,allowance;
        void set(float a,float b)
        {
            basic=a;
            allowance=b;
        }
        void display()
        {
            System.out.println(emp_id+" "+emp_name+" "+(float)(basic+allowance));
        }
    }
}
public class main
{
    public static void main(String[] args)
    {
        employee e=new employee();
        e.set("EMP123","John");
        employee.salary s=e.new salary();
        s.set(22500,2300);
        s.display();
    }
}


##
Create a Class "NetBanking" with private static member "UserName" [User@123], then
class netbanking 
{
    private static String udername="User@123";
    static class mailverifiedacc
    {
        void validate()
        {
            System.out.println(udername+" is Mail Verified Account ");
        }
    }
    static class mobileverifiedacc
    {
        void validate()
        {
            System.out.println(udername +" is Mobile Verified Account ");
        }
    }
}
public class main
{
    public static void main(String[] args)
    {
        // netbanking n=new netbanking();
        netbanking.mailverifiedacc mail=new netbanking.mailverifiedacc();
        mail.validate();
        netbanking.mobileverifiedacc mobile =new netbanking.mobileverifiedacc();
        mobile.validate();
    }
}

##
Write a Java Program using Method Local Inner Class for below Scenario.
public class Department {
    String department = "Financial and Management Department";

    public void display(String company) {
        
        class Inner {
            public void print() {
                System.out.println("Department is " + department);
                System.out.println("Company is " + company);
            }
        }

        Inner inner = new Inner();
        inner.print();
    }

    public static void main(String[] args) {

        Department department = new Department();

        department.display("ABC Industries");
    }
}



##
Create a Class "Exam" with private static member "Student_Id"[Student@1],mark1,mark2,mark3,average, then
public class Exam
{
    private static String Student_Id="Student@1";
   
    static class Grade
    {
        int mark1=50,mark2=80,mark3=80;
        public void display()
        {
            float avg=(mark1+mark2+mark3)/3;
           System.out.println(Student_Id + "'s Average Mark is "+avg);
        }
    }
    
    public static void main(String[] args)
    {
  Grade obj=new Grade();
 obj.display();
 
    }
}

##
Name given in Outer Class is Johnson
class MethodLocal
{
    public String value = "Name given in Outer Class is Johnson";
    public void display()
    {
        class Inner
        {
            public void print()
            {
                System.out.println(value);
            }
        }
        Inner obj1 = new Inner();
        obj1.print();
    }
}
public class Main
{
    public static void main(String[]args)
    {
        MethodLocal obj = new MethodLocal();
        obj.display();
    }
}

##
Saveetha 12345
class Progress_Report
{
    private String stuId;
    
    Progress_Report()
    {
        this.stuId = "12345";
    }
    
    class Exam
    {
        private float mark1;
        private float mark2;
        private float mark3;
        
        Exam()
        {
            this.mark1 = (float) 89;
            this.mark2 = (float) 78;
            this.mark3 = (float) 67;
        }
        public void display()
        {
            float sum = (mark1+mark2+mark3);
            System.out.print("Saveetha "+stuId);
        }
    }
}

public class Main
{
    public static void main(String[]args)
    {
        Progress_Report obj = new Progress_Report();
        Progress_Report.Exam obj1 = obj.new Exam();
        obj1.display();
    }
}

##
Create 3 classes College, Department and Student. Class Student extends Class Department and Class Department extends Class College.
class College {
    void print_cgeName() {
        System.out.println("Saveetha Engineering College");
    }
}

class Department extends College {
    void print_deptName() {
        System.out.println("Computer Science and Engineering");
    }
}

class Student extends Department {
    void print_stuName() {
        System.out.println("John Britto");
    }
}

public class Main {
    public static void main(String[] args) {
        Student obj = new Student();
        obj.print_cgeName();  
        obj.print_deptName();
        obj.print_stuName();
    }
}


##
Create 3 classes A, B and C. Class C extends Class B and Class B extends Class A. Each class has an method display(). Call class A’s display() from class C.
public class Grand_Parent {
    public Grand_Parent() {
        System.out.println("Class A's display");
    }
    
   
    public static void main(String[] args) {
        Child child = new Child();
    }
    
}

class Parent extends Grand_Parent {
    public Parent() {
        System.out.println("Class B's display");
    }
}

class Child extends Parent {
    public Child() {
        System.out.println("Class C's display");
    }
}




##
Employee Name is Vinu
import java.util.Scanner;
class Balance
{
    private String name;
    private String acntno;
    private double bal;
    
    public Balance(String name, String acntno, double bal)
    {
        this.name = name;
        this.acntno = acntno;
        this.bal = bal;
    }
    public void cal(double amnt)
    {
        bal += amnt;
    }
    public void display()
    {
        System.out.println("Employee Name is "+name);
        System.out.println("Employee Id is "+acntno);
        System.out.println("Salary is "+bal);
    }
}

public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        String name = sc.nextLine();
        String acntno = sc.nextLine();
        double bal = sc.nextDouble();
        Balance acnt = new Balance(name,acntno,bal);
        double amnt = sc.nextDouble();
        acnt.cal(amnt);
        acnt.display();
        sc.close();
        
    }
}

##
Create 3 classes Shapes, Circle and Area. Class Area extends Class Circle and Class Circle extends Class Shapes.
import java.util.Scanner;

class Shapes {
    public void print_Shape() {
        System.out.println("Shapes Class");
    }
}

class Circle extends Shapes {
    protected float radius;
    public void get() {
        Scanner scanner = new Scanner(System.in);
        radius = scanner.nextFloat();
    }
}

class Area extends Circle {
    public void calc() {
        double area = 3.14* radius * radius;
        System.out.println("Area of Circle is " + area);
    }
}

public class Main {
    public static void main(String[] args) {
        Area areaObj = new Area();
        areaObj.get();           
        areaObj.print_Shape(); 
        areaObj.calc();     
    }
}


##
Create 3 classes Grand Parent, Parent and Child . Class Child extends Class Parent and Class Parent extends Class Grand Parent. Create Main class to Access all Constuctors by using Child class Object .
import java.util.*;
class coll
{
    coll()
    {
        System.out.println("Grand_Parent Class");
    }
}
class dept extends coll
{
    dept()
    {
        System.out.println("Parent Class");
    }
}
class student extends dept
{
    student()
    {
        System.out.println("Child Class");
    }
}
public class main
{
    public static void main(String[] args)
    {
        student s=new student();
    }
}


##
Shape Class have method " display" to display "Shape Class".
class Shape {
    public void display() {
        System.out.println("Shape Class");
    }
}
class Rectangle extends Shape {
    public void show() {
        System.out.println("Rectangle Class");
    }
}
class Triangle extends Shape {
    public void show() {
        System.out.println("Triangle Class");
    }
}
class Circle extends Shape {
    public void show() {
        System.out.println("Circle Class");
    }
}
public class Main {
    public static void main(String[] args) {
        Rectangle rectangleObj = new Rectangle();
        rectangleObj.display();   
        rectangleObj.show();      
        Triangle triangleObj = new Triangle();
        triangleObj.display();    
        triangleObj.show();       

        // Create object for Circle
        Circle circleObj = new Circle();
        circleObj.display();      
        circleObj.show();         
    }
}


##
Account Class have interest rate as 4.5% common to all types of account. If Fixed Deposit type of Account then interest rate will be 7%. If Current type of Account then interest rate will be 6.5%.
class Account {
    // Common interest rate for all accounts
    protected double interestRate = 4.5;

    // Method to display the interest rate
    void display() {
        System.out.println("Account's Interest Rate is : " + interestRate + "%");
    }
}

class FixedDeposit extends Account {
    // Method to display the interest rate for Fixed Deposit Account
    void displayIR() {
        System.out.println("Interest Rate of Fixed Deposit Account before Change::");
        super.display(); // Display base interest rate
        interestRate = 4.5; // Fixed Deposit specific interest rate
        System.out.println("Interest Rate of Current Account before Change::");
        super.display(); // Display updated interest rate
    }
}

class Current extends Account {
    // Method to display the interest rate for Current Account
    void displayIR() {
        System.out.println("Interest Rate of Fixed Deposit Account after Change::");
        interestRate = 7.0; // Hypothetical increase in interest rate for demonstration
        super.display(); // Display base interest rate with increment
        interestRate = 6.5; // Current Account specific interest rate
        System.out.println("Interest Rate of Current Account after Change::");
        super.display(); // Display updated interest rate
    }
}

public class Bank {
    public static void main(String[] args) {
        // Creating Fixed Deposit account and displaying its interest rate
        FixedDeposit fdAccount = new FixedDeposit();
        fdAccount.displayIR();
        
        // Creating Current account and displaying its interest rate
        Current currentAccount = new Current();
        currentAccount.displayIR();
    }
}



##
1. Animal Class have constructor to display "Animal is the Base Class"
import java.util.*;
class animal
{
    animal()
    {
    System.out.println("Animal is the Base Class");
    }
}
class dog extends animal
{
    dog()
    {
        System.out.println("Dog is the Derived Class of Animal");
    }
}
class cat extends animal
{
    cat()
    {
        System.out.println("Cat is the Derived Class of Animal");
    }
}
public class test
{
    public static void main(String[] args)
    {
        dog d=new dog();
        cat c=new cat();
    }
}


##
Student Class have common assessment mark as 5. If Sports Students then extra 5 mark will added to the assessment mark. If Student attended any extra-curriculum activities then extra 4 marks will be added.
class Student
{
    double mark = 5;
    void displayMarks()
    {
        System.out.println("Student's Assessment Marks : "+mark);
    }
}
class SportsStudent extends Student
{
    double inc = 5.0;
    void incrementMark()
    {
        System.out.println("Student's Assessment Marks : "+(mark + inc));
    }
}
 
class Extra_Curriculum extends Student
{
    double inc =4.0;
    void incrementMark()
    {
     System.out.println("Student's Assessment Marks : "+(mark + inc));
    }
}
public class Main
{
    public static void main(String[]args)
    {
        SportsStudent emp1 =new SportsStudent();
        Extra_Curriculum emp2 =new Extra_Curriculum();
        
        System.out.println("Assessment Mark of the Sports Student before  before incrementing:");
        emp1.displayMarks();
        
        System.out.println("Assessment Mark of the Extra -Curriculum Acitvity Student before  before incrementing:");
        emp2.displayMarks();
        
        System.out.println("Assessment Mark of the Sports Student after  before incrementing:");
        emp1.incrementMark();
        
        System.out.println("Assessment Mark of the Extra -Curriculum Acitvity Student after  before incrementing:");
        emp2.incrementMark();
    }
}

##
1. Vehicle Class have constructor to display "Vehicle class has 3 Child Class "
class Vehicle{
    void display(){
        System.out.println("Shape Class");
    }
}
class Truck extends Vehicle{
    void show(){
        System.out.println("Vehicle class has 3 Child Class\nTruck is the one of the Child of Vehicle Class");
    }
}
class Car extends Vehicle{
    void show(){
        System.out.println("Vehicle class has 3 Child Class\nCar is the one of the Child of Vehicle Class");
    }
}
class Bus extends Vehicle{
    void show(){
        System.out.println("Vehicle class has 3 Child Class\nBus is the one of the Child of Vehicle Class");
    }
}
public class prog{
    public static void main(String[] args){
        Car c=new Car();
        Bus b=new Bus();
        Truck t=new Truck();
        
        c.show();
        t.show();
        b.show();
    }
}

##
1. Media Class have constructor to display "Parent Class is Media"
class media
{
    media()
    {
        System.out.println("Parent Class is Media");
    }
}
class magazine extends media
{
    magazine()
    {
        System.out.println("Magazine is the one of the Child of Media Class");
    }
}
class channel extends media
{
    channel()
    {
        System.out.println("Channel is the one of the Child of Media Class");
    }
}
public class main
{
    public static void main(String[] args)
    {
        magazine m=new magazine();
        channel c=new channel();
    }
}

##
Create a class "MethodLocal" with
class methodlocal
{
    private String a="Outer Class Variable";
    void display()
    {
        class inner
    {
        private String b="Inner Class Variable";
        void print()
        {
            System.out.println(a);
            System.out.println(b);
        }
    }
    inner a=new inner();
    a.print();
    }
}
public class main
{
    public static void main(String[] args)
    {
        methodlocal a=new methodlocal();
        a.display();
    }
}

##
Student@1's Average Mark is 70.0
public class Exam
{
    private static String Student_Id="Student@1";
   
    static class Grade
    {
        int mark1=50,mark2=80,mark3=80;
        public void display()
        {
            float avg=(mark1+mark2+mark3)/3;
           System.out.println(Student_Id + "'s Average Mark is "+avg);
        }
    }
    
    public static void main(String[] args)
    {
  Grade obj=new Grade();
 obj.display();
 
    }
}

##
User12345 Student_1 234.0
public class Progress_Report {
    // Private members of the outer class
    private String Stu_Id;
    private String Password;

    // Constructor for Progress_Report class
    public Progress_Report(String Stu_Id, String Password) {
        this.Stu_Id = Stu_Id;
        this.Password = Password;
    }

    // Inner class Exam
    public class Exam {
        // Private members of the inner class
        private float mark1;
        private float mark2;
        private float mark3;

        // Constructor for Exam class
        public Exam(float mark1, float mark2, float mark3) {
            this.mark1 = mark1;
            this.mark2 = mark2;
            this.mark3 = mark3;
        }

        // Public method to display the results
        public void display() {
            float totalMarks = mark1 + mark2 + mark3;
            System.out.println(Stu_Id + " " + Password + " " + totalMarks);
        }
    }

    public static void main(String[] args) {
        // Create an instance of Progress_Report with username and password
        Progress_Report report = new Progress_Report("User12345", "Student_1");

        // Create an instance of the inner class Exam with marks
        Progress_Report.Exam exam = report.new Exam(89, 78, 67);

        // Call the display method of the inner class Exam
        exam.display();
    }
}


##
Create a Class "PaymentDetails" with private static member "Acc_num" [7866AC43], then
public class PaymentDetails {
    private static String Acc_num = "7866AC43";

    public static class ValidateCreditCardDetails {
        public void validate() {
            System.out.println(Acc_num+" Account Validated");
        }
    }

    public static class ValidateDebitCards {
        public void validate() {
            System.out.println(Acc_num+" Debit Card Validated");
        }
    }

    public static void main(String[] args) {
        
        PaymentDetails.ValidateCreditCardDetails validateCreditCardDetails = new PaymentDetails.ValidateCreditCardDetails();

        PaymentDetails.ValidateDebitCards validateDebitCards = new PaymentDetails.ValidateDebitCards();

        validateCreditCardDetails.validate();

        validateDebitCards.validate();
    }
}


##
Create 4 classes Student, Marks, Total and Average. Class Average extends Class Total and Class Total extends Class Marks. Class Marks extends Class Student.Create Main class to Access all Constuctors by using Average class Object .
class Student
{
    Student()
    {
        System.out.println("Student Class");
    }
}

class Marks extends Student
{
    Marks()
    {
        System.out.println("Marks Class");
    }
}

class Total extends Marks
{
    Total()
    {
        System.out.println("Total Class");
    }
}

class Average extends Total
{
    Average()
    {
        System.out.println("Average Class");
    }
}


public class Main
{
    public static void main(String args[])
    {
        Average obj = new Average();
        
        
    }
}

##
Student Name is John
import java.util.Scanner;
public class Input {
    public static Scanner scanner = new Scanner(System.in);
    
    public static void main(String[] args) {
        
        Percentage percentage = new Percentage();
        percentage.inputDetails();
        percentage.calculatePercentage();
        percentage.display();
    }
    
    
}

class Percentage {
    String name;
    String regNo;
    int total;
    float percentage;

    public void inputDetails() {
       
        name = Input.scanner.nextLine();

        regNo = Input.scanner.nextLine();

        int marks[] = new int[5];
        for (int i = 0; i < 5; i++) {
            marks[i] = Input.scanner.nextInt();
            total += marks[i];
        }
    }

    public void calculatePercentage() {
        percentage = (float) total / 5;
    }

    public void display() {
        System.out.println("Student Name is " + name);
        System.out.println("Registeration Number is " + regNo);
        System.out.println("Total is " + total);
        System.out.printf("Percentage is "+Math.floor(percentage));
        
    }
}



##
Create 3 classes Vehicle, Car and Alto. Class Alto extends Class Car and Class Car extends Class Vehicle.
class vehicle
{
    void display()
    {
        System.out.println("Vehicle Class");
    }
}
class car extends vehicle
{
    void print()
    {
        System.out.println("Car Class");
    }
}
class Alto extends car
{
    void show()
    {
        System.out.println("Alto Class");
    }
}
public class main
{
    public static void main(String[] args)
    {
        Alto a=new Alto();
        a.display();
        a.print();
        a.show();
    }
}


##
Parent have method " display" to display "This is Parent Class".
class Parent
{
void display()
{
    System.out.println("This is Parent Class");
}
}
class Child1 extends Parent
{
void print()
{
    System.out.println("This is Child1 Class");
}
}
class Child2 extends Parent
{
void print()
{
    System.out.println("This is Child2 Class");
}
}
public class Main
{
public static void main(String[] args)
{
Child1 obj1=new Child1();

obj1.display();
obj1.print();
Child2 obj2=new Child2();

obj2.display();
obj2.print();

}
}

##
Write a java program to display employee details using multiple inheritance
import java.util.Scanner;

interface Employee {
    void getEmployeeDetails();
}

interface Employeesalary {
    void getEmployeeSalaryDetails();
}

class Employeedetails implements Employee, Employeesalary {
    private String name;
    private String id;
    private int salary;
    private String designation;

        Scanner sc = new Scanner(System.in);
    public void getEmployeeDetails() {
        // Scanner sc = new Scanner(System.in);
        id = sc.next();
        name = sc.next();
    }

    public void getEmployeeSalaryDetails() {
        salary = sc.nextInt();
        // sc.nextLine();
        designation = sc.next();
    }

    void display() {
        System.out.println("ID No : " + id);
        System.out.println("Name : " + name);
        System.out.println("Designation : " + designation);
        System.out.println("Salary : " + salary);
    }
}

public class Main {
    public static void main(String[] args) {
        Employeedetails empDetails = new Employeedetails();
        empDetails.getEmployeeDetails();
        empDetails.getEmployeeSalaryDetails();
        empDetails.display();
    }
}


##
In  Main create object for Addition ,Subtraction and access parent and its member function.
class Arithmetic{
    int a=10;
    int b=5;
}
class Addition extends Arithmetic {
    public void addition(){
        System.out.println("Addition of 2 values " + (a+b));
    }
}
class Subtraction extends Arithmetic {
    public void subtraction(){ 
System.out.println("Subtraction of 2 values " + (a-b));
    }
}
public class Main{
    public static void main(String[]args){
        Addition addObj=new Addition();
        addObj.addition();//Calling addition() method from parent class
        
        Subtraction subObj=new Subtraction();
        subObj.subtraction();//Calling subtraction() method from child class
    }
}



##
Note: In interface Student --- used to get the name and rollno value from the user  and in interface Studentdet-used to get the 6 subjects marks from the user and calculate the average. In Class Studentdetails use this interface and print the studentdetails with the help of display function 
import java.util.Scanner;

interface Student {
    void getStudentDetails(); // To get the student's name and roll number
}

interface Studentdet {
    void getMarksAndCalculateAverage(); // To get marks for 6 subjects and calculate the average
}

class Studentdetails implements Student, Studentdet {
    private String name;
    private String rollNo;
    private int[] marks = new int[6]; // Array to store marks of 6 subjects
    private int average;

    // Create Scanner object
    Scanner sc = new Scanner(System.in);

    // Method to get student's name and roll number
    public void getStudentDetails() {
        rollNo = sc.next();
        name = sc.next();
    }

    // Method to get marks for 6 subjects and calculate the average
    public void getMarksAndCalculateAverage() {
        int total = 0;
        for (int i = 0; i < 6; i++) {
            marks[i] = sc.nextInt();
            total += marks[i];
        }
        average = total / 6; // Calculate average
    }

    // Method to display student details along with the calculated average
    public void display() {
        System.out.println("Roll No : " + rollNo);
        System.out.println("Name : " + name);
        System.out.println("Average  : " + average);
    }
}

public class Main {
    public static void main(String[] args) {
        // Create an instance of Studentdetails
        Studentdetails student = new Studentdetails();
        
        // Get student details and marks
        student.getStudentDetails();
        student.getMarksAndCalculateAverage();
        
        // Display the student details including the average marks
        student.display();
    }
}


##
[Username="Saveetha",Password="12345"]

class Progress_Report
{
    private String stuId;
    
    Progress_Report()
    {
        this.stuId = "12345";
    }
    
    class Exam
    {
        private float mark1;
        private float mark2;
        private float mark3;
        
        Exam()
        {
            this.mark1 = (float) 89;
            this.mark2 = (float) 78;
            this.mark3 = (float) 67;
        }
        public void display()
        {
            float sum = (mark1+mark2+mark3);
            System.out.print("Saveetha "+stuId);
        }
    }
}

public class Main
{
    public static void main(String[]args)
    {
        Progress_Report obj = new Progress_Report();
        Progress_Report.Exam obj1 = obj.new Exam();
        obj1.display();
    }
}

##
Car is the one of the Child of Vehicle Class
class Vehicle{
    void display(){
        System.out.println("Shape Class");
    }
}
class Truck extends Vehicle{
    void show(){
        System.out.println("Vehicle class has 3 Child Class\nTruck is the one of the Child of Vehicle Class");
    }
}
class Car extends Vehicle{
    void show(){
        System.out.println("Vehicle class has 3 Child Class\nCar is the one of the Child of Vehicle Class");
    }
}
class Bus extends Vehicle{
    void show(){
        System.out.println("Vehicle class has 3 Child Class\nBus is the one of the Child of Vehicle Class");
    }
}
public class prog{
    public static void main(String[] args){
        Car c=new Car();
        Bus b=new Bus();
        Truck t=new Truck();
        
        c.show();
        t.show();
        b.show();
    }
}

##
java
public class DivisibleBy7 {
    public static void main(String[] args) {
        System.out.println("Numbers divisible by 7 from 100 to 1 in reverse order:");
        for (int i = 100; i >= 1; i--) {
            if (i % 7 == 0) {
                System.out.println(i);
            }
        }
    }
}















---
Write a main() to Assign the value of roll_no as '21CSE03' and that of name as "John" by creating an object of the class Student. 
public static void main(String[] args)
    {
        Student obj=new Student();
        obj.roll_no="21CSE03";
        obj.name="John";
        System.out.println(obj.roll_no+" "+obj.name);
    }


##
Create a class named 'Distance' to add two distances in inch-feet belongs to integer by using third object. Get the Input from user
 
        obj1.feet=sc.nextInt();
        obj1.inches=sc.nextInt();
        obj2.feet=sc.nextInt();
        obj2.inches=sc.nextInt();
        
        obj3.feet=(obj1.feet+obj2.feet);
        obj3.inches=(obj1.inches+obj2.inches);
     

##
Write a program to print the area of  rectangles having sides by creating a class named 'Rectangle'.
        Scanner sc=new Scanner(System.in);
        Rectangle obj1=new Rectangle();
        obj1.length= sc.nextDouble();
        obj1.breath=sc.nextDouble();
        obj1.area=(obj1.length*obj1.breath);
        System.out.println("Area of Rectangle is "+obj1.area);
      


##
Write a main() class named 'Test' to access class 'Clock' and display in-time of an employee(Time  be in format HH:MM:SS). Assign Hour =08,mins=00,sec=00
public class Test{
    public static void main(String[] args)
    {
        Clock in=new Clock();
        in.hours=8;
        in.mins=00;
        in.sec=00;
        String hour=String.format("%02d",in.hours);
        String min=String.format("%02d",in.mins);
        String secs=String.format("%02d",in.sec);
        
        System.out.println(hour+":"+min+":"+secs);
       
    }
}



##
Create a class named 'Distance' to add two distances (220 feet, 5inches) and (13 , 30inches)in inch-feet by using third object. 
        obj1.feet=220;
        obj1.inches=5;
        obj2.feet=13;
        obj2.inches=30;
        
        obj3.feet=(obj1.feet+obj2.feet);
        obj3.inches=(obj1.inches+obj2.inches);


##
Create a main () for class named as ‘Fruit’ it has name , color, weight as its member.  Access Grape and Mango by creating its object.[Members values are : Grape,Purple,0.75 and Mango, Yellow, 1.50]
    public static void main(String[] args) {
        Fruit obj1=new Fruit();
        Fruit obj2=new Fruit();
        obj1.name="Grape";
        obj1.color="Purple";
        obj1.weight=0.75;
        obj2.name="Mango";
        obj2.color="Yellow";
        obj2.weight=1.50;
        System.out.println("Fruit Name is "+obj1.name+",weight is "+obj1.weight+"kg"+" and Color is "+obj1.color);
        System.out.println("Fruit Name is "+obj2.name+",weight is "+obj2.weight+"kg"+" and Color is "+obj2.color);
        
    }



##
create a class 'Student' which have roll number and address of three students having names "Sam" , "Ram" and "John" as its objects.
class Student
{
    int rollno;
    String address;
}


##
Write a program to print the perimeter of a triangle having sides of 20.5, 45.2 and 15.5 units by creating a class named 'Triangle' .
obj.side1 = scanner.nextDouble();
 
        obj.side2 = scanner.nextDouble();
 
        obj.side3 = scanner.nextDouble();
 
        


##
Create a class named 'Student' with String variable 'dept', String variable 'name' and  and integer variable 'rollno'.
class Student
{
    String name;
    String dept;
    int rollno;
}


##
Write a Java program to get and print your college name, your depatrment.
        Student obj=new Student();
        Scanner sc=new Scanner(System.in);
         obj.cge_name=sc.next();
        obj.dept_name=sc.next();
       


##
Write a Java program to get values of variables 'a' and 'b'  and then check if both the conditions 'a < 50' and 'a < b' and b>60 are true. [Class name is ‘Demo’]
import java.util.*;
public class Demo
{
    public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    System.out.println(a < 50 && a < b &&b>60);
    }
}

##
If the marks of Robert in three subjects are X,Y and Z respectively (each out of 100 ), write a Java program to calculate his total marks and percentage marks.
import java.util.Scanner;

public class StudentMarks {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read marks for three subjects
        //System.out.print("Enter marks for Subject X out of 100: ");
        double x = scanner.nextDouble();
        //System.out.print("Enter marks for Subject Y out of 100: ");
        double y = scanner.nextDouble();
        //System.out.print("Enter marks for Subject Z out of 100: ");
        double z = scanner.nextDouble();

        // Calculate total marks and percentage
        double totalMarks = x + y + z;
        double percentage = (totalMarks / 300.0) * 100;

        // Display the results
        System.out.println("Total marks (out of 300): " + totalMarks);
        System.out.println("Percentage: " + percentage + "%");

        scanner.close();
    }
}



##
Write a java program left shift the given number upto given times.
import java.util.Scanner;
public class Demo {

public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
int a = sc.nextInt();
 int c = sc.nextInt();
 int d;

      d = a << c;       
      System.out.println("a << " + c+" = " + d );
   }
}


##
Write a program to multiply 80 to the number then divide it by 5  and subtract 15 . Display the final result.
public class Demo
{
    public static void main(String[] args)
    {
      // int num=2345;
       int num=((500*80)/5)-15;
        
        System.out.println(num);
    }
}



##
Write a program to divide the number 3210 by 3. Now, the modulus of the quotient is taken with 6 and then multiplies the resultant value by 10. Display the final result.  [Class name is ‘Demo’]
public class Demo
{
    public static void main(String[] args)
    {
      
       int num=((3210/3)%6)*10;
        System.out.println(num);
    }
}




##
Write a Java program to get values of variables 'a' and 'b'  and then check if both the conditions 'a < 50' and 'a < b' are true. [Class name is ‘Demo’]
import java.util.*;
public class Demo
{
    public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    System.out.println(a < 50 && a < b);
    }
}




##
Write a Java programs to swap the values of the two variables by without using a third variable. After swapping the values should be PRINT.
import java.util.Scanner;

public class SwapWithArithmetic {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt for and read the first integer
        //System.out.print("Enter the first integer: ");
        int a = scanner.nextInt();

        // Prompt for and read the second integer
        //System.out.print("Enter the second integer: ");
        int b = scanner.nextInt();

        System.out.println("Before swapping: a = " + a + ", b = " + b);

        // Swap without a third variable using arithmetic operations
        a = a + b;
        b = a - b;
        a = a - b;

        System.out.println("After swapping: a = " + a + ", b = " + b);

        scanner.close();
    }
}



##
If the marks of Robert in three subjects are X,Y and Z respectively (each out of 100 ), write a Java program to calculate his total marks and percentage marks.
import java.util.Scanner;

public class StudentMarks {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read marks for three subjects
        //System.out.print("Enter marks for Subject X out of 100: ");
        double x = scanner.nextDouble();
        //System.out.print("Enter marks for Subject Y out of 100: ");
        double y = scanner.nextDouble();
        //System.out.print("Enter marks for Subject Z out of 100: ");
        double z = scanner.nextDouble();

        // Calculate total marks and percentage
        double totalMarks = x + y + z;
        double percentage = (totalMarks / 300.0) * 100;

        // Display the results
        System.out.println("Total marks (out of 300): " + totalMarks);
        System.out.println("Percentage: " + percentage + "%");

        scanner.close();
    }
}



##
Write a Java program to get 4 values from user, to check and print the sum of first and third is greater than sum of second and fourth or sum of second and fourth is greater than first and third.
import java.util.*;
public class Demo
{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
      int b = sc.nextInt();
        int c = sc.nextInt();
          int d = sc.nextInt();
          if(a+c>b+d)
    System.out.println("sum of first and third is greater than second and fourth");
    else
    System.out.println("sum of second and fourth is greater than first and third");
    }
}



##
Write a Java program to read the two numbers from the user, to check if the two numbers are equal then print true otherwise print false.
import java.util.Scanner;

public class CompareNumbers {
    public static void main(String[] args) {
        // Create a Scanner object to read input
        Scanner scanner = new Scanner(System.in);

        // Prompt the user to enter the first number
        //System.out.println("Enter the first number: ");
        double firstNumber = scanner.nextDouble(); // Read the first number

        // Prompt the user to enter the second number
        //System.out.println("Enter the second number: ");
        double secondNumber = scanner.nextDouble(); // Read the second number

        // Compare the two numbers and print the result
        boolean areEqual = firstNumber == secondNumber;
        System.out.println(areEqual);

        // Close the scanner
        scanner.close();
    }
}



##
Write a program to divide the number 3210 by 3. Now, the modulus of the quotient is taken with 6 and then multiplies the resultant value by 10. Display the final result.  [Class name is ‘Demo’]
public class Demo
{
    public static void main(String[] args)
    {
      
       int num=((3210/3)%6)*10;
        System.out.println(num);
    }
}



##
public class Demo
{
    public static void main(String[] args)
    {
      
       int num=((3210/3)%6)*10;
        System.out.println(num);
    }
}



##
Write a program to divide the number 3210 by 3. Now, the modulus of the quotient is taken with 6 and then multiplies the resultant value by 10. Display the final result.  [Class name is ‘Demo’]
public class Demo
{
    public static void main(String[] args)
    {
      
       int num=((3210/3)%6)*10;
        System.out.println(num);
    }
}




##
Write a Java program to get values of variables 'a' and 'b'  and then check if both the conditions 'a < 50' and 'a < b' are true. [Class name is ‘Demo’]
import java.util.*;
public class Demo
{
    public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    System.out.println(a < 50 && a < b);
    }
}




##
Define a program to find out if he/she is eligible to vote. A person is eligible to vote if his/her age is greater than or equal to 18 by using instance method . 
import java.util.*;
public class Age {
       void calculateAge()
    {    int age;

        Scanner sc=new Scanner(System.in);
        age=sc.nextInt();
        if(age>=18)
        {
            System.out.println("Eligible to vote");
        }
        else
        {
            System.out.println("Not Eligible to vote");
        }
    }
    
        public static void main(String[] args) {
       Age obj=new Age();
       obj.calculateAge();
    }
}



##
Write a Java programs to swap the values of the two variables by without using a third variable. Get Input value from user.
import java.util.*;
public class Demo
{
    public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int temp;
    temp=a;
    a=b;
    b=temp;
    System.out.println("After swapping a= "+a +" b="+b);
    }
}



##
Write a Java program to get and calculate the area and perimeter of a triangle having sides .
import java.util.Scanner;

public class RectangleProperties {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt for and read the sides of the rectangle
        //System.out.print("Enter the length of the first side (x1) of the rectangle: ");
        int x1 = scanner.nextInt();

        //System.out.print("Enter the length of the second side (x2) of the rectangle: ");
        int x2 = scanner.nextInt();

        // Calculate the area and perimeter of the rectangle
        int area = x1 * x2;
        int perimeter = 2 * (x1 + x2);

        // Display the results
        System.out.println("Area is "+area);
 System.out.println("Perimeter is "+perimeter);
        scanner.close();
    }
}


##
Write a java program to read the value of an integer m and display the value of n is 1 when m is larger than 0, 0 when m is 0 and -1 when m is less than 0.
import java.util.Scanner;
public class Demo {
    
  public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int m,n;
        m=sc.nextInt();
        
        
   if(m!=0)
   {
     if(m>0)
     n=1;
     else
	n=-1;
   }
   else
     n=0;
    System.out.println("The value of m = "+m);
    System.out.println("The value of n = "+n);
           
    }
}


##
Write a program in Java to display the square of the number upto n using while loop.
import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	  int i=1,n;
	  Scanner sc= new Scanner(System.in);
	  n=sc.nextInt();

	     while(i<=n)
	     {
	     System.out.println("Number is : " +i+" and square of " +i+" is : "+(i*i));
	     i++;
	    }
	     
    }
}



##
Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places.
import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        double x = in.nextDouble();
        
        double y = in.nextDouble();

        x = Math.round(x * 1000);
        x = x / 1000;

        y = Math.round(y * 1000);
        y = y / 1000;

        if (x == y)
        {
            System.out.println("They are the same up to three decimal places");
        }
        else
        {
            System.out.println("They are different");
        }
    }
}


##
Write a program in Java to display the  sum of numbers multiply of given number.
import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	  {
	      Scanner sc=new Scanner(System.in);
		   int i=0,n,sum=0,m;	
		   n=sc.nextInt();
		   m=sc.nextInt();
		  		  while(i<n)

		   {
	
		     sum+=m*i;
		     i++;
		   }
		   System.out.println ("The Sum of "+m+" multiples upto " +n+" terms is: " +sum);

		}
    }
}


##
Write a java Program to print multiplies of 10 for given number from 1 to 5. Get input number from user
import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        int num=in.nextInt();
        
        
        if(num==0)
        {
        	System.out.println(num+"'s 10 is 0 ");
        }
        else if(num==1)
        {
        		System.out.println(num+"'s 10 is Ten ");
        }
        else if(num==2)
        {
        		System.out.println(num+"'s 10 is Twenty ");
        }
        else if(num==3)
        {
        		System.out.println(num+"'s 10 is Thirty ");
        }
        else if(num==4)
        {
        		System.out.println(num+"'s 10 is Forty ");
        }
        else if(num==5)
        {
        		System.out.println(num+"'s 10 is Fifty ");
        }
        
        else 
        {
        		System.out.println("Invalid Input");
        }
    }
}




##
Write a Java program that display department name based on given charcter (a : AIDS, c : CSE, e : ECE, m: MECH, invalid for other value)
import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	   Scanner sc=new Scanner(System.in);
	   char num =sc.next().charAt(0);
    
       switch (num) {
           case 'a':
               System.out.println("AIDS");
           break;
           case 'c':
              System.out.println("CSE");
               break;
               case 'm':
              System.out.println("MECH");
               break;
               case 'e':
              System.out.println("ECE");
               break;
            default:
              System.out.println("invalid");
              
       }

     
    }
}




##
Write a java Program to print multiplies of 10 for given number from 1 to 5. Get input number from user
import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        int num=in.nextInt();
        
        
        if(num==0)
        {
        	System.out.println(num+"'s 10 is 0 ");
        }
        else if(num==1)
        {
        		System.out.println(num+"'s 10 is Ten ");
        }
        else if(num==2)
        {
        		System.out.println(num+"'s 10 is Twenty ");
        }
        else if(num==3)
        {
        		System.out.println(num+"'s 10 is Thirty ");
        }
        else if(num==4)
        {
        		System.out.println(num+"'s 10 is Forty ");
        }
        else if(num==5)
        {
        		System.out.println(num+"'s 10 is Fifty ");
        }
        
        else 
        {
        		System.out.println("Invalid Input");
        }
    }
}




##
Write a program in Java to display the n terms of even natural number and their sum using do...while Statement.
import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	  {
		   int i=1,n,sum=0;	
		   Scanner in = new Scanner(System.in);
				    n = in.nextInt();
		  do

		   {
		    // System.out.println (2*i-1);
		     sum+=2*i;
		     i++;
		   }while(i<=n);
		   System.out.println ("The Sum of even Natural Number upto " +n+" terms is: " +sum);

		}
    }
}


##
Write a program in Java to display the  sum of numbers multiply of given number.
import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	  {
	      Scanner sc=new Scanner(System.in);
		   int i=0,n,sum=0,m;	
		   n=sc.nextInt();
		   m=sc.nextInt();
		  		  while(i<n)

		   {
	
		     sum+=m*i;
		     i++;
		   }
		   System.out.println ("The Sum of "+m+" multiples upto " +n+" terms is: " +sum);

		}
    }
}



##
Write a Java program to find the factorial value of any number entered through the keyboard using do...while statement.
import java.util.Scanner;
public class Demo {

      public static void main(String[] args)
	    {
	        Scanner console = new Scanner(System.in);
	        int num; // To hold number
	        int fact = 1,i=1; // To hold factorial
	        num = console.nextInt();
	       
	        do
	        {
	            fact *= i;
	            i++;
	        }while( i<=num );
	        
	        System.out.println("Factorial: "+ fact);
    }
}


##
Write a Java program to check given number  is zero or not.
import java.util.Scanner;

public class Demo
{
    public static void main(String[] args)
    {
       Scanner sc=new Scanner(System.in);
       int num=sc.nextInt();
        if(num==0)
        System.out.println("Given number is Zero");
        else
        {
        	 System.out.println(num+ " is Non-Zero");
        }
    }
}


##
Write a java Program to Take three numbers from the user and print the greatest number.
import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        int num1=in.nextInt();
        int num2=in.nextInt();
        int num3=in.nextInt();
        
        if((num1>num2) &&(num1>num3))
        {
        	System.out.println(num1+" is the Greatest value");
        }
        else if((num2>num1) &&(num2>num3))
        {
        	System.out.println(num2+" is the Greatest value");
        }
        else
        {
        	System.out.println(num3+" is the Greatest value");
        }
    }
}




##
Write a Java program that generates an integer between 1 and 7 and displays the name of the weekday.  [The value need to check is 5]
import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	   Scanner in = new Scanner(System.in);
       int day = in.nextInt();
       String dayName = "";
       switch (day) {
           case 1: dayName = "Monday"; break;
           case 2: dayName = "Tuesday"; break;
           case 3: dayName = "Wednesday"; break;
           case 4: dayName = "Thursday"; break;
           case 5: dayName = "Friday"; break;
           case 6: dayName = "Saturday"; break;
           case 7: dayName = "Sunday"; break;
           default:dayName = "Invalid day range";
       }

      System.out.println(dayName);
    }
}


##
Write a program in Java to input 7 numbers from keyboard and find their sum and average using while loop
import java.util.*;
class prog{
    public static void main(String[] args){
        Scanner n=new Scanner(System.in);
        int n1=n.nextInt();
        int n2=n.nextInt();
        int n3=n.nextInt();
        int n4=n.nextInt();
        int n5=n.nextInt();
        int n6=n.nextInt();
        int n7=n.nextInt();
        int sum=(n1+n2+n3+n4+n5+n6+n7);
        double avg=sum/7;
        System.out.println("The sum of 7 no is : "+sum);
        System.out.println("The Average is : "+avg);
    }
}

##
Write a program in Java to display the n terms of odd natural number and their sum using do...while Statement.
import java.util.Scanner;
 class prog{
    public static void main(String[] args)
	  {
		   int i=1,n,sum=0;	
		   Scanner in = new Scanner(System.in);
			n = in.nextInt();
		    do{
		     sum+=2*i-1;
		     i++;
		    }
		    while(i<=n);
		   System.out.println ("The Sum of odd Natural Number upto " +n+" terms is: " +sum);
	  }
    }



##
Write a Java program print area of rectangle  by defining instance method and local variable value as 10,20 . [Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’void’]
    void calculateArea()
    {  
        int side1,side2;
        double cirarea;
        side1=10;
        side2=20;
        cirarea=side1*side2;
        System.out.println("Area of Rectangle is "+cirarea);
    }
    
  


##
Write a Java program to check the number is palindrome or not  by defining instance method and instance variable.[Class Name is ‘check’ function name is ‘isPali()’  and return type of function is ‘boolean’]
   boolean isPali(int n){
   boolean prime = true;
     int r,sum=0,temp;
  temp=n;    
  while(n>0){    
   r=n%10;  
   sum=(sum*10)+r;    
   n=n/10;    
  }    
  if(temp==sum)    
   prime=true;  
  else    
  prime=false;  
  
return prime;
  }



##
Define a program to find out if he/she is eligible to retire. A person is eligible to retire if his/her age is greater than or equal to 58 by using instance method and local variable. 
    void calculateAge()
    {    int age;

        Scanner sc=new Scanner(System.in);
        age=sc.nextInt();
        if(age>=58 && age<=100)
        {
            System.out.println("Eligible to Retire");
        }
        else if(age<=0 || age>100)
        {
            System.out.println("Invalid age");
        }
        else
        {
            System.out.println("Not Eligible to Retire");
        }
    }
    


##
Define a program to find out if he/she is eligible to vote. A person is eligible to vote if his/her age is greater than or equal to 18 by using instance method and local variable. 
    void calculateAge()
    {    int age;

        Scanner sc=new Scanner(System.in);
        age=sc.nextInt();
        if(age>=18)
        {
            System.out.println("Eligible to vote");
        }
        else
        {
            System.out.println("Not Eligible to vote");
        }
    }
    


##
Write a Java program print area of circle  by defining instance method and local variable.[Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’double’]
        double calculateArea()
    {
        double radius,cirarea;
        Scanner sc=new Scanner(System.in);
        radius=sc.nextDouble();
        cirarea=3.14*radius*radius;
        return cirarea;
    }
   

##
Write a Java method to get and print the 2 values entered by user by defining instance method .[Class Name is ‘Test’ function name is ‘getdata()’ , 'putdata()' and return type is ’void’]
    void getData()
    {
        Scanner sc=new Scanner(System.in);
        num1=sc.nextInt();
        num2=sc.nextInt();
    }
    void putData()
    {
        System.out.println("Number1 is:"+num1);
        System.out.println("Number2 is:"+num2);
    }



##
Write a Java program to print Student details (Name,Collegename) cge_name is same to all members in the class. Use static type variable to access age.
import java.util.*;
public class Main
{
    static String cge_name="SEC";
    String name;
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	Main obj1=new Main();
	Main obj2=new Main();
	obj1.name=sc.next();
	obj2.name=sc.next();
	System.out.println("Student name: "+obj1.name+" College Name: "+cge_name);
	System.out.println("Student name: "+obj2.name+" College Name: "+cge_name);
	}
}



##
Write a Java program print area of circle  by defining instance method and local variable. The input for radius is 2 .
        void calculateArea()
    {
        double radius,cirarea;
        //Scanner sc=new Scanner(System.in);
        radius=2;
        cirarea=3.14*radius*radius;
        System.out.println("Area of Circle is "+cirarea);
    }
    


##
Multiplication of two number using method
 
    public static int multiply(int num1, int num2) {
        return num1 * num2;
    }
    


##
Define a program to find out if he/she is eligible to retire. A person is eligible to retire if his/her age is greater than or equal to 58 by using instance method and local variable. 
    void calculateAge()
    {    int age;

        Scanner sc=new Scanner(System.in);
        age=sc.nextInt();
        if(age>=58 && age<=100)
        {
            System.out.println("Eligible to Retire");
        }
        else if(age<=0 || age>100)
        {
            System.out.println("Invalid age");
        }
        else
        {
            System.out.println("Not Eligible to Retire");
        }
    }


##
Write a Java method  to print the sum of two numbers (23,43) by defining instance method and instance variable.[Class Name is ‘Calculator’ function name is ‘sum() and return type of function is ’void’]
void sum()
    {
       // Scanner sc=new Scanner(System.in);
        num1=23;
        num2=43;
        int result=num1+num2;
        System.out.println("Sum of given numbers is "+result);
    }



##
Write a Java program print area of circle  by defining instance method and local variable.[Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’void’]
import java.util.Scanner;
public class Area
{
    double r;
    public double calculateArea(double r)
    {
        double area;
        area=3.14*(r*r);
        return area;
    }
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        Area a=new Area();
        a.r=sc.nextDouble();
        System.out.print("Area of Circle is "+a.calculateArea(a.r));
    }
}



##
Define a program to find out if he/she is eligible to vote. A person is eligible to vote if his/her age is greater than or equal to 18 by using instance method and local variable. 
import java.util.*;
public class Age {
       void calculateAge()
    {    int age;

        Scanner sc=new Scanner(System.in);
        age=sc.nextInt();
        if(age>=18)
        {
            System.out.println("Eligible to vote");
        }
        else
        {
            System.out.println("Not Eligible to vote");
        }
    }
    
        public static void main(String[] args) {
       Age obj=new Age();
       obj.calculateAge();
    }
}


##
Write a Java program to check the number( 43,65,1) is prime or not  by defining instance method and instance variable.[Class Name is ‘Prime’ function name is ‘isPrime()’  and return type of function is ‘boolean’]
public class Prime {
    // Instance variable to hold the number
    private int number;

    // Constructor to initialize the number
    public Prime(int number) {
        this.number = number;
    }

    // Instance method to check if the number is prime
    public boolean isPrime() {
        if (number <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        // Create Prime instances for different numbers
        Prime primeChecker1 = new Prime(43);
        Prime primeChecker2 = new Prime(65);
        Prime primeChecker3 = new Prime(1);

        // Check and print whether each number is prime
        System.out.println("" + primeChecker1.isPrime());
        System.out.println("" + primeChecker2.isPrime());
        System.out.println("" + primeChecker3.isPrime());
    }
}



##
Write a Java program to print Student details (name, Department) dept is same to all members in the class. Use static type variable to access age.
import java.util.*;
public class Main
{
    static String cge_name="AIDS";
    String name;
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	Main obj1=new Main();
	Main obj2=new Main();
	obj1.name=sc.next();
	obj2.name=sc.next();
	System.out.println("Student name: "+obj1.name+" Department: "+cge_name);
	System.out.println("Student name: "+obj2.name+" Department: "+cge_name);
	}
}


##






    





























































---
Write a Java Program for  displaying the data from the file "sample.txt" using FileInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments.
byte[] array = new byte[39];

FileInputStream fs = new FileInputStream("sample.txt");

System.out.println("Data in the file: ");

fs.read(array);
String data = new String(array);

System.out.println(data);
fs.close();
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .In that String str append the byte from the index value 2 and length 4
OutputStream fout=new FileOutputStream("sample.txt",true);

String s="SAVEETHA";  
byte b[]=s.getBytes();

fout.write(b,2,4);
fout.close();

System.out.println("Successfully Completed");
##
Implement a Java Program to append a String "SAVEETHA ENGINEERING COLLEGE" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA ENGINEERING COLLEGE"
OutputStream fout=new FileOutputStream("sample.txt",true);    

String s="SAVEETHA ENGINEERING COLLEGE";    
byte b[]=s.getBytes();//converting string into byte array    

fout.write(b);    
fout.close();    

System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using FileOutputStreamNote: Consider String str as  "Welcome to Saveetha" . Use predefined function  write(byte[] array, int start, int length) .Get the Starting byte and length from the user and store the characters in the file
FileOutputStream fout=new FileOutputStream("testout.txt");    

String s="Welcome to Saveetha";    
byte b[]=s.getBytes();

Scanner sc=new Scanner(System.in);
int start=sc.nextInt();
int length=sc.nextInt();

fout.write(b,start,length);    
fout.close();    

System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String for Specified byte  in a file "testout.txt" using OutputStream.Note:Consider String str as "HI EVERYBODY...",it has to print specified byte according to the user input
FileOutputStream fout=new FileOutputStream("testout.txt");    

String s="HI EVERYBODY";    
byte b[]=s.getBytes();

Scanner sc=new Scanner(System.in);
int start=sc.nextInt();
int length=sc.nextInt();

fout.write(b,start,length);    
fout.close();    

System.out.println("Successfully Completed");  
##
Write a Java Program for  displaying number of bytes & data in the file "sample.txt" using FileInputStreamNote:Already sample.txt file was created.initialize  byte[] array = new byte[39];
 byte[] array = new byte[39];
             FileInputStream input = new FileInputStream("sample.txt");
              System.out.println("Available bytes in the file: " +input.available());
              input.read(array);
              String data = new String(array);
              System.out.println("Data read from the file:" +data);
              input.close();
##
Implement a Java Program to append a String "SAVEETHA" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA"
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a byte in a file "testout.txt" using FileOutputStreamNote Write a byte "D" in a file
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
                 fout.write(68);    
                 fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a character in a file "testout.txt" using OutputStreamNote: Get input as 65 and printt "A" in the file(testtout.txt)
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             int s=65;    
          //   byte b[]=s.getBytes();//converting string into byte array    
             fout.write(s);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Write a Java Program for  displaying number of bytes after skipping from the file "sample.txt" using FileInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments and Skip() method for skipping some data in the file. Get the skip byte value from the user
 
             FileInputStream input = new FileInputStream("sample.txt");
              System.out.println("Available bytes in the file: " +input.available());
              Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
              input.skip(sk);
               System.out.println("Available bytes in the file: " +input.available());
          
              input.close();
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a byte in a file "testout.txt" using FileOutputStreamNote Write a character "A" in a file using ASCII code
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
                 fout.write(65);    
                 fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String for Specified byte  in a file "testout.txt" using OutputStream.Note:Consider String str as "HI EVERYBODY...",it has to print from starting index from 2 to 8
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b,2,8);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to read a byte in a file "testout.txt" using FileInputStream
     FileInputStream fin=new FileInputStream("testout.txt");    
                 int i=fin.read();  
                 System.out.println((char)i);    
                 fin.close(); 
##
Implement a Java Program to append a String "SAVEETHA ENGINEERING COLLEGE" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA ENGINEERING COLLEGE"
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA ENGINEERING COLLEGE";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .Read the Index value and length value from the user
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             Scanner sc=new Scanner(System.in);
             int index=sc.nextInt();
             int length=sc.nextInt();
             fout.write(b,index,length);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using FileOutputStreamNote: Write a String  "Welcome to Saveetha"
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
             String s="Welcome to Saveetha";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using OutputStreamNote: Write a String  "HI EVERYBODY..."
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                System.out.println("Successfully Completed");  
##
Write a Java Program for  displaying the data from the file "sample.txt" using FileInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments. Use "While "Loop for reading the characters from the file
 
             FileInputStream input = new FileInputStream("sample.txt");

        System.out.println("Data in the file: ");

        // Reads the first byte
        int i = input.read();

       while(i !=-1) {
           
           System.out.print((char)i);

           // Reads next byte from the file
           i = input.read();
        }
        input.close();
##
Implement a Java Program to append a String for specified bytes in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA" .In that String str append the byte from the index value 2 and length 4
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b,2,4);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to append a String "SAVEETHA" in a file "sample.txt" using OutputStream.Note:Consider String str as "SAVEETHA"
   
                 OutputStream fout=new FileOutputStream("sample.txt",true);    
             String s="SAVEETHA";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String in a file "testout.txt" using FileOutputStreamNote: Write a String  "HI EVERYBODY..."
   
                 FileOutputStream fout=new FileOutputStream("testout.txt");    
             String s="HI EVERYBODY...";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Implement a Java Program to write a String for Specified byte  in a file "testout.txt" using OutputStream.Note:Consider String str as "SAVEETHA ENGINEERING COLLEGE",it has to print from starting index from 7 to 10
   
                 OutputStream fout=new FileOutputStream("testout.txt");    
             String s="SAVEETHA ENGINEERING COLLEGE";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b,7,10);    
             fout.close();    
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read the content from the String using ReaderNote: Initialize String Value as "WELCOME ALL."  and Display the Content of the String using predefined functionInitialize char[] array = new char[12];
import java.io.*;  
import java.util.*;
public class JavaCharArrayReaderReadExample4 
{  
    public static void main(String[] args)
    {
        String s ="WELCOME ALL.";
        char[] array = new char[12];
        try
        {
            Reader input = new StringReader(s);
            input.read(array);
            System.out.println("Data read from the string:");
            System.out.println(array);
            input.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a Java Program for getting input from the user using Input StreamReaderRule: Use do-while statement and get the input value from the user.2.Enter the Symbol "#" to quit. Ex: Hi#
import java.io.*;
public class ReadConsole {
    public static void main(String args[]) throws IOException
    {
        InputStreamReader cin = null;
        try
        {
            cin = new InputStreamReader(System.in);
            char c;
            do
            {
                c = (char) cin.read();
                System.out.print(c);
            }while(c != '#');
        }
        finally
        {
            if (cin != null)
            {
                cin.close();
            }
        }
    }
}
##
Implement a Java Program to append a String in a file "testout.txt" using WriterNote:Write  "Hi Everybody" in the file(testtout.txt)
Writer w1 = new FileWriter("testout.txt",true);  

w1.append("Hi Everybody");  
w1.close();  

System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to identify the file content  "file1.txt" is ready to read using the predefined function ready and  read the content from the file "file1.txt" using Reader
Reader reader = new FileReader("file1.txt");
int data = reader.read();

System.out.println("Is there data in the stream?  " + reader.ready());

System.out.println("File content:");
while (data != -1)
{
    System.out.print((char) data);  
    data = reader.read();  
}
System.out.println();

reader.close();
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote:  Write the Specified portion in a file using predefined function [write(String str, int off, int len)]Read  String value from the user and starting byte (int off) as 2  and length (int len) as 6 from the User
Writer w = new FileWriter("testout.txt");  

Scanner sc=new Scanner(System.in);

String content = sc.nextLine();

int off=sc.nextInt();
int length=sc.nextInt();

w.write(content,off,length);  
w.close();  

System.out.println("Input String Value:" +content);  
System.out.println("Wrote Specified portion in a File Successfully");  
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[12];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[12];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[39];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[39];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a character in a file "testout.txt" using WriterNote:Write  "A" in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append('A');  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to read the content from the file "file1.txt" using Reader
        Reader reader = new FileReader("file1.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote:  Write the Specified portion in a file using predefined function [write(String str, int off, int len)]Get String value and starting byte and length from the User
   
            Writer w = new FileWriter("testout.txt");  
            Scanner sc=new Scanner(System.in);
            String content = sc.nextLine();
            int off=sc.nextInt();
            int length=sc.nextInt();
            w.write(content,off,length);  
            w.close();  
             System.out.println("Input String Value:" +content);  
            System.out.println("Wrote Specified portion in a File Successfully");  
##
Write a Java Program to read the content from the String using ReaderNote: Initialize String Value as "This is the text read from StringReader."  and Display the Content of the String using predefined functionInitialize char[] array = new char[40];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
   String s ="This is the text read from StringReader.";
   
    char[] array = new char[40];
    try {
      // Create a StringReader
      Reader input = new StringReader(s);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[39];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[39];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a character in a file "testout.txt" using WriterNote:Write  "Z" in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append('Z');  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to read the content from the file "test.txt" using Reader
        Reader reader = new FileReader("test.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote: Write a String  "Welcome to Java File Concept -Reader"
   
            Writer w = new FileWriter("testout.txt");  
            String content = "Welcome to Java File Concept -Reader";  
            w.write(content);  
            w.close();  
            System.out.println("Wrote File Successfully");  
##
Write a Java Program for getting input from the user using Input StreamReaderRule: Use do-while statement and get the input value from the user.2.Enter the Symbol "#" to quit. Ex: Hi#
import java.io.*;
public class ReadConsole {

   public static void main(String args[]) throws IOException {
      InputStreamReader cin = null;

      try {
         cin = new InputStreamReader(System.in);
       //  System.out.println("Enter characters, 'q' to quit.");
         char c;
         do {
            c = (char) cin.read();
            System.out.print(c);
         } while(c != '#');
      }finally {
         if (cin != null) {
            cin.close();
         }
      }
   }
}
##
Write a Java Program to read the content from the String using ReaderNote: Get the Input String from the User and Display the Content of the String using predefined functionInitialize char[] array = new char[12];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    String data=sc.nextLine();
   
    char[] array = new char[12];
    try {
      // Create a StringReader
      StringReader input = new StringReader(data);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a NUMBER in a file "testout.txt" using WriterNote: APPEND "1234567890"  in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append("1234567890");  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to identify the file content  "file1.txt" is ready to read using the predefined function ready using Reader
        Reader reader = new FileReader("file1.txt");  
            int data = reader.read();  
            System.out.println("Is there data in the stream?  " + reader.ready());
            
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote: Write a String  "Hi Everybody...Welcome all"
   
            Writer w = new FileWriter("testout.txt");  
            String content = "Hi Everybody...Welcome all";  
            w.write(content);  
            w.close();  
            System.out.println("Wrote File Successfully");  
##
Write a Java Program to read the content from the String using ReaderNote: Initialize String Value as "This is the text read from StringReader."  and Display the Content of the String using predefined functionInitialize char[] array = new char[40];
    import java.io.*;  
    import java.util.*;
    public class JavaCharArrayReaderReadExample4 {  
       public static void main(String[] args) {  
   String s ="This is the text read from StringReader.";
   
    char[] array = new char[40];
    try {
      // Create a StringReader
      Reader input = new StringReader(s);
      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);
      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
       }  
    }  
##
Implement a Java Program to append a String in a file "testout.txt" using WriterNote:Write  "WELCOME ALL" in the file(testtout.txt)
   
                Writer w1 = new FileWriter("testout.txt",true);  
           
            w1.append("WELCOME ALL");  
            w1.close();  
            System.out.println("Append the character in the File Successfully");  
##
Write a Java Program to read the content from the file "sample1.txt" using Reader
        Reader reader = new FileReader("sample1.txt");  
            int data = reader.read();  
             System.out.println("File content:");
            while (data != -1) { 
                
                System.out.print((char) data);  
                data = reader.read();  
            }  
             System.out.println();
            reader.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using WriterNote:  Write the Specified portion in a file using predefined function [write(String str, int off, int len)]Get String value and starting byte and length from the User
   
            Writer w = new FileWriter("testout.txt");  
            Scanner sc=new Scanner(System.in);
            String content = sc.nextLine();
            int off=sc.nextInt();
            int length=sc.nextInt();
            w.write(content,off,length);  
            w.close();  
             System.out.println("Input String Value:" +content);  
            System.out.println("Wrote Specified portion in a File Successfully");  
##
Write a Java Program for  displaying number of bytes & data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
FileInputStream  file1 = new FileInputStream("sample.txt");
FilterInputStream filter = new BufferedInputStream(file1);

System.out.println("Available bytes in the file: " +filter.available());

int k =0;
System.out.println("Data read from the file:");

while((k=filter.read())!=-1)
{
    System.out.print((char)k);
}

file1.close();
filter.close();
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '/'.
class CustomFilterReader1 extends FilterReader
{  
    CustomFilterReader1(Reader in)
    {  
        super(in);  
    }  
    public int read() throws IOException
    {
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '/');  
        else  
            return x;  
    }  
}
##
Implement a java Program to convert the file content in to Uppercase letter using Filter Writer conceptNote: Already record.txt was created and data are added. Convert the data into Uppercase character using write operation
import java.io.*;  
class CustomFilterWriter extends FilterWriter
{
    CustomFilterWriter(Writer out)
    {
        super(out);  
    }  
    public void write(String str) throws IOException
    {
        super.write(str.toUpperCase());  
    }
}  
##
Implement a Java Program to write a String in a file "Sample1.txt" using FilerOutputStreamNote: Consider a string value as "Welcome Everybody"
FileOutputStream file1 = new FileOutputStream("Sample1.txt");

FilterOutputStream filter = new FilterOutputStream(file1);

String s="Welcome Everybody";
byte b[]=s.getBytes();

filter.write(b);
filter.close();

file1.close();
##
Write a Java Program for  displaying  data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
FileInputStream  file1 = new FileInputStream("sample.txt");  

FilterInputStream filter = new BufferedInputStream(file1);  

int k =0;  

while( (k=filter.read()) != -1 )
{
    System.out.print((char)k);  
}
##
Implement a Java Program to write a String in a file "testout.txt" using FilterOutputStreamNote: Use predefined function  write(byte[] array, int start, int length) .Get the String Value, Starting byte and length from the user and store the characters in the file
   
                
             
              FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
       // String s="Welcome to FilterOutput Stream File";      
         
         
             Scanner sc=new Scanner(System.in);
             String s=sc.nextLine();
             int start=sc.nextInt();
             int length=sc.nextInt();
              byte b[]=s.getBytes();  
           //  write(byte[] array, int start, int length)
             filter.write(b,start,length); 
      //  filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for  displaying number of characters in the file "sample.txt" after skipping the specified characters using FilterInputStreamNote:Already sample.txt file was created. Read the input from the user for skipping characters
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
         filter.skip(sk);
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Write a Java Program to get the actual number of available bytes in the file using filter input stream.Note:Already sample.txt file was created. Read the input from the user for read method
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
        for(int i=0;i<sk;i++)
        {
            filter.read();
        }
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Implement a java Program to replace the file content  "E" character in to "A" character using Filter Writer conceptNote: Already record.txt was created and data are added. Replace  the E character into A character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.replace('E','A'));  
        }  
    }  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '?'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '?');  
        else  
            return x;  
    }  
}  
##
Write a Java Program for  displaying number of characters in the file "sample.txt" after skipping the specified characters using FilterInputStreamNote:Already sample.txt file was created. Read the input from the user for skipping characters
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
         filter.skip(sk);
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '$'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '$');  
        else  
            return x;  
    }  
}  
##
Implement a java Program to replace the file content  "B" character in to "C" character using Filter Writer conceptNote: Already record.txt was created and data are added. Replace  the B character into C character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.replace('B','C'));  
        }  
    }  
##
Implement a Java Program to write a String in a file "testout.txt" using FilterOutputStreamNote: Consider String str as  "Welcome to FilterOutput Stream File" . Use predefined function  write(byte[] array, int start, int length) .Get the Starting byte and length from the user and store the characters in the file
   
                
             
              FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
        String s="Welcome to FilterOutput Stream File";      
        byte b[]=s.getBytes();    
         
             Scanner sc=new Scanner(System.in);
             int start=sc.nextInt();
             int length=sc.nextInt();
           //  write(byte[] array, int start, int length)
             filter.write(b,start,length); 
      //  filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for  displaying number of bytes & data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
       System.out.println("Available bytes in the file: " +filter.available());
              int k =0;
               System.out.println("Data read from the file:");
        while((k=filter.read())!=-1)
        {  
            System.out.print((char)k);  
        }  
  file1.close();  
        filter.close();  
##
Write a Java Program for  displaying number of characters in the file "sample.txt" after skipping the specified characters using FilterInputStreamNote:Already sample.txt file was created. Read the input from the user for skipping characters
    FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        Scanner sc=new Scanner(System.in);
               int sk=sc.nextInt();
         System.out.println("Available bytes in the file: " +filter.available());
         filter.skip(sk);
          System.out.println("Available bytes in the file: " +filter.available());
  file1.close();  
        filter.close();  
##
Implement a Java Program to write a String in a file "testout.txt" using FilterOutputStreamNote: Consider String str as  "Welcome to FilterOutput Stream File" . Use predefined function  write(byte[] array, int start, int length) .Set the Starting value as 3 and length as 9 store the characters in the file
   
                
             
              FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
        String s="Welcome to FilterOutput Stream File";      
        byte b[]=s.getBytes();    
         
            
           //  write(byte[] array, int start, int length)
             filter.write(b,3,9); 
      //  filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for  displaying  data in the file "sample.txt" using FilterInputStreamNote:Already sample.txt file was created.
        FileInputStream  file1 = new FileInputStream("sample.txt");  
        FilterInputStream filter = new BufferedInputStream(file1);  
        int k =0;  
        while((k=filter.read())!=-1){  
            System.out.print((char)k);  
        }  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '*'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '*');  
        else  
            return x;  
    }  
}  
##
Implement a java Program to convert the file content in to lowercase letter using Filter Writer conceptNote: Already record.txt was created and data are added. Convert the data into lowercase character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.toLowerCase());  
        }  
    }  
##
Implement a java Program to replace the file content  "V" character in to "A" character using Filter Writer conceptNote: Already record.txt was created and data are added. Replace  the V character into A character using write operation
    import java.io.*;  
    class CustomFilterWriter extends FilterWriter {  
        CustomFilterWriter(Writer out) {  
            super(out);  
        }  
        public void write(String str) throws IOException {  
            super.write(str.replace('V','A'));  
        }  
    }  
##
Create a java program using FilterReader to read the content from the file.Note: "javaFile123.txt" file created which contains "India is my country" text in it. convert whitespace with question mark '+'.
class CustomFilterReader1 extends FilterReader {  
    CustomFilterReader1(Reader in) {  
        super(in);  
    }  
    public int read() throws IOException {  
        int x = super.read();  
        if ((char) x == ' ')  
            return ((int) '+');  
        else  
            return x;  
    }  
}  
##
Implement a Java Program to write a byte in a file "testout.txt" using FilerOutputStreamNote: Consider a string value as "Welcome to FilterOutput Stream File"
   
                FileOutputStream file1 = new FileOutputStream("testout.txt");  
        FilterOutputStream filter = new FilterOutputStream(file1);  
        String s="Welcome to FilterOutput Stream File";      
        byte b[]=s.getBytes();      
        filter.write(b);     
      
        filter.close();  
        file1.close();  
##
Write a Java Program for Reading data from console by InputStreamReader and BufferedReader
import java.io.*;  
public class BufferedReaderExample
{
    public static void main(String args[])throws Exception
    {           
        InputStreamReader r=new InputStreamReader(System.in);
        BufferedReader br=new BufferedReader(r);
        String name=br.readLine();
        System.out.println("Welcome: "+name);
    }
}
##
Write a Java Program for writing the Specified length of  data in the file Using  FileOutputStream & BufferedOutputStreamNote:Assume sample.txt file created. In the FileOutputStream use sample.txt file as arguments and display the data in the file using BufferedOutputStream.Get the Input String from the User.From the Input String store the data from index value as 5 and length as 10
FileOutputStream fout=new FileOutputStream("sample.txt");    

BufferedOutputStream bout=new BufferedOutputStream(fout);  

Scanner sc=new Scanner(System.in);

String s=sc.nextLine();    
int index=sc.nextInt();
int length=sc.nextInt();

byte b[]=s.getBytes();    

System.out.println("Original Data:" +s);
System.out.print("After Skipping:");

bout.write(b,index,length);    

bout.close();
fout.close();
##
Write a Java Program to read Employee data (name ,age,id) from the user using the BufferedReader class.Consider Employee Class using default constructor and instance method for displaying Employee name, age, id
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Employee {
    String name;
    int id;
    int age;
    Employee(String name, int age, int id)
    {
        this.name = name;
        this.age = age;
        this.id = id;
    }
    public void displayDetails()
    {
        System.out.println("Name: "+this.name);
        System.out.println("Age: "+this.age);
        System.out.println("Id: "+this.id);
    }
}
public class ReadData
{
    public static void main(String args[]) throws IOException
    {
        BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));
        
        String name = reader.readLine();
        int age = Integer.parseInt(reader.readLine());
        int id = Integer.parseInt(reader.readLine());
        
        Employee std = new Employee(name, age, id);
        std.displayDetails();
    }
}
##
Write a Java Program for displaying the data from the file, after skipping characters from the file using Filereader & BufferedReaderNote:Assume sample.txt file created. In the FileReader use sample.txt file as arguments and display the data in the file using BufferedReader .Use Predefined function for Skip . Get the Skipping character from the UserInitialize char[] array = new char[36];
FileReader fr=new FileReader("sample.txt");

BufferedReader br=new BufferedReader(fr);  

Scanner sc=new Scanner(System.in);

int skch=sc.nextInt();
br.skip(skch);

char[] array = new char[36];

System.out.println("Data after skipping "+skch+" characters:");

br.read(array);

System.out.println(array);

br.close();    
fr.close(); 
##
Write a java program for writing the data in the file using Buffered WriterNote: Read the data from the User
FileWriter writer = new FileWriter("sample.txt");  

BufferedWriter buffer = new BufferedWriter(writer);  

Scanner sc = new Scanner(System.in);
String str=sc.nextLine();

buffer.write(str);

buffer.close();
##
Write a Java Program for displaying the data from the file using Filereader & BufferedReaderNote:Assume sample.txt file created. In the FileReader use sample.txt file as arguments and display the data in the file using BufferedReader
          FileReader fr=new FileReader("sample.txt");   
          BufferedReader br=new BufferedReader(fr);    
          int i;    
          while((i=br.read())!=-1)
          {  
          System.out.print((char)i);  
          }  
            System.out.print("\n");
          br.close();    
          fr.close(); 
##
Write a Java Program to read the number from the user using the BufferedReader class and perform Fibonacci series
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Sample{
    void natural(int num)
    {
        int n1=0,n2=1,n3,i;    
 System.out.print(n1+" "+n2);//printing 0 and 1    
    
 for(i=2;i<num;++i)//loop starts from 2 because 0 and 1 are already printed    
 {    
  n3=n1+n2;    
  System.out.print(" "+n3);    
  n1=n2;    
  n2=n3;    
    }  
}
}

public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));


int number = Integer.parseInt(reader.readLine());
Sample std = new Sample();
std.natural(number);
}
}
##
Write a Java Program for getting string and integer input from the User using BufferedReader
// Java Program for taking user
// input using BufferedReader Class
import java.io.*;

public class Sample
	
{
	
// Main Method
public static void main(String [] args) throws IOException
{
	// Creating BufferedReader Object
	// InputStreamReader converts bytes to
	// stream of character

					
BufferedReader bfn = new BufferedReader(new InputStreamReader(System.in));
	// String reading internally
	String str = bfn.readLine();
				
	// Integer reading internally
	int it = Integer.parseInt(bfn.readLine());
					
	// Printing String
	System.out.println("Entered String : "+ str);
					
	// Printing Integer			
	System.out.println("Entered Integer : "+ it);
		
	}
					
}
##
Write a java program for writing the data in the file using Buffered WriterNote: Read the data from the User, In that get the index value and length value from the user
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
    String str=sc.nextLine();
int index=sc.nextInt();
    int length=sc.nextInt();
   // buffer.write(str);
    buffer.write(str,index,length);
    
    buffer.close();  
##
Write a Java Program for displaying the data from the file after skip method using FileInputStream & BufferedInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments and display the data in the file using BufferedInputStreamUse Skip() method for skipping some data in the user. Get the skip byte value from the user
        FileInputStream fi = new FileInputStream("sample.txt");
        BufferedInputStream bi = new BufferedInputStream(fi);
        Scanner sc=new Scanner(System.in);
        int sk=sc.nextInt();
          bi.skip(sk);
          System.out.println("Contents after skipping "+sk+" bytes:");
          int a = 0;
          while((a=bi.read()) != -1)
            System.out.print((char)a);
          bi.close();
          fi.close();
##
Write a Java Program for displaying the data from the file  FileInputStream & BufferedInputStreamNote:Assume sample.txt file created. In the FileInputStream use sample.txt file as arguments and display the data in the file using BufferedInputStream
        FileInputStream fi = new FileInputStream("sample.txt");
        BufferedInputStream bi = new BufferedInputStream(fi);
        
          System.out.println("Data in the File:");
          int a = 0;
          while((a=bi.read()) != -1)
            System.out.print((char)a);
          bi.close();
          fi.close();
##
Write a Java Program to read the number from the user using the BufferedReader class and perform sum of natural numbers.
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Sample{
    void natural(int num)
    {
        int i, sum = 0;  
//executes until the condition returns true  
        for(i = 1; i <= num; ++i)  
        {  
        //adding the value of i into sum variable  
        sum = sum + i;  
        }  
//prints the sum   
        System.out.println("Sum of First "+num+" Natural Numbers is = " + sum);  
    }  
}

public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));


int number = Integer.parseInt(reader.readLine());
Sample std = new Sample();
std.natural(number);
}
}
##
Write a Java Program to read Employee data (name ,Designation, Salary) from the user using the BufferedReader class.Consider Employee Class using default constructor and instance method for displaying Employee name, Designation, Salary
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Employee{
String name;
String des;
int sal;
Employee(String name, String des, int sal){
this.name = name;
this.des = des;
this.sal= sal;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Designation: "+this.des);
System.out.println("Salary: "+this.sal);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();

String des=reader.readLine();

int sal = Integer.parseInt(reader.readLine());
Employee std = new Employee(name, des, sal);
std.displayDetails();
}
}
##
Write a java Program for reading the characters from the user and print in the display screen using Buffered InputStream
import java.io.*;  
import java.io.*;
public class Main  {
  public static void main(String[] args) throws IOException
  {
   BufferedInputStream bf = new BufferedInputStream(System.in)   ;
    try{
          int i;
        while((i = bf.read()) != -1) {
            char c = (char) i;
            System.out.println(c);  
    }
    }
finally{
        bf.close();
}   
}   
}
##
Write a java program for writing the character in the file using Buffered WriterNote: Read the Character from the User
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
  char c=sc.next().charAt(0);
   buffer.write(c);
   
    buffer.close();  
##
Write a Java Program to read student data (name ,department, rollno) from the user using the BufferedReader class.Consider Student Class using default constructor and instance method for displaying Student name, department, rollno
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
String dept;
Student(String name, String dept, int rollno){
this.name = name;
this.dept = dept;
this.rollno = rollno;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Department: "+this.dept);
System.out.println("Rollno: "+this.rollno);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();

String dept = reader.readLine();

int rollno = Integer.parseInt(reader.readLine());
Student std = new Student(name, dept, rollno);
std.displayDetails();
}
}
##
Write a Java Program for writing the data in the file Using  FileOutputStream & BufferedOutputStreamNote:Assume sample.txt file created. In the FileOutputStream use sample.txt file as arguments and display the data in the file using BufferedOutputStream
       
           FileOutputStream fout=new FileOutputStream("sample.txt");    
     BufferedOutputStream bout=new BufferedOutputStream(fout);  
     Scanner sc=new Scanner(System.in);
     String s=sc.nextLine();    
     byte b[]=s.getBytes();    
     bout.write(b);    
    
     bout.close();    
     fout.close();    
##
Write a Java Program for displaying the data from the file, after skipping 3 characters from the file using Filereader & BufferedReaderNote:Assume sample.txt file created. In the FileReader use sample.txt file as arguments and display the data in the file using BufferedReader .Use Predefined function for SkipInitialize char[] array = new char[36];
          FileReader fr=new FileReader("sample.txt");   
          BufferedReader br=new BufferedReader(fr);    
          char[] array = new char[36];
          br.skip(3);
        System.out.println("Data after skipping 3 characters:");
        br.read(array);
      System.out.println(array);
          
          
          br.close();    
          fr.close(); 
##
Write a java program for writing the particular character from the String in the file using Buffered WriterNote: Read the String from the User.Store the 5th position Character in the File
FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    Scanner sc=new Scanner(System.in);
    String str=sc.nextLine();
    
  char c=str.charAt(5);
   buffer.write(c);
   
    buffer.close();  
##
Write a Java Program for getting integer input from the User using BufferedReader
// Java Program for taking user
// input using BufferedReader Class
import java.io.*;

public class Sample
	
{
	
// Main Method
public static void main(String [] args) throws IOException
{
	// Creating BufferedReader Object
	// InputStreamReader converts bytes to
	// stream of character

					
BufferedReader bfn = new BufferedReader(new InputStreamReader(System.in));
 
				
	// Integer reading internally
	int it = Integer.parseInt(bfn.readLine());
					

					
	// Printing Integer			
	System.out.println("Entered Integer : "+ it);
		
	}
					
}
##
Write a Java Program to read student data (name ,rollno,  subjects marks) from the user using the BufferedReader class.Consider Student Class using default constructor and instance method for displaying Student name, rollno, subjectmarks
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
int m1,m2,m3;
Student(String name,int rollno,int m1,int m2,int m3){
this.name = name;
this.rollno = rollno;
this.m1 =m1;
this.m2=m2;
this.m3=m3;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Rollno: "+this.rollno);
System.out.println("Marks 1: "+this.m1);
System.out.println("Marks 2: "+this.m2);
System.out.println("Marks 3: "+this.m3);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();
int rollno = Integer.parseInt(reader.readLine());
int m1 = Integer.parseInt(reader.readLine());
int m2=Integer.parseInt(reader.readLine());
int m3 = Integer.parseInt(reader.readLine());
Student std = new Student(name, rollno,m1,m2,m3);
std.displayDetails();
}
}
##
Write a Java Program for writing the Specified length of  data in the file Using  FileOutputStream & BufferedOutputStreamNote:Assume sample.txt file created. In the FileOutputStream use sample.txt file as arguments and display the data in the file using BufferedOutputStream.Get the Input String from the User.From the Input String store the data from index value as 5 and length as 10
       
           FileOutputStream fout=new FileOutputStream("sample.txt");    
     BufferedOutputStream bout=new BufferedOutputStream(fout);  
     Scanner sc=new Scanner(System.in);
     String s=sc.nextLine();    
     byte b[]=s.getBytes();    
     System.out.println("Original Data:" +s);
     System.out.print("After Skipping:");
     bout.write(b,5,10);    
     bout.close();    
     fout.close();    
##
Write a Java Program to read student data (name ,rollno,  subjects marks,percentage) from the user using the BufferedReader class.Consider Student Class using default constructor and instance method for displaying Student name, rollno, subjectmarks
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
class Student{
String name;
int rollno;
int m1,m2,m3;
int percentage;
Student(String name,int rollno,int m1,int m2,int m3){
this.name = name;
this.rollno = rollno;
this.m1 =m1;
this.m2=m2;
this.m3=m3;
percentage=(m1+m2+m3)/3;
}
public void displayDetails(){
System.out.println("Name: "+this.name);
System.out.println("Rollno: "+this.rollno);
System.out.println("Marks 1: "+this.m1);
System.out.println("Marks 2: "+this.m2);
System.out.println("Marks 3: "+this.m3);
System.out.println("Percentage : "+percentage);
}
}
public class ReadData {
public static void main(String args[]) throws IOException {
BufferedReader reader =new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();
int rollno = Integer.parseInt(reader.readLine());
int m1 = Integer.parseInt(reader.readLine());
int m2=Integer.parseInt(reader.readLine());
int m3 = Integer.parseInt(reader.readLine());
Student std = new Student(name, rollno,m1,m2,m3);
std.displayDetails();
}
}
##
Write a Java Program for getting Double and integer input from the User using BufferedReader
// Java Program for taking user
// input using BufferedReader Class
import java.io.*;

public class Sample
	
{
	
// Main Method
public static void main(String [] args) throws IOException
{
	// Creating BufferedReader Object
	// InputStreamReader converts bytes to
	// stream of character

					
BufferedReader bfn = new BufferedReader(new InputStreamReader(System.in));
  Double d=Double.parseDouble(bfn.readLine());
				
	// Integer reading internally
	int it = Integer.parseInt(bfn.readLine());
					
	// Printing String
	System.out.println("Entered Double : "+ d);
					
	// Printing Integer			
	System.out.println("Entered Integer : "+ it);
		
	}
					
}
##
Write a java program for writing the data ("Welcome Java") in the file using Buffered Writer
 FileWriter writer = new FileWriter("sample.txt");  
    BufferedWriter buffer = new BufferedWriter(writer);  
    buffer.write("Welcome Java");  
    buffer.close();  
##
Write a Java Program for  displaying the number of bytes in the  file "sample1.txt" using DataInputStreamNote: Assume sample1.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("sample1.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
FileOutputStream fout1=new FileOutputStream("F1.txt");    
FileOutputStream fout2=new FileOutputStream("F2.txt");    

ByteArrayOutputStream bout=new ByteArrayOutputStream();  

int value=66;

bout.write(value);    
bout.writeTo(fout1);    
bout.writeTo(fout2);  

bout.close();

System.out.println("Success...");
##
Write a Java Program to store a String Value  "This is a file created by using Data Stream" in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);

dout.writeUTF("This is a file created by using Data Stream"); 
dout.close();    
fout.close();

System.out.println("Successfully Completed");
##
Write a Java Program to read a integer Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
FileInputStream input = new FileInputStream("OutputFile.txt");  
DataInputStream di = new DataInputStream(input); 

int data = di.readInt();

System.out.println(data);  

input.close();
di.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 69
FileOutputStream fout1=new FileOutputStream("F1.txt");    
FileOutputStream fout2=new FileOutputStream("F2.txt");    

ByteArrayOutputStream bout=new ByteArrayOutputStream();  

int value=69;

bout.write(value);    
bout.writeTo(fout1);    
bout.writeTo(fout2);  

bout.close();

System.out.println("Success...");
##
Implement a Java Program to write a integer '65'  in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
                 dout.writeInt(65);    
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Multiplication of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value*value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for read the float data in the  file "OutputFile.txt" using DataInputStream.Note:Assume OutputFile.txt file created. In the DataInputStream use Output.txt file as argumentsInitialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
   
        float intvalue=di.readFloat();
        System.out.println("File result: "+intvalue);
    
      di.close();
    fi.close();
##
Write a Java Program to read a boolean Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 boolean data =di.readBoolean();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for read the integer data in the  file "OutputFile.txt" using DataInputStream.Note:Assume OutputFile.txt file created. In the DataInputStream use Output.txt file as argumentsInitialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
   
        int intvalue=di.readInt();
        System.out.println("File result: "+intvalue);
    
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program to read a character Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 char data =di.readChar();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a Java Program to store a String Value  in a file "testout.txt" using DataOutputStreamNote: Read the String value from the user
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
Scanner sc=new Scanner(System.in);
String str=sc.nextLine();
dout.writeUTF(str); 
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read a double Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 double data =di.readDouble();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a Java Program to store an integer , Double  and character value in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
Scanner sc=new Scanner(System.in);
int num=sc.nextInt();
double db=sc.nextDouble();
char ch=sc.next().charAt(0);
                 dout.writeInt(num);  
                 dout.writeDouble(db);
                 dout.writeChar(ch);
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for  displaying the number of bytes in the  file "Output.txt" using DataInputStreamNote: Assume Output.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("Output.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Multiplication of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value*value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(66);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program to store an integer '65' , Double  as  '25.32' and character value as 'A'  in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
                 dout.writeInt(65);  
                 dout.writeDouble(25.32);
                 dout.writeChar('A');
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read a String Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
   String data =di.readUTF();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a Java Program for  displaying the number of bytes in the  file "sample.txt" using DataInputStreamNote: Assume sample.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("sample.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 69
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(69);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program for  displaying the number of bytes in the  file "Output.txt" using DataInputStreamNote: Assume Output.txt file created. In the DataInputStream use OutputFile.txt file as arguments .Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("Output.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();
##
Write a Java Program to store an integer '65' , Double  as  '25.32' and character value as 'A'  in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
                 dout.writeInt(65);  
                 dout.writeDouble(25.32);
                 dout.writeChar('A');
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");  
##
Write a Java Program to read a boolean Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for readingNote Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 boolean data =di.readBoolean();
   
      System.out.println(data);  
    input.close();
    di.close();
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to display the number of bytes after read  function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
public class Main {
    public static void main(String args[])
    {
        byte[] array = { 1, 2, 3, 4 };
        try
        {
            ByteArrayInputStream input = new ByteArrayInputStream(array);
            System.out.println("Available bytes at the beginning: " + input.available());
            input.read();
            System.out.println("Available bytes at the end: " + input.available());
            input.close();
        }
        catch (Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};skip 2 VALUESDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
public class Main {
    
    public static void main(String args[])
    {
        byte[] array = { 1, 2, 3, 4 };
        try
        {
            ByteArrayInputStream input = new ByteArrayInputStream(array);
            input.skip(2);
            System.out.print("Input stream after skipping 2 bytes: ");
            int data = input.read();
            while (data != -1) {
            System.out.print(data + ", ");
            data = input.read();
        }
        input.close();
    }
        catch (Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 69
FileOutputStream fout1=new FileOutputStream("F1.txt");    
FileOutputStream fout2=new FileOutputStream("F2.txt");    

ByteArrayOutputStream bout=new ByteArrayOutputStream();  

int value=69;

bout.write(value);    
bout.writeTo(fout1);    
bout.writeTo(fout2);    

bout.close();

System.out.println("Success...");
##
Write a java program to read data using ByteArrayInputStream.Note: Get String Value from the UserConvert Stringvalue into Byte using the predefined function -getBytes()
import java.io.ByteArrayInputStream;
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        byte[] array = str.getBytes();
        
        try
        {
            ByteArrayInputStream input = new ByteArrayInputStream(array);
            System.out.print("The bytes read from the input stream: ");
            for(int i= 0; i < array.length; i++)
            {
                int data = input.read();
                System.out.print(data + ", ");
            }
            input.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the data to the stream using predefined function write
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        String data = sc.nextLine();
        try
        {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            byte[] array = data.getBytes();
            
            out.write(array);
            
            String streamData = out.toString();
            System.out.println("Output stream: " + streamData);
            
            out.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a java program to read data using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Read the byte value using predefined function read
import java.io.ByteArrayInputStream;
public class Main {
  public static void main(String[] args) {

    // Creates an array of byte
    byte[] array = {1, 2, 3, 4};

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes available using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

    public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-Initialize start value as 2 and length as 7
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,2,7);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};get skip integer value from the userDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
import java.util.*;
   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);
       Scanner sc=new Scanner(System.in);
       int skvalue=sc.nextInt();
      // Using the skip()  method
      input.skip(skvalue);
      System.out.print("Input stream after skipping " +skvalue+ "  bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(66);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};SKIP 1 INTEGERDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Using the skip() method
      input.skip(1);
      System.out.print("Input stream after skipping 1 bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after read  function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      // Reads 2 bytes from the input stream
      input.read();
     
      // Returns the available number of bytes
      System.out.println("Available bytes at the end: " + input.available());

      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to read data using ByteArrayInputStream.Note: Get String Value from the UserConvert Stringvalue into Byte using the predefined function -getBytes()
import java.io.ByteArrayInputStream;
import java.util.*;
public class Main {
  public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
String str=sc.nextLine();
    // Creates an array of byte
    byte[] array = str.getBytes();

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-Initialize start value as 3 and length as 6
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,3,6);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize   byte[] array = { 12, 22, 33, 45 };skip 2 VALUESDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 12, 22, 33, 45 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Using the skip() method
      input.skip(2);
      System.out.print("Input stream after skipping 2 bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes available using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

    public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to read data using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};Read the byte value using predefined function read
import java.io.ByteArrayInputStream;
public class Main {
  public static void main(String[] args) {

    // Creates an array of byte
    byte[] array = {1, 2, 3, 4};

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txt  Read the two Integer value from the user, Multiplication of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value*value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to write data using ByteArrayOutputStream.Note:Initialize String value as "This is a line of text inside the string".Writes the data to the stream using predefined function write
import java.io.*;
public class Main {
    public static void main(String[] args) {

    String data = "This is a line of text inside the string.";

    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Output stream: " + streamData);

      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtRead the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a java program to read data using ByteArrayInputStream.Note: Get String Value from the UserConvert Stringvalue into Byte using the predefined function -getBytes()
import java.io.ByteArrayInputStream;
import java.util.*;
public class Main {
  public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
String str=sc.nextLine();
    // Creates an array of byte
    byte[] array = str.getBytes();

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.Note:Initialize byte[] array = {1, 2, 3, 4};get skip integer value from the userDisplay the number of byte value using predefined function available
import java.io.ByteArrayInputStream;
import java.util.*;
   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);
       Scanner sc=new Scanner(System.in);
       int skvalue=sc.nextInt();
      // Using the skip()  method
      input.skip(skvalue);
      System.out.print("Input stream after skipping " +skvalue+ "  bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String,starting position and length value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
     int start=sc.nextInt();
     int length=sc.nextInt();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,start,length);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write data using ByteArrayOutputStream.Note:Read the String value from the userWrites the Specified portion of data from the String to the stream using predefined function write(byte[] arr, int start, int length)-Initialize start value as 2 and length as 7
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,2,7);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStreamNote:create two files F1.txt and F2.txtstore integer value 66
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(66);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
##
Write a Java Program to print the String value "Hi Everybody,Welcome to Java StringReader." Using StringReader
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {
        String srg = "Hi Everybody,Welcome to Java StringReader.";  
        StringReader reader = new StringReader(srg);  
        int k=0; 
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Create a Java Program to display the string content after skipping 4 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 4 characters
import java.io.StringReader;  
import java.util.*;
public class StringReaderExample 
{  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        
        StringReader sr = new StringReader(str);
        
        System.out.println("Original data: "+str);
        
        sr.skip(4);
        
        System.out.println("Data after skipping");
        
        int k;
        while((k=sr.read())!=-1)
        {
            System.out.print((char)k);
        }
    }  
}  
##
Write a Java Program to print the string "This is the text in the string." in the outputscreen using StringWriter
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {
        String srg = "This is the text in the string.";  
        StringReader reader = new StringReader(srg);  
        System.out.print("Data in the StringWriter: ");
        int k=0; 
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Create a Java Program to display the string content after skipping 2 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 2 characters
import java.io.StringReader;  
import java.util.*;
public class StringReaderExample 
{  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        
        StringReader sr = new StringReader(str);
        
        System.out.println("Original data: "+str);
        
        sr.skip(2);
        
        System.out.println("Data after skipping");
        
        int k;
        while((k=sr.read())!=-1)
        {
            System.out.print((char)k);
        }
    }  
}  
##
Write a Java Program to print the character in the outputscreen using StringWriterNote:Read the integer value from the user.Equivalent Character displayed in the Output Screen.
import java.io.StringWriter;
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int data=sc.nextInt();
        try
        {
            StringWriter output = new StringWriter();
            
            output.write(data);
            System.out.println("Input Int Value: " + data);
            System.out.println("Equivalent Character: " + output);
            output.close();
        }
        catch(Exception e)
        {
            e.getStackTrace();
        }
    }
}
##
Write a Java Program to print the String value "Hello Java!! Welcome to Java StringReader." Using StringReader
import java.io.StringReader;  
public class StringReaderExample {  
    public static void main(String[] args) throws Exception {  
        String srg = "Hello Java!! \nWelcome to Java StringReader.";  
        StringReader reader = new StringReader(srg);  
        int k=0;  
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Create a Java Program To display  and skip the specified number of characters using the predefined Method Skip in StringReaderNote:read the String value from the user,Get the number of characters to skip from the user
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
    int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
             input.skip(skipnumber);
             System.out.println("Data after skipping "+skipnumber+" characters:");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the string "String Writer" in the outputscreen using StringWriter
import java.io.StringWriter;

public class Main {
  public static void main(String[] args) {

    String data = "String Writer";

    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);

      // Prints the string writer
      System.out.println("Data in the StringWriter: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Create a Java Program to display the string content after skipping 5 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 5 characters
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
   // int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
           input.skip(5);
             System.out.println("Data after skipping ");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
Write a Java Program to print the specified bytes from the string in the outputscreen using StringWriterNote:Read the String Value, starting position  as 2 and length  as 4 from the user.
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data = sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data,2,4);

      // Prints the string writer
      System.out.println("Input String: " + data);
      System.out.println("Specified Location: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the String value with the help of character array Using StringReaderNote: Get the String value from the User ,Use char array function as char[] array = new char[15];
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String data = sc.nextLine();  
       
       char[] array = new char[15];

    try {
      // Create a StringReader
      StringReader input = new StringReader(data);

      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);

      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
        }  
}  
##
Create a Java Program to display the string content after skipping 3 characters using the predefined Method Skip in StringReaderNote:read the String value from the user,skip 3 characters
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
   // int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
           input.skip(3);
             System.out.println("Data after skipping ");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the string in the outputscreen using StringWriterNote:Read the String Value from the user
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data = sc.nextLine();
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);

      // Prints the string writer
      System.out.println("Data in the StringWriter: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the specified bytes from the string in the outputscreen using StringWriterNote:Read the String Value, starting position and length from the user.
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data = sc.nextLine();
     int st=sc.nextInt();
     int len=sc.nextInt();
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data,st,len);

      // Prints the string writer
      System.out.println("Input String: " + data);
      System.out.println("Specified Location: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the String value Using StringReaderNote: Get the String value from the User
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String srg = sc.nextLine();  
        StringReader reader = new StringReader(srg);  
        int k=0; 
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  
##
Write a Java Program to append the String with user defined String  using StringWriterNote:Read the String value and Append String value from the user.Display the Output in the output Screen
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

      
     Scanner sc=new Scanner(System.in);
     String data=sc.nextLine();
     String append =sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);
      output.append(append);
      // Prints the string writer
      System.out.println("Input Value: " + data);
      System.out.println("After Append: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java Program to print the String value with the help of character array Using StringReaderNote: Get the String value from the User ,Use char array function as char[] array = new char[10];
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String data = sc.nextLine();  
       
       char[] array = new char[10];

    try {
      // Create a StringReader
      StringReader input = new StringReader(data);

      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);

      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
        }  
}  
##
Write a Java Program to append the String "Java" in the user defined String  using StringWriterNote:Read the String value from the user.Append the String "Java" in the user defined string value . Display the Output in the output Screen
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

      
     Scanner sc=new Scanner(System.in);
     String data=sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);
      output.append("Java");
      // Prints the string writer
      System.out.println("Input Value: " + data);
      System.out.println("After Append: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}
##
Write a Java program to store the Employee details(name,designation,id) in a file "emp.txt" using Serialization(Serializing an Object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Read Employee name ,designation,id from the User, and pass as an argument for Constructor Studentinfo
try
{
    Scanner sc=new Scanner(System.in);
    String name=sc.nextLine();
    String dept = sc.nextLine();
    int rollno=sc.nextInt();
    
    Employeeinfo si1 = new Employeeinfo(name,dept,rollno);
    FileOutputStream fos = new FileOutputStream("emp.txt");
    ObjectOutputStream oos = new ObjectOutputStream(fos);
    oos.writeObject(si1);
    oos.close();
}
catch (Exception e)
{
    System.out.println(e);
} 
##
Write a Java program to read the Student details(name,dept,rollno)from a file "student.txt" using Deserialization(deserialize the object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Initialize Studentinfo objectname =null;
try
{
    FileInputStream fis = new FileInputStream("student.txt");
    ObjectInputStream ois = new ObjectInputStream(fis);
    Studentinfo si = (Studentinfo)ois.readObject();
    System.out.println("Deserialization-Student Name:"+si.name);
    System.out. println("Deserialization-Student Department:"+si.dept);
    System.out. println("Deserialization-Student RollNo:"+si.rollno);

}
catch (Exception e)
{
    System.out.println(e);
}
##
Write a Java program to perform transient in Student details(name,dept,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept,,rollno
class Studentinfo implements Serializable
{
    String name;
    transient String dept;
    transient int rollno;
    Studentinfo(String n, String r,int n1)
    {
        this.name = n;
        this.dept = r;
        this.rollno=n1;
    }
}
##
Write a Java program to perform Transient in  Student details(name,dept)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept
class Studentinfo implements Serializable
{
    String name;
    transient String dept;
    Studentinfo(String n, String r)
    {
        this.name = n;
        this.dept = r;
    }
}
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Employee DatabaseNote: Create base class Employeesinfo with name and designation. In the Derived class Employeesal initialize the variable salarySerialization and Deserialization already performed in main class
class Employeeinfo implements Serializable
{
    String name;
    String desi;
    Employeeinfo(String n, String r)
    {
        this.name = n;
        this.desi = r;
    }
}
class Employeesal extends Employeeinfo
{
    double Salary;   
    public Employeesal(String name, String desi, double Salary)
    {
        super(name,desi);
        this.Salary=Salary;
    } 
}
##
Write a Java program to store the Employee details(name,designation) in a file "emp.txt" using Serialization(Serializing an Object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Read Employee name & Designation from the User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
           
            Employeeinfo si1 = new Employeeinfo(name,dept);
            FileOutputStream fos = new FileOutputStream("emp.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Employee details(name,designation,id)from a file "emp.txt" using Deserialization(deserialize the object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Initialize Employeeinfo objectname =null;
  Employeeinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("emp.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Employeeinfo)ois.readObject();
        }
         catch (Exception e)
        {
            System.out.println(e); 
         }
          System.out.println("Deserialization-Employee Name:"+si.name);
            System.out. println("Deserialization-Employee Designation:"+si.desi);
            System.out. println("Deserialization-Employee ID:"+si.id);
##
Write a Java program to perform Transient in Employee details(name,designation)Note: Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable designation
 class Employeeinfo implements Serializable
{
    String name;
    transient String desi;
   
    Employeeinfo(String n, String r)
    {
    this.name = n;
    this.desi = r;
   
    }
} 
##
Write a Java program to perform Transient in  Employee details(name,designation,id)Note:Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable id
class Employeeinfo implements Serializable
{
    String name;
    String desi;
    transient int id;
   
    Employeeinfo(String n, String r, int na)
    {
    this.name = n;
    this.desi = r;
    this.id=na;
   
    }
}
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Student Database.Note:Create a base class Person with variable rollno & name .In the derived class Student initialize the variable course name & fees.Serialization and Deserialization already performed in main class
   
    class Person implements Serializable{    
     int id;    
     String name;
     int total,percentage;
     Person(int id, String name) {    
      this.id = id;    
      this.name = name;    
     }    
    }    
    class Student extends Person{    
     String course;    
     int fee;   
     
     public Student(int id, String name, String course, int fee) {    
      super(id,name);    
      this.course=course;    
      this.fee=fee;    
     }    
    }    
##
Write a Java program to store the Student details(name,rollno) in a file "student.txt" using Serialization(Serializing an Object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Read Student name & rollno from User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            int rollno = sc.nextInt();
           
            Studentinfo si1 = new Studentinfo(name,rollno);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Student details(name,dept) from a file "student.txt" using Deserialization(deserialize the object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Initialize Studentinfo objectname =null;
  Studentinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("student.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Studentinfo)ois.readObject();
        }
         catch (Exception e)
        {
          System.out.println(e);  
            
        }
         System.out.println("Deserialization--Student Name:"+si.name);
      System.out. println("Deserialization--Student Department:"+si.dept);
##
Write a Java program to perform Transient in  Student details(name,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for rollno
 class Studentinfo implements Serializable
{
    String name;
    transient int rid;
   
    Studentinfo(String n, int r)
    {
    this.name = n;
    this.rid = r;
   
    }
}  
##
Write a Java program to perform Transient in  Student details(name,dept)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept
 class Studentinfo implements Serializable
{
    String name;
   transient String dept;
   
    Studentinfo(String n, String r)
    {
    this.name = n;
    this.dept = r;
   
    }
}
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Student Database.Note:Create a base class Person with variable rollno & name .In the derived class Student initialize the variable course name & fees.Serialization and Deserialization already performed in main class
    import java.io.*;    
    class Person implements Serializable{    
     int id;    
     String name;    
     Person(int id, String name) {    
      this.id = id;    
      this.name = name;    
     }    
    }    
    class Student extends Person{    
     String course;    
     int fee;    
     public Student(int id, String name, String course, int fee) {    
      super(id,name);    
      this.course=course;    
      this.fee=fee;    
     }    
    }    
##
Write a Java program to store the Student details(name,dept) in a file "student.txt" using Serialization(Serializing an Object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Read Student name & department from the User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
           
            Studentinfo si1 = new Studentinfo(name,dept);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Student details(name,rollno) from a file "student.txt" using Deserialization(deserialize the object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Initialize Studentinfo objectname =null;
   Studentinfo si=null;
  try
        {
            FileInputStream fis = new FileInputStream("student.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Studentinfo)ois.readObject();
        }
         catch (Exception e)
        {
            System.out.println(e);
            }
             System.out.println("Deserialization-Student Name:"+si.name);
            System.out. println("Deserialization-Student Rollno:"+si.rid);
##
Write a Java program to perform Transient in  Employee details(name,designation,id)Note:Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable id
class Employeeinfo implements Serializable
{
    String name;
    String desi;
    transient int id;
   
    Employeeinfo(String n, String r, int na)
    {
    this.name = n;
    this.desi = r;
    this.id=na;
   
    }
}
##
Write a Java program to perform Transient in  Student details(name,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for rollno
 class Studentinfo implements Serializable
{
    String name;
    transient int rid;
   
    Studentinfo(String n, int r)
    {
    this.name = n;
    this.rid = r;
   
    }
}  
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Employee DatabaseNote: Create base class Employeesinfo with name and designation. In the Derived class Employeesal initialize the variable salarySerialization and Deserialization already performed in main class
 class Employeeinfo implements Serializable
{
    String name;
    String desi;
    
   
    Employeeinfo(String n, String r)
    {
    this.name = n;
    this.desi = r;
   
    }
}
    class Employeesal extends Employeeinfo{    
    double Salary;   
      
     
     public Employeesal(String name, String desi, double Salary) {    
      super(name,desi);    
      this.Salary=Salary;    
       
     }    
    }    
##
Write a Java program to store the Student details(name,dept,rollno) in a file "student.txt" using Serialization(Serializing an Object)Note:Already Created class Studentinfo that implements Serializable interface to make its object serialized.Read Student name,department,rollno from the User, and pass as an argument for Constructor Studentinfo
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
            int roll=sc.nextInt();
           
            Studentinfo si1 = new Studentinfo(name,dept,roll);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 
##
Write a Java program to read the Employee details(name,designation)  from a file "emp.txt" using Deserialization(deserialize the object)Note:Already Created class Employeeinfo that implements Serializable interface to make its object serialized.Initialize Employeeinfo objectname =null;
  Employeeinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("emp.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Employeeinfo)ois.readObject();
        }
         catch (Exception e)
        {
            e.printStackTrace(); }
       
 System.out.println("Deserialization--Employee Name:"+si.name);
            System.out. println("Deserialization--Employee Designation:"+si.desi);
##
Write a Java program to perform transient in Student details(name,dept,rollno)Note:Student details are stored in a file "student.txt" using Serialization.Create a class Studentinfo that implements Serializable interface to make its object serialized.Initialize transient for dept,,rollno
 class Studentinfo implements Serializable
{
    String name;
   transient String dept;
    transient int rollno;
   
    Studentinfo(String n, String r,int n1)
    {
    this.name = n;
    this.dept = r;
    this.rollno=n1;
    }
}
##
Write a Java program to perform Transient in Employee details(name,designation)Note: Employee details are stored in a file "emp.txt"Create class Employeeinfo that implements Serializable interface to make its object serialized.Initialize transient for the variable designation
 class Employeeinfo implements Serializable
{
    String name;
    transient String desi;
   
    Employeeinfo(String n, String r)
    {
    this.name = n;
    this.desi = r;
   
    }
} 
##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Student Database.Note:Create a base class Person with variable rollno & name .In the derived class Student initialize the variable course name & fees.Serialization and Deserialization already performed in main class
   
    class Person implements Serializable{    
     int id;    
     String name;
     int total,percentage;
     Person(int id, String name) {    
      this.id = id;    
      this.name = name;    
     }    
    }    
    class Student extends Person{    
     String course;    
     int fee;   
     
     public Student(int id, String name, String course, int fee) {    
      super(id,name);    
      this.course=course;    
      this.fee=fee;    
     }    
    }    
##
Create a ArrayList in that list add any 4 animal names dynamically and display the same after add one more animal name at the index of 2 and then finally display the list.
import java.util.*;

public class CreateArrayListExample {

    public static void main(String[] args) {
        
        List<String> animals = new ArrayList<>();
        Scanner sc=new Scanner(System.in);

        for(int i=0;i<4;i++)
        {
        animals.add(sc.next());
        }

        System.out.println(animals);

       
        animals.add(2, sc.next());

        System.out.println(animals);

    }
}
##
Create an arraylist, add ‘n’ elements and remove 0th index elements and then display the arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
        ArrayList<String> al = new ArrayList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
        al.add(sc.next());
        }
        al.remove(0);
        System.out.println(al);
   }
}
##
Create an arraylist and add any three elements and then update the three elements by 71,81,91 and then display the result using the set method.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    ArrayList<Integer> arraylist = new ArrayList<Integer>(50);
    arraylist.add(1);
    arraylist.add(2);
    arraylist.add(3);
    
    arraylist.set(0,71);
    arraylist.set(1,81);
    arraylist.set(2,91);
    System.out.println(arraylist);
   
   }
}
##
To traverse Array List elements using the Iterator interface using java collection.
import java.util.*;  
public class ArrayListExample{  
 public static void main(String args[]){  
  Scanner sc=new Scanner(System.in);
  ArrayList<Integer> list=new ArrayList<Integer>();
  int n=sc.nextInt();
  for(int i=0;i<n;i++)
  {
      list.add(sc.nextInt());
  }
  Iterator itr=list.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  
  }  
 }  
}
##
To access an element from the array list,use the get() method of the ArrayList class based an index value and then display the corresponding value use java collection concepts.
import java.util.*;

public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    ArrayList<String> animals = new ArrayList<>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
          animals.add(sc.next());
    }
  
    System.out.println("ArrayList: " + animals);

   
    String str = animals.get(1);
    System.out.print("Element at index 1: " + str);
  }
}
##
Create an Array List to store n numbers (add elements of type Integer) and then display the n numbers.
import java.util.*;

public class Main { 
  public static void main(String[] args) { 
    ArrayList<Integer> myNumbers = new ArrayList<Integer>();
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    myNumbers.add(sc.nextInt());
    }
    for (int i : myNumbers) {
      System.out.println(i);
    }
  } 
}
##
Create an arraylist , add elements in an arraylist and then display in descending order.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
         Scanner sc=new Scanner(System.in);
        ArrayList<String> al = new ArrayList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
        al.add(sc.next());
        }
        Collections.sort(al, Collections.reverseOrder());
        System.out.println(al);

   }
}
##
Create an arraylist and add odd numbers from 30 to 11 and then display the result in sorting order.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    ArrayList<Integer> arraylist = new ArrayList<Integer>();
    arraylist.add(29);
    arraylist.add(27);
    arraylist.add(25);  arraylist.add(23);  arraylist.add(21);
    arraylist.add(19);  arraylist.add(17);  arraylist.add(15);  arraylist.add(13);  arraylist.add(11);
    
    Collections.sort(arraylist);
    System.out.println(arraylist);
   
   }
}
##
From  Arraylist numbers first print even numbers and then print odd numbers in ascending order using java collections.Note:int[] myArray={1,3,4,2,12,10,8,7,6,5,9,14} ;
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
         int[] myArray={1,3,4,2,12,10,8,7,6,5,9,14} ;
ArrayList<Integer>evenList = new ArrayList<Integer>();
ArrayList<Integer>oddList = new ArrayList<Integer>();

for(int i=0;i<myArray.length;i++){
if(myArray[i]%2==0){
evenList.add(myArray[i]);
}else{
oddList.add(myArray[i]);
}
}
Collections.sort(evenList);
Collections.sort(oddList);
for(int even : evenList)
System.out.print(even+",");
for(int odd : oddList)
{
System.out.print(odd+",");
}


   }
}
##
Pick prime numbers from arraylist and display the output using collections concepts.Note:Read size of the array.Read arraylist elemnts.Display prime numbers.
import java.util.*;

public class Main {
	static boolean isPrime(int number) {
		boolean isPrime = false;
		int i = (int) Math.ceil(Math.sqrt(number));
		while (i > 1) {
			if ((number != i) && (number % i == 0)) {
				isPrime = false;
				break;
			} else if (!isPrime)
				isPrime = true;
			--i;
		}
		return isPrime;
	}

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		ArrayList<Integer> list = new ArrayList<Integer>();
		int n=sc.nextInt();
		for(int i=0;i<n;i++)
		{
		    	list.add(sc.nextInt());
		}
	
		Integer array[] = new Integer[list.size()];
		array = list.toArray(array);
		System.out.println("Prime Numbers are: ");
		for (int i = 0; i < array.length; i++) {
			if (isPrime(array[i])) {
				System.out.println(array[i]);
			}
		}
	
	}
}
##
Write a java program add even numbers from 1 to 10 or 11 to 20 or 21 to 30 in arraylist and then display the size of the array list.Note:Runtime read the input.2,4,6,........
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		ArrayList<Integer> al=new ArrayList<Integer>();
        Scanner sc=new Scanner(System.in);
        for(int i=1;i<=5;i++)
        {
        al.add(sc.nextInt());
        }
     
        System.out.println(al.size());
	}
}
##
Create an arraylist, add 3 elements college,school,medical and remove school elements from the arraylist and then display the arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
        ArrayList<String> al = new ArrayList<String>();
      
        al.add("college");
        al.add("school");
        al.add("medical");
        
        al.remove("school");
        System.out.println(al);
   }
}
##
Create an arraylist and add elements like 1,2,3,4,5,6,7,1,1,1 and add size for arraylist 50.Apply trimToSize() method and display the arraylistelements and  the size of the current arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    ArrayList<Integer> arraylist = new ArrayList<Integer>(50);
    arraylist.add(1);
    arraylist.add(2);
    arraylist.add(3);
    arraylist.add(4);
    arraylist.add(5);
    arraylist.add(6);
    arraylist.add(7);
    arraylist.add(1);
    arraylist.add(1);
    arraylist.add(1);
    arraylist.trimToSize();
    System.out.println(arraylist);
    System.out.println(arraylist.size());
   }
}
##
Java Program To Print Fibonacci Series from given length Using Collection.Note:input 0 or -ve means print Length can not be negative.
import java.util.ArrayList;
import java.util.Scanner;

public class FibonacciSeries {

	public static void main(String[] args) {

	
		ArrayList<Integer> fibonacciSeries = new ArrayList<>();

	
		fibonacciSeries.add(0);
		fibonacciSeries.add(1);

	
		Scanner sc = new Scanner(System.in);
	
		int length = sc.nextInt();
		
	
		sc.close();

	
		if (length <= 0)
			System.out.println("Length can not be negative.");
	
		else if (length == 1)
			System.out.println(fibonacciSeries.get(0));
	
		else if (length == 2)
			System.out.println(fibonacciSeries);
		else {

		
			for (int i = 3; i <= length; i++) {
			
				fibonacciSeries.add(fibonacciSeries.get(i - 2) + fibonacciSeries.get(i - 3));
			}

		
			System.out.println(fibonacciSeries);
		}
	}
}
##
Create an arraylist and read input at runtime display the arraylist and then removeall elements for arraylist finally display the arraylist.
import java.util.*;

public class Main {
    public static void main(String[] args){

        Scanner sc=new Scanner(System.in);
        ArrayList<String> languages = new ArrayList<>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++){
             languages.add(sc.next());
        }
       
        
        System.out.println(languages);

        
        languages.removeAll(languages);
        System.out.println(languages);
    }
}
##
Write a java program add even numbers from 1 to 10 or 11 to 20 or 21 to 30 in arraylist and then display the size of the array list.Note:Runtime read the input.2,4,6,........
import java.util.*;
public class Main
{
	public static void main(String[] args) {
		ArrayList<Integer> al=new ArrayList<Integer>();
        Scanner sc=new Scanner(System.in);
        for(int i=1;i<=5;i++)
        {
        al.add(sc.nextInt());
        }
     
        System.out.println(al.size());
	}
}
##
Create an arraylist, add 3 elements college,school,medical and remove school elements from the arraylist and then display the arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
        ArrayList<String> al = new ArrayList<String>();
      
        al.add("college");
        al.add("school");
        al.add("medical");
        
        al.remove("school");
        System.out.println(al);
   }
}
##
Convert array elements to arraylist and display the arraylist elements using collection concepts in java.Note:Array elements :      {"Agra", "Mysore", "Chennai", "Bhopal"}
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
      String citynames[]={"Agra", "Mysore", "Chennai", "Bhopal"};

	 
	  ArrayList<String> citylist= new ArrayList<String>(Arrays.asList(citynames));

	 

	  for (String str: citylist)
	  {
		System.out.println(str);
      }
   }
}
##
Java Program To Print Fibonacci Series from given length Using Collection.Note:input 0 or -ve means print Length can not be negative.
import java.util.ArrayList;
import java.util.Scanner;

public class FibonacciSeries {

	public static void main(String[] args) {

	
		ArrayList<Integer> fibonacciSeries = new ArrayList<>();

	
		fibonacciSeries.add(0);
		fibonacciSeries.add(1);

	
		Scanner sc = new Scanner(System.in);
	
		int length = sc.nextInt();
		
	
		sc.close();

	
		if (length <= 0)
			System.out.println("Length can not be negative.");
	
		else if (length == 1)
			System.out.println(fibonacciSeries.get(0));
	
		else if (length == 2)
			System.out.println(fibonacciSeries);
		else {

		
			for (int i = 3; i <= length; i++) {
			
				fibonacciSeries.add(fibonacciSeries.get(i - 2) + fibonacciSeries.get(i - 3));
			}

		
			System.out.println(fibonacciSeries);
		}
	}
}
##
Create an arraylist and read input at runtime display the arraylist and then removeall elements for arraylist finally display the arraylist.
import java.util.*;

public class Main {
    public static void main(String[] args){

        Scanner sc=new Scanner(System.in);
        ArrayList<String> languages = new ArrayList<>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++){
             languages.add(sc.next());
        }
       
        
        System.out.println(languages);

        
        languages.removeAll(languages);
        System.out.println(languages);
    }
}
##
Apply the Collection Concepts in java.To Create a linkedlist, read size of the list , read the elements for the linkedlist, add one element in particular index value and before and after index value added to linkedlist display the elements from the linkedlist.Note:add element at index position 2.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        LinkedList<String> domain = new LinkedList<String>();
        for(int i = 0;i<n;i++)
        {
            domain.add(sc.next());
        }
        System.out.println(domain);
        domain.add(2,sc.next());
        System.out.println(domain);
    }
}
##
Apply the listiterator method concepts in program to returns an object of Iterator class that contains  the elements in proper sequence  starting from the specified position as mentioned in the argument , display the elements from the linkedlist.To Create a linkedlist, read size of the list , read the elements for the linkedlist  and display it.Note:Index value consider as 1.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
     Iterator itr = cars.listIterator(1);

  while (itr.hasNext()) {

  System.out.println(itr.next());
  }
}
}
##
Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist.Apply the Collection Concepts in java.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
    System.out.println(cars);
  }
}
##
Apply the getFirst() method in LinkedList java concepts.Create a linkedlist, read size of the list , read the elements for the linkedlist and display the first index of the element from the linkedlist.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        LinkedList<String>list=new LinkedList<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            list.add(sc.next());
        }
        Iterator i=list.listIterator(0);
        System.out.print("First Element :"+i.next());
        
    }
}
##
Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist.After display element  add the "Good" text word first of the already created linkedlist. Finally display the current linkedlist element.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
    System.out.println(cars);
    cars.addFirst("Good");
    System.out.println(cars);
  }
}
##
Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist.Apply the Collection Concepts in java.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
       System.out.println(cars);
  }
}
##
Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist.Apply the Collection Concepts in java.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
       System.out.println(cars);
  }
}
##
Apply the Collection Concepts in java.Create a linkedlist, read size of the list , read the elements for the linkedlist and display the index 1 elements from the linkedlist.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        LinkedList<String>list=new LinkedList<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            list.add(sc.next());
        }
        Iterator i=list.listIterator(1);
        System.out.print("Element at index 1 :"+i.next());
        
    }
}
##
Apply the iterator Concepts in java linkedlist and display the elements from the linkedlist.To Create a linkedlist, read size of the list , read the elements for the linkedlist  and display it.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
     Iterator iterator = cars.iterator();  
    
        System.out.println("Elements in LinkedList : ");  
    
        while (iterator.hasNext())  
            System.out.print(iterator.next() + " ");  
    
        System.out.println();  
  }
}
##
To create the linkedlist , display the elements from the linkedlist and display the size of the linkedlist.Note:Read Size of the arrayRead elements for the array.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
       System.out.println("Linked List :" + cars);
       System.out.println("Linked List size:" + cars.size());
  }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object.Apply the iterator in list using for loop for iteration.Note:Size of the arrayRead n elements(String)
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }

		for (int i = 0; i < size; i++) {
  
            
            System.out.println(al.get(i) + " ");
        }
	    System.out.print("Size of the List:" + al.size());
	}
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object.Apply the iterator in list using for loop for iteration.Check list contains "Programming" text or not.Note:Size of the arrayRead n elements(String)
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }

		for (int i = 0; i < size; i++) {
  
            
            System.out.println(al.get(i) + " ");
        }
        System.out.println("List contains Programming or not:" + al.contains("programming"));
	
	}
}
##
Create a List interface implemented by array list class , adding n elements to object of List interface and print all the elements inside the List interface object,  remove given "for" object value  and then display the final list.Note:Size of the array.Read n elements(String).
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }
		System.out.println("Initial List:" + al);
		al.remove("for");
		System.out.println("Final List:" + al);
	}
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object,use indexOf() method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element and display the element from the list.Note:Size of the array.Read n elements(String).use indexOf("c")
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        List<String> s = new ArrayList<String>();
        Scanner sc = new Scanner(System.in); 
        int a = sc.nextInt();
        for(int i = 0;i<a;i++)
        {
            s.add(sc.next());
        }
        System.out.println("Initial List:"+s);
        System.out.println(s.indexOf("c"));
    }
}
##
Write a Java program to extract a portion of a list. index value from 1 to 3.
import java.util.*;
  public class Ex {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  List<String> list_Strings = new ArrayList<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list_Strings.add(sc.next());
  }
  System.out.println("Original list: " + list_Strings);
  List<String> sub_List = list_Strings.subList(1, 3);
  System.out.println("Index of 1 to 3 elements print: " + sub_List);
 }
}
##
Create a java program use hashset concepts in collection and add the elements to the hashset and then display it.
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        HashSet<String> s = new HashSet<String>();
        for(int i = 0;i<a;i++)
        {
            s.add(sc.next());
        }
        System.out.println("Values in HashSet object: " + s);
    }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object.Apply the iterator in list using for loop for iteration.Check list contains "Programming" text or not.Note:Size of the arrayRead n elements(String)
import java.util.*;
public class GFG 
{
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
	        al.add(sc.next());
        }
		for (int i = 0; i <size;i++) 
		{
              System.out.println(al.get(i));
        }
        System.out.print("List contains Programming or not:"+al.contains("programming"));
	}
}
##
Create a List interface implemented by array list class , adding n elements to object of List interface and print all the elements inside the List interface object,  remove given "for" object value  and then display the final list.Note:Size of the array.Read n elements(String).
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        List<String> list = new ArrayList<String>();
        for(int i =0;i<a;i++)
        {
            list.add(sc.next());
        }
        System.out.println("Initial List:"+list);
        list.remove("for");
        System.out.println("Final List:"+list);
    }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object,use indexOf() method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element and display the element from the list.Note:Size of the array.Read n elements(String).use indexOf("c")
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        List<String> s = new ArrayList<String>();
        Scanner sc = new Scanner(System.in); 
        int a = sc.nextInt();
        for(int i = 0;i<a;i++)
        {
            s.add(sc.next());
        }
        System.out.println("Initial List:"+s);
        System.out.println(s.indexOf("c"));
    }
}
##
Write a Java program to extract a portion of a list. index value from 1 to 3.
import java.util.*;
  public class Ex {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  List<String> list_Strings = new ArrayList<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list_Strings.add(sc.next());
  }
  System.out.println("Original list: " + list_Strings);
  List<String> sub_List = list_Strings.subList(1, 3);
  System.out.println("Index of 1 to 3 elements print: " + sub_List);
 }
}
##
Create a java program use hashset concepts in collection and add the elements to the hashset and then display it.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

HashSet <String> hs = new HashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

System.out.println("Values in HashSet object: "+ hs);
}
}
##
Write a java program to read n elements and remove the elements "98" from the hashset and the display the hashset elements.
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        HashSet<Integer> linked = new HashSet<Integer>();
        Scanner sc = new Scanner(System.in);
        int a= sc.nextInt();
        for(int i = 0;i<a;i++)
        {
            linked.add(sc.nextInt());
        }
        System.out.println("HashSet: "+linked);
        linked.remove(98);
        System.out.println("HashSet after removing elements: "+linked);
    }
}
##
Create a java program use hashset concepts in collection and add the elements to the hashset and then display the elements and its size.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        HashSet<String> s=new HashSet<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            s.add(sc.next());
        }
        System.out.println("HashSet: " + s);
        System.out.println("The size of the set is: " + s.size());
    }
}
##
Write a program to store a group of employee names into a LinkedHashSet, retrieve the elements one by one using an Iterator.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

HashSet <String> hs = new LinkedHashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

Iterator<String> it = hs.iterator();
		while (it.hasNext())
			System.out.println(it.next());
}
}
##
Write a java program to check wheather LinkedHashSet contains an element or not. It returns true if the set contains element, otherwise returns false.Apply clear method.Note:Size of the arrayRead n elementsDisplay the elements.
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        LinkedHashSet<String> s = new LinkedHashSet<String>();
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        for(int i = 0;i<a;i++)
        {
            s.add(sc.next());
        }
        System.out.println("HashSet Elements: " + s);
        
        System.out.println("Is the set empty: "+s.isEmpty());
        s.clear();
        System.out.println("Is the set empty: "+s.isEmpty());
    }
}
##
Write a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display the elements iterate(use while).
import java.util.*;
public class prog
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        LinkedHashSet<String> s = new LinkedHashSet<String>();
        for(int i = 0;i<a;i++)
        {
            s.add(sc.next());
        }
        Iterator<String> i = s.iterator();
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a java program to read n elements and display the n elements, after remove one elements from the hashset("Ravi") and then display the elements.Note:remove object is "Ravi"
import java.util.*;  
public class HashSetRemoveExample1 
{  
    public static void main(String[] args) 
    {  
        HashSet<String> set=new HashSet<String>();  
        Scanner sc= new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
          set.add(sc.next());       
        }
        System.out.println("HashSet: "+set );   
        set.remove("Ravi");  
        System.out.println("HashSet after removing elements: " + set);  
    }  
}  
##
Create a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display it.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

LinkedHashSet <String> hs = new LinkedHashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

System.out.println("Values in HashSet object: " + hs);  
}
}
##
Apply the LinkedHashSet.Read the three animals name and display the elementsthrough LinkedHashSet using Iterator().
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        Set<String> s = new LinkedHashSet<String>(3);
        for(int i=0;i<3;i++)
        {
            s.add(sc.next());
        }
        Iterator i = s.iterator();
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a java program use hashset concepts from another collection and add the n elements to the arraylist and then add one element to hashset, apply iterate(use while)and then display elements using hashset variable.
import java.util.*;
public class HashSetDemo{
    public static void main(String args[]){
        
    Scanner sc=new Scanner(System.in);
    HashSet<String> list=new HashSet<String>(); 
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
        list.add(sc.next());
    }
    HashSet<String> set=new HashSet<String>(list);  
    set.add(sc.next());  
    Iterator<String> i=set.iterator();  
    while(i.hasNext())  
    {  
        System.out.println(i.next());  
    }  
}
}
##
Create a ArrayList in that list add any 4 animal names dynamically and display the same after add one more animal name at the index of 2 and then finally display the list.
import java.util.*;
public class Demo {
    public static void main(String args[])
    {
        List<String> animals = new ArrayList<>();
        Scanner sc=new Scanner(System.in);
        for (int i=0;i<4;i++)
        {
            animals.add(sc.next());
        }
        System.out.println(animals);
        animals.add(2, sc.next());
        System.out.println(animals);
    }
}
##
Create a two arraylist, first list add two words and then one word add in second arraylist.Finally display two arraylist elements in one arraylist.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        ArrayList<String> elements = new ArrayList<String>();
        Scanner sc=new Scanner(System.in);
        for (int i=0;i<2;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("ArrayList1 before addAll:"+elements);
        elements.add(2,sc.next());
        System.out.println("ArrayList1 after addAll:"+elements);
    }
}
##
Create an arraylist and add any three elements and then update the three elements by 71,81,91 and then display the result using the set method.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        ArrayList<Integer> arraylist = new ArrayList<Integer>();
        arraylist.add(1);
        arraylist.add(2);
        arraylist.add(3);
        
        arraylist.set(0,71);
        arraylist.set(1,81);
        arraylist.set(2,91);
        
        System.out.println(arraylist);
    }
}
##
To traverse Array List elements using the Iterator interface using java collection.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        ArrayList<Integer> list = new ArrayList<Integer>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            list.add(sc.nextInt());
        }
        
        Iterator itr = list.iterator();
        while (itr.hasNext())
        {
            System.out.println(itr.next());
        }
    }
}
##
To access an element from the array list,use the get() method of the ArrayList class based an index value and then display the corresponding value use java collection concepts.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        ArrayList<String> animals = new ArrayList<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            animals.add(sc.next());
        }
        System.out.println("ArrayList: "+animals);
        System.out.println("Element at index 1: "+animals.get(1));
    }
}
##
Create an arraylist and add the 4 cars name and add 3rd position one more car name and then display in alphabetical order.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        ArrayList<String> cars = new ArrayList<String>();
        Scanner sc=new Scanner(System.in);
        for(int i=0;i<4;i++)
        {
            cars.add(sc.next());
        }
        cars.add(3,sc.next());
        
        Collections.sort(cars); 
        
        for (String i : cars)
        {
            System.out.println(i);
        }
    }
}
##
Create a two arraylist, first list add two words and then one word add in second arraylist.Finally display two arraylist elements in one arraylist.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        ArrayList<String> elements = new ArrayList<String>();
        Scanner sc=new Scanner(System.in);
        for (int i=0;i<2;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("ArrayList1 before addAll:"+elements);
        elements.add(2,sc.next());
        System.out.println("ArrayList1 after addAll:"+elements);
    }
}
##
Create an arraylist and add any three elements and then update the three elements by 71,81,91 and then display the result using the set method.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        ArrayList<Integer> arraylist = new ArrayList<Integer>();
        arraylist.add(1);
        arraylist.add(2);
        arraylist.add(3);
        
        arraylist.set(0,71);
        arraylist.set(1,81);
        arraylist.set(2,91);
        
        System.out.println(arraylist);
    }
}
##
From  Arraylist numbers first print even numbers and then print odd numbers in ascending order using java collections.
Note:int[] myArray={1,3,4,2,12,10,8,7,6,5,9,14} ;
import java.util.*;  
public class Main {
    public static void main(String[] args)
    {
        int[] myArray={1,3,4,2,12,10,8,7,6,5,9,14} ;
        ArrayList<Integer>evenList = new ArrayList<Integer>();
        ArrayList<Integer>oddList = new ArrayList<Integer>();
        
        for(int i=0;i<myArray.length;i++)
        {
            if(myArray[i]%2==0)
            {
                evenList.add(myArray[i]);
            }
            else
            {
            oddList.add(myArray[i]);
            }
        }
        
        Collections.sort(evenList);
        Collections.sort(oddList);
        
        for(int even : evenList)
            System.out.print(even+",");
        
        for(int odd : oddList)
            System.out.print(odd+",");
    }
}
##
Create an Array List and we have to replace element of it using Java Collection concepts.Note:Size of the arraylist.Read elements based on size of the arraylist.Read index position(which element or position change )and replace element.Finally display arraylist elements.
import java.util.*;
public class pro1 {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        ArrayList<Integer> arrayList = new ArrayList<Integer>();
        
        for(int i=0;i<size;i++)
        {
            arrayList.add(sc.nextInt());
        }
        
        System.out.println("Original ArrayList...");
        for (int i:arrayList)
            System.out.println(i);
        
        int indexpos=sc.nextInt();
        int replaceelement=sc.nextInt();
        arrayList.set(indexpos, replaceelement);
        
        System.out.println("ArrayList after replacement...");
        for (int i:arrayList)
            System.out.println(i);
    }
}
##
Apply the Collection Concepts in java.To Create a linkedlist, read size of the list , read the elements for the linkedlist, add one element in particular index value and before and after index value added to linkedlist display the elements from the linkedlist.Note:add element at index position 2.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> elements = new LinkedList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println(elements);
        elements.add(2,sc.next());
        System.out.println(elements);
    }
}
##
Apply the getLast() method in LinkedList java concepts.Create a linkedlist, read size of the list , read the elements for the linkedlist and display the whole list of the elemnts and last index of the element from the linkedlist.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> elements = new LinkedList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println(elements);
        System.out.println("Last Element :"+elements.get(n-1));
    }
}
##
Create a linkedlist and read the 3 elements for the linkedlist and display the elements from the linkedlist.Apply the clone method in linkedlist.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> list1 = new LinkedList<String>();
        for(int i=0;i<3;i++)
        {
            list1.add(sc.next());
        }
        System.out.println("Linked List 1:"+list1);
        LinkedList list2 = new LinkedList();
        list2 = (LinkedList) list1.clone();
        System.out.println("Linked List 2:"+list2);
    }
}
##
Develop a java class with a method saveEvenNumbers(int N) using LinkedList to store even numbers from 2 to N, where N is a integer which is passed as a parameter to the method saveEvenNumbers().The method should return the LinkedList (A1) created. In the same class create a method printEvenNumbers()which iterates through the LinkedList A1 in step 1, and It should multiply each number with 2 and display it in format 4,8,12….2*N. and add these numbers in a new LinkedList (A2). The new LinkedList (A2) created needs to be returned. Create a method printEvenNumber(int N) parameter is a number N. This method should search the LinkedList (A1) for the existence of the number ‘N’ passed. If exists it should return the Number else return zero.Hint: Use instance variable for storing the LinkedList A1 and A2. NOTE: You can test the methods using a main method.
import java.util.*;
public class Main {
	
	private LinkedList<Integer> list = new LinkedList<Integer>();
	public LinkedList<Integer> saveEvenNumbers(int N)
	{
		list = new LinkedList<Integer>();
		for (int i = 2; i <= N; i++)
		{
			if (i % 2 == 0) list.add(i);
		}
		return list;
	}
	public LinkedList<Integer> printEvenNumbers()
	{
		LinkedList<Integer> newList = new LinkedList<Integer>();
		for (int item : list)
		{
			newList.add(item * 2);
			System.out.println(item * 2);
		}
		return newList;
	}
	public static void main(String[] args)
	{
		Main asg = new Main();
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		asg.saveEvenNumbers(N);
		asg.printEvenNumbers();
	}

}
##
Without applying removeFirst() method Concepts in java linkedlist , display the elements from index 1 position onwards in the linkedlist but apply remove() method must and display it.Note:Read Size of the arrayRead elements for the array.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        LinkedList<String> elements = new LinkedList<String>();
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Linked List :"+elements);
        int r=sc.nextInt();
        System.out.println("Element to be removed:"+elements.get(0));
        elements.remove(0);
        System.out.println("LinkedList:"+elements);
    }
}
##
Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist.Apply the Collection Concepts in java.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> elements = new LinkedList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println(elements);
    }
}
##
Apply the contains method in linkedlist.Create a linkedlist and read the n elements for the linkedlist and display the elements from the linkedlist.Check whether "Programming" text contains or not.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> elements = new LinkedList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Linked List 1:"+elements);
        System.out.println("Linked List 1 contains 'Programming' :"+elements.contains("Programming"));
    }
}
##
Apply the Collection Concepts in java.Create a linkedlist, read size of the list , read the elements for the linkedlist and display the index 1 elements from the linkedlist.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        LinkedList<String> elements = new LinkedList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Element at index 1 :"+elements.get(1));
    }
}
##
Apply the remove method Concepts in java linkedlist and display the elements before and after applying remove methods from the linkedlist.To Create a linkedlist, read size of the list , read the elements for the linkedlist  and display it.Note:Read Size of the arrayRead elements for the array.Based on index value remove the element from the linked list.(Index value must be mention(read)).
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        LinkedList<String> elements = new LinkedList<String>();
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Linked List :"+elements);
        int r=sc.nextInt();
        System.out.println("Element to be removed:"+elements.get(r));
        elements.remove(r);
        System.out.println("LinkedList:"+elements);
    }
}
##
To create the linkedlist , display the elements from the linkedlist and replace the one element from the created linkedlist.Note:Read Size of the arrayRead elements for the array.Replace position and element should read.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        LinkedList<String> elements = new LinkedList<String>();
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Linked List :"+elements);
        int r=sc.nextInt();
        System.out.println("Object to be replaced:"+elements.get(r));
        elements.set(r,sc.next());
        System.out.println("Linked List:"+elements);
    }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object.Note:Size of the arrayRead n elements(String)
import java.util.*;
public class Main {
    public static void main(String args[])
    {
        List<String> a = new ArrayList<String>();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++)
        {
            a.add(sc.next());   
        }
        System.out.println(a);
    }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object and apply addall() method appends all of the elements in the specified collection to the end of this list.Note:List:Size of the array,Read n elements(integer)ArrayList:read value 100,200,300
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        List<Integer> n1=new ArrayList<Integer>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            n1.add(sc.nextInt());
        }
        System.out.println(n1);
        int[] array={100,200,300};
        List<Integer> n2=new ArrayList<Integer>();
        for (int i: array)
            n2.add(i);
        System.out.println(n2);
        n1.addAll(n2);
        System.out.println(n1);
    }
}
##
Create a List interface implemented by two Linkedlist class , adding n elements to object of two List interface and print all the elements inside the List interface object.Check the two lists are equal or not.Note:Read Size of the array for two listRead n elements(String) for two list.Output:EqualNot equal
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        List<String> n1=new ArrayList<String>();
        int s1=sc.nextInt();
        for (int i=0;i<s1;i++)
        {
            n1.add(sc.next());
        }
        System.out.println(n1);
        
        List<String> n2=new ArrayList<String>();
        int s2=sc.nextInt();
        for (int i=0;i<s2;i++)
        {
            n2.add(sc.next());
        }
        System.out.println(n2);
        if (n1.equals(n2))
            System.out.println("Equal");
        else
            System.out.println("Not equal");
    }
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object,use lastIndexOf() method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element and display the element from the list.Note:Size of the array.Read n elements(Integer).use lastIndexOf(30)
import java.util.*;
public class Demo {
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<Integer> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
			al.add(sc.nextInt());
        }
		System.out.println("Initial List:" + al);
		System.out.println(al.lastIndexOf(30));
	}
}
##
Write a Java program to sort a given array list.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        List<String> arr=new ArrayList<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            arr.add(sc.next());
        }
        System.out.println("List before sort: "+arr);
        Collections.sort(arr);
        System.out.println("List after sort: "+arr);
    }
}
##
Write a program to store a group of employee names into a HashSet, retrieve the elements one by one using an Iterator.
import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        ArrayList<String>cars=new ArrayList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
            cars.add(sc.next());
        }
        HashSet<String>set=new HashSet<String>(cars);
        Iterator<String>i=set.iterator();
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Create a List interface implemented by two arraylist class , adding n elements to object of two List interface and print all the elements inside the List interface object.Check the two lists are equal or not.Note:Read Size of the array for two listRead n elements(Integer) for two list.Output:EqualNot equal
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        List<String> n1=new ArrayList<String>();
        int s1=sc.nextInt();
        for (int i=0;i<s1;i++)
        {
            n1.add(sc.next());
        }
        System.out.println(n1);
        
        List<String> n2=new ArrayList<String>();
        int s2=sc.nextInt();
        for (int i=0;i<s2;i++)
        {
            n2.add(sc.next());
        }
        System.out.println(n2);
        if (n1.equals(n2))
            System.out.println("Equal");
        else
            System.out.println("Not equal");
    }
}
##
Create a List interface implemented by array list class , adding n elements to object of List interface and print all the elements inside the List interface object,  remove given "for" object value  and then display the final list.Note:Size of the array.Read n elements(String).
import java.util.*;
public class GFG {
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
			al.add(sc.next());
        }
		System.out.println("Initial List:" + al);
		al.remove("for");
		System.out.println("Final List:" + al);
	}
}
##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object,use lastIndexOf() method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element and display the element from the list.Note:Size of the array.Read n elements(Integer).use lastIndexOf(30)
import java.util.*;
public class Demo {
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<Integer> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
			al.add(sc.nextInt());
        }
		System.out.println("Initial List:" + al);
		System.out.println(al.lastIndexOf(30));
	}
}
##
Write a Java program of swap two elements in a list. Swapping 1st(index 0) element with the 3rd(index 2) element.
import java.util.*;
public class swap {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        List<String> c1= new ArrayList<String>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            c1.add(sc.next());
        }
        
        System.out.println("Array list before Swap:");
        for(String a: c1)
        {
            System.out.println(a);
        }
        
        Collections.swap(c1, 0, 2);
        System.out.println("Array list after swap:");
        for(String b: c1)
        {
            System.out.println(b);
        }
    }
}
##
Write a program to store a group of employee names into a HashSet, retrieve the elements one by one using an Iterator.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        Set<String> elements=new HashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        Iterator i = elements.iterator();
        while (i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a java program to read n elements and display the n elements, after remove one elements from the hashset("Ravi") and then display the elements.Note:remove object is "Ravi"
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        Set<String> names=new HashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            names.add(sc.next());
        }
        System.out.println("HashSet: "+names);
        names.remove("Ravi");
        System.out.println("HashSet after removing elements: "+names);
    }
}
##
To create the linkedhashset , display the elements from the linkedhashset and display the size of the linkedhashset.Note:Read Size of the arrayRead elements for the array.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String> names=new LinkedHashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            names.add(sc.next());
        }
        System.out.println("Linked HashSet :"+names);
        System.out.println("Linked HashSet size:"+names.size());
    }
}
##
Create a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display it.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String> names=new LinkedHashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            names.add(sc.next());
        }
        System.out.println("Values in HashSet object: "+names);
    }
}
##
Write a java program to create Linkedhashset , read the 5 elements and  display the Linkedhashset elements and display the particular elements are present or not using contains() method.Note:Ckeck 110 and 555 elements present or not using contains method.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String> elements=new LinkedHashSet<String>();
        for (int i=0;i<5;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("Hash set Elements: "+elements);
        System.out.println("Does the Set contains '110'? :- "+elements.contains("110"));
        System.out.println("Does the Set contains '555'? :- "+elements.contains("555"));
    }
}
##
Write a program to store a group of employee names into a LinkedHashSet, retrieve the elements one by one using an Iterator.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String> elements=new LinkedHashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        Iterator i = elements.iterator();
        while (i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a java program to check wheather HashSet contains an element or not. It returns true if the set contains element, otherwise returns false.Apply clear method.Note:Size of the arrayRead n elementsDisplay the elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        Set<String> elements=new HashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        System.out.println("HashSet Elements: "+elements);
        System.out.println("Is the set empty: "+elements.isEmpty());
        elements.clear();
        System.out.println("Is the set empty: "+elements.isEmpty());
    }
}
##
Write a program to store a group of employee names into a HashSet, retrieve the elements one by one using an Iterator.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        Set<String> elements=new HashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            elements.add(sc.next());
        }
        Iterator i = elements.iterator();
        while (i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Check whether LinkedHashSet is empty or not using java collection.Without elements and with elements list result display.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        LinkedHashSet<Integer> al = new LinkedHashSet<Integer>();
        System.out.println("Is LinkedHashSet Empty: "+al.isEmpty());
        al.add(1);
        al.add(88);
        al.add(9);
        al.add(17);
        System.out.println("Is LinkedHashSet Empty: "+al.isEmpty());
    }
}
##
Create a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display it.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        LinkedHashSet<String> names=new LinkedHashSet<String>();
        int n=sc.nextInt();
        for (int i=0;i<n;i++)
        {
            names.add(sc.next());
        }
        System.out.println("Values in HashSet object: "+names);
    }
}
##
Write a java program to create the array list , to read the three elements and display the elements.Use add function in collection arraylist concept and display the same.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        List<String> lang = new ArrayList<>();
        for(int i=0;i<3;i++)
        {
            lang.add(sc.next());
        }
        System.out.println(lang);
    }
}
##
Create an arraylist, add 3 elements college,school,medical and remove school elements from the arraylist and then display the arraylist.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        List<String> txt = new ArrayList<>();
        txt.add("college");
        txt.add("school");
        txt.add("medical");
        txt.remove(1);
        System.out.println(txt);
    }
}
##
Check whether arraylist is empty or not using java collection.If list is empty display true otherwise display false.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int i = sc.nextInt();
        List<Integer> arr1 = new ArrayList<>();
        System.out.println("Is ArrayList Empty: "+arr1.isEmpty());
        for(int j=0;j<i;j++)
        {
            arr1.add(sc.nextInt());
        }
        System.out.println("Is ArrayList Empty: "+arr1.isEmpty());
    }
}
##
Create an arraylist in that list add n color name like Red,Green,Blue,Yellow using contains method find Pink color is found or not.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<String> sonjai = new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            sonjai.add(sc.nextLine());
        }
        System.out.print("ArrayList contains Pink: "+sonjai.contains("Pink"));
    }
}
##
Write a Java Program to iterate ArrayList using for-loop, while-loop, and advance for-loop.(Integer value)Note:Size of the arraylistElements of arraylistPrint the elements using different iterate methods in collection.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        List<Integer> arr = new ArrayList<>();
        for(int i=0;i<a;i++)
        {
            arr.add(sc.nextInt());
        }
        int j =0;
        System.out.println("While Loop:");
        while(j<a)
        {
            System.out.println(arr.get(j));
            j++;
        }
        System.out.println("Advanced For Loop:");
        for(Integer i : arr)
        {
            System.out.println(i);
        }
        System.out.println("For Loop:");
        for(int i=0;i<a;i++)
        {
            System.out.println(arr.get(i));
        }
    }
}
##
Check whether arraylist is empty or not using java collection.Without elements and with elements list result display.
import java.util.*;
public class Main {
    public static void main(String[] args) 
    {
        ArrayList<Integer> al = new ArrayList<Integer>();
        System.out.println("Is ArrayList Empty: "+al.isEmpty());
        // al.add;
        al.add(88);
        al.add(9);
        al.add(17);
        System.out.println("Is ArrayList Empty: "+al.isEmpty());
    }
}
##
Develop a java class with a method saveEvenNumbers(int N) using LinkedList to store even numbers from 2 to N, where N is a integer which is passed as a parameter to the method saveEvenNumbers().The method should return the LinkedList (A1) created. In the same class create a method printEvenNumbers()which iterates through the LinkedList A1 in step 1, and It should multiply each number with 2 and display it in format 4,8,12….2*N. and add these numbers in a new LinkedList (A2). The new LinkedList (A2) created needs to be returned. Create a method printEvenNumber(int N) parameter is a number N. This method should search the LinkedList (A1) for the existence of the number ‘N’ passed. If exists it should return the Number else return zero.Hint: Use instance variable for storing the LinkedList A1 and A2. NOTE: You can test the methods using a main method.
import java.util.*;
public class Main {
	private LinkedList<Integer> list = new LinkedList<Integer>();
	
	public LinkedList<Integer> saveEvenNumbers(int N) {
		list = new LinkedList<Integer>();
		
		for (int i = 2; i <= N; i++) {
			if (i % 2 == 0) list.add(i);
		}
		
		return list;
	}
	
	public LinkedList<Integer> printEvenNumbers() {
		LinkedList<Integer> newList = new LinkedList<Integer>();
		
		for (int item : list) {
			newList.add(item * 2);
			System.out.println(item * 2);
		}
		
		return newList;
	}

	public static void main(String[] args) {
		Main asg = new Main();
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		asg.saveEvenNumbers(N);
		asg.printEvenNumbers();
		

	}

}
##
Applying lastIndexOf() method returns the index of the element given in the linked list starting from first position. Otherwise it will return -1, if that element is not present in the linked list. .Create a linkedlist, read size of the list , read the elements for the linkedlist and display the whole list of the elements and apply the lastIndexOf("Engineering") and lastIndexOf("Programming").Apply this two different methods in linkedlist program. 
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    System.out.println(cars);
    
    System.out.println("LastIndex for Engineering :" + cars.lastIndexOf("Engineering"));
    System.out.println("LastIndex for Programming :" + cars.lastIndexOf("Programming"));
  }
}
##
Write a Java program to create a reverse order view of the elements contained in a given tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts = new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        System.out.println("Original tree set:"+ts);
        Iterator i=ts.descendingIterator();
        System.out.println("Elements in Reverse Order:");
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a Java program to compare two tree sets.(Use Integer).Note:Read size of the integer.Read elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeSet<Integer> ts1 = new TreeSet<Integer>();
        for(int i=0;i<n1;i++)
        {
            ts1.add(sc.nextInt());
        }
        int n2=sc.nextInt();
        TreeSet<Integer> ts2 = new TreeSet<Integer>();
        for(int i=0;i<n2;i++)
        {
            ts2.add(sc.nextInt());
        }
        System.out.println("Free Tree set: "+ts1);
        System.out.println("Second Tree set: "+ts2);
        TreeSet<Integer> result=new TreeSet<Integer>();
        for (Integer i: ts1)
        {
            System.out.println(ts2.contains(i) ? "Yes" : "No");
        }
    }
}
##
Write a Java program to print odd number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for (int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("Original tree set: "+ts);
        for (int i: ts)
        {
            if(i%2!=0)
                System.out.println(i);
        }
    }
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: tailset start from 10 (use integer)
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        TreeSet<Integer> tail_set=new TreeSet<Integer>();
        tail_set = (TreeSet<Integer>)ts.tailSet(10);
        Iterator i = tail_set.iterator();
        System.out.println("The resultant values from the tail: ");
        while (i.hasNext())
        {
            System.out.println(i.next() + " ");
        }
    }
}
##
Create the java program to demonstrate floor method for Integer value.Note: floor value for integer 25.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("TreeSet: "+ts);
        System.out.println("Floor value for 25: "+ts.floor(25));
    }
}
##
Write a Java program to iterate through all elements in a tree set. Note:Read size of n numbersRead n numbersuse for loop for iterate.
import java.util.*;
public class Exercise2 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<Integer> tree_set = new TreeSet<Integer>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.nextInt());
  }
 
  for (Integer element : tree_set) {
    System.out.println(element);
    }
 }
}
##
Write a Java program to get an element in a tree set which is strictly less than the given element.Note:Size of the elementRead elementDisplay lower than 69.Display lower than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly less than 69 : "+tree_num.lower(69));
   System.out.println("Strictly less than 12 : "+tree_num.lower(12));
   }    
}
##
Write a Java program to retrieve and remove the last element of a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the last element: "+tree_num.pollLast());
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
        Scanner sc=new Scanner(System.in);
                TreeSet<String> tree_set = new TreeSet<String>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> tail_set = new TreeSet<String>();
                tail_set = (TreeSet<String>)tree_set.tailSet("i");
                Iterator iterate;
                iterate = tail_set.iterator();
                System.out.println("The resultant values from the tail: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the 15(Integer) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<Integer> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.nextInt());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet(15));
        }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class color {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
  TreeSet<String> tree_set = new TreeSet<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);
 }
}
##
Write a Java program to get an element in a tree set which is strictly greater than the given element.Note:Size of the elementRead elementDisplay higher than 69.Display higher than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly greater than 69 : "+tree_num.higher(69));
   System.out.println("Strictly greater than 12 : "+tree_num.higher(12));
   }    
}
##
Write a Java program to remove a given element from a tree set.Note:Read Size of the setRead Elements.Remove 70 elements from set
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes 70 from the list: "+tree_num.remove(70));
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}
##
Write a java program to display the heterogenous object with help of stringbuffer concepts.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
                Set<StringBuffer> ts = new TreeSet<>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                ts.add(new StringBuffer(sc.next()));
                }
                System.out.println(ts);
        }
}
##
Create the java program to demonstrate descendingSet() method for String value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<String> treeadd = new TreeSet<String>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.next());
                }
            NavigableSet<String> treereverse = treeadd.descendingSet();
            Iterator<String> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to get the first and last elements in a tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
  public class Exercise5 {
  public static void main(String[] args) {
  
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<String> tree_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);

    Object first_element = tree_set.first();
    System.out.println("First Element is: "+first_element);
 
    
    Object last_element = tree_set.last();
    System.out.println("Last Element is: "+last_element);
 }
}
##
Write a Java program to get the number of elements in a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise6 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  
  TreeSet<String> t_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  t_set.add(sc.next());
  }
     
  System.out.println("Original tree set: " + t_set);
    System.out.println("Size of the tree set: " + t_set.size());     
     }
 }
##
Write a Java program to print even number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==0)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the resultant values(String) within the subset (range e to i ) should display in result. Note:use subset method.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
                TreeSet<String> tree_set = new TreeSet<String>();
                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> sub_set = new TreeSet<String>();
                sub_set = (TreeSet<String>)tree_set.subSet("e","i");
                Iterator iterate;
                iterate = sub_set.iterator();
                System.out.println("The resultant values within the sub set: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for Integer value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<Integer> treeadd = new TreeSet<Integer>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.nextInt());
                }
            NavigableSet<Integer> treereverse = treeadd.descendingSet();
            Iterator<Integer> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to add all the elements of a specified tree set to another tree set.Note:Read size.Read elements
import java.util.*;
public class Exercise3 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
   int size2=sc.nextInt();
  TreeSet<Integer> tree_set1 = new TreeSet<Integer>();
    for(int i=0;i<size1;i++){
    tree_set1.add(sc.nextInt());
    }
  
  
  System.out.println("Tree set1: "+tree_set1);
  TreeSet<Integer> tree_set2 = new TreeSet<Integer>();
  for(int i=0;i<size2;i++){
    tree_set2.add(sc.nextInt());
    }
  
  System.out.println("Tree set2: "+tree_set2);
  
   tree_set1.addAll(tree_set2);
   System.out.println("Tree set1: "+tree_set1);
 }
}
##
Write a Java program to compare two tree sets.(Use string).Note:Read size of the string.Read elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise8 {
  public static void main(String[] args) {

  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
  TreeSet<String> t_set1 = new TreeSet<String>();
  for(int i=0;i<size1;i++)
  {
  t_set1.add(sc.next());
  }
          System.out.println("Free Tree set: "+t_set1);

          
           int size2=sc.nextInt();
            TreeSet<String> t_set2 = new TreeSet<String>();
            for(int i=0;i<size2;i++)
            {
            t_set2.add(sc.next());
            }
          System.out.println("Second Tree set: "+t_set2);
          
          TreeSet<String> result_set = new TreeSet<String>();
         for (String element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}
##
Write a Java program to retrieve and remove the first element of a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise14 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
    tree_num.add(sc.nextInt());
   }
  
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the first(lowest) element: "+tree_num.pollFirst());
   System.out.println("Tree set after removing first element: "+tree_num);
   }    
}
##
Write a java program to display the resultant values within the subset (range 5 to 25 ) should display in result. Note:use subset method.
import java.util.*;


public class Main {
        public static void main(String[] args)
        {

                
                TreeSet<Integer> tree_set = new TreeSet<Integer>();

                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.nextInt());
                }
                
                TreeSet<Integer> sub_set = new TreeSet<Integer>();

                
                sub_set = (TreeSet<Integer>)tree_set.subSet(6, 30);

        
                Iterator iterate;
                iterate = sub_set.iterator();

        
                System.out.println("The resultant values within the sub set: ");

                
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the "h"(String) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<String> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.next());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet("h"));
        }
}
##
Write a Java program to create a reverse order view of the elements contained in a given tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
import java.util.Iterator;
  public class Exercise4 {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    int size=sc.nextInt();
     TreeSet<String> t_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  t_set.add(sc.next());
  }
 
          
    
   System.out.println("Original tree set:" + t_set);  
     Iterator it = t_set.descendingIterator();
     
     System.out.println("Elements in Reverse Order:");
     while (it.hasNext()) {
        System.out.println(it.next());
     }
  }
}
##
Write a Java program to get an element in a tree set which is strictly greater than the given element.Note:Size of the elementRead elementDisplay higher than 69.Display higher than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly greater than 69 : "+tree_num.higher(69));
   System.out.println("Strictly greater than 12 : "+tree_num.higher(12));
   }    
}
##
Write a Java program to retrieve and remove the last element of a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the last element: "+tree_num.pollLast());
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}
##
Write a java program to display the heterogenous object with help of stringbuffer concepts.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
                Set<StringBuffer> ts = new TreeSet<>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                ts.add(new StringBuffer(sc.next()));
                }
                System.out.println(ts);
        }
}
##
Create the java program to demonstrate floor method for Integer value.Note: floor value for integer 25.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
        TreeSet<Integer> treeadd = new TreeSet<Integer>();
                        
                        Scanner sc=new Scanner(System.in);
                        int size=sc.nextInt();
                        for(int i=0;i<size;i++)
                        {
            treeadd.add(sc.nextInt());
                        }
                        System.out.println("TreeSet: " + treeadd);
                        int value = treeadd.floor(25);
                        System.out.println("Floor value for 25: "
                                                        + value);
        
                
        }
}
##
Write a Java program to add all the elements of a specified tree set to another tree set.Note:Read size.Read elements
import java.util.*;
public class Exercise3 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
   int size2=sc.nextInt();
  TreeSet<Integer> tree_set1 = new TreeSet<Integer>();
    for(int i=0;i<size1;i++){
    tree_set1.add(sc.nextInt());
    }
  
  
  System.out.println("Tree set1: "+tree_set1);
  TreeSet<Integer> tree_set2 = new TreeSet<Integer>();
  for(int i=0;i<size2;i++){
    tree_set2.add(sc.nextInt());
    }
  
  System.out.println("Tree set2: "+tree_set2);
  
   tree_set1.addAll(tree_set2);
   System.out.println("Tree set1: "+tree_set1);
 }
}
##
Write a Java program to get an element in a tree set which is strictly less than the given element.Note:Size of the elementRead elementDisplay lower than 69.Display lower than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly less than 69 : "+tree_num.lower(69));
   System.out.println("Strictly less than 12 : "+tree_num.lower(12));
   }    
}
##
Write a Java program to print odd number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==1)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the resultant values within the subset (range 5 to 25 ) should display in result. Note:use subset method.
import java.util.*;


public class Main {
        public static void main(String[] args)
        {

                
                TreeSet<Integer> tree_set = new TreeSet<Integer>();

                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.nextInt());
                }
                
                TreeSet<Integer> sub_set = new TreeSet<Integer>();

                
                sub_set = (TreeSet<Integer>)tree_set.subSet(6, 30);

        
                Iterator iterate;
                iterate = sub_set.iterator();

        
                System.out.println("The resultant values within the sub set: ");

                
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for String value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<String> treeadd = new TreeSet<String>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.next());
                }
            NavigableSet<String> treereverse = treeadd.descendingSet();
            Iterator<String> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to get the first and last elements in a tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
  public class Exercise5 {
  public static void main(String[] args) {
  
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<String> tree_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);

    Object first_element = tree_set.first();
    System.out.println("First Element is: "+first_element);
 
    
    Object last_element = tree_set.last();
    System.out.println("Last Element is: "+last_element);
 }
}
##
Write a Java program to get the number of elements in a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise6 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  
  TreeSet<String> t_set = new TreeSet<String>();
  for(int i=0;i<size;i++)
  {
  t_set.add(sc.next());
  }
     
  System.out.println("Original tree set: " + t_set);
    System.out.println("Size of the tree set: " + t_set.size());     
     }
 }
##
Write a Java program to print even number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==0)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
        Scanner sc=new Scanner(System.in);
                TreeSet<String> tree_set = new TreeSet<String>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> tail_set = new TreeSet<String>();
                tail_set = (TreeSet<String>)tree_set.tailSet("i");
                Iterator iterate;
                iterate = tail_set.iterator();
                System.out.println("The resultant values from the tail: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the 15(Integer) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<Integer> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.nextInt());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet(15));
        }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class color {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
  TreeSet<String> tree_set = new TreeSet<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);
 }
}
##
Write a Java program to compare two tree sets.(Use Integer).Note:Read size of the integer.Read elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise8 {
  public static void main(String[] args) {

  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
  TreeSet<Integer> t_set1 = new TreeSet<Integer>();
  for(int i=0;i<size1;i++)
  {
  t_set1.add(sc.nextInt());
  }
          System.out.println("Free Tree set: "+t_set1);

          
           int size2=sc.nextInt();
            TreeSet<Integer> t_set2 = new TreeSet<Integer>();
            for(int i=0;i<size2;i++)
            {
            t_set2.add(sc.nextInt());
            }
          System.out.println("Second Tree set: "+t_set2);
          
          TreeSet<Integer> result_set = new TreeSet<Integer>();
         for (Integer element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}
##
Write a Java program to retrieve and remove the first element of a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise14 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
    tree_num.add(sc.nextInt());
   }
  
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the first(lowest) element: "+tree_num.pollFirst());
   System.out.println("Tree set after removing first element: "+tree_num);
   }    
}
##
Write a java program to display the resultant values(String) within the subset (range e to i ) should display in result. Note:use subset method.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
                TreeSet<String> tree_set = new TreeSet<String>();
                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> sub_set = new TreeSet<String>();
                sub_set = (TreeSet<String>)tree_set.subSet("e","i");
                Iterator iterate;
                iterate = sub_set.iterator();
                System.out.println("The resultant values within the sub set: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for Integer value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<Integer> treeadd = new TreeSet<Integer>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.nextInt());
                }
            NavigableSet<Integer> treereverse = treeadd.descendingSet();
            Iterator<Integer> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to iterate through all elements in a tree set. Note:Read size of n numbersRead n numbersuse for loop for iterate.
import java.util.*;
public class Exercise2 {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  TreeSet<Integer> tree_set = new TreeSet<Integer>();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.nextInt());
  }
 
  for (Integer element : tree_set) {
    System.out.println(element);
    }
 }
}
##
Write a Java program to compare two tree sets.(Use string).Note:Read size of the string.Read elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise8 {
  public static void main(String[] args) {

  Scanner sc=new Scanner(System.in);
  int size1=sc.nextInt();
  TreeSet<String> t_set1 = new TreeSet<String>();
  for(int i=0;i<size1;i++)
  {
  t_set1.add(sc.next());
  }
          System.out.println("Free Tree set: "+t_set1);

          
           int size2=sc.nextInt();
            TreeSet<String> t_set2 = new TreeSet<String>();
            for(int i=0;i<size2;i++)
            {
            t_set2.add(sc.next());
            }
          System.out.println("Second Tree set: "+t_set2);
          
          TreeSet<String> result_set = new TreeSet<String>();
         for (String element : t_set1){
             System.out.println(t_set2.contains(element) ? "Yes" : "No");
          }      
     }
}
##
Write a Java program to print even number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;

  public class Exercise15 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   System.out.println("Original tree set: "+tree_num);
for(Integer j:tree_num)
{
   if(j%2==0)
{
 System.out.println(j);
}
}
}    
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
        Scanner sc=new Scanner(System.in);
                TreeSet<String> tree_set = new TreeSet<String>();
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> tail_set = new TreeSet<String>();
                tail_set = (TreeSet<String>)tree_set.tailSet("i");
                Iterator iterate;
                iterate = tail_set.iterator();
                System.out.println("The resultant values from the tail: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Write a java program tailset start from the "h"(String) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;

public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                SortedSet<String> s = new TreeSet<>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                s.add(sc.next());
                }
                System.out.print("Elements greater than or equal to in set are : "
                                                + s.tailSet("h"));
        }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class color {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
  TreeSet<String> tree_set = new TreeSet<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  tree_set.add(sc.next());
  }
  System.out.println("Tree set: ");
  System.out.println(tree_set);
 }
}
##
Write a Java program to get an element in a tree set which is strictly less than the given element.Note:Size of the elementRead elementDisplay lower than 69.Display lower than 12
import java.util.*;
import java.util.Iterator;

  public class Exercise13 {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
  
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
   tree_num.add(sc.nextInt());
   }
   
   
   System.out.println("Strictly less than 69 : "+tree_num.lower(69));
   System.out.println("Strictly less than 12 : "+tree_num.lower(12));
   }    
}
##
Write a Java program to retrieve and remove the first element of a tree set.
import java.util.*;
import java.util.Iterator;

  public class Exercise14 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
    tree_num.add(sc.nextInt());
   }
  
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the first(lowest) element: "+tree_num.pollFirst());
   System.out.println("Tree set after removing first element: "+tree_num);
   }    
}
##
Write a java program to display the resultant values(String) within the subset (range e to i ) should display in result. Note:use subset method.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
                TreeSet<String> tree_set = new TreeSet<String>();
                Scanner sc=new Scanner(System.in);
                int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                tree_set.add(sc.next());
                }
                TreeSet<String> sub_set = new TreeSet<String>();
                sub_set = (TreeSet<String>)tree_set.subSet("e","i");
                Iterator iterate;
                iterate = sub_set.iterator();
                System.out.println("The resultant values within the sub set: ");
                while (iterate.hasNext()) {
                        System.out.println(iterate.next() + " ");
                }
        }
}
##
Create the java program to demonstrate descendingSet() method for Integer value.
import java.util.*;
public class Main {
        public static void main(String[] args)
        {
            Scanner sc=new Scanner(System.in);
            
                TreeSet<Integer> treeadd = new TreeSet<Integer>();
        int size=sc.nextInt();
                for(int i=0;i<size;i++)
                {
                treeadd.add(sc.nextInt());
                }
            NavigableSet<Integer> treereverse = treeadd.descendingSet();
            Iterator<Integer> iterator = treereverse.iterator();
            System.out.println("Values using DescendingSet:");
            while (iterator.hasNext()) {
                System.out.println("Value : " + iterator.next());
            }
        }
}
##
Write a Java program to create a reverse order view of the elements contained in a given tree set.Note:Read size of the elements.Read elements in string.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts = new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        System.out.println("Original tree set:"+ts);
        Iterator i=ts.descendingIterator();
        System.out.println("Elements in Reverse Order:");
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Write a Java program to compare two tree sets.(Use string).Note:Read size of the string.Read elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeSet<String> ts1 = new TreeSet<String>();
        for(int i=0;i<n1;i++)
        {
            ts1.add(sc.next());
        }
        int n2=sc.nextInt();
        TreeSet<String> ts2 = new TreeSet<String>();
        for(int i=0;i<n2;i++)
        {
            ts2.add(sc.next());
        }
        System.out.println("Free Tree set: "+ts1);
        System.out.println("Second Tree set: "+ts2);
        TreeSet<String> result=new TreeSet<String>();
        for (String i: ts1)
        {
            System.out.println(ts2.contains(i) ? "Yes" : "No");
        }
    }
}
##
Write a Java program to print odd number  from a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for (int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("Original tree set: "+ts);
        for (int i: ts)
        {
            if(i%2!=0)
                System.out.println(i);
        }
    }
}
##
Write a java program to display the output use java.util.TreeSet.tailSet() method is used to set a point of start for atree set, to return all the elements greater than the element passed asparameter mentioned to the method in a sorted manner including theelement.Note: Use string tailset start from "i".
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts=new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        TreeSet<String> tail_set = new TreeSet<String>();
        tail_set = (TreeSet<String>)ts.tailSet("i");
        Iterator i = tail_set.iterator();
        System.out.println("The resultant values from the tail: ");
        while (i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
##
Create the java program to demonstrate floor method for Integer value.Note: floor value for integer 25.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<Integer> ts=new TreeSet<Integer>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.nextInt());
        }
        System.out.println("TreeSet: "+ts);
        System.out.println("Floor value for 25: "+ts.floor(25));
    }
}
##
Write a Java program to create a new tree set, add n number of  colors (string) and print out the tree set.Note:Read size of set.Read n number of colors.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeSet<String> ts = new TreeSet<String>();
        for(int i=0;i<n;i++)
        {
            ts.add(sc.next());
        }
        System.out.println("Tree set:\n"+ts);
    }
}
##
Write a Java program to compare two tree sets.(Use Integer).Note:Read size of the integer.Read elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeSet<Integer> ts1 = new TreeSet<Integer>();
        for(int i=0;i<n1;i++)
        {
            ts1.add(sc.nextInt());
        }
        int n2=sc.nextInt();
        TreeSet<Integer> ts2 = new TreeSet<Integer>();
        for(int i=0;i<n2;i++)
        {
            ts2.add(sc.nextInt());
        }
        System.out.println("Free Tree set: "+ts1);
        System.out.println("Second Tree set: "+ts2);
        TreeSet<Integer> result=new TreeSet<Integer>();
        for (Integer i: ts1)
        {
            System.out.println(ts2.contains(i) ? "Yes" : "No");
        }
    }
}
##
Write a Java program to retrieve and remove the last element of a tree set.Note:Read Size of the setRead Elements.
import java.util.*;
import java.util.Iterator;
public class Exercise15 {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        TreeSet <Integer>tree_num = new TreeSet<Integer>();
        TreeSet <Integer>treeheadset = new TreeSet<Integer>();
         
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_num.add(sc.nextInt());
        }
        System.out.println("Original tree set: "+tree_num);
        System.out.println("Removes the last element: "+tree_num.pollLast());
        System.out.println("Tree set after removing last element: "+tree_num);
    }    
}
##
Write a java program to display the heterogenous object with help of stringbuffer concepts.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        Set<StringBuffer> ts = new TreeSet<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            ts.add(new StringBuffer(sc.next()));
        }
        System.out.println(ts);
    }
}
##
Write a java program tailset start from the 15(Integer) , use the tailSet() method of SortedSet interface in Java is used to return a view of the portion of this set whose elements are greater than or equal to the parameter fromElement.
import java.util.*;
import java.util.TreeSet;
public class Main {
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        SortedSet<Integer> s = new TreeSet<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            s.add(sc.nextInt());
        }
        System.out.print("Elements greater than or equal to in set are : " + s.tailSet(15));
    }
}
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,String> hm = new HashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
        System.out.println("Does HashMap contains 104 as key: "+hm.containsKey(104));
    }
}
##
Create a java program to retrieve the key and value from hashtable for all input value.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Map<Integer,String> hm = new Hashtable<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
    }
}
##
Create a java program to create and add objects and check whether a particular key/value exist  in hashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,Double> hm = new HashMap<Integer,Double>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.nextDouble());
        }
        Iterator<Integer> i = hm.keySet().iterator();
        while(i.hasNext())
        {
            int key=i.next();
            System.out.println(key+" "+hm.get(key));
        }
        System.out.println(hm.containsKey(3));
        System.out.println(hm.containsValue(3.3));
    }
}
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in hashmap interface.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,String> hm = new HashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        hm.replaceAll( (key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: "+hm);
    }
}
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        HashMap<Integer,String> hm = new HashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Map<Integer,String> syncmap = Collections.synchronizedMap(hm);
        Iterator<Integer> i=syncmap.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println(key+" "+syncmap.get(key));
        }
    }
}
##
Create a java program to retrieve the key and value from hashmap and display the size of the hashmap and clear the hashmap using clear method concepts.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in hashmap interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap for all input value.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to retrieve the key and value from hashtable for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap for all input value.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in hashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in hashmap interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add objects  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to retrieve the key and value from hashtable for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in hashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to retrieve the value from hashmap .Note:retrieve the value from hashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap and display the size of the hashmap and clear the hashmap using clear method concepts.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> vehicles=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from hashmap .Note:iterate over hashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to display true message for containsKey of 104 otherwise return false and to retrieve the key and value from hashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,Integer> vehicles=new HashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from hashmap for all input value.Note:iterate over hashmap using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in hashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in linkedhashmap interface then display the map elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        LinkedHashMap<Integer,String> hm = new LinkedHashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i = hm.keySet().iterator();
        while(i.hasNext())
        {
            int key=i.next();
            System.out.println(key+" "+hm.get(key));
        }
    }
}
##
Create a java program to retrieve the key and value from linkedhashmap and display the size of the linkekhashmap and clear the linkedhashmap using clear method concepts.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Map<Integer,String> hm = new LinkedHashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
        System.out.println("Size of Map: "+hm.size());
        hm.clear();
        System.out.println("Size of Map: "+hm.size());
    }
}
##
Create a java program to create and add mappings to linkedhashmap and  linkedhashmap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    { 
        Map<String, Integer> map = new LinkedHashMap<String, Integer>();
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            String b=sc.next();
            Integer a=sc.nextInt();
            map.put(b,a);  
        } 
        System.out.println("HashMap: " + map);
        
        int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
        System.out.println("Price of Shirt: " + returnedValue);
        
        System.out.println("Updated HashMap: " + map);
    }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Map<Integer,String> hm = new LinkedHashMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            hm.put(sc.nextInt(),sc.next());
        }
        Iterator<Integer> i=hm.keySet().iterator();
        while(i.hasNext())
        {
            int key = i.next();
            System.out.println("key: " + key + " value: "+hm.get(key));
        }
    }
}
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in linkedhashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
    public static void main(String args[]){ 
        Map<Integer,String> map=new LinkedHashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for (int i=0;i<size;i++)
        {
            map.put(sc.nextInt(),sc.next());  
        } 
        Iterator<Integer> i = map.keySet().iterator();
        while (i.hasNext())
        {
            int key = i.next();
            System.out.println(key+" "+map.get(key));
        }
        map.putIfAbsent(4, "JavaScript");
        map.putIfAbsent(3, "welcome");
        System.out.println("Updated Languages: " + map);
    }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in linkedhashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Double> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from linkedhashmap .Note:iterate over  linkedhashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashMap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Integer> vehicles=new LinkedHashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to create and add objects  in Linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and  linkedHashMap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("LinkedHashMap: " + map);

    int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated LinkedHashMap: " + map);
 
 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from linkedhashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from linkedhashmap .Note:retrieve the value from linkedhashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from linkedhashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and apply mapping for the key is present in linkedHashMap or not present in linkedHashMap for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap and display the size of the linkekhashmap and clear the linkedhashmap using clear method concepts.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and  linkedHashMap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("LinkedHashMap: " + map);

    int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated LinkedHashMap: " + map);
 
 }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from linkedhashmap .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

Integer key = 100; Object value = map.remove(key); System.out.println("Following value is removed from Map: " + value);





 }  
}  
##
Create a java program to create and add values for key and value and Iterate over all input, replace all values to square of keys  in hashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Integer> vehicles=new LinkedHashMap<Integer,Integer>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Integer b=sc.nextInt();
  vehicles.put(a,b);  
  } 
 
   vehicles.replaceAll((key, value) -> key * key);;
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in hashmap interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, all values convert to uppercase  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
  vehicles.replaceAll((key, value) -> value.toUpperCase());
        System.out.println("Updated HashMap: " + vehicles);
     
 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in linkedhashmap interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,Double> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program to create and add objects  in Linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and apply mapping for the key is present in linkedHashMap or not present in linkedHashMap for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and try to create duplicate key  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
     
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in linkedhashmap interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to retrieve the value from linkedhashmap .Note:retrieve the value from linkedhashmap.Consider key value 100 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 100; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add mappings to linkedhashmap and  linkedhashmap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("HashMap: " + map);

    int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated HashMap: " + map);
 
 }  
}  
##
Create a java program to retrieve the key and value from linkedhashmap for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add mappings to hashmap and apply  putifabsent method() for key already not present or present in linkedhashmap interface.Note:map.putIfAbsent(4, "JavaScript");map.putIfAbsent(3, "welcome");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    map.putIfAbsent(4, "JavaScript");


    map.putIfAbsent(3, "welcome");
    System.out.println("Updated Languages: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from linkedhashmap .Note:iterate over  linkedhashmap using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashMap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  HashMap<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 LinkedHashMap<Integer,String> numbers = new LinkedHashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from linkedhashmap .import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects(vehicles name) and Iterate over all vehicles, using the keySet method,searchkey is  3 then clear all values , display the size  in linkedhashmap interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> vehicles=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  vehicles.put(a,b);  
  } 
 
   System.out.println("Total vehicles: " + vehicles.size());
      
        for (Integer key : vehicles.keySet())
            System.out.println(key + " - " + vehicles.get(key));
        System.out.println();
 
        Integer searchKey = 3;
        if (vehicles.containsKey(searchKey))
            System.out.println("Found total " + vehicles.get(searchKey) + " " + searchKey + " cars!\n");
 
       
        vehicles.clear();
 
     
        System.out.println("After clear operation, size: " + vehicles.size());
 
     
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByKey() in descending order)Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
    public static void main(String args[])
    {  
        Map<Integer,String> map=new HashMap<Integer,String>();          
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            map.put(sc.nextInt(),sc.next());  
        }   
        
        map.entrySet()  
        .stream()  
        .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())) 
        .forEach(System.out::println);  
    }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from map .Note:iterate over map using any loop.
import java.util.*;  
public class Mapp{  
    public static void main(String args[])
    { 
        Map<Integer,String> map=new HashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            Integer a=sc.nextInt();
            String b=sc.next();
            map.put(a,b);  
        } 
        
        Iterator<Integer> i = map.keySet().iterator(); 
        while(i.hasNext())
        {
            Integer key = i.next(); 
            System.out.println("key: " + key + " value: " + map.get(key));
        }
        System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));
    }  
}  
##
Create a java program to create and add mappings to hashtable and  Hashtable merge() to Insert New Entry use map interface concepts.Note:new entry :::::::::::::::Shirt price is 70.
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    { 
        Hashtable<String, Integer> map = new Hashtable<String, Integer>();
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            map.put(sc.next(),sc.nextInt());  
        } 
        System.out.println("Map: " + map);
        
        int returnedValue = map.merge("Shirt", 70, (oldValue, newValue) -> oldValue + newValue);
        System.out.println("Price of Shirt: " + returnedValue);
        
        System.out.println("Updated Map: " + map);
    }  
}  
##
Create a java program to remove the key of 100 and to display the key and value from map .
import java.util.*;  
public class Mapp{  
    public static void main(String args[])
    { 
        Map<Integer,String> map=new HashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            Integer a=sc.nextInt();
            String b=sc.next();
            map.put(a,b);  
        } 
        
        Iterator<Integer> i = map.keySet().iterator(); 
        while(i.hasNext())
        {
            Integer key = i.next(); 
            System.out.println("key: " + key + " value: " + map.get(key));
        }
        System.out.println("Following value is removed from Map: " + map.remove(100));
    }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    {
    
        Map<Integer,String> map=new HashMap<>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            Integer a=sc.nextInt();
            String b=sc.next();
            map.put(a,b);  
        } 
        for(Map.Entry m:map.entrySet())
        {
            System.out.println(m.getKey()+" "+m.getValue());  
        }  
        map.replace(100,"welcome to java");
        System.out.println("HashMap After Replace :");
        for(Map.Entry m:map.entrySet())
        {
            System.out.println(m.getKey()+" "+m.getValue());  
        } 
    }  
}  
##
Create a java program to display the name with key  using map interface like key , value pair.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to retrieve the key and value from map and display the size of the map and clear the map using clear method concepts.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add mappings to map and apply mapping for the key is present in Map or not present in Map for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue()) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the key and value from map for all input value.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> numbers = new Hashtable<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts with map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() in descending order )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the value from map .Note:retrieve the value from hashmap.Consider key value 120 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 120; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add mappings to map and  Map merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 90.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<String, Integer> map = new HashMap<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("HashMap: " + map);

    int returnedValue = map.merge("Shirt", 90, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated HashMap: " + map);
 
 }  
}  
##
Create a java program to retrieve the key and value from hashtable with map interface for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByKey().)Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByKey())  

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to insert and display  the key and values  using map interface.Note:Read size of the map.Read elements for map.Map numbers display.Access keys of the map.Access values of the map.Access entries of the map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> numbers=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
 
 System.out.println("Map: " + numbers);

        
        System.out.println("Keys: " + numbers.keySet());

        
        System.out.println("Values: " + numbers.values());

        
        System.out.println("Entries: " + numbers.entrySet());

       
 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the Map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 HashMap<Integer,String> numbers = new HashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from map .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() in descending order )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the key and value from map for all input value.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the Map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 HashMap<Integer,String> numbers = new HashMap<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to display the containsvalue of 104 and to retrieve the key and value from map .
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsValue("collection"));



 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "welcome to java" in map interface and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to retrieve the value from map .Note:retrieve the value from hashmap.Consider key value 120 retrieve the data.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }
  Integer key = 120; String value = map.get(key);


  System.out.println("value: "+ value);


 }  
}  
##
Create a java program to create and add mappings to map and apply mapping for the key is present in Map or not present in Map for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
    String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);


        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);

    System.out.println("Updated Elements: " + map);
     
 }  
}  
##
Create a java program to retrieve the key and value from hashtable and display the size of the hashtable and clear the hashtable using clear method concepts with map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not map and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}  
##
Create a java program to display the name with key  using map interface like key , value pair.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 }  
}  
##
Create a java program to display the containskey of 104 and to retrieve the key and value from map .Note:iterate over map using any loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Does HashMap contains 104 as key: " + map.containsKey(104));



 }  
}  
##
Create a java program to create and add objects and check whether a particular key/value exist  in map interface.Note:Integer & DoubleChecking whether key '3' exist in mapChecking whether value '3.3' exist in map
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,Double> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  Double b=sc.nextDouble();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
         
        System.out.println(map.containsKey(3));     
         
       
        System.out.println(map.containsValue(3.3)); 
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByKey() in descending order)Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to insert and display  the key and values  using map interface.Note:Read size of the map.Read elements for map.Map numbers display.Access keys of the map.Access values of the map.Access entries of the map.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> numbers=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
 
 System.out.println("Map: " + numbers);

        
        System.out.println("Keys: " + numbers.keySet());

        
        System.out.println("Values: " + numbers.values());

        
        System.out.println("Entries: " + numbers.entrySet());

       
 }  
}  
##
Create a java program to create and add objects and inserts all the key/value mappings from the specified Map to the LinkedHashmap.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new LinkedHashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> numbers = new Hashtable<>();
  int size1=sc.nextInt();
  for(int i=0;i<size1;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  numbers.put(a,b);  
  } 
  numbers.putAll(map);
    System.out.println("Numbers: " + numbers);
  
 
     
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in map interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program to create and add objects and check whether map is empty or not in hashtable interface.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
  boolean isEmpty = map.isEmpty(); System.out.println("Is HashMap is empty: " + isEmpty);
 }  
}  
##
Create a java program for map interface concept and follow the below conditions and display the value and string.(use comparingByValue() )Note:read sizeread elementReturns a Set view of the mappings contained in this map.Returns a sequential Stream with this collection as its source.Sorted according to the provided Comparator.Performs an action for each element of this stream .
import java.util.*;  
public class MapExample3{  
 public static void main(String args[]){  
Map<Integer,String> map=new HashMap<Integer,String>();          
      Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  }   

      map.entrySet()  
       
      .stream()  
   
      .sorted(Map.Entry.comparingByValue()) 

      .forEach(System.out::println);  
 }  
}  
##
Create a java program to retrieve the key and value from map and display the size of the map and clear the map using clear method concepts.Note:iterate over map using while loop.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<Integer,String>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }

System.out.println("Size of Map: " + map.size()); map.clear(); 
System.out.println("Size of Map: " + map.size()); 

 }  
}  
##
Create a java program to create and add mappings to hashtable and  Hashtable merge() to Insert New Entry use map interface concepts.Note:new entry :::::::::::::::Shirt price is 70.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<String, Integer> map = new Hashtable<>();
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  String b=sc.next();
  Integer a=sc.nextInt();

  map.put(b,a);  
  } 
    System.out.println("Map: " + map);

    int returnedValue = map.merge("Shirt", 70, (oldValue, newValue) -> oldValue + newValue);
    System.out.println("Price of Shirt: " + returnedValue);

  
    System.out.println("Updated Map: " + map);
 
 }  
}  
##
Create a java program to retrieve the key and value from hashtable with map interface for all input value.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new Hashtable<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  
 Iterator<Integer> keySetIterator = map.keySet().iterator(); while(keySetIterator.hasNext()){ Integer key = keySetIterator.next(); System.out.println("key: " + key + " value: " + map.get(key)); }




 }  
}  
##
Create a java program to create and add objects and apply the synchronized map in map interface then display the map elements.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  Map<Integer,String> map=new HashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
  Map<Integer,String> syncMap = Collections.synchronizedMap(map);
  for(Map.Entry m:syncMap.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 
 }  
}  
##
Create a java program to create and add mappings to hashmap and apply mapping for the key is present in HashMap or not present in HashMap for getOrDefault method.Note:numbers.getOrDefault(1, "Not Found");numbers.getOrDefault(4, "Not Found");
import java.util.*;  
public class Mapp{  
    public static void main(String args[]){ 
        HashMap<Integer,String> map=new HashMap<Integer,String>(); 
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            map.put(sc.nextInt(),sc.next());  
        } 
        
        for(Map.Entry m : map.entrySet())
        {  
            System.out.println(m.getKey()+" "+m.getValue());  
        }  
        String value1 = map.getOrDefault(1, "Not Found");
        System.out.println("Value for key 1:  " + value1);
        
        String value2 = map.getOrDefault(4, "Not Found");
        System.out.println("Value for key 4: " + value2);
        
        System.out.println("Updated Elements: " + map);
    }  
}  
##
Create a java program to create and add mappings to hashmap and  HashMap merge() to Insert New Entry.Note:new entry :::::::::::::::Shirt price is 100.
import java.util.*;  
public class Mapp {
    public static void main(String args[])
    { 
        HashMap<String, Integer> map = new HashMap<>();
        Scanner sc=new Scanner(System.in);
        
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            String b=sc.next();
            Integer a=sc.nextInt();
            map.put(b,a);  
        } 
        System.out.println("HashMap: " + map);
        
        int returnedValue = map.merge("Shirt", 100, (oldValue, newValue) -> oldValue + newValue);
        System.out.println("Price of Shirt: " + returnedValue);
        
        System.out.println("Updated HashMap: " + map);
    }  
}  
##
Create a java program to create and add objects and display the map elements after replace key 100 for "java programming" in hashtable concepts not hashmap and then display one more time.
import java.util.*;  
public class Mapp{  
 public static void main(String args[]){ 
     
  LinkedHashMap<Integer,String> map=new LinkedHashMap<>(); 
  Scanner sc=new Scanner(System.in);
  
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  Integer a=sc.nextInt();
  String b=sc.next();
  map.put(a,b);  
  } 
 
  for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  }  
 map.replace(100,"welcome to java");
         
        System.out.println("HashMap After Replace :");
                 
        for(Map.Entry m:map.entrySet()){  
   System.out.println(m.getKey()+" "+m.getValue());  
  } 
 }  
}
##
Write a Java program to copy a Tree Map content to another Tree Map content.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n1=sc.nextInt();
        TreeMap<String,String> tm1=new TreeMap<String,String>();
        for (int i=0;i<n1;i++)
        {
            tm1.put(sc.next(),sc.next());
        }
        int n2=sc.nextInt();
        TreeMap<String,String> tm2=new TreeMap<String,String>();
        for (int i=0;i<n2;i++)
        {
            tm2.put(sc.next(),sc.next());
        }
        System.out.println("Tree Map 1: "+tm1);
        System.out.println("Tree Map 2: "+tm2);
        tm1.putAll(tm2);
        System.out.println("After coping map2 to map1: "+tm1);
    }
}
##
Write a Java program to get a reverse order view of the keys contained in a given map.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<String,String> tm=new TreeMap<String,String>();
        for (int i=0;i<n;i++)
        {
            tm.put(sc.next(),sc.next());
        }
        System.out.println("Orginal TreeMap content: "+tm);
        System.out.println("Reverse order view of the keys: "+tm.descendingKeySet());
    }
}
##
Write a Java program to get a key-value mapping associated with the greatest key less than or equal to the given key. Note:Check entry for 10, 30 and 70
import java.util.*;
import java.util.Map.Entry;  
public class Example11 {  
    public static void main(String args[])
    {
        TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_map1.put(sc.nextInt(),sc.next());  
        }
        System.out.println("Orginal TreeMap content: " + tree_map1);
        System.out.println("Checking the entry for 10: ");
        System.out.println("Value is: " + tree_map1.floorEntry(10));
        System.out.println("Checking the entry for 30: ");
        System.out.println("Value is: " + tree_map1.floorEntry(30));
        System.out.println("Checking the entry for 70: ");
        System.out.println("Value is: " + tree_map1.floorEntry(70));
    }
}
##
Write a Java program to get the portion of a map whose keys range from a given key (inclusive), to another key (exclusive).
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
    public static void main(String args[])
    {
        TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_map1.put(sc.nextInt(),sc.next());  
        }
        System.out.println("Orginal TreeMap content: " + tree_map1);
        System.out.println("Sub map key-values: " + tree_map1.subMap(20, 40));
    }
}
##
Write a Java program to get a key-value mapping associated with the least key greater than or equal to the given key. Return null if there is no such key.Note:Keys are greater than or equal 20,40 and 50
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
    public static void main(String args[])
    {
        TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
        SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_map.put(sc.nextInt(),sc.next()); 
        }
        System.out.println("Orginal TreeMap content: "+tree_map);
        System.out.println("Keys greater than or equal to 20: " + tree_map.ceilingEntry(20));
        System.out.println("Keys greater than or equal to 40: " + tree_map.ceilingEntry(40));
        System.out.println("Keys greater than or equal to 50: " + tree_map.ceilingEntry(50));
    }
}
##
Write a Java program to get all keys from the given a Tree Map.
import java.util.*;
public class java
{
public static void main(String[]args)
{
    Scanner sc=new Scanner(System.in);
    int a=sc.nextInt();
    String b=sc.nextLine();
    String c=sc.nextLine();
    String d=sc.nextLine();
    String e=sc.nextLine();
    String f=sc.nextLine();
    String g=sc.nextLine();
    System.out.println(b);
    System.out.println(d);
    System.out.println(f);
    
}
}
##
Write a Java program to sort keys in Tree Map by using comparator.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println("Orginal TreeMap content: "+tree_map1);
    }
}
 class sort_key implements Comparator<String>{
     @Override
    public int compare(String str1, String str2) {
        return str1.compareTo(str2);
    }
     
}
##
Write a Java program to get a key-value mapping associated with the greatest key strictly less than the given key. Return null if there is no such key.Note:Checking the entry for 10,20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex {  
       public static void main(String args[]) {
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

      System.out.println("Orginal TreeMap content: "+tree_map1);
	  System.out.println("Checking the entry for 10: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(10));  
	  System.out.println("Checking the entry for 20: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(20));  
	  System.out.println("Checking the entry for 70: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(70));   
 }
}
##
Write a Java program to remove and get a key-value mapping associated with the least key in a map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
    System.out.println("Value before poll: " + tree_map1);
  System.out.println("Value returned: " + tree_map1.pollFirstEntry());
  System.out.println("Value after poll: " + tree_map1);
 }
}
##
Write a Java program to get the least key greater than or equal to the given key. Returns null if there is no such key.Note:Keys are greater than or equal 20,30 and 50
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Keys greater than or equal to 20: " + tree_map.ceilingKey(20));
  System.out.println("Keys greater than or equal to 30: " + tree_map.ceilingKey(30));
  System.out.println("Keys greater than or equal to 50: " + tree_map.ceilingKey(50));
 }
}
##
Write a Java program to search a key in a Tree Map.Note:TreeMap contain key for C1 and C5 only write it.
import java.util.*;  
public class Ex {  
   public static void main(String args[]){  
  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  
 
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println(tree_map1);
        if(tree_map1.containsKey("C1")){
            System.out.println("The Tree Map contains key C1");
        } else {
            System.out.println("The Tree Map does not contain key C1");
        }
        if(tree_map1.containsKey("C5")){
            System.out.println("The Tree Map contains key C5");
        } else {
            System.out.println("The TreeMap does not contain key C5");
        }
    }
}
##
Write a Java program to get a key-value mapping associated with the greatest key and the least key in a map.Note:Use firstentry and lastentry method.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Greatest key: " + tree_map1.firstEntry());
  System.out.println("Least key: " + tree_map1.lastEntry());
    }
}
##
Write a Java program to get the least key strictly greater than the given key. Return null if there is no such key. Note:Checking the entry for 10,20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex {  
       public static void main(String args[]) {
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

     System.out.println("Orginal TreeMap content: "+tree_map1);
	  System.out.println("Checking the entry for 10: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(10));  
	  System.out.println("Checking the entry for 20: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(20));  
	  System.out.println("Checking the entry for 70: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(70)); 
 }
}
##
Write a Java program to get the greatest key strictly less than the given key. Return null if there is no such key. Note:check the entry for 10, 20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(10));
  System.out.println("Checking the entry for 20: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(20));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(70));
 }
}
##
Write a Java program to get a portion of a map whose keys are greater than or equal to a given key.Note:Keys are greater than or equal to 20
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys are greater than or equal to 20: " + tree_map.tailMap(20));
 }
}
##
Write a Java program to associate the specified value with the specified key in a Tree Map.
import java.util.*;  
public class ss {  
  public static void main(String args[]){  
  
   TreeMap<Integer,String> tree_map=new TreeMap<Integer,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
	 
   for (Map.Entry<Integer,String> entry : tree_map.entrySet())
   {
    System.out.println(entry.getKey() + "=>" + entry.getValue());
   }
 }  
}
##
Write a Java program to delete all elements from a given Tree Map.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println("Orginal TreeMap content: "+tree_map1);
  tree_map1.clear();
  System.out.println("The New map: "+tree_map1);
 }
}
##
Write a Java program to get the portion of this map whose keys are less than (or equal to, if inclusive is true) a given key. Note:Checking the entry for 10,20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex {  
       public static void main(String args[]) {
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.headMap(10, true));
  System.out.println("Checking the entry for 20: ");
  System.out.println("Key(s): " + tree_map1.headMap(20, true));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.headMap(70, true));
 }
}
##
Write a Java program to remove and get a key-value mapping associated with the greatest key in this map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
    System.out.println("Value before poll: " + tree_map1);
  System.out.println("Value returned: " + tree_map1.pollLastEntry());
  System.out.println("Value after poll: " + tree_map1);
 }
}
##
Write a Java program to get a portion of a map whose keys are greater than to a given key.Note:Keys are greater than 20:
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys are greater than 20: " + tree_map.tailMap(20, false));
 }
}
##
Write a Java program to search a value in a Tree Map.
import java.util.*;  
public class Ex {  
   public static void main(String args[]){  
  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  
 
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println(tree_map1);
        if(tree_map1.containsValue("Green")){
            System.out.println("The TreeMap contains value Green");
        } else {
            System.out.println("The TreeMap does not contain value Green");
        }
        if(tree_map1.containsValue("Pink")){
            System.out.println("The TreeMap contains value Pink");
        } else {
            System.out.println("The TreeMap does not contain value Pink");
        }
    
    }
}
##
Write a Java program to get the first (lowest) key and the last (highest) key currently in a map.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Greatest key: " + tree_map1.firstKey());
  System.out.println("Least key: " + tree_map1.lastKey());
    }
}
##
Write a Java program to get the portion of a map whose keys are strictly less than a given key.Note:check entry for 10,30 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex{  
       public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

 Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.headMap(10));
  System.out.println("Checking the entry for 30: ");
  System.out.println("Key(s): " + tree_map1.headMap(30));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.headMap(70));
 }
}
##
Write a Java program to get NavigableSet view of the keys contained in a map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
   System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Orginal TreeMap content: " + tree_map1.navigableKeySet());
 }
}
##
Write a Java program to get the portion of a map whose keys range from a given key to another key.Note:use sub tree map method subMap(20, true, 40, true).
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  
  System.out.println("Orginal TreeMap content: " + tree_map);
  sub_tree_map = tree_map.subMap(20, true, 40, true);
  System.out.println("Sub map key-values: " + sub_tree_map);
 }
}
##
Write a Java program to search a key in a Tree Map.Note:TreeMap contain key for C1 and C5 only write it.
import java.util.*;  
public class Ex {  
   public static void main(String args[]){  
  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  
 
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println(tree_map1);
        if(tree_map1.containsKey("C1")){
            System.out.println("The Tree Map contains key C1");
        } else {
            System.out.println("The Tree Map does not contain key C1");
        }
        if(tree_map1.containsKey("C5")){
            System.out.println("The Tree Map contains key C5");
        } else {
            System.out.println("The TreeMap does not contain key C5");
        }
    }
}
##
Write a Java program to get a reverse order view of the keys contained in a given map.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Reverse order view of the keys: " + tree_map1.descendingKeySet());
    }
}
##
Write a Java program to get the least key strictly greater than the given key. Return null if there is no such key. Note:Checking the entry for 10,20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex {  
       public static void main(String args[]) {
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

     System.out.println("Orginal TreeMap content: "+tree_map1);
	  System.out.println("Checking the entry for 10: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(10));  
	  System.out.println("Checking the entry for 20: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(20));  
	  System.out.println("Checking the entry for 70: ");
      System.out.println("Key(s): "+tree_map1.higherEntry(70)); 
 }
}
##
Write a Java program to get NavigableSet view of the keys contained in a map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
   System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Orginal TreeMap content: " + tree_map1.navigableKeySet());
 }
}
##
Write a Java program to get a key-value mapping associated with the least key greater than or equal to the given key. Return null if there is no such key.Note:Keys are greater than or equal 20,40 and 50
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys greater than or equal to 20: " + tree_map.ceilingEntry(20));
  System.out.println("Keys greater than or equal to 40: " + tree_map.ceilingEntry(40));
  System.out.println("Keys greater than or equal to 50: " + tree_map.ceilingEntry(50));
 }
}
##
Write a Java program to get all keys from the given a Tree Map.
import java.util.*;  
public class Exa {  
   public static void main(String args[]){  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
 Set<String> keys = tree_map1.keySet();
        for(String key: keys){
            System.out.println(key);
        }
    }
}
##
Write a Java program to sort keys in Tree Map by using comparator.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println("Orginal TreeMap content: "+tree_map1);
    }
}
 class sort_key implements Comparator<String>{
     @Override
    public int compare(String str1, String str2) {
        return str1.compareTo(str2);
    }
     
}
##
Write a Java program to get the portion of a map whose keys are strictly less than a given key.Note:check entry for 10,30 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex{  
       public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

 Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.headMap(10));
  System.out.println("Checking the entry for 30: ");
  System.out.println("Key(s): " + tree_map1.headMap(30));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.headMap(70));
 }
}
##
Write a Java program to remove and get a key-value mapping associated with the greatest key in this map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
    System.out.println("Value before poll: " + tree_map1);
  System.out.println("Value returned: " + tree_map1.pollLastEntry());
  System.out.println("Value after poll: " + tree_map1);
 }
}
##
Write a Java program to get a portion of a map whose keys are greater than to a given key.Note:Keys are greater than 20:
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys are greater than 20: " + tree_map.tailMap(20, false));
 }
}
##
Write a Java program to sort keys in Tree Map by using comparator.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println("Orginal TreeMap content: "+tree_map1);
    }
}
 class sort_key implements Comparator<String>{
     @Override
    public int compare(String str1, String str2) {
        return str1.compareTo(str2);
    }
     
}
##
Write a Java program to get the portion of a map whose keys are strictly less than a given key.Note:check entry for 10,30 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex{  
       public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

 Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.headMap(10));
  System.out.println("Checking the entry for 30: ");
  System.out.println("Key(s): " + tree_map1.headMap(30));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.headMap(70));
 }
}
##
Write a Java program to remove and get a key-value mapping associated with the greatest key in this map.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
    System.out.println("Value before poll: " + tree_map1);
  System.out.println("Value returned: " + tree_map1.pollLastEntry());
  System.out.println("Value after poll: " + tree_map1);
 }
}
##
Write a Java program to get a portion of a map whose keys are greater than to a given key.Note:Keys are greater than 20:
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys are greater than 20: " + tree_map.tailMap(20, false));
 }
}
##
Write a Java program to copy a Tree Map content to another Tree Map content.
import java.util.*;  
public class Example2 {  
   public static void main(String args[]){  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size1=sc.nextInt();
   for(int i=0;i<size1;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
  
   System.out.println("Tree Map 1: "+tree_map1);
   TreeMap<String,String> tree_map2 = new TreeMap<String,String>();
  int size2=sc.nextInt();
   for(int i=0;i<size2;i++)
   {
      String n2 = sc.next();
      String s2= sc.next();
       
   	  tree_map2.put(n2,s2);  
   }
  
   System.out.println("Tree Map 2: "+tree_map2);
   tree_map1.putAll(tree_map2);
   System.out.println("After coping map2 to map1: "+tree_map1);   
 }  
}
##
Write a Java program to get a key-value mapping associated with the greatest key and the least key in a map.Note:Use firstentry and lastentry method.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Greatest key: " + tree_map1.firstEntry());
  System.out.println("Least key: " + tree_map1.lastEntry());
    }
}
##
Write a Java program to get a key-value mapping associated with the greatest key strictly less than the given key. Return null if there is no such key.Note:Checking the entry for 10,20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Ex {  
       public static void main(String args[]) {
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();

   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

      System.out.println("Orginal TreeMap content: "+tree_map1);
	  System.out.println("Checking the entry for 10: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(10));  
	  System.out.println("Checking the entry for 20: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(20));  
	  System.out.println("Checking the entry for 70: ");
      System.out.println("Key(s): "+tree_map1.lowerEntry(70));   
 }
}
##
Write a Java program to get the portion of a map whose keys range from a given key (inclusive), to another key (exclusive).
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
  System.out.println("Orginal TreeMap content: " + tree_map1);
  sub_tree_map = tree_map1.subMap(20, 40);
  System.out.println("Sub map key-values: " + sub_tree_map);
 }
}
##
Write a Java program to get a portion of a map whose keys are greater than or equal to a given key.Note:Keys are greater than or equal to 20
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Orginal TreeMap content: " + tree_map);
  System.out.println("Keys are greater than or equal to 20: " + tree_map.tailMap(20));
 }
}
##
Write a Java program to associate the specified value with the specified key in a Tree Map.
import java.util.*;  
public class ss {  
  public static void main(String args[]){  
  
   TreeMap<Integer,String> tree_map=new TreeMap<Integer,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
	 
   for (Map.Entry<Integer,String> entry : tree_map.entrySet())
   {
    System.out.println(entry.getKey() + "=>" + entry.getValue());
   }
 }  
}
##
Write a Java program to delete all elements from a given Tree Map.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println("Orginal TreeMap content: "+tree_map1);
  tree_map1.clear();
  System.out.println("The New map: "+tree_map1);
 }
}
##
Write a Java program to get the least key greater than or equal to the given key. Returns null if there is no such key.Note:Keys are greater than or equal 20,30 and 50
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  System.out.println("Keys greater than or equal to 20: " + tree_map.ceilingKey(20));
  System.out.println("Keys greater than or equal to 30: " + tree_map.ceilingKey(30));
  System.out.println("Keys greater than or equal to 50: " + tree_map.ceilingKey(50));
 }
}
##
Write a Java program to search a value in a Tree Map.
import java.util.*;  
public class Ex {  
   public static void main(String args[]){  
  

   TreeMap<String,String> tree_map1=new TreeMap<String,String>();      
  
 
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    
  System.out.println(tree_map1);
        if(tree_map1.containsValue("Green")){
            System.out.println("The TreeMap contains value Green");
        } else {
            System.out.println("The TreeMap does not contain value Green");
        }
        if(tree_map1.containsValue("Pink")){
            System.out.println("The TreeMap contains value Pink");
        } else {
            System.out.println("The TreeMap does not contain value Pink");
        }
    
    }
}
##
Write a Java program to get the first (lowest) key and the last (highest) key currently in a map.
import java.util.*;
import java.util.Map.Entry;  
public class Example6 {  
    public static void main(String args[]){  

   TreeMap<String,String> tree_map1 = new TreeMap<String,String>();      
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      String n1 = sc.next();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
    

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Greatest key: " + tree_map1.firstKey());
  System.out.println("Least key: " + tree_map1.lastKey());
    }
}
##
Write a Java program to get a key-value mapping associated with the greatest key less than or equal to the given key. Note:Check entry for 10, 30 and 70
import java.util.*;
import java.util.Map.Entry;  
public class Example11 {  
     public static void main(String args[]) {
 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }

  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Value is: " + tree_map1.floorEntry(10));
  System.out.println("Checking the entry for 30: ");
  System.out.println("Value is: " + tree_map1.floorEntry(30));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Value is: " + tree_map1.floorEntry(70));
 }
}
##
Write a Java program to get the greatest key strictly less than the given key. Return null if there is no such key. Note:check the entry for 10, 20 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Examp {  
         public static void main(String args[]) {

 
  TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
   Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map1.put(n1,s1);  
   }
 
  System.out.println("Orginal TreeMap content: " + tree_map1);
  System.out.println("Checking the entry for 10: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(10));
  System.out.println("Checking the entry for 20: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(20));
  System.out.println("Checking the entry for 70: ");
  System.out.println("Key(s): " + tree_map1.lowerKey(70));
 }
}
##
Write a Java program to get the portion of a map whose keys range from a given key to another key.Note:use sub tree map method subMap(20, true, 40, true).
import java.util.*;
import java.util.Map.Entry;  
public class Example22 {  
           public static void main(String args[]) {

   
  TreeMap < Integer, String > tree_map = new TreeMap < Integer, String > ();
  SortedMap < Integer, String > sub_tree_map = new TreeMap < Integer, String > ();
  Scanner sc=new Scanner(System.in);
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
      Integer n1 = sc.nextInt();
      String s1= sc.next();
       
   	  tree_map.put(n1,s1);  
   }
  
  System.out.println("Orginal TreeMap content: " + tree_map);
  sub_tree_map = tree_map.subMap(20, true, 40, true);
  System.out.println("Sub map key-values: " + sub_tree_map);
 }
}
##
Write a Java program to get all keys from the given a Tree Map.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<String,String> tm = new TreeMap<String,String>();
        for(int i=0;i<n;i++)
        {
            tm.put(sc.next(),sc.next());
        }
        Set<String> key=tm.keySet();
        for (String i:key)
            System.out.println(i);
    }
}
##
Write a Java program to get the first (lowest) key and the last (highest) key currently in a map.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<Integer,String> tm = new TreeMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            tm.put(sc.nextInt(),sc.next());
        }
        System.out.println("Orginal TreeMap content: "+tm);
        System.out.println("Greatest key: "+tm.firstKey());
        System.out.println("Least key: "+tm.lastKey());
    }
}
##
Write a Java program to get the portion of a map whose keys are strictly less than a given key.Note:check entry for 10,30 and 70.
import java.util.*;
import java.util.Map.Entry;  
public class Example11 {  
    public static void main(String args[])
    {
        TreeMap < Integer, String > tree_map1 = new TreeMap < Integer, String > ();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            tree_map1.put(sc.nextInt(),sc.next());  
        }
        System.out.println("Orginal TreeMap content: " + tree_map1);
        System.out.println("Checking the entry for 10: ");
        System.out.println("Key(s): " + tree_map1.headMap(10));
        System.out.println("Checking the entry for 30: ");
        System.out.println("Key(s): " + tree_map1.headMap(30));
        System.out.println("Checking the entry for 70: ");
        System.out.println("Key(s): " + tree_map1.headMap(70));
    }
}
##
Write a Java program to get NavigableSet view of the keys contained in a map.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<Integer,String> tm = new TreeMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            tm.put(sc.nextInt(),sc.next());
        }
        System.out.println("Orginal TreeMap content: "+tm);
        System.out.println("Orginal TreeMap content: "+tm.navigableKeySet());
    }
}
##
Write a Java program to get the least key greater than or equal to the given key. Returns null if there is no such key.Note:Keys are greater than or equal 20,30 and 50
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TreeMap<Integer,String> tm = new TreeMap<Integer,String>();
        for(int i=0;i<n;i++)
        {
            tm.put(sc.nextInt(),sc.next());
        }
        System.out.println("Keys greater than or equal to 20: "+tm.ceilingKey(20));
        System.out.println("Keys greater than or equal to 30: "+tm.ceilingKey(30));
        System.out.println("Keys greater than or equal to 50: "+tm.ceilingKey(50));
    }
}
##
Write a java program to illustrate Comparator using a separate class(Percentage comparator).Read student name and percentage of student).Display in highest percentage to low using comparator.
import java.util.*;
class Student
{
	String name;
	float percentage;
	Student(String name, float percentage)
	{
		this.name = name;
		this.percentage = percentage;
	}
}
class PercentageComparator implements Comparator<Student> {
	public int compare(Student stud1, Student stud2)
	{
		if(stud1.percentage < stud2.percentage)
			return 1;
		return -1;
	}
}
public class Main {
	public static void main(String args[])
	{
	
		ArrayList<Student> studList = new ArrayList<Student>();
		Scanner sc=new Scanner(System.in);
		int size=sc.nextInt();
		for(int i=0;i<size;i++)
		{
		    studList.add(new Student(sc.next(), sc.nextInt()));
		}
		
		Comparator<Student> com = new PercentageComparator();
		
		Collections.sort(studList, com);
		
		System.out.println("Avg % --> Name");
		System.out.println("---------------------");
		for(Student stud:studList) 
		{
			System.out.println(stud.percentage + " --> " + stud.name);
		}		
	}	
}
##
Write a java program to sort using treeset collection,this object needs to be passed in the constructor of TreeSet. Sorting elements in a collection using Comparator interface, we need to pass the class object that implements Comparator interface.Finally Display it.
import java.util.*;
class Student
{
    int roll;
    String name;
    Student(int r,String n)
    {
        roll = r;
        name = n;
    }
    public String toString()
    {
        return roll+" "+name;
    }
}
class MyComparator implements Comparator<Student>
{
    public int compare(Student s1,Student s2)
    {
        if(s1.roll == s2.roll)
            return 0;
        else if(s1.roll > s2.roll)
            return 1;
        else
            return -1;
    }
}
public class Test {
    public static void main(String[] args)
    {
        TreeSet< Student> ts = new TreeSet< Student>(new MyComparator());
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            ts.add(new Student(sc.nextInt(),sc.next()));
        }
        System.out.println(ts);
    }
}
##
Write a Java program to sort a list of characters in reverse order using Comparable interface.Apply LinkedList concepts.
import java.util.*;
public class Main {
    public static void main(String[] args)
    {
        LinkedList<String> list2 = new LinkedList<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
            list2.add(sc.next());
        }
        list2.sort( new Comparator<String>()
        {
            @Override
            public int compare(String num1, String num2)
            {    
                return num1.compareTo(num2);
            }
        });
        for (String num : list2)
        {
            System.out.println(num);
        }
    }
}
##
To demonstrate the working of comparator interface , Create a student class (attribute is rollno,name,address) use constructor concepts, with the help of another class implement the comparator interface(sorting in ascending order of rollno), in main class create the arraylist and add the rollno,name and address and with help of collection sort by the rollno.
import java.io.*;
import java.lang.*;
import java.util.*;
class Student {
 
    int rollno;
    String name, address;
    public Student(int rollno, String name, String address)
    {
        this.rollno = rollno;
        this.name = name;
        this.address = address;
    }
    public String toString()
    {
         return this.rollno + " " + this.name + " "
            + this.address;
    }
}
class Sortbyroll implements Comparator<Student> {
    public int compare(Student a, Student b)
    {
 
        return a.rollno - b.rollno;
    }
} 
public class Main {
    public static void main(String[] args)
    {
        ArrayList<Student> ar = new ArrayList<Student>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
        ar.add(new Student(sc.nextInt(),sc.next(),sc.next()));
        }
      
        System.out.println("Unsorted");
 
        
        for (int i = 0; i < ar.size(); i++)
            System.out.println(ar.get(i));
 
        Collections.sort(ar, new Sortbyroll());
 
   
        System.out.println("Sorted by rollno");
 
        
        for (int i = 0; i < ar.size(); i++)
            System.out.println(ar.get(i));
 
       
    }
}
##
Write a java program to sort the given elements based on comparator interface and also use the list concepts in java collection.
import java.util.*;

public class Main {
 public static void main(String[] args) {
 
  List<Integer> list2 = new ArrayList<Integer>();
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list2.add(sc.nextInt());
  }
  list2.sort(new Comparator<Integer>() {
   @Override
   public int compare(Integer num1, Integer num2) {    
    return num1.compareTo(num2);
   }
   
  });
  

  for (Integer num : list2) {
   System.out.println(num);
  }
 }
}
##
Write a java program to sort the list based on null value for name using comparator method(nullsfirst).Note: (pass the value below mentioned lines)al.add(new Student(101,"Vijay",23));al.add(new Student(106,"Ajay",27));al.add(new Student(105,null,21));
import java.util.*;    
 class Student {    
   int rollno;    
   String name;    
  int age;    
    Student(int rollno,String name,int age){    
    this.rollno=rollno;    
    this.name=name;    
    this.age=age;    
    }  
    public int getRollno() {  
        return rollno;  
    }  
    public void setRollno(int rollno) {  
        this.rollno = rollno;  
    }  
    public String getName() {  
        return name;  
    }  
  
    public void setName(String name) {  
        this.name = name;  
    }  
  
    public int getAge() {  
        return age;  
    }  
    public void setAge(int age) {  
        this.age = age;  
    }  
    }    public class TestSort2{    
 public static void main(String args[]){    
 ArrayList<Student> al=new ArrayList<Student>();    
 al.add(new Student(101,"Vijay",23));    
 al.add(new Student(106,"Ajay",27));    
 al.add(new Student(105,null,21));    
 Comparator<Student> cm1=Comparator.comparing(Student::getName,Comparator.nullsFirst(String::compareTo));  
  Collections.sort(al,cm1);  
  System.out.println("Considers null to be less than non-null");  
  for(Student st: al){  
     System.out.println(st.rollno+" "+st.name+" "+st.age);  
     }  
  
 }    
 }     
##
 Write a java program sort ArrayList objects in accordance with more than one fields like firstly sort, according to student name and secondly sort according to student roll number.Apply comparator interface.

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

class Student {
	Integer rollno;
	String name, address;

	public Integer getRollno() {
		return rollno;
	}

	public void setRollno(Integer rollno) {
		this.rollno = rollno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Student(Integer rollno, String name, String address) {
		super();
		this.rollno = rollno;
		this.name = name;
		this.address = address;
	}


	public String toString() {
		return this.rollno + " " + this.name + " " + this.address;
	}
}

class SortByNameAndRollNum implements Comparator<Student> {
	
	public int compare(Student a, Student b) {

		
		int NameCompare = a.getName().compareTo(b.getName());
		int RollNumCompare = a.getRollno().compareTo(b.getRollno());

		if (NameCompare == 0) {
			return ((RollNumCompare == 0) ? NameCompare : RollNumCompare);
		} else {
			return NameCompare;
		}

	}
}

// Driver class
public class Main {
	public static void main(String[] args) {
		ArrayList<Student> ar = new ArrayList<Student>();
		ar.add(new Student(111, "aaaa", "london"));
		ar.add(new Student(131, "aaaa", "nyc"));
		ar.add(new Student(121, "cccc", "jaipur"));

		System.out.println("Unsorted");
		for (int i = 0; i < ar.size(); i++)
			System.out.println(ar.get(i));

		Collections.sort(ar, new SortByNameAndRollNum());

		System.out.println("\nSorted by namd and rolNum");
		for (int i = 0; i < ar.size(); i++)
			System.out.println(ar.get(i));

	}
}
##
Java program implements a Person class that contains name and age as member fields. This class implements a ‘Comparable’ interface that will allow us to sort the object of class Person.Note that as we are going to sort custom objects, we need to override the ‘compareTo ()’ method of the Comparable interface.Note:Read person name1 and age1Read person name2 and age2compare ages of two personsis older than or are of the same age!
import java.util.*;

class Person implements Comparable<Person> {
    private String name;
    private int age;
   
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    public int getAge() {
        return this.age;
    }
    public String getName() {
        return this.name;
    }
    
    @Override
    public String toString() {
        return "";
    }
    
    @Override
    public int compareTo(Person per) {
        if(this.age == per.age)
            return 0;
        else
            return this.age > per.age ? 1 : -1;
    }
}
public class Main{
    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        Person p1 = new Person(sc.next(), sc.nextInt());
        Person p2 = new Person(sc.next(), sc.nextInt());
        int ageDiff = p1.compareTo(p2);    
        switch(ageDiff) {
            case -1: {
                System.out.println(p2.getName() + " is older than " + p1.getName());
                break;
            }
           case 1: {
                System.out.println(p1.getName() + " is older than " + p2.getName());
                break;
                }
             default:
                System.out.println(p1.getName () + " and " + p2.getName () 
                                + " are of the same age!");
        }
    }
}
##
Write a java program to display the highest gpa from two given student details use comparable interface in java collection concepts.NotesadTwo student details read)Read nameRead gpaRead register number

import java.util.*;
class Student implements Comparable<Student>
{
	private String name;
	private int gpa;
	private int regNo;
	
	//Constructor
	public Student(String name, int gpa, int regNo) {
		this.name = name;
		this.gpa = gpa;
		this.regNo = regNo;
	}
	
    //Override the comapareTo() method
	@Override
	public int compareTo(Student other)
	{
		return (int)(this.getGpa() - other.getGpa());//compare using GPA
	}
	
	//getters and setters
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	public int getGpa() {
		return gpa;
	}
	public void setGpa(int gpa) {
		this.gpa = gpa;
	}
	
	public int getRegNo() {
		return regNo;
	}
	public void setRegNo(int regNo) {
		this.regNo = regNo;
	}
}

public class Main
{
	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
		Student s1 = new Student(sc.next(), sc.nextInt(), sc.nextInt());
		Student s2 = new Student(sc.next(), sc.nextInt(), sc.nextInt());
		
		int comparisonResult = s1.compareTo(s2);
		
		if(comparisonResult > 0)
			System.out.println(s1.getName() + " has higher GPA");
		
		else if(comparisonResult < 0)
			System.out.println(s2.getName() + " has higher GPA");
		
		else
			System.out.println(s1.getName() + " and "+ s2.getName() + " have same GPA");
	}
}
##
Write a java program to demonstrate Comparator comparingDouble(ToDoubleFunction) method.Read name and salary(Double) for employee.Sort by salary (low to high use comparator.) and display it.NotesadInput pass below given data)"Ram", 3500.56"Kumar", 4222.99"Sasi", 2832.34"mamo", 2522.76
// Java program to demonstrate Comparator
// comparingDouble(ToDoubleFunction) method

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Main {
	public static void main(String[] args)
	{


		User u1 = new User("Ram", 3500.56);
		User u2 = new User("Kumar", 4222.99);
		User u3 = new User("Sasi", 2832.34);
		User u4 = new User("mamo", 2522.76);

	
		List<User> list = Arrays.asList(u2, u1, u4, u3);
		System.out.println("Before Sort:");
		list.forEach(user -> System.out.println(user));

		Collections.sort(list,
						Comparator.comparingDouble(User::getSalary));
		System.out.println("\nAfterSort:");
		list.forEach(user -> System.out.println(user));
	}
}

class User implements Comparable<User> {
	public String name;
	public double salary;

	public User(String name, double d)
	{
		this.name = name;
		this.salary = d;
	}

	public int compareTo(User u1)
	{
		return name.compareTo(u1.name);
	}

	public String getName()
	{
		return name;
	}

	public void setName(String name)
	{
		this.name = name;
	}

	public double getSalary()
	{
		return salary;
	}

	public void setSalary(double salary)
	{
		this.salary = salary;
	}

	@Override
	public String toString()
	{
		return "User [name=" + name
			+ ", salary="
			+ salary + "]";
	}
}
##
Write a java program to sort the given elements based on comparator interface and also use the linkedlist concepts in java collection.
import java.util.*;

public class Main {
 public static void main(String[] args) {
 
  LinkedList<Integer> list2 = new LinkedList<Integer>();
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list2.add(sc.nextInt());
  }
  list2.sort(new Comparator<Integer>() {
   @Override
   public int compare(Integer num1, Integer num2) {    
    return num1.compareTo(num2);
   }
   
  });
  

  for (Integer num : list2) {
   System.out.println(num);
  }
 }
}
##
Write a Java program to sort a list of name in reverse order using Comparable interface.Apply LinkedList concepts.
import java.util.*;

public class Main {
 public static void main(String[] args) {
 
  LinkedList<String> list2 = new LinkedList<String>();
  Scanner sc=new Scanner(System.in);
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list2.add(sc.next());
  }
  list2.sort(new Comparator<String>() {
   @Override
   public int compare(String num1, String num2) {    
    return num1.compareTo(num2);
   }
   
  });
  

  for (String num : list2) {
   System.out.println(num);
  }
 }
}
##
To demonstrate the working of comparator interface , Create a student class (attribute is rollno,name,address) use constructor concepts, with the help of another class implement the comparator interface(sorting in ascending order of name), in main class create the arraylist and add the rollno,name and address and with help of collection sort by the rollno.
import java.io.*;
import java.lang.*;
import java.util.*;
class Student {
 
    int rollno;
    String name, address;
    public Student(int rollno, String name, String address)
    {
        this.rollno = rollno;
        this.name = name;
        this.address = address;
    }
    public String toString()
    {
         return this.rollno + " " + this.name + " "
            + this.address;
    }
}
class Sortbyname implements Comparator<Student> {
 
    public int compare(Student a, Student b)
    {
 
        return a.name.compareTo(b.name);
    }
}
public class Main {
    public static void main(String[] args)
    {
        ArrayList<Student> ar = new ArrayList<Student>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
        ar.add(new Student(sc.nextInt(),sc.next(),sc.next()));
        }
      
        System.out.println("Unsorted");
 
        
        for (int i = 0; i < ar.size(); i++)
            System.out.println(ar.get(i));
 
         Collections.sort(ar, new Sortbyname());
 
        
        System.out.println("\nSorted by name");
 
        
        for (int i = 0; i < ar.size(); i++)
            System.out.println(ar.get(i));
 
       
    }
}
##
Write a java program to compare  two elements , if element is greater means display 1 otherwise display -1 use only comparable interface in java collection.
import java.util.*;
public class ComparableExample {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        
        Integer valA = Integer.valueOf(sc.nextInt());
        Integer valB = Integer.valueOf(sc.nextInt());

        int comparisonA = valA.compareTo(valB);
        int comparisonB = valB.compareTo(valA);

        System.out.println(comparisonA);
        System.out.println(comparisonB);
    }
}
##
Write a java program to sort the list based on null value for name using comparator method(nullslast).Notesadpass the value below lines)al.add(new Student(101,"Vijay",23));al.add(new Student(106,"Ajay",27));al.add(new Student(105,null,21));
import java.util.*;    
 class Student {    
   int rollno;    
   String name;    
  int age;    
    Student(int rollno,String name,int age){    
    this.rollno=rollno;    
    this.name=name;    
    this.age=age;    
    }  
    public int getRollno() {  
        return rollno;  
    }  
    public void setRollno(int rollno) {  
        this.rollno = rollno;  
    }  
    public String getName() {  
        return name;  
    }  
  
    public void setName(String name) {  
        this.name = name;  
    }  
  
    public int getAge() {  
        return age;  
    }  
    public void setAge(int age) {  
        this.age = age;  
    }  
    }    public class TestSort2{    
 public static void main(String args[]){    
 ArrayList<Student> al=new ArrayList<Student>();    
 al.add(new Student(101,"Vijay",23));    
 al.add(new Student(106,"Ajay",27));    
 al.add(new Student(105,null,21));    
  
  Comparator<Student> cm2=Comparator.comparing(Student::getName,Comparator.nullsLast(String::compareTo));  
  Collections.sort(al,cm2);  
  System.out.println("Considers null to be greater than non-null");  
  for(Student st: al){  
     System.out.println(st.rollno+" "+st.name+" "+st.age);  
     }  
 }    
 }     
 ##
 Write a java program to read and get the enumeration of the values present in the Vector and print the  elements using vector in java collection.(Use elements() method)
 import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Vector<String> vec= new Vector<String>();
        for (int i=0;i<n;i++)
        {
            vec.add(sc.next());
            vec.add(sc.next());
        }
        System.out.println("The vector is: "+vec);
        Enumeration enu = vec.elements();
        System.out.println("The enumeration of values are:");
        while (enu.hasMoreElements())
        {
            System.out.println(enu.nextElement());
        }
    }
}
##
Write a java program to read and  print all the  elements and also firstelement() using vector method  in java collection.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Vector<String> vec= new Vector<String>();
        for (int i=0;i<n;i++)
        {
            vec.add(sc.next());
            vec.add(sc.next());
        }
        System.out.println("The vector is: "+vec);
        System.out.println("The first element is: "+vec.firstElement());
    }
}
##
Write a java program to read and  print all the  elements and return the first position of element in vector object using indexOf("welcome") method and use vector method  in java collection.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Vector<String> vec= new Vector<String>();
        for (int i=0;i<n;i++)
        {
            vec.add(sc.next());
        }
        System.out.println("The vector is: "+vec);
        System.out.println("Index of 'welcome' is: "+vec.indexOf("welcome"));
    }
}
##
Write the java program to add the elements in stack and then display the elements.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Stack<String> st=new Stack<String>();
        for(int i=0;i<n;i++)
        {
            st.push(sc.next());
        }
        System.out.println("Elements in Stack: "+st);
    }
}
##
Write the java program to add the elements in stack and then display the elements , then remove all the elements from the stack .Finally display the element of the stack.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Stack<String> st=new Stack<String>();
        for(int i=0;i<n;i++)
        {
            st.push(sc.next());
        }
        System.out.println("The initial size is: "+st.size());
        st.clear();
        System.out.println("Final Stack: "+st);
    }
}
##
Write a java program to read and print the elements  and to fetching the specific element from the index of 3 using vector in java collection.(Use elementAt() method)
import java.util.*;
public class VectorDemo {
	public static void main(String args[])
	{
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	   	System.out.println("The vector is: " + vec_tor);

	    System.out.println("The element is: "
                           + vec_tor.elementAt(3));
		}
}
##
Write a java program to create vector and read the elements  for two vector in java collection.(Use equals method )
import java.util.*;
public class VectorDemo {
	public static void main(String args[])
	{
		Vector<String> vec_tor1 = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor1.add(sc.next());
	    }
	   	System.out.println("The vector is: " + vec_tor1);

	    Vector<String> vec_tor2 = new Vector<String>();
        int size2=sc.nextInt();
        for(int i=0;i<size2;i++)
        {
        vec_tor2.add(sc.next());
        }
       
  
       System.out.println("The Vector is: "
                           + vec_tor2);
  
        System.out.println("Are both of them equal? "
                           + vec_tor1.equals(vec_tor2));
		}
}
##
Write a java program to read and  print the  elements using vector in java collection.Note:add "SEC" to vector with index value is 2.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    
	    }
	

		System.out.println("The vector is: " + vec_tor);

		vec_tor.insertElementAt("SEC", 2);
	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write the java program to retrieve or fetch the first element of the Stack or the element present at the top of the Stack and then display the elements.(use peek method)
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Elements in Stack: " + stk);  

System.out.println("Pop elements in Stack: " + stk.peek());  

}  
}  
##
Write the java program to add the elements in stack and then display the elements , then remove the elements at the index of 1.Finally display the element of the stack.(use remove() method).After apply the toString() method display it.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("The initial size is: "
                           + stk.size());
  
       
        stk.remove(1);
  
       
        System.out.println("Final Stack: " + stk);
  
        System.out.println("The final size is: "
                           + stk.size());  
        System.out.println("Using toString() method:" + stk.toString());

}  
}  
##
write a java program to create an empty vector and add an elements in the vector then create a collection,add element to collection and then appending the collection element to vector .Finally display the vector element.
import java.util.*;
import java.util.ArrayList;

public class GFG {
	public static void main(String args[])
	{
		Vector<String> vt = new Vector<String>();
		Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vt.add(sc.next());
	    vt.add(sc.next());
	    }
		Collection<String> c = new ArrayList<String>();
     	int size1=sc.nextInt();
	    for(int j=0;j<size1;j++)
	    {
		c.add(sc.next());
	   
	    }
		System.out.println("The Vector is: " + vt);

	
		vt.addAll(c);

	
		System.out.println("The new vector is: " + vt);
	}
}
##
Write a java program to read and print the elements  and check the element in vector or not using vector in java collection.(Use method in vector)Note:Check the vector contains Italic , 4 and yes is present in vector or not.
import java.util.*;
public class VectorDemo {
	public static void main(String args[])
	{
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	   	System.out.println("The vector is: " + vec_tor);

	    System.out.println("Does the vector contains 'Italic'? "
                           + vec_tor.contains("Italic"));
  
       
        System.out.println("Does the Vector contains '4'? "
                           + vec_tor.contains("4"));
  
        
        System.out.println("Does the Queue contains 'yes'? "
                           + vec_tor.contains("yes"));
		}
}
##
Write a java program to read and  print the  elements and removes all components from this Vector and sets its size to zero use vector in java collection.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    
	    }
	

		System.out.println("The vector is: " + vec_tor);

		vec_tor.removeAllElements();
	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write the java program to search for an element in the stack and get its distance from the top and then display the stack.Note:"Welcome" string is present in stack or not.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Elements in Stack: " + stk);  

System.out.println("Search element in Stack: " + stk.search("Welcome"));  

}  
}  
##
Write the java program to add the elements in stack and then display the elements , then remove the elements at the indexposition of 2.Finally display the element of the stack.(use removeElementAt().)
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("The initial size is: "
                           + stk.size());
  
       
        stk.removeElementAt(2);
  
       
        System.out.println("Final Stack: " + stk);
  
        System.out.println("The final size is: "
                           + stk.size());  

}  
}  
##
Write a java program to read and  print the  elements using vector in java collection.Note:Use addElement method().
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	

		System.out.println("The vector is: " + vec_tor);

		int size1=sc.nextInt();
	    for(int j=0;j<size1;j++)
	    {
		vec_tor.addElement(sc.next());
	    }

	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write a java program to create three vector and read the elements  and check the element in vector or not using vector in java collection.(Use containsall method in vector)Note:In third vector only add the "Hello" String.
import java.util.*;
public class VectorDemo {
	public static void main(String args[])
	{
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	   	System.out.println("The vector is: " + vec_tor);

	    Vector<String> colvec_tor = new Vector<String>();
        int size2=sc.nextInt();
        for(int i=0;i<size2;i++)
        {
        colvec_tor.add(sc.next());
        }
       
  
        System.out.println("Are all the contents equal? " + vec_tor.containsAll(colvec_tor));
  
  
        Vector<String> colvec_tor2 = new Vector<String>();
  
        colvec_tor2.add("Hello");
       
  
        System.out.println("Are all the contents equal? " + vec_tor.containsAll(colvec_tor2));
		}
}
##
Write a java program to read and  print the  elements and the remove an element from a Vector from a specific position or index using vector in java collection.Note:Consider index value is zero.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    
	    }
	

		System.out.println("The vector is: " + vec_tor);

		vec_tor.remove(0);
	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write the java program to check the stack is empty or not and then display the stack.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Elements in Stack: " + stk);  

System.out.println("Check empty or not in Stack: " + stk.empty());  

}  
}  
##
Write the java program to add the elements in stack and then display the last occurrence of the  elements using lastIndexOf method using java collection.Note:String is "Welcome"
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Stack: "+ stk.lastIndexOf("Welcome"));

    
}  
}  
##
Write a java program to read and  print the  elements using vector in java collection.Note:Use add method().
// Java code to illustrate boolean add(Object element)
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	

		System.out.println("The vector is: " + vec_tor);

		int size1=sc.nextInt();
	    for(int j=0;j<size1;j++)
	    {
		vec_tor.add(sc.next());
	    }

	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write a java program to read and  print all the  elements and also lastelement() using vector method  in java collection.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	

		System.out.println("The vector is: " + vec_tor);

	    System.out.println("The last element is: "
                           + vec_tor.lastElement());
	}
}
##
Write a java program to read and  print all the  elements and return the first position of element in vector object using lastIndexOf("welcome") method and use vector method  in java collection.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    }
	

		System.out.println("The vector is: " + vec_tor);

	    System.out.println("Index of 'welcome' is: "
                           + vec_tor.lastIndexOf("welcome"));
	}
}
##
Write the java program pop the elements in stack and then display the elements.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Elements in Stack: " + stk);  

System.out.println("Pop elements in Stack: " + stk.pop());  

}  
}  
##
Write the java program to add the elements in stack and then display the elements using listIterator method using java collection.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Stack: "+ stk);
ListIterator<String> iterator = stk.listIterator();
System.out.println("Using ListIterator:");
            while (iterator.hasNext()) {
                System.out.println("Value is : "
                                   + iterator.next());
        
            }
    
}  
}  
##
Write a java program to read and  print the  elements using vector in java collection.Note:Use add method().
// Java code to illustrate boolean add(Object element)
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    vec_tor.add(sc.next());
	    }
	

		System.out.println("The vector is: " + vec_tor);

		int size1=sc.nextInt();
	    for(int j=0;j<size1;j++)
	    {
		vec_tor.add(sc.next());
	    }

	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write a java program to create vector and read the elements  for two vector in java collection.(Use equals method )
import java.util.*;
public class VectorDemo {
	public static void main(String args[])
	{
		Vector<String> vec_tor1 = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor1.add(sc.next());
	    }
	   	System.out.println("The vector is: " + vec_tor1);

	    Vector<String> vec_tor2 = new Vector<String>();
        int size2=sc.nextInt();
        for(int i=0;i<size2;i++)
        {
        vec_tor2.add(sc.next());
        }
       
  
       System.out.println("The Vector is: "
                           + vec_tor2);
  
        System.out.println("Are both of them equal? "
                           + vec_tor1.equals(vec_tor2));
		}
}
##
Write a java program to read and  print the  elements and the remove an element from a Vector from a specific position or index using vector in java collection.Note:Consider index value is zero.
import java.util.*;

public class VectorDemo {
	public static void main(String args[])
	{

		
		Vector<String> vec_tor = new Vector<String>();
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
	    for(int i=0;i<size;i++)
	    {
		vec_tor.add(sc.next());
	    
	    }
	

		System.out.println("The vector is: " + vec_tor);

		vec_tor.remove(0);
	
		System.out.println("The new Vector is: " + vec_tor);
	}
}
##
Write the java program to add the elements in stack and then display the elements.
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("Elements in Stack: " + stk);  

}  
}  
##
Write the java program to add the elements in stack and then display the elements , then remove the elements at the indexposition of 2.Finally display the element of the stack.(use removeElementAt().)
import java.util.*;  
public class StackEmptyMethodExample  
{  
public static void main(String[] args)   
{  

Stack<String> stk= new Stack<>();  
Scanner sc=new Scanner(System.in);
int size=sc.nextInt();
for(int i=0;i<size;i++)
{
stk.push(sc.next());  
} 

System.out.println("The initial size is: "
                           + stk.size());
  
       
        stk.removeElementAt(2);
  
       
        System.out.println("Final Stack: " + stk);
  
        System.out.println("The final size is: "
                           + stk.size());  

}  
}  
##
Write a java program to Print the top of the element from the Priority Queue.
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
        for(int i=0;i<n;i++)
        {
            pq.add(sc.nextInt());
        }
        System.out.println("Display the top of the element of PriorityQueue: \n" + pq.peek());
    }
}
##
Write a java program to display the added elements from the Priority Queue and to insert a particular element into the Priority Queue and then display the elements.(Use offer() method).
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
        for(int i=0;i<n;i++)
        {
            pq.offer(sc.nextInt());
        }
        System.out.println("Display the element of Queue: \n" + pq);
    }
}
##
Write a java program to display the added elements from the Dequeue using java collection.(Use ArrayDeque)
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Deque<Integer> dq=new ArrayDeque<Integer>();
        for(int i=0;i<n;i++)
        {
            dq.add(sc.nextInt());
        }
        System.out.println("Display the element of Dequeue: \n" + dq);
    }
}
##
Write a java program to display the added elements from the Dequeue using removefirst method in java collection.(Use string)
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Deque<String> dq=new ArrayDeque<String>();
        for(int i=0;i<n;i++)
        {
            dq.offer(sc.next());
        }
        System.out.println("Display the element of Dequeue: \n" + dq);
        dq.removeFirst();
        System.out.println(dq);
    }
}
##
Write a java program to display the head element from the Dequeue using getFirst method  in java collection.(Use string)
import java.util.*;
public class Demo{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        Deque<String> dq=new ArrayDeque<String>();
        for(int i=0;i<n;i++)
        {
            dq.offer(sc.next());
        }
        System.out.println("Display the element of Dequeue: \n" + dq);
        System.out.println(dq.getFirst());
    }
}
##
Write a java program to display the added elements from the Priority Queue.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.nextInt());
	    }
	    System.out.println("Display the element of Queue:");
		System.out.println(pQueue);

		
	}
}
##
Write a java program to display the added elements from the Priority Queue and to insert a particular element into the Priority Queue and then display the elements after clear the priority queue and then display it.(Use clear() method).
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.offer(sc.nextInt());
	    }
	    System.out.println("Display the element of Queue:");
		System.out.println(pQueue);
		System.out.println("Display the element of Queue after clear method:");
		pQueue.clear();
		System.out.println(pQueue);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using java collection.Note:add 100 to the first element of dequeue.
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<Integer> dq = new LinkedList<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.add(sc.nextInt());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
        System.out.println("Display the element of Dequeue after add first element :");
        dq.addFirst(100);
		System.out.println(dq);
		
	}
}
##
Write a java program to display the added elements from the Dequeue using removelast method in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		dq.removeLast();
		System.out.println(dq);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using descendingiterator through deque in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
     	for (Iterator itr = dq.iterator();
             itr.hasNext();) {
            System.out.print(itr.next() + " ");
        }
        System.out.println();
 
        for (Iterator itr = dq.descendingIterator();
             itr.hasNext();) {
            System.out.print(itr.next() + " ");
        }
		
	}
}
##
Write a java program to print the top element and removing it from the Priority Queue Container.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.nextInt());
	    }
	    System.out.println("Display the remove element of PriorityQueue:");
		System.out.println(pQueue.poll());
		System.out.println("Display the element of PriorityQueue:");
		System.out.println(pQueue);

		
	}
}
##
Write a java program  to insert a element into the Priority Queue and to access the elements from priority queue then display the head of the queue elements from priority queue.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.offer(sc.nextInt());
	    }
	   
	    int number = pQueue.peek();
        System.out.println("Accessed Element: " + number);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using java collection.(Use LinkedList)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<Integer> dq = new LinkedList<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.add(sc.nextInt());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using offer method in java collection.
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<Integer> dq = new ArrayDeque<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.nextInt());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);

		
	}
}
##
Write a java program to display the removal element from the Dequeue using getLast method  in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		System.out.println(dq.getLast());
     	
	}
}
##
Write a java program to display the added elements from the Priority Queue and apply the toArray() method to form an array of the same elements as that of the Priority Queue. Basically, it copies all the element from a priority queue to a new array and display it.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.nextInt());
	    }
	    System.out.println("The PriorityQueue: " + pQueue);
  
       
        Object[] arr = pQueue.toArray();
  
        System.out.println("The array is:");
        for (int j = 0; j < arr.length; j++)
            System.out.println(arr[j]);

		
	}
}
##
Write a java program to print the top element and removing it from the Priority Queue Container.(use String elements)
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<String> pQueue = new PriorityQueue<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.next());
	    }
	    System.out.println("Display the remove element of PriorityQueue:");
		System.out.println(pQueue.poll());
		System.out.println("Display the element of PriorityQueue:");
		System.out.println(pQueue);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using java collection.Note:add 150 to the last element of dequeue.
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<Integer> dq = new LinkedList<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.add(sc.nextInt());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
        System.out.println("Display the element of Dequeue after add first element :");
        dq.addLast(150);
		System.out.println(dq);
		
	}
}
##
Write a java program to display the added elements from the Dequeue using iterator through deque in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
     	for (Iterator itr = dq.iterator();
             itr.hasNext();) {
            System.out.print(itr.next() + " ");
        }

		
	}
}
##
Write a java program to display the removal  element from the Dequeue using pollFirst method  in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		System.out.println(dq.pollFirst());
     	
	}
}
##
Write a java program to display the added elements from the Priority Queue.Note : Use iterator(while).Iterating the elements from the Priority Queue.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.nextInt());
	    }
	   Iterator iterator = pQueue.iterator();
	   System.out.println("Iterate the elements from the queue using while loop:");
  
        while (iterator.hasNext()) {
            System.out.print(iterator.next() + " ");
        }
		
	}
}
##
Write a java program to display the added elements from the Priority Queue and to insert a particular element into the Priority Queue and then display the elements.Create a comparator value and then display the values .Use the Comparator method returns a null value if the queue follows the natural ordering pattern of the elements.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.offer(sc.nextInt());
	    }
	     System.out.println("Priority queue values are: " + pQueue);
 
       
        Comparator comp = pQueue.comparator();
 
     
        System.out.println("Since the Comparator value is: " + comp);
        System.out.println("it follows natural ordering");
		
	}
}
##
Write a java program to display the added elements from the Dequeue using java collection.Note:push the element 72 to deque.
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<Integer> dq = new ArrayDeque<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.add(sc.nextInt());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		dq.push(72);
	    System.out.println("Display the element of Dequeue after push the element 72:");
		System.out.println(dq);

		
	}
}
##
Write a java program to display the added elements from the Dequeue using offerfirst method in java collection.Note:Add "SEC" string to the deque.
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		dq.offerFirst("SEC");
		System.out.println(dq);

		
	}
}
##
Write a java program to display the removal  element from the Dequeue using pollLast method  in java collection.(Use string)
import java.util.*;

public class deQueueDemo {
	

	public static void main(String args[])
	{
	
		Deque<String> dq = new ArrayDeque<String>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        dq.offer(sc.next());
	    }
	    System.out.println("Display the element of Dequeue:");
		System.out.println(dq);
		System.out.println(dq.pollLast());
     	
	}
}
##
Write a java program to Print the top of the element from the Priority Queue.
import java.util.*;

public class PriorityQueueDemo {
	

	public static void main(String args[])
	{
	
		PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
        
	    Scanner sc=new Scanner(System.in);
	    int size=sc.nextInt();
	    for(int i=0;i<size;i++){
	        pQueue.add(sc.nextInt());
	    }
	    System.out.println("Display the top of the element of PriorityQueue:");
		System.out.println(pQueue.peek());

		
	}
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes double age value as a parameter. If the age is less than 3.5, we are throwing the ArithmeticException as "Child is not eligible for KinderGarden"    otherwise print a message as "Child is eligible for KinderGarden!!"Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(double age) 
        {  
            try
            {
            if(age<3.5) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Child is not eligible for KinderGarden");    
            }  
            else {  
            System.out.println("Child is eligible for KinderGarden!!");  
            }  
            }
            catch(Exception e)
      {
          System.out.println(e);
      }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            double n=sc.nextDouble();
            validate(n);  
                
      }    
    }      
##
Create a final class 'Student' with  Name,Id and Year,Schoolname  as its member, make  Year and School name as final variable with value "3th Year" & "ABC School", Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Student
{
    final String Year="3th Year";
    final String schoolname="ABC School";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: "+Year+"\nSchool: " +schoolname);
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}
##
Write a Java program to count the vowels and consonant in the given string by calling run methodNote: Get the value from the User
import java.util.*;
public class Multi implements Runnable
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String str = sc.nextLine();  
        int vCount = 0, cCount = 0;    
        
        str = str.toLowerCase();    
        
        for(int i = 0; i < str.length(); i++)
        {
            if(str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') 
            {    
                vCount++;    
            }    
            else if(str.charAt(i) >= 'a' && str.charAt(i)<='z')
            {      
                cCount++;    
            }    
        }    
        System.out.println("Number of vowels: " + vCount);    
        System.out.println("Number of consonants: " + cCount);   
    }  
    public static void main(String args[])
    {  
        Multi m1=new Multi(); 
        Thread t1 =new Thread(m1); 
        t1.run();  
    }  
}
##
Write a java program for set the priority and name of the current thread.Note : Read the threadname from the UserRead the priority value from the User
import java.util.*;
public class A implements Runnable
{
    public void run()
    {
        System.out.println(Thread.currentThread()); 
    }
    public static void main(String[] args) 
    {
        A a = new A();
        Scanner sc=new Scanner(System.in);
        String thname=sc.nextLine();
        int pri=sc.nextInt();
        Thread t = new Thread(a, thname);
        t.setPriority(pri);
        System.out.println("Priority of Thread: " +t.getPriority());
        System.out.println("Name of Thread: " +t.getName());
        t.start();
    }
}
##
Write a Java program to create Thread using extends In run method get the Patient details as patient name and patient Id as String variable from the user and print the value in Output screen
import java.util.*;
public class Multi extends Thread
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Patient Name: " +sname);  
        System.out.println("Patient ID: " +rollno);  
    }  
    public static void main(String args[])
    {
        Multi t1=new Multi();  
        t1.start();  
    }  
}
##
Write a Java program to create Thread using extends In run method get the student name and roll number from the user and print the value
import java.util.*;
public class Multi extends Thread
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Student Name: " +sname);  
        System.out.println("Roll No: " +rollno);  
    }  
    public static void main(String args[])
    {
        Multi t1=new Multi();  
        t1.start();  
    }  
}
##
Write a Java program to perform whether the given number is Positive or Negative ,zero by creating Thread using Runnable Interface.Note: Get the value from the User
import java.util.*;
public class Multi implements Runnable
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        int num=sc.nextInt();
        if(num>0)  
        {  
            System.out.println("The number is positive.");  
        }
        else if(num<0)  
        {  
            System.out.println("The number is negative.");  
        }
        else  
        {  
            System.out.println("The number is zero.");  
        }
    }
    public static void main(String args[])
    {  
        Multi m1=new Multi(); 
        Thread t1 =new Thread(m1); 
        t1.run();  
    }  
}
##
Write a Java program to perform whether the given number is palindrome or not by creating Thread using Runnable Interface.Note: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int number=sc.nextInt();
        int remainder=0,reverse=0,temp;
        temp=number;
       while(number != 0)   
        {  
         remainder = number % 10;  
        reverse = reverse * 10 + remainder;  
        number = number/10;  
        }  
        if(temp==reverse)
        {
        System.out.println("The number " +temp+" is Palindrome");  
        }
        else
        {
              System.out.println("The number " +temp+" is not a Palindrome");  
        }
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using extendsNote: Get Thread integer number  from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int count=sc.nextInt();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Consider two threads t1 and t2Note : Read the threadname from the UserRead the priority value from the user for both the threads
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String first=sc.nextLine();
 String second=sc.nextLine();
 Thread t1 = new Thread(a, first);
 Thread t2 = new Thread(a, second);
 
 int t1pr=sc.nextInt();
 int t2pr=sc.nextInt();
 t1.setPriority(t1pr); // Setting the priority of first thread.
 t2.setPriority(t2pr); // Setting the priority of second thread.
 
 
 t1.start();
 t2.start();
 
  }
}
##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.Note: Get Thread integer number  from the User
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to perform whether the given number is palindrome or not by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int number=sc.nextInt();
        int remainder=0,reverse=0,temp;
        temp=number;
       while(number != 0)   
        {  
         remainder = number % 10;  
        reverse = reverse * 10 + remainder;  
        number = number/10;  
        }  
        if(temp==reverse)
        {
        System.out.println("The number " +temp+" is Palindrome");  
        }
        else
        {
              System.out.println("The number " +temp+" is not a Palindrome");  
        }
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a Java program to add two numbers by creating Thread using Runnable Interface.Note: Get the value of int first and second variable as Input from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int a=sc.nextInt();
        int b=sc.nextInt();
        int sum=a+b;
        System.out.println("Result: " +sum);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a Java program to count the number of characters in the given string by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String string = sc.nextLine();    
        int count = 0;    
        //Counts each character except space    
        for(int i = 0; i < string.length(); i++)
        {    
            if(string.charAt(i) != ' ')    
                count++;    
        }    
        //Displays the total number of characters present in the given string    
        System.out.println("Total number of characters in a string: " + count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Consider two threads t1 and t2Note : Read the threadname from the Userset the priority as 4 for t1 and set the priority as 2 for t2
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String first=sc.nextLine();
 String second=sc.nextLine();
 Thread t1 = new Thread(a, first);
 Thread t2 = new Thread(a, second);
 
 
 t1.setPriority(4); // Setting the priority of first thread.
 t2.setPriority(2); // Setting the priority of second thread.
 
 
 t1.start();
 t2.start();
 
  }
}
##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.Note: Get Thread integer number  from the User
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using extendsNote: Get User name from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using Implements Runnable  .In run method get student name & rollno as input from the user and print inside the function
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi();  
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a java program for determine the priority and name of the current thread.Note : Read the threadname from the User
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}
##
Write a Java program to create Thread using extendsNote: Get Thread integer number  from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int count=sc.nextInt();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to perform whether the given number is Positive or Negative ,zero by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int num=sc.nextInt();
       if(num>0)  
{  
System.out.println("The number is positive.");  
}  
//checks the number is less than 0 or not  
else if(num<0)  
{  
System.out.println("The number is negative.");  
}  
//executes when the above two conditions return false  
else  
{  
System.out.println("The number is zero.");  
}  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Note : Read the threadname from the UserSet the Priority as 2.
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 t.setPriority(2); // Setting the priority of thread.
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}
##
Write a Java program to create Thread and call the thread  using run methodNote: Get User name from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.run();  
     }  
    }  
##
Write a Java program to create Thread using Runnable InterfaceNote: Get double value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        double count=sc.nextDouble();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    } 
##
Write a Java Program to perform cube value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void cube method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    void cube(int n)
    {
        synchronized(this)
        {
            int temp = 1;
            for(int i=1;i<=n;i++)
            { 
                int j=i;
                System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
                try
                {  
                    Thread.sleep(400);  
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            }  
        }
    }  
}
##
Write a Java Program to perform multiplication table  for 5 & 100 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void printTable() in that perform multiplication table2. Create a Two threads "MyThread1" and "MyThread2"  with a member function void run() to call ThreadIn main() access all function using its corresponding Object.
class Table
{  
    synchronized void printTable(int n)
    {
        for(int i=1;i<=5;i++)
        {
            System.out.println(n*i);  
            try
            {  
                Thread.sleep(400);  
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
    }
}
class MyThread1 extends Thread
{
    Table t;  
    MyThread1(Table t)
    {
        this.t=t;  
    }  
    public void run()
    {  
        t.printTable(5);  
    }
}
class MyThread2 extends Thread
{  
    Table t;  
    MyThread2(Table t)
    {
        this.t=t;  
    }  
    public void run()
    {  
        t.printTable(100);  
    }  
}
public class HelloWorld
{
    public static void main(String args[])
    {
        Table obj = new Table();
        MyThread1 t1=new MyThread1(obj);  
        MyThread2 t2=new MyThread2(obj);  
        
        t1.start();  
        t2.start();  
    }  
}
##
Write a Java Program to perform factorial  value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void factorial method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    static synchronized void factorial(int n)
    { 
        int fact=1;
        if (n == 0)    
            fact=1;    
        else  
        {
            for(int i=1;i<=n;i++)
            fact=fact*i;    
        }   
        System.out.println("Factorial for a number " +n+ " :" + fact);
        try
        {  
            Thread.sleep(400);  
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
   }  
}
##
Write a Java Program to display Even number up to the range using Synchronization block for the below Scenario1. Create a Class Table with void Even method in that create Synchronization blockNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
import java.util.*;
class Table
{
    public static synchronized void Even(int n)
    {
        System.out.print("List of Even numbers for "+n+" : ");
        for(int i=1;i<=n;i++)
        {
            if(i%2==0)
            {
                System.out.print(i+" ");
            }
        }
        System.out.println();
        try
        {
            Thread.sleep(400);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
}
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario1. Create a Class Table with void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    void printTable(int n)
    {
        synchronized(this)
        {
            for(int i=1;i<=10;i++)
            {  
                System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                try
                { 
                    Thread.sleep(400);  
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            }
        }
    }  
}
##
Write a Java Program to perform cube value using Synchronization block for the below Scenario1. Create a Class Table with void cube method in that create Synchronization block perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
 class Table
  {
    void cube(int n)
     {
      synchronized(this)
      {
          int temp = 1;
         for(int i=1;i<=n;i++)
         { 
             int j=i;
         System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
         try
         {  
          Thread.sleep(400);  
         }
         catch(Exception e){System.out.println(e);}  
         }  
      }
   }  
  }
##
Write a Java Program to perform cube value using synchronization  method concept  for the below Scenario1. In a Class Table create a synchronized void cube method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
 class Table
  {
   synchronized void cube(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
##
Write a Java Program to perform static synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform Fibonacci series for static synchronization method for the below Scenario1. In a Class Table create a static synchronized void Fibonacci method in that perform Fibonacci OperationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
   static synchronized void fibonacci(int n)
   {
       int  firstTerm = 0, secondTerm = 1;
    System.out.print("Fibonacci Series for " + n + " value:");

    for (int i = 1; i <= n; ++i) {
      System.out.print(firstTerm + ", ");
      // compute the next term
      int nextTerm = firstTerm + secondTerm;
      firstTerm = secondTerm;
      secondTerm = nextTerm; 
    }
    System.out.println(" ");
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
   } 
   
  }
##
Write a Java Program to display odd numbers using Synchronization block for the below Scenario1. Create a Class Table with void odd method in that create synchronization blockNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    void odd(int n)
    {
      synchronized(this)
     {//synchronized block  
     
       int i=1;
     System.out.print("List of odd numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
     
     
     }
   }  
  }
##
Write a Java Program to perform square value using Synchronization block for the below Scenario1. Create a Class Table with void square method in that create Synchronization block perform square operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    void square(int n)
    {
      synchronized(this)
     {//synchronized block  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("square for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
     }
   }  
  }
##
Write a Java Program to display Even number up to the range using static Synchronization block for the below Scenario1. In a Class Table  create a function for displaying Even number up to the range with static synchronization block using void even (int n) functionNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    synchronized static void Even(int n)
    {
      
      int i=2;
     System.out.print("List of Even numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
   }  
  }
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario1. Create a Class Table with void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
    {  
     
     void printTable(int n){
         synchronized(this)
         {
               for(int i=1;i<=10;i++){  
                 System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                 try{  
                  Thread.sleep(400);  
                 }catch(Exception e){System.out.println(e);}  
               } 
         }
      
     }  
    }  
##
Write a Java Program to perform static synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  //example of java synchronized method  
    class Table
    {  
     synchronized void printTable(int n){//synchronized method  
       for(int i=1;i<=10;i++){  
         System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
         try{  
          Thread.sleep(400);  
         }catch(Exception e){System.out.println(e);}  
       }  
      
     }  
    }  
##
Write a Java Program to perform Power table 2 &  8 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void power method in that perform power table  Note :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
   synchronized void power(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=5;i++)
     { 
     System.out.println("value of " +n+ " :" + n*temp);
     temp = n*temp;
     try
     {  
      Thread.sleep(500);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
##
Write a Java Program to perform Synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	public synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform factorial  value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void factorial method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
  {
   static synchronized void factorial(int n)
   {//synchronized method  
     int fact=1;
     if (n == 0)    
      fact=1;    
     else  
     {
       for(int i=1;i<=n;i++)
          fact=fact*i;    
     }   
System.out.println("Factorial for a number " +n+ " :" + fact);
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     
   }  
  }
##
Write a Java Program to perform Arithmetic Exception for voting purpose using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
    static void checkAge(Double age) 
    {
        if(age<18)
            throw new ArithmeticException("Access denied - You must be at least 18 years old.");
        else
            System.out.println("Access granted - You are old enough!");
}
  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
         checkAge(n);
      }
      catch(ArithmeticException e)
      {
          System.out.println("Exception : "+e);
      }
  }
}
##
Write a Java Program to perform NullPointerException using throws .Note: Get String value as input from the user. Calculate the length of the string for user input .If the user entered null character then print the "Exception : java.lang.NullPointerException: Enter some value for the String "else print the statement as "String Length:" 
import java.util.*;
public class Main {
    static void fun(String str) throws NullPointerException
    {
        int n=str.length();
        if (n=='\0')
        {
            throw new NullPointerException("Enter some value for the String");
        }
        else
        {
            System.out.println("String Length : "+n);
        }
    }
    public static void main(String[] args) 
    { 
        Scanner sc=new Scanner(System.in); 
        String str=sc.nextLine();
        try
        {
            fun(str);
        }
        catch(NullPointerException e)
        {
            System.out.println("Exception : "  +e);
        }
    }
}
##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with value "HCL" , Get as input from the user for id,designation and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class staffDetails
{
    final String companyname="HCL";
    String name;
    int Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.next();
        Id=sc.nextInt();
        //des=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
    public static void main(String[] args)
    {
        staffDetails obj=new staffDetails();
        obj.get();
        obj.print();
    }
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when ArrayIndexOutOfBoundsException occur in try block and handled in catch block
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      // array of size 4.
        int[] arr = new int[4];
         
        try
        {
            int i = arr[4];
                 
            // this statement will never execute
            // as exception is raised by above statement
            System.out.println("Inside try block");
        }
         
        catch(ArrayIndexOutOfBoundsException ex)
        {
            System.out.println("Exception caught in catch block");
        }
         
        finally
        {
            System.out.println("finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes String  value as a parameter. If the String length ='\0' , we are throwing the NullPointerException as "Enter some value for the String"    otherwise print a message as "String Length :  "Note: String value as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(String str) 
        {  
            int n=str.length();
            try
            {
            if (n=='\0')
             {  
                 throw new NullPointerException("Enter some value for the String");
             }
        else {
            System.out.println("String Length : "+n);
            }
            }  
            
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            String str=sc.nextLine();
            validate(str);  
                
      }    
    }      
##
Write a Java program for performing exception using throwsNote: Consider a scenario.In Main function use try -catch method  and get the integer input value from the user and print the variable value using throw keyword
import java.util.*;

public class ThrowsExecp {
 
    // This method throws an exception
    // to be handled
    // by caller or caller
    // of caller and so on.
    static void fun() throws IllegalAccessException
    {
        Scanner in=new Scanner(System.in);
        int a=in.nextInt();
        System.out.println("Inside function. ");
        throw new IllegalAccessException(" Entered Input value as:    " +a);
    }
 
    // This is a caller function
    public static void main(String args[])
    {
        try {
            fun();
        }
        catch (IllegalAccessException e) {
            System.out.println("caught in main." +e);
        }
    }
}
##
Write a Java Program to perform ArrayIndexOutOfBoundsException using throws .Note: Consider the size of the array should not exceed 5 .Get Size value from the user. If the value exceed 5 then print " Exception : java.lang.ArrayIndexOutOfBoundsException: Size of the array Should not exceed 5" else print the statement as "Size of the Array : "Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
   static void fun(int n) throws ArrayIndexOutOfBoundsException
  {
      int a[] = new int[n];
    if (n>5)
    {
        
       throw new ArrayIndexOutOfBoundsException("Size of the array Should not exceed 5");
    }
    else {
      System.out.println("Size of the Array : "+n);
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      
      try
      {
      fun(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with value "Amazon" , Get as input from the user for id,designation and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class staffDetails
{
    final String companyname="Amazon";
    String name;
    int Id;
   
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.next();
        Id=sc.nextInt();
        //des=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    staffDetails obj=new staffDetails();
    obj.get();
    obj.print();
}
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes integer age value as a parameter. If the age is less than 18, we are throwing the ArithmeticException as "Person is not eligible to vote"    otherwise print a message as "Person is eligible to vote!!"Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(int age) 
        {  
            try
            {
            if(age<18) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Person is not eligible to vote");    
            }  
            else {  
            System.out.println("Person is eligible to vote!!");  
            }  
            }
            catch(Exception e)
      {
          System.out.println(e);
      }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            int n=sc.nextInt();
            validate(n);  
                
      }    
    }      
##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Create a final class 'Company' with  Name,Id and companyname as its member, make companyname as final variable with value "HCL" , Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Company
{
    final String companyname="HCL";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.get();
    obj.print();
}
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when NullPointerException occur in try block and handled in catch block
public class HelloWorld {
    public static void main(String[] args) 
    {
      
        try
        {
           String str=null;
           System.out.println(str.length());
        }
         
        catch(NullPointerException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the checkEligibilty() method that takes integer  stuage,  and stuweight as a parameter. If the age is less than 12 and weight >40 , we are throwing the ArithmeticException as "Student is not eligible for registration"    otherwise print a message as "Student Entry is Valid!!"Note: Get the Input for age and weight from the User
import java.util.Scanner;

public class HelloWorld
{
   
       static void checkEligibilty(int stuage, int stuweight)
      { 
           try
    {
      if((stuage<12) && (stuweight<40)) 
      {
         throw new ArithmeticException("Student is not eligible for registration"); 
      }
      else if((stuweight>40) &&(stuage<12))
      {
         throw new ArithmeticException("Student is not eligible for registration"); 
        
      }
      else
      {
          System.out.println("Student Entry is Valid!!");
      }
      }
      catch(Exception e)
      {
          System.out.println(e);
      }
   } 

   public static void main(String args[])
   { 
     System.out.println("Welcome to the Registration process!!");
     Scanner sc=new Scanner(System.in);
     int stuage=sc.nextInt();
     int stuweight=sc.nextInt();
     checkEligibilty(stuage,stuweight); 
     System.out.println("Have a nice day.."); 
 } 
}
##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Write a Java Program to perform NullPointerException using throws .Note: Get String value as input from the user. Calculate the length of the string for user input .If the user entered null character then print the "Exception : java.lang.NullPointerException: Enter some value for the String "else print the statement as "String Length:" 
import java.util.*;
public class Main 
{
    
   static void fun(String str) throws NullPointerException
  {
      int n=str.length();
     
    if (n=='\0')
    {
        
       throw new NullPointerException("Enter some value for the String");
    }
    else {
      System.out.println("String Length : "+n);
    }
  }

  public static void main(String[] args) 
  { 
     Scanner sc=new Scanner(System.in); 
     String str=sc.nextLine();
      try
      {
      fun(str);
      }
      catch(NullPointerException e)
      {
          System.out.println("Exception : "  +e);
      }
     
  }
}
##
Create a final class 'Student' with  Name,Id and Year as its member, make  Year as final variable with value "3th Year" , Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Student
{
    final String Year="3th Year";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: "+Year);
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when NumberFormatException occur in try block and handled in catch block
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      Scanner sc=new Scanner(System.in);
       try
        {
           String str=sc.nextLine();
           int a=Integer.parseInt(str);
           System.out.println("Result:" +a);
        }
         
        catch(NumberFormatException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a main() for the class named 'Test' to access class 'date' and display in-date of an employee(Time be in format Day:month:year).get the input from user
public class Test{
    public static void main(String[] args)
    {//Write your code here
        Clock obj = new Clock();
        obj.hours = 18;
        obj.mins = 30;
        obj.sec = 15;
        System.out.println(obj.hours+":"+obj.mins+":"+obj.sec);
    }
}
##
Write a java program left shift the given number upto given times.
public class Mark{
    double m1,m2,m3,tot,per;
    public static void main(String args[]){
        Mark obj = new Mark();
        obj.m1 = 65.5;
        obj.m2 = 51.5;
        obj.m3 = 72.0;
        obj.tot = (obj.m1+obj.m2+obj.m3);
        obj.per = obj.tot / 3;
        System.out.println("Total Mark="+obj.tot+" "+"Percentage="+obj.per+"%");
    }
}
##
Write a java program to perform multiple catch using multiple Exception(Rule:1.Get array Index value as Input.( Index Value <5)2.If the array Index value is less than 5 then print as "Valid Statement :  0"3.If the Index value >5 then print " IndexOutOfBoundsException : java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5"4.If the Index value as String then print "NumberFormatException : java.lang.NumberFormatException: For input string: "string"
import java.util.*;
class ListOfNumbers {
    public int[] arr = new int[5];
    void writeList()
    {
        Scanner sc=new Scanner(System.in);
        try
        {
            //Write the code for try block
            int n=Integer.parseInt(sc.nextLine());
            System.out.println("Valid Statement :" +arr[n]);
            
        }
        catch (NumberFormatException e1)
        {
            System.out.println("NumberFormatException : " + e1);
        }
        catch (IndexOutOfBoundsException e2)
        {
            System.out.println("IndexOutOfBoundsException : " + e2);
        }
    }
}
public class Main {
  public static void main(String[] args) {
    ListOfNumbers list = new ListOfNumbers();
    list.writeList();
  }
}
##
Write a Java Program for handling ArrayIndexOutOfBounds ExceptionNote: 1. Get Index value n as input from the user and assign value as 72.Size of the array =10
import java.util.*;
public class Example1
{
   public static void main(String args[])
   {
       Scanner sc = new Scanner(System.in);
       int n=sc.nextInt();
       try
       {
            int a[]=new int[10];
            a[n]=7;
            System.out.println("Value: "+a[n]);
       }
       catch(ArrayIndexOutOfBoundsException e1)
      {
          System.out.println("ArrayIndexOutOfBounds");
      }
   }
}
##
Write a java program to implement compile time polymorphism.(Use single argument for displaying 5 and * as 10 times)
class Pattern {
    public void display()
    {
        for (int i = 0; i < 10; i++) 
        {
            System.out.print("5");
        }
    }
    public void display(char symbol)
    {
        for (int i = 0; i < 10; i++)
        {
            System.out.print(symbol);
        }
    }
}
public class HelloWorld{

    public static void main(String []args)
    {
        Pattern d1 = new Pattern();
        d1.display();
        System.out.println("\n");
        d1.display('#');
    }
}
##
Write a Java Program for run time polymorphism by creating a class named Shape that contains a empty method named print Area().Provide two classes named Rectangle and triangle such that each one of the classes extends the class Shape. Each one of the classes contains only the method print Area () that prints the area of the given shapeNote: Get Input from the User and pass as arguments for Area() Function
import java.util.*;
class Shape
{
    void draw(int a,int b){ }  
}  
class Rectangle extends Shape
{  
    void draw(int a,int b)
    {
        int area=(a*b);
        System.out.println("Area of Rectangle:" +area);}  
    }  
class Triangle extends Shape
{
    void draw(int a,int b)
    {
        int area=(a*b)/2;
        System.out.println("Area of Triangle:" +area);}  
    }  
public class Main
{
	public static void main(String[] args) 
	{
        Shape s;  
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        
        s=new Rectangle();  
        s.draw(a,b);  
        
        s=new Triangle();  
        s.draw(a,b);  
    }
}
##
Write a java program to handle nested try Statement .Note:1, In Outer try block -perform Arithmetic Exception -print message as "Arithmetic exception " .Get Input Value for the Integer a & b from the User.2. In Inner try block -perform Nullpointer  Exception- . Assign String variable as null
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        try
        {
            int a =sc.nextInt();
            int b=sc.nextInt();
            int c=a/b;
            System.out.println("Result:" +c);
            try
            {
                String str=null;
                System.out.println("Innerblock :" +str.length());
            }
            catch(NullPointerException ex1)
            {
                System.out.println("NullPointerException");
            }
        }
        catch (ArithmeticException ex2)
        {
            System.out.println("Sorry! Number not divisible by zero");
        }
    }
}
##
Write a java program for run time polymorphism. Consider a scenario where Bank is a class that provides a method to get the rate of interest. However, the rate of interest may differ according to banks. For example, SBI, ICICI, and AXIS banks are providing 8.4%, 7.3%, and 9.7% rate of interest.Note: Bank act as a base class, SBI, ICICI, and AXIS act as a Derived Class .Get Person name and Age as Input from the User
import java.util.*;
class Bank{  
float getRateOfInterest(){return 0;}  
}  
class SBI extends Bank{  
float getRateOfInterest(){return 8.4f;}  
}  
class ICICI extends Bank{  
float getRateOfInterest(){return 7.3f;}  
}  
class AXIS extends Bank{  
float getRateOfInterest(){return 9.7f;}  
}  
public class TestPolymorphism{  
public static void main(String args[]){  
Bank b;  
Scanner sc=new Scanner(System.in);
String name=sc.nextLine();
int age=sc.nextInt();
b=new SBI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("SBI Rate of Interest: "+b.getRateOfInterest());  
b=new ICICI();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("ICICI Rate of Interest: "+b.getRateOfInterest());  
b=new AXIS();  
System.out.println("Name :"+name);
System.out.println("Age :"+age);
System.out.println("AXIS Rate of Interest: "+b.getRateOfInterest());  
}  
} 
##
Write a Java program for solving the error using Exception HandlingRules:1.Get array Index value as input2. If the index value less than 4 then print the value  else print "Array value should be less than 4"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
         
        try  
        {  
        int arr[]= {1,3,5,7};  
        int n=sc.nextInt();
        System.out.println(arr[n]); //may throw exception   
        }  
            // handling the array exception  
        catch(ArrayIndexOutOfBoundsException e)  
        {  
            System.out.println("Array value should be less than 4");  
        }  
        
          
    }
}
##
Write a java program to add two numbers using Method Overloading(Compile time polymorphism)(Note: Use integer and double data type)
import java.util.*;

public class HelloWorld{

        void sum(int a,int b){
    System.out.println(a+b);
   }
  void sum(double a,double b){
    System.out.println(a+b);
  }

  public static void main(String []args)
    {
  HelloWorld obj=new HelloWorld();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();
  double c=sc.nextDouble();
  double d=sc.nextDouble();
  obj.sum(a,b);
  obj.sum(c,d);
     }
}
##
Write a java program to handle nested try Statement .Note:1, In Outer try block -perform Arithmetic Exception -print message as "Sorry! Division by zero isn't feasible!"2. In Inner try block -perform Nullpointer  Exception- set String value as "null"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class HelloWorld {
    public static void main(String[] args) 
    {
     Scanner sc=new Scanner(System.in);
      try {
        
         int res=100/n;
         // another try block
         try {
               String str=null;
               //write the remaining code
             }
        catch(NullPointerException ex1) 
        {
         System.out.println("NullPointerException");
        }
      }
      catch (ArithmeticException ex2) 
      {
            System.out.println("Sorry! Division by zero isn't feasible!");
     }
   }
}
##
Write a java program to demonstrate multiple catch blocks for multiple exceptionsRule:1.Get the variable "a" as integer input and perform the operation as 10%a2.If  a is not equal to 0 then print value of a and  If a is equal to 0 then print "Arithmetic Exception : java.lang.ArithmeticException: / by zero"3.If a as String variable then print "Number Format Exception java.lang.NumberFormatException: For input string: "java"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner scn = new Scanner(System.in);
        try
        {
            int n = Integer.parseInt(scn.nextLine());
           
            if (10%n == 0)
                System.out.println("Value: " +n);
        }
        catch (ArithmeticException ex)
        {
            System.out.println("Arithmetic Exception : " +ex);
        }
        catch (NumberFormatException ex)
        {
            System.out.println("Number Format Exception " + ex);
        }
    }
}
##
Write a java program to implement compile time polymorphism.(Use single argument for displaying integer and double values as 10 times)Note : Get Integer and Double values from the User
import java.util.*;
class Pattern {

  // method without parameter
  public void display(int a) {
    for (int i = 0; i < 10; i++) {
      System.out.print(a);
    }
  }

  // method with single parameter
  public void display(double b) {
    for (int i = 0; i < 10; i++) {
      System.out.print(b);
    }
  }
}
public class HelloWorld{

     public static void main(String []args)
     {
        Pattern d1 = new Pattern();
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        double f=sc.nextDouble();

    // call method without any argument
    d1.display(a);
    System.out.println("\n");

    // call method with a single argument
    d1.display(f);
     }
}
##
Write a Java Program for handling division by zero exception.Note: Get num1 & num2 as integer input variable from the user.
import java.util.*;
public class Example1
{
   public static void main(String args[])
   {
      Scanner sc=new Scanner(System.in);
      try{
         int num1=sc.nextInt();
         int num2=sc.nextInt();
         int output=num1/num2;
         System.out.println ("Result: "+output);
      }
      catch(ArithmeticException e){
         System.out.println ("You Shouldn't divide a number by zero");
      }
   }
}
##
Write a java program for run time polymorphism.Consider a scenario method showcase() is displaying different messages depending on which type of object it is associated with. When it is associated with the “Parents”  class, it is showing messages as "I am Parent". When it is associated with the “Children” type, it shows messages as "I am Child".
class Parents {
public void showcase () {
System.out.println("I am Parent");
}
}
class Children extends Parents {
@Override
public void showcase () {
System.out.println("I am Child");
}
}
public class RunTimePolymorphism {
public static void main(String args[]) {
Parents superObject = new Parents();
superObject.showcase(); //method of super class or parent class is called
Parents subObject = new Children(); // upcasting
subObject.showcase();//method of sub class or child class is called by Parent reference, this is called "Run time Polymorphism"

}
}
##
Write a java program to handle nested try Statement .Note:1, In Outer try block -perform NumberFormatException -print message as "Sorry! String Value can not convert to Integer" .Get String Input Value from the User.2. In Inner try block -perform Nullpointer  Exception- . Assign String variable as null
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
     Scanner sc=new Scanner(System.in);
      try {
         String str1=sc.nextLine();
           int a=Integer.parseInt(str1);
           System.out.println("Result:" +a);
         // another try block
         try {
               String str=null;
               System.out.println("Innerblock :" +str.length());
         }
        catch(NullPointerException ex1) {
         System.out.println("NullPointerException");
      }
      }
      
      
       catch (NumberFormatException ex2) {
            System.out.println("Sorry! String Value can not convert to Integer");
         }
   }
}
##
Write a java program to perform ArrayIndexOutOfBounds Exception  using  Multiple CatchRules:(i) Use atleast 3 catch(ii) Get Array index value from the User
import java.util.*;
public class MultipleCatchBlock3 {

	public static void main(String[] args) {
		
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		   try{  
			    int a[]=new int[5];  
			     
			     System.out.println("Value:" +a[n]);
			   }  
			   catch(ArithmeticException e)
		          {
				   System.out.println("Arithmetic Exception occurs");
				  }  
			   catch(ArrayIndexOutOfBoundsException e)
		          {
				   System.out.println("ArrayIndexOutOfBounds Exception occurs");
				  }  
			   catch(Exception e)
		          {
				   System.out.println("Parent Exception occurs");
				  }  		  
			   System.out.println("rest of the code");  
	}
}
##
Write a Java program for solving the error using Exception HandlingNote: Read the input from the User
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
           try
           {
               int a=sc.nextInt();
             int b=sc.nextInt();
             int c=a/b;
             System.out.println("Result: " +c); 
           }
               catch(ArithmeticException e)  
        {  
            System.out.println("Arithmetic Exception: Number should not divide by zero");  
        }  
    }
}
##
Write a java program to perform ArrayIndexOutOfBounds Exception  using  Multiple CatchRules:(i) Use atleast 3 catch
public class MultipleCatchBlock3 {

	public static void main(String[] args) {
		
		   try{  
			    int a[]=new int[5];  
			     
			    System.out.println(a[10]);
			   }  
			   catch(ArithmeticException e)
		          {
				   System.out.println("Arithmetic Exception occurs");
				  }  
			   catch(ArrayIndexOutOfBoundsException e)
		          {
				   System.out.println("ArrayIndexOutOfBounds Exception occurs");
				  }  
			   catch(Exception e)
		          {
				   System.out.println("Parent Exception occurs");
				  }  		  
			   System.out.println("rest of the code");  
	}
}
##
Write a java Program for run time polymorphism in multilevel inheritance. In this example, we have taken two levels of inheritance into account. The method sip() is displaying different messages depending on which type of object it is associated with.Note: Create Human as Parent class ,Man as child class for Human ,Baby as child class for Man class
class Human{
void sip() {
System.out.println("Human is sipping");
}
}
class Man extends Human{
void sip(){
System.out.println("Man is sipping soup");
}
}
class Baby extends Man{
void sip(){
System.out.println("Baby is sipping milk");
}
}
public class RunTimePolymorphism {
public static void main(String args[]){
Human superObject=new Human();
Human subObject=new Man();  // // upcasting : first level of heritance
Human babyObject=new Baby();  // // upcasting : second level of heritance
superObject.sip();
subObject.sip();  //run time polymorphism happening in first level of heritance
babyObject.sip(); //run time polymorphism happening in second level of heritance
}
}
##
Write a java program to handle nested try Statement .Note:1. In Outer try block -perform ArrayIndexOutofBounds Exception- Get Index value index_value as Input from the user2, In Inner try block -perform Arithmetic Exception -print message as "Sorry! Division by zero isn't feasible!"3.If the index_value is in between 1 to 5 then print "Valid Statement : 0"
import java.util.*;
class Exception2 
{
   public static void main(String args[])
   {
     Scanner sc=new Scanner(System.in);
      try {
         int a[]=new int[5];
       
         int n=sc.nextInt();
          System.out.println("Valid Statement :" +a[n]);
         // another try block
         try {
                 int res = 100/ n;
         }
         catch (ArithmeticException ex2) {
            System.out.println("Sorry! Division by zero isn't feasible!");
         }
      }
      catch (ArrayIndexOutOfBoundsException ex1) {
         System.out.println("ArrayIndexOutOfBoundsException");
      }
   }
}
##
Write a java program to perform sum of two numbers and three numbers using Method Overloading(Compile time polymorphism)
import java.util.*;
class Calculation{
  
 void sum(int a,int b)
  {
     System.out.println(a+b);
  }
  void sum(int a,int b,int c){
     System.out.println(a+b+c);
   }
  
}


public class HelloWorld{

     public static void main(String []args)
     {
       
  Calculation obj=new Calculation();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();
  int c=sc.nextInt();
  obj.sum(a,b);
  obj.sum(a,b,c);
}
}
##
Write a java program to handle nested try statement for the following Scenario1.In the Outer try block, initialize array variable "str" and assign value as {30, 45, 60, 75, 90, 105, 120, 140, 160, 200}; and get the index value from the user, print the element according to the index value2. In the Inner try block perform "Arithmetic Exception"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
       Scanner sc=new Scanner(System.in);
          try {
         int a[] = {30, 45, 60, 75, 90, 105, 120, 140, 160, 200};
         // displaying element at index 8
         int n=sc.nextInt();
         System.out.println("Element at index "+n+" = " +a[n]);
         // another try block
         try {
            System.out.println("Division");
            int res = 100/ 0;
         }
         catch (ArithmeticException ex2) {
            System.out.println("Sorry! Division by zero isn't feasible!");
         }
      }
      catch (ArrayIndexOutOfBoundsException ex1) {
         System.out.println("ArrayIndexOutOfBoundsException");
      }
   }
}
##
Write a Java program for run time polymorphism by creating two classes Bike and Scooter. Scooter class extends Bike class and overrides its run() methodNote:Bike as Parent Class and Scooter as Child Class. Get Company name from the User
import java.util.*;
class Bike{  
  void run(String name)
  {
      System.out.println("Company Name: "+name);
      System.out.println("Bike class");}  
}  
class Scooter extends Bike{  
  void run(String name)
  {
      System.out.println("Company Name: "+name);
      System.out.println("Scooter class");}  
}
public class Main
{
  
  public static void main(String args[])
  {  
    Bike b = new Scooter();//upcasting  
    Scanner sc=new Scanner(System.in);
    String name=sc.nextLine();
    b.run(name);  
  }  
} 
##
Write a Java Program for NullPointerExceptionNote: Assign String variable value as null
public class Exception2 
{
   public static void main(String args[])
   {
	try{
		String str=null;
		System.out.println (str.length());
	}
        catch(NullPointerException e){
		System.out.println("NullPointerException..");
	}
   }
}
##
Write a java Program to display the arguments using method overloading.Note: Use 2 Methods. Method1 -display the Integer values Method2 -Display the Double values
import java.util.*;
class ClassMain{
	
	void disp(int number1, int number2){
		System.out.println ("Arguments:" + number1 + "," + number2);
	}
void disp(double number) {
		System.out.println("\nArgument:" + number);
	
	}
}
public class HelloWorld{

     public static void main(String []args)
     {
       
  ClassMain obj=new ClassMain();
  Scanner sc=new Scanner(System.in);
  int a=sc.nextInt();
  int b=sc.nextInt();

Double d=sc.nextDouble();
 
  obj.disp(a,b);
  obj.disp(d);
}
}
##
Write a java program for solving the following errorRules:1.Use atleast 3 Catch statement2.Assign the String variable as null
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

public class HelloWorld {
    public static void main(String[] args)
    {
         try{    
                String s=null;  
                System.out.println(s.length());  
               }    
               catch(ArithmeticException e)  
                  {  
                   System.out.println("Arithmetic Exception occurs");  
                  }    
               catch(ArrayIndexOutOfBoundsException e)  
                  {  
                   System.out.println("ArrayIndexOutOfBounds Exception occurs");  
                  }    
               catch(NullPointerException e)  
                  {  
                   System.out.println("Exception: " +e);  
                  }             
               //System.out.println("rest of the code");    
    }
}
##
Write a java program for solving the following errorRules:1.Use atleast 3 Catch statement2.Assign the String variable as null
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
public class HelloWorld {
    public static void main(String[] args)
    {
         try{    
                String s=null;  
                System.out.println(s.length());  
               }    
               catch(ArithmeticException e)  
                  {  
                   System.out.println("Arithmetic Exception occurs");  
                  }    
               catch(ArrayIndexOutOfBoundsException e)  
                  {  
                   System.out.println("ArrayIndexOutOfBounds Exception occurs");  
                  }    
               catch(NullPointerException e)  
                  {  
                   System.out.println("Exception: " +e);  
                  }             
               //System.out.println("rest of the code");    
    }
}
##
Write a Java program for solving the error using Exception HandlingRules:1.Get array Index value as input2. If the index value less than 4 then print the value  else print "Array value should be less than 4"
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
         
        try  
        {  
        int arr[]= {1,3,5,7};  
        int n=sc.nextInt();
        System.out.println(arr[n]); //may throw exception   
        }  
            // handling the array exception  
        catch(ArrayIndexOutOfBoundsException e)  
        {  
            System.out.println("Array value should be less than 4");  
        }      
    }
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when ArithmeticException occur in try block and handled in catch blockRule: Get dividend value from the user
import java.util.*;
public class A
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        try
        {
            int a=100;
            int b=sc.nextInt();
            int c=a/b;
            System.out.println("Valid Statement :"+c);
        }
        catch(ArithmeticException e)
        {
            System.out.println("Exception: "+e);
        }
        finally
        {
            System.out.println("Finally block executed");
        }
        System.out.println("Outside try-catch-finally clause");
    } 
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes integer age value as a parameter. If the age is less than 18, we are throwing the ArithmeticException as "Person is not eligible for Opening Bank Account"    otherwise print a message as "Person is eligible to Open Bank Account!!"
import java.util.Scanner;
public class HelloWorld {
    static void validate(int age)  
    {
        try
        {
            if (age<18)
                throw new ArithmeticException("Person is not eligible for Opening Bank Account");
            else
                System.out.println("Person is eligible to Open Bank Account!!");
        }
        catch (Exception e1)
        {
            System.out.println(e1);
        }
    } 
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        validate(sc.nextInt());
    }    
}
##
Write a Java Program to perform Arithmetic Exception for voting purpose using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
    static void checkAge(Double age) 
    {
        if(age<18)
            throw new ArithmeticException("Access denied - You must be at least 18 years old.");
        else
            System.out.println("Access granted - You are old enough!");
}
  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
         checkAge(n);
      }
      catch(ArithmeticException e)
      {
          System.out.println("Exception : "+e);
      }
  }
}
##
Write a Java Program to perform NullPointerException using throws .Note: Get String value as input from the user. Calculate the length of the string for user input .If the user entered null character then print the "Exception : java.lang.NullPointerException: Enter some value for the String "else print the statement as "String Length:" 
import java.util.*;
public class Main {
    static void fun(String str) throws NullPointerException
    {
        int n=str.length();
        if (n=='\0')
        {
            throw new NullPointerException("Enter some value for the String");
        }
        else
        {
            System.out.println("String Length : "+n);
        }
    }
    public static void main(String[] args) 
    { 
        Scanner sc=new Scanner(System.in); 
        String str=sc.nextLine();
        try
        {
            fun(str);
        }
        catch(NullPointerException e)
        {
            System.out.println("Exception : "  +e);
        }
    }
}
##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with value "HCL" , Get as input from the user for id,designation and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class staffDetails
{
    final String companyname="HCL";
    String name;
    int Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.next();
        Id=sc.nextInt();
        //des=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
    public static void main(String[] args)
    {
        staffDetails obj=new staffDetails();
        obj.get();
        obj.print();
    }
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when ArrayIndexOutOfBoundsException occur in try block and handled in catch block
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      // array of size 4.
        int[] arr = new int[4];
         
        try
        {
            int i = arr[4];
                 
            // this statement will never execute
            // as exception is raised by above statement
            System.out.println("Inside try block");
        }
         
        catch(ArrayIndexOutOfBoundsException ex)
        {
            System.out.println("Exception caught in catch block");
        }
         
        finally
        {
            System.out.println("finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes String  value as a parameter. If the String length ='\0' , we are throwing the NullPointerException as "Enter some value for the String"    otherwise print a message as "String Length :  "Note: String value as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(String str) 
        {  
            int n=str.length();
            try
            {
            if (n=='\0')
             {  
                 throw new NullPointerException("Enter some value for the String");
             }
        else {
            System.out.println("String Length : "+n);
            }
            }  
            
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            String str=sc.nextLine();
            validate(str);  
                
      }    
    }      
##
Write a Java program for performing exception using throwsNote: Consider a scenario.In Main function use try -catch method  and get the integer input value from the user and print the variable value using throw keyword
import java.util.*;

public class ThrowsExecp {
 
    // This method throws an exception
    // to be handled
    // by caller or caller
    // of caller and so on.
    static void fun() throws IllegalAccessException
    {
        Scanner in=new Scanner(System.in);
        int a=in.nextInt();
        System.out.println("Inside function. ");
        throw new IllegalAccessException(" Entered Input value as:    " +a);
    }
 
    // This is a caller function
    public static void main(String args[])
    {
        try {
            fun();
        }
        catch (IllegalAccessException e) {
            System.out.println("caught in main." +e);
        }
    }
}
##
Write a Java Program to perform ArrayIndexOutOfBoundsException using throws .Note: Consider the size of the array should not exceed 5 .Get Size value from the user. If the value exceed 5 then print " Exception : java.lang.ArrayIndexOutOfBoundsException: Size of the array Should not exceed 5" else print the statement as "Size of the Array : "Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
   static void fun(int n) throws ArrayIndexOutOfBoundsException
  {
      int a[] = new int[n];
    if (n>5)
    {
        
       throw new ArrayIndexOutOfBoundsException("Size of the array Should not exceed 5");
    }
    else {
      System.out.println("Size of the Array : "+n);
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      int n=sc.nextInt();
      
      try
      {
      fun(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Create a final class 'StaffDetails' with  Name,Id, as its member, make companyname as final variable with value "Amazon" , Get as input from the user for id,designation and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class staffDetails
{
    final String companyname="Amazon";
    String name;
    int Id;
   
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.next();
        Id=sc.nextInt();
        //des=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    staffDetails obj=new staffDetails();
    obj.get();
    obj.print();
}
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes integer age value as a parameter. If the age is less than 18, we are throwing the ArithmeticException as "Person is not eligible to vote"    otherwise print a message as "Person is eligible to vote!!"Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(int age) 
        {  
            try
            {
            if(age<18) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Person is not eligible to vote");    
            }  
            else {  
            System.out.println("Person is eligible to vote!!");  
            }  
            }
            catch(Exception e)
      {
          System.out.println(e);
      }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            int n=sc.nextInt();
            validate(n);  
                
      }    
    }      
##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Create a final class 'Company' with  Name,Id and companyname as its member, make companyname as final variable with value "HCL" , Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Company
{
    final String companyname="HCL";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Employee Details are,"+"\nId is "+Id+"\nName is "+name+"\nCompany Name: "+companyname);
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.get();
    obj.print();
}
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when NullPointerException occur in try block and handled in catch block
public class HelloWorld {
    public static void main(String[] args) 
    {
      
        try
        {
           String str=null;
           System.out.println(str.length());
        }
         
        catch(NullPointerException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the checkEligibilty() method that takes integer  stuage,  and stuweight as a parameter. If the age is less than 12 and weight >40 , we are throwing the ArithmeticException as "Student is not eligible for registration"    otherwise print a message as "Student Entry is Valid!!"Note: Get the Input for age and weight from the User
import java.util.Scanner;

public class HelloWorld
{
   
       static void checkEligibilty(int stuage, int stuweight)
      { 
           try
    {
      if((stuage<12) && (stuweight<40)) 
      {
         throw new ArithmeticException("Student is not eligible for registration"); 
      }
      else if((stuweight>40) &&(stuage<12))
      {
         throw new ArithmeticException("Student is not eligible for registration"); 
        
      }
      else
      {
          System.out.println("Student Entry is Valid!!");
      }
      }
      catch(Exception e)
      {
          System.out.println(e);
      }
   } 

   public static void main(String args[])
   { 
     System.out.println("Welcome to the Registration process!!");
     Scanner sc=new Scanner(System.in);
     int stuage=sc.nextInt();
     int stuweight=sc.nextInt();
     checkEligibilty(stuage,stuweight); 
     System.out.println("Have a nice day.."); 
 } 
}
##
Write a Java Program to perform Arithmetic Exception for Kindergarden Eligibility using throws .Note: Consider a Scenario where int Age get as input from the user. Handle Exception using try & catch method for calling the function
import java.util.*;
public class Main 
{
  
  static void checkAge(double age) throws ArithmeticException {
    if (age < 3.5) {
      throw new ArithmeticException("Access denied - You must be at least above 3.5 years old for Kindergarden");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) 
  { 
      Scanner sc=new Scanner(System.in);
      double n=sc.nextDouble();
      try
      {
      checkAge(n);
      }
      catch(Exception e)
      {
          System.out.println("Exception : "  +e);
      }
     // Set age to 15 (which is below 18...)
  }
}
##
Write a Java Program to perform NullPointerException using throws .Note: Get String value as input from the user. Calculate the length of the string for user input .If the user entered null character then print the "Exception : java.lang.NullPointerException: Enter some value for the String "else print the statement as "String Length:" 
import java.util.*;
public class Main 
{
    
   static void fun(String str) throws NullPointerException
  {
      int n=str.length();
     
    if (n=='\0')
    {
        
       throw new NullPointerException("Enter some value for the String");
    }
    else {
      System.out.println("String Length : "+n);
    }
  }

  public static void main(String[] args) 
  { 
     Scanner sc=new Scanner(System.in); 
     String str=sc.nextLine();
      try
      {
      fun(str);
      }
      catch(NullPointerException e)
      {
          System.out.println("Exception : "  +e);
      }
     
  }
}
##
Create a final class 'Student' with  Name,Id and Year as its member, make  Year as final variable with value "3th Year" , Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Student
{
    final String Year="3th Year";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: "+Year);
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}
##
Write a Java program to demonstrate control flow of try-catch-finally clause when NumberFormatException occur in try block and handled in catch block
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) 
    {
      Scanner sc=new Scanner(System.in);
       try
        {
           String str=sc.nextLine();
           int a=Integer.parseInt(str);
           System.out.println("Result:" +a);
        }
         
        catch(NumberFormatException ex)
        {
            System.out.println("Exception: " +ex);
        }
         
        finally
        {
            System.out.println("Finally block executed");
        }
         
        // rest program will be executed
        System.out.println("Outside try-catch-finally clause");
    }
}
##
Write a java program to perform user defined exception using throw concept. Consider, we have created the validate() method that takes double age value as a parameter. If the age is less than 3.5, we are throwing the ArithmeticException as "Child is not eligible for KinderGarden"    otherwise print a message as "Child is eligible for KinderGarden!!"Note: int age as an input variable from the user
// Online Java Compiler
// Use this editor to write, compile and run your Java code online

import java.util.Scanner;

public class HelloWorld {
   
             
        public static void validate(double age) 
        {  
            try
            {
            if(age<3.5) {  
                //throw Arithmetic exception if not eligible to vote  
                throw new ArithmeticException("Child is not eligible for KinderGarden");    
            }  
            else {  
            System.out.println("Child is eligible for KinderGarden!!");  
            }  
            }
            catch(Exception e)
      {
          System.out.println(e);
      }
        }  
        //main method  
        public static void main(String args[]){  
            //calling the function
            Scanner sc=new Scanner(System.in);
            double n=sc.nextDouble();
            validate(n);  
                
      }    
    }      
##
Create a final class 'Student' with  Name,Id and Year,Schoolname  as its member, make  Year and School name as final variable with value "3th Year" & "ABC School", Get as input from the user for id and name and write  print() to display its member in the Output. Create a Main class and access print() of Company class.
import java.util.*;
final class Student
{
    final String Year="3th Year";
    final String schoolname="ABC School";
    String name;
    String Id;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        name=sc.nextLine();
        Id=sc.next();
    }
    void print()
    {
        System.out.println("Student Details are,"+"\nId is "+Id+"\nName is "+name+"\nYear: "+Year+"\nSchool: " +schoolname);
    }
}
public class Main{
public static void main(String[] args)
{
    Student obj=new Student();
    obj.get();
    obj.print();
}
}
##
Write a Java program to count the vowels and consonant in the given string by calling run methodNote: Get the value from the User
import java.util.*;
public class Multi implements Runnable
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String str = sc.nextLine();  
        int vCount = 0, cCount = 0;    
        
        str = str.toLowerCase();    
        
        for(int i = 0; i < str.length(); i++)
        {
            if(str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u') 
            {    
                vCount++;    
            }    
            else if(str.charAt(i) >= 'a' && str.charAt(i)<='z')
            {      
                cCount++;    
            }    
        }    
        System.out.println("Number of vowels: " + vCount);    
        System.out.println("Number of consonants: " + cCount);   
    }  
    public static void main(String args[])
    {  
        Multi m1=new Multi(); 
        Thread t1 =new Thread(m1); 
        t1.run();  
    }  
}
##
Write a java program for set the priority and name of the current thread.Note : Read the threadname from the UserRead the priority value from the User
import java.util.*;
public class A implements Runnable
{
    public void run()
    {
        System.out.println(Thread.currentThread()); 
    }
    public static void main(String[] args) 
    {
        A a = new A();
        Scanner sc=new Scanner(System.in);
        String thname=sc.nextLine();
        int pri=sc.nextInt();
        Thread t = new Thread(a, thname);
        t.setPriority(pri);
        System.out.println("Priority of Thread: " +t.getPriority());
        System.out.println("Name of Thread: " +t.getName());
        t.start();
    }
}
##
Write a Java program to create Thread using extends In run method get the Patient details as patient name and patient Id as String variable from the user and print the value in Output screen
import java.util.*;
public class Multi extends Thread
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Patient Name: " +sname);  
        System.out.println("Patient ID: " +rollno);  
    }  
    public static void main(String args[])
    {
        Multi t1=new Multi();  
        t1.start();  
    }  
}
##
Write a Java program to create Thread using extends In run method get the student name and roll number from the user and print the value
import java.util.*;
public class Multi extends Thread
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        String sname=sc.nextLine();
        int rollno = sc.nextInt();
        System.out.println("Student Name: " +sname);  
        System.out.println("Roll No: " +rollno);  
    }  
    public static void main(String args[])
    {
        Multi t1=new Multi();  
        t1.start();  
    }  
}
##
Write a Java program to perform whether the given number is Positive or Negative ,zero by creating Thread using Runnable Interface.Note: Get the value from the User
import java.util.*;
public class Multi implements Runnable
{  
    Scanner sc=new Scanner(System.in);
    public void run()
    {  
        int num=sc.nextInt();
        if(num>0)  
        {  
            System.out.println("The number is positive.");  
        }
        else if(num<0)  
        {  
            System.out.println("The number is negative.");  
        }
        else  
        {  
            System.out.println("The number is zero.");  
        }
    }
    public static void main(String args[])
    {  
        Multi m1=new Multi(); 
        Thread t1 =new Thread(m1); 
        t1.run();  
    }  
}
##
Write a Java program to perform whether the given number is palindrome or not by creating Thread using Runnable Interface.Note: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int number=sc.nextInt();
        int remainder=0,reverse=0,temp;
        temp=number;
       while(number != 0)   
        {  
         remainder = number % 10;  
        reverse = reverse * 10 + remainder;  
        number = number/10;  
        }  
        if(temp==reverse)
        {
        System.out.println("The number " +temp+" is Palindrome");  
        }
        else
        {
              System.out.println("The number " +temp+" is not a Palindrome");  
        }
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using extendsNote: Get Thread integer number  from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int count=sc.nextInt();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Consider two threads t1 and t2Note : Read the threadname from the UserRead the priority value from the user for both the threads
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String first=sc.nextLine();
 String second=sc.nextLine();
 Thread t1 = new Thread(a, first);
 Thread t2 = new Thread(a, second);
 
 int t1pr=sc.nextInt();
 int t2pr=sc.nextInt();
 t1.setPriority(t1pr); // Setting the priority of first thread.
 t2.setPriority(t2pr); // Setting the priority of second thread.
 
 
 t1.start();
 t2.start();
 
  }
}
##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.Note: Get Thread integer number  from the User
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to perform whether the given number is palindrome or not by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int number=sc.nextInt();
        int remainder=0,reverse=0,temp;
        temp=number;
       while(number != 0)   
        {  
         remainder = number % 10;  
        reverse = reverse * 10 + remainder;  
        number = number/10;  
        }  
        if(temp==reverse)
        {
        System.out.println("The number " +temp+" is Palindrome");  
        }
        else
        {
              System.out.println("The number " +temp+" is not a Palindrome");  
        }
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a Java program to add two numbers by creating Thread using Runnable Interface.Note: Get the value of int first and second variable as Input from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int a=sc.nextInt();
        int b=sc.nextInt();
        int sum=a+b;
        System.out.println("Result: " +sum);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a Java program to count the number of characters in the given string by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String string = sc.nextLine();    
        int count = 0;    
        //Counts each character except space    
        for(int i = 0; i < string.length(); i++)
        {    
            if(string.charAt(i) != ' ')    
                count++;    
        }    
        //Displays the total number of characters present in the given string    
        System.out.println("Total number of characters in a string: " + count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Consider two threads t1 and t2Note : Read the threadname from the Userset the priority as 4 for t1 and set the priority as 2 for t2
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String first=sc.nextLine();
 String second=sc.nextLine();
 Thread t1 = new Thread(a, first);
 Thread t2 = new Thread(a, second);
 
 
 t1.setPriority(4); // Setting the priority of first thread.
 t2.setPriority(2); // Setting the priority of second thread.
 
 
 t1.start();
 t2.start();
 
  }
}
##
Write a Java program to create Thread using extends that has to print the thread value as per the range given by the User.Note: Get Thread integer number  from the User
   import java.util.*;
   public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
    public void run()
    {  
        
         for(int i = n; i > 0; i--) {
            System.out.println("Thread: "  + i);
            // Let the thread sleep for a while.
          
             }
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using extendsNote: Get User name from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to create Thread using Implements Runnable  .In run method get student name & rollno as input from the user and print inside the function
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi();  
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    }  
##
Write a java program for determine the priority and name of the current thread.Note : Read the threadname from the User
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}
##
Write a Java program to create Thread using extendsNote: Get Thread integer number  from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int count=sc.nextInt();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.start();  
     }  
    }  
##
Write a Java program to perform whether the given number is Positive or Negative ,zero by calling run methodNote: Get the value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        int num=sc.nextInt();
       if(num>0)  
{  
System.out.println("The number is positive.");  
}  
//checks the number is less than 0 or not  
else if(num<0)  
{  
System.out.println("The number is negative.");  
}  
//executes when the above two conditions return false  
else  
{  
System.out.println("The number is zero.");  
}  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.run();  
     }  
    }  
##
Write a java program for set the priority and name of the current thread.Note : Read the threadname from the UserSet the Priority as 2.
import java.util.*;
public class A implements Runnable
{
public void run()
{
  System.out.println(Thread.currentThread()); // This method is static.
}
public static void main(String[] args) 
{
 A a = new A();
 Scanner sc=new Scanner(System.in);
 String thname=sc.nextLine();
 Thread t = new Thread(a, thname);
 t.setPriority(2); // Setting the priority of thread.
 System.out.println("Priority of Thread: " +t.getPriority());
 System.out.println("Name of Thread: " +t.getName());
 t.start();
  }
}
##
Write a Java program to create Thread and call the thread  using run methodNote: Get User name from the User
   import java.util.*;
    public class Multi extends Thread
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        String name=sc.nextLine();
        System.out.println("Thread Name:" +name);  
    }  
    public static void main(String args[]){  
    Multi t1=new Multi();  
    t1.run();  
     }  
    }  
##
Write a Java program to create Thread using Runnable InterfaceNote: Get double value from the User
   import java.util.*;
    public class Multi implements Runnable
    {  
        Scanner sc=new Scanner(System.in);
        
    public void run()
    {  
        double count=sc.nextDouble();
        System.out.println("Thread Count: " +count);  
    }  
    public static void main(String args[]){  
    Multi m1=new Multi(); 
    Thread t1 =new Thread(m1); 
    t1.start();  
     }  
    } 
##
Write a Java Program to perform cube value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void cube method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    void cube(int n)
    {
        synchronized(this)
        {
            int temp = 1;
            for(int i=1;i<=n;i++)
            { 
                int j=i;
                System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
                try
                {  
                    Thread.sleep(400);  
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            }  
        }
    }  
}
##
Write a Java Program to perform multiplication table  for 5 & 100 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void printTable() in that perform multiplication table2. Create a Two threads "MyThread1" and "MyThread2"  with a member function void run() to call ThreadIn main() access all function using its corresponding Object.
class Table
{  
    synchronized void printTable(int n)
    {
        for(int i=1;i<=5;i++)
        {
            System.out.println(n*i);  
            try
            {  
                Thread.sleep(400);  
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }  
    }
}
class MyThread1 extends Thread
{
    Table t;  
    MyThread1(Table t)
    {
        this.t=t;  
    }  
    public void run()
    {  
        t.printTable(5);  
    }
}
class MyThread2 extends Thread
{  
    Table t;  
    MyThread2(Table t)
    {
        this.t=t;  
    }  
    public void run()
    {  
        t.printTable(100);  
    }  
}
public class HelloWorld
{
    public static void main(String args[])
    {
        Table obj = new Table();
        MyThread1 t1=new MyThread1(obj);  
        MyThread2 t2=new MyThread2(obj);  
        
        t1.start();  
        t2.start();  
    }  
}
##
Write a Java Program to perform factorial  value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void factorial method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    static synchronized void factorial(int n)
    { 
        int fact=1;
        if (n == 0)    
            fact=1;    
        else  
        {
            for(int i=1;i<=n;i++)
            fact=fact*i;    
        }   
        System.out.println("Factorial for a number " +n+ " :" + fact);
        try
        {  
            Thread.sleep(400);  
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
   }  
}
##
Write a Java Program to display Even number up to the range using Synchronization block for the below Scenario1. Create a Class Table with void Even method in that create Synchronization blockNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
import java.util.*;
class Table
{
    public static synchronized void Even(int n)
    {
        System.out.print("List of Even numbers for "+n+" : ");
        for(int i=1;i<=n;i++)
        {
            if(i%2==0)
            {
                System.out.print(i+" ");
            }
        }
        System.out.println();
        try
        {
            Thread.sleep(400);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
}
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario1. Create a Class Table with void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
{
    void printTable(int n)
    {
        synchronized(this)
        {
            for(int i=1;i<=10;i++)
            {  
                System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                try
                { 
                    Thread.sleep(400);  
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            }
        }
    }  
}
##
Write a Java Program to perform cube value using Synchronization block for the below Scenario1. Create a Class Table with void cube method in that create Synchronization block perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
 class Table
  {
    void cube(int n)
     {
      synchronized(this)
      {
          int temp = 1;
         for(int i=1;i<=n;i++)
         { 
             int j=i;
         System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
         try
         {  
          Thread.sleep(400);  
         }
         catch(Exception e){System.out.println(e);}  
         }  
      }
   }  
  }
##
Write a Java Program to perform cube value using synchronization  method concept  for the below Scenario1. In a Class Table create a synchronized void cube method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
 class Table
  {
   synchronized void cube(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("cube for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
##
Write a Java Program to perform static synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform Fibonacci series for static synchronization method for the below Scenario1. In a Class Table create a static synchronized void Fibonacci method in that perform Fibonacci OperationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
   static synchronized void fibonacci(int n)
   {
       int  firstTerm = 0, secondTerm = 1;
    System.out.print("Fibonacci Series for " + n + " value:");

    for (int i = 1; i <= n; ++i) {
      System.out.print(firstTerm + ", ");
      // compute the next term
      int nextTerm = firstTerm + secondTerm;
      firstTerm = secondTerm;
      secondTerm = nextTerm; 
    }
    System.out.println(" ");
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
   } 
   
  }
##
Write a Java Program to display odd numbers using Synchronization block for the below Scenario1. Create a Class Table with void odd method in that create synchronization blockNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    void odd(int n)
    {
      synchronized(this)
     {//synchronized block  
     
       int i=1;
     System.out.print("List of odd numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
     
     
     }
   }  
  }
##
Write a Java Program to perform square value using Synchronization block for the below Scenario1. Create a Class Table with void square method in that create Synchronization block perform square operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    void square(int n)
    {
      synchronized(this)
     {//synchronized block  
      int temp = 1;
     for(int i=1;i<=n;i++)
     { 
         int j=i;
     System.out.println("square for range value " +n+ " "+i+ ":" + (j*j*j));
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
     }
   }  
  }
##
Write a Java Program to display Even number up to the range using static Synchronization block for the below Scenario1. In a Class Table  create a function for displaying Even number up to the range with static synchronization block using void even (int n) functionNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
    synchronized static void Even(int n)
    {
      
      int i=2;
     System.out.print("List of Even numbers for " +n+ " : ");
      while(i<=n)  
        {  
        //prints the even number  
        System.out.print(i +" ");   
        //increments the variable i by 2  
        i=i+2;  
        } 
        System.out.println();
         try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
      
     
   }  
  }
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization block for the below Scenario1. Create a Class Table with void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
    {  
     
     void printTable(int n){
         synchronized(this)
         {
               for(int i=1;i<=10;i++){  
                 System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
                 try{  
                  Thread.sleep(400);  
                 }catch(Exception e){System.out.println(e);}  
               } 
         }
      
     }  
    }  
##
Write a Java Program to perform static synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	static synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform multiplication table  for 5 & 7 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void printTable method in that perform multiplication tableNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  //example of java synchronized method  
    class Table
    {  
     synchronized void printTable(int n){//synchronized method  
       for(int i=1;i<=10;i++){  
         System.out.println("Multiplication Table for " +n+"*" +i+ " :" +n*i);  
         try{  
          Thread.sleep(400);  
         }catch(Exception e){System.out.println(e);}  
       }  
      
     }  
    }  
##
Write a Java Program to perform Power table 2 &  8 using Synchronization method for the below Scenario1. Create a Class Table with synchronized void power method in that perform power table  Note :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Table
  {
   synchronized void power(int n)
     {//synchronized method  
      int temp = 1;
     for(int i=1;i<=5;i++)
     { 
     System.out.println("value of " +n+ " :" + n*temp);
     temp = n*temp;
     try
     {  
      Thread.sleep(500);  
     }
     catch(Exception e){System.out.println(e);}  
     }  
   }  
  }
##
Write a Java Program to perform Synchronization method for the below Scenario1. Create a Class Display with synchronized void wish method in that perform "Welcome : MessageNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
  class Display {

	public synchronized void wish(String name) {
		for (int i = 0; i <= 1; i++) {
			System.out.print("Welcome :: ");
			try {
				Thread.sleep(600);
			} catch (InterruptedException e) {

			}
			System.out.println(name);
		}
	}

}
##
Write a Java Program to perform factorial  value using static synchronization  concept  for the below Scenario1. In a Class Table create a static synchronized void factorial method in that perform cube operationNote :Assume Sleep as 400 ms  i.e Thread.Sleep(400)
class Table
  {
   static synchronized void factorial(int n)
   {//synchronized method  
     int fact=1;
     if (n == 0)    
      fact=1;    
     else  
     {
       for(int i=1;i<=n;i++)
          fact=fact*i;    
     }   
System.out.println("Factorial for a number " +n+ " :" + fact);
     try
     {  
      Thread.sleep(400);  
     }
     catch(Exception e){System.out.println(e);}  
     
   }  
  }
---
Write a java Program to read input and  print length of the string in java.
import java.util.Scanner;
public class Main {
	public static void main(String[] args)
	{
    	// Here str is a string object
   	Scanner sc = new Scanner(System.in);  // Create a Scanner object
   	String str = sc.nextLine();

 
    	System.out.println(
        	"The size of "
        	+ "the String is "
        	+ str.length());
	}
}
##
Create a string then print particular string using substring() with given end index value. (0-7) , (0-5) ,(3-5)
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 = sc.nextLine();
    System.out.println(str1.substring(0, 7));  

    System.out.println(str1.substring(0, 5));  

    System.out.println(str1.substring(3, 5));  
  }
}
##
Write a java program to print returns character at the index of 2 using stringconcept.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program to use equalsIgnoreCase() and perform the task.
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
        String str3 = sc.nextLine();
        Boolean result;

        // comparing str1 with str2
        result = str1.equalsIgnoreCase(str2);
        System.out.println(result); // true

        // comparing str1 with str3
        result = str1.equalsIgnoreCase(str3);
        System.out.println(result); // false

        // comparing str3 with str1
        result = str3.equalsIgnoreCase(str1);
        System.out.println(result); // false
    }
}
##
Write a java program to reverse a string in Java without using the reverse method.
import java.util.*;
public class Main {
    public static void main(String[] args) {
 
        Scanner sc=new Scanner(System.in);
        String name=sc.nextLine();
        String reversedString = "";
 
        for (int i = name.length() - 1; i >= 0; i--) {
            reversedString = reversedString + name.charAt(i);
        }
        System.out.println(reversedString);
    }
}
##
Write a java program read input in array format and then display given string.
public class StringExample{    
public static void main(String args[]){    
String s1="java";//creating string by Java string literal    
char ch[]={'s','t','r','i','n','g','s'};    
String s2=new String(ch);//converting char array to string    
String s3=new String("example");//creating Java string by new keyword    
System.out.println(s1);    
System.out.println(s2);    
System.out.println(s3);    
}}
##
Create a java program to find the index of the first occurrence of the specified substring from a given string, use the Java String indexOf (  ).
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    int result;

    String str2=sc.nextLine();
    result = str1.indexOf(str2);

    System.out.println(result);
  }
}
##
Write a java program checks whether the String contains empty or not. If the java String is Empty, it returns true else false.
import java.util.*;
public class Main{ 
public static void main(String args[]){ 
Scanner sc=new Scanner(System.in);
String s1=sc.nextLine(); 
String s2=sc.nextLine(); 
System.out.println(s1.isEmpty()+" the string is: "+s1);      
System.out.println(s2.isEmpty()+" the string is: "+s2);      
}}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Write a java program to swap two strings without using the third variable.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String firstString = sc.nextLine();
        String secondString = sc.nextLine();
 

 
        firstString = firstString + secondString; 
        secondString = firstString.substring(0, (firstString.length() - secondString.length())); 
        firstString = firstString.substring(secondString.length()); 
 
        
        System.out.println(firstString);
        System.out.println(secondString);
 
    }
 
}
##
write a java program to Read two input check both strings are equal or not.
import java.util.Scanner;
public class EqualsExample{  
public static void main(String args[]){  
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String s1 = sc.nextLine();
String s2 = sc.nextLine();
System.out.println(s1.equals(s2));//true because content and case is same  
}} 
##
Create a java string using a new keyword and then print the string.
import java.util.*;
public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    String a=sc.nextLine();
    String name = new String(a);

    System.out.println(name);  
  }
}
##
Write a java program to remove the whitespace(spaces, tabs, newlines) in given string.
import java.util.*;
public class Main
{
public static void main(String args[])
{
    Scanner sc=new Scanner(System.in);
    String ourString=sc.nextLine();
    System.out.println(ourString.trim());
}
}
##
Write a java program to replace the substring.
 import java.util.*;

public class Main {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
 
    String str1 = scanner.nextLine();
 
    String toReplace = scanner.nextLine();
 
    String replacement = scanner.nextLine();
 
    String replacedString = str1.replace(toReplace, replacement);

    System.out.println("Result: " + replacedString);

    scanner.close();
  }
}
##
Write a java program to convert string to integer.
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String name=sc.nextLine();
        int result = Integer.parseInt(name);
        System.out.println("The converted int is: " + result);
    }
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  
//String s1="javatpoint is a very good website";
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String str = sc.nextLine();

String replaceString=str.replaceAll("a","e");//replaces all occurrences of "a" to "e"  
System.out.println(replaceString);  
}}
##
Write a java program to print the given string and particular string using substring() method.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

    
    System.out.println(str1.substring(0));  


    
    System.out.println(str1.substring(3)); 
  }
}
##
Write a java program to change the case of characters in a givenString.(upper case to lower case and lowercase to upper case).
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString=sc.nextLine();
        System.out.println(ourString.toLowerCase());
        System.out.println(ourString.toUpperCase());
        System.out.println(ourString);
    }
}
##
Write a java program to print corresponding value based on index position use charAt method returns the character at the specified index.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

    
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program to reverse the words from the given string sentence.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        String inputString = sc.nextLine();
 
        String outputString = reverseWordsFromString(inputString);
 
        System.out.println(outputString);
 
    }
 
    public static String reverseWordsFromString(String inputString) {
 
        String[] wordsArray = inputString.trim().split("\\s+");
        String stringWithReversedWords = "";
 
        for (String word : wordsArray) {
 
            stringWithReversedWords += reverseWord(word) + " ";
 
        }
        return stringWithReversedWords.trim();
 
    }
 
    public static String reverseWord(String word) {
        String reversedWord = "";
         for (int i = word.length() - 1; i >= 0; i--) {
            reversedWord += word.charAt(i);
 
        }
        return reversedWord;
    }
 
}
##
Write a program to Read input ,split word from sentence.
import java.util.Scanner;
	public class Main{  
	public static void main(String args[]){  
	Scanner sc = new Scanner(System.in);  // Create a Scanner object
	String str = sc.nextLine();
 
	String[] words=str.split("\\s");//splits the string based on whitespace  
	//using java foreach loop to print elements of string array  
	for(String w:words){  
	System.out.println(w);  
	}  
	}} 
##
Write a java program to join a two string using concat() method.
import java.util.*;
public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    String first = sc.nextLine();
    System.out.println("First String: " + first);

    
    String second = sc.nextLine();
    System.out.println("Second String: " + second);


    String joinedString = first.concat(" " +second);
    System.out.println("Joined String: " + joinedString);
  }
}
##
Write a java program to split the given string from space using comma operator.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String text=sc.nextLine();

    
    String[] result = text.split(" ");


    System.out.print("result = ");
    for (String str : result) {
      System.out.print(str + ", ");
    }
  }
}
##
Given a string, return a new string made of n copies of the first 2 chars of the original string,where n is the length of the string. The string may be any length. If there are fewer than 2 chars, use whatever is there. If input is "Wipro" then output should be "WiWiWiWiWi".
    static String nCopyString(String s) {
        int n = s.length();
        String base = s.substring(0, 2);

        String str = "";

        for(int i=0; i<n; i++)
            str += base;
            
        return str;
    }
##
Write a java program to check if a string is a palindrome.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        String inputString = sc.nextLine();
        String reversedString = reverseString(inputString);
 
        if (inputString.equals(reversedString)) {
            System.out.println(inputString + " is a palindrome String.");
        } else {
            System.out.println(inputString + " is not a palindrome String.");
        }
    }
 
    
    public static String reverseString(String str) {
        String reversedString = "";
 
        for (int i = str.length() - 1; i >= 0; i--) {
            reversedString += str.charAt(i);
 
        }
        return reversedString;
    }
 
}
##
Write a java program read input in array format and then display given string.
public class StringExample{    
public static void main(String args[]){    
String s1="java";//creating string by Java string literal    
char ch[]={'s','t','r','i','n','g','s'};    
String s2=new String(ch);//converting char array to string    
String s3=new String("example");//creating Java string by new keyword    
System.out.println(s1);    
System.out.println(s2);    
System.out.println(s3);    
}}
##
Create a java string using a new keyword and then print the string.
import java.util.*;
public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    String a=sc.nextLine();
    String name = new String(a);

    System.out.println(name);  
  }
}
##
Write a java program to print returns character at the index of 2 using stringconcept.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Write a java program to check if a string is a palindrome.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        String inputString = sc.nextLine();
        String reversedString = reverseString(inputString);
 
        if (inputString.equals(reversedString)) {
            System.out.println(inputString + " is a palindrome String.");
        } else {
            System.out.println(inputString + " is not a palindrome String.");
        }
    }
 
    
    public static String reverseString(String str) {
        String reversedString = "";
 
        for (int i = str.length() - 1; i >= 0; i--) {
            reversedString += str.charAt(i);
 
        }
        return reversedString;
    }
 
}
##
Write a program to Read input ,split word from sentence.
import java.util.Scanner;
	public class Main{  
	public static void main(String args[]){  
	Scanner sc = new Scanner(System.in);  // Create a Scanner object
	String str = sc.nextLine();
 
	String[] words=str.split("\\s");//splits the string based on whitespace  
	//using java foreach loop to print elements of string array  
	for(String w:words){  
	System.out.println(w);  
	}  
	}} 
##
Create a java program to find the index of the first occurrence of the specified substring from a given string, use the Java String indexOf (  ).
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    int result;

    String str2=sc.nextLine();
    result = str1.indexOf(str2);

    System.out.println(result);
  }
}
##
Write a java program to split the given string from space using comma operator.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String text=sc.nextLine();

    
    String[] result = text.split(" ");


    System.out.print("result = ");
    for (String str : result) {
      System.out.print(str + ", ");
    }
  }
}
##
Write a java program to replace the substring.
 import java.util.*;

public class Main {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
 
    String str1 = scanner.nextLine();
 
    String toReplace = scanner.nextLine();
 
    String replacement = scanner.nextLine();
 
    String replacedString = str1.replace(toReplace, replacement);

    System.out.println("Result: " + replacedString);

    scanner.close();
  }
}
##
Write a java program to reverse the words from the given string sentence.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        String inputString = sc.nextLine();
 
        String outputString = reverseWordsFromString(inputString);
 
        System.out.println(outputString);
 
    }
 
    public static String reverseWordsFromString(String inputString) {
 
        String[] wordsArray = inputString.trim().split("\\s+");
        String stringWithReversedWords = "";
 
        for (String word : wordsArray) {
 
            stringWithReversedWords += reverseWord(word) + " ";
 
        }
        return stringWithReversedWords.trim();
 
    }
 
    public static String reverseWord(String word) {
        String reversedWord = "";
         for (int i = word.length() - 1; i >= 0; i--) {
            reversedWord += word.charAt(i);
 
        }
        return reversedWord;
    }
 
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  
//String s1="javatpoint is a very good website";
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String str = sc.nextLine();

String replaceString=str.replaceAll("a","e");//replaces all occurrences of "a" to "e"  
System.out.println(replaceString);  
}}
##
Write a java program to print the given string and particular string using substring() method.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

    
    System.out.println(str1.substring(0));  


    
    System.out.println(str1.substring(3)); 
  }
}
##
Write a java program checks whether the String contains empty or not. If the java String is Empty, it returns true else false.
import java.util.*;
public class Main{ 
public static void main(String args[]){ 
Scanner sc=new Scanner(System.in);
String s1=sc.nextLine(); 
String s2=sc.nextLine(); 
System.out.println(s1.isEmpty()+" the string is: "+s1);      
System.out.println(s2.isEmpty()+" the string is: "+s2);      
}}
##
Given a string, return a new string made of n copies of the first 2 chars of the original string,where n is the length of the string. The string may be any length. If there are fewer than 2 chars, use whatever is there. If input is "Wipro" then output should be "WiWiWiWiWi".
    static String nCopyString(String s) {
        int n = s.length();
        String base = s.substring(0, 2);

        String str = "";

        for(int i=0; i<n; i++)
            str += base;
            
        return str;
    }
##
Write a java program to swap two strings without using the third variable.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String firstString = sc.nextLine();
        String secondString = sc.nextLine();
 

 
        firstString = firstString + secondString; 
        secondString = firstString.substring(0, (firstString.length() - secondString.length())); 
        firstString = firstString.substring(secondString.length()); 
 
        
        System.out.println(firstString);
        System.out.println(secondString);
 
    }
 
}
##
Write a java Program to read input and  print length of the string in java.
import java.util.Scanner;
public class Main {
	public static void main(String[] args)
	{
    	// Here str is a string object
   	Scanner sc = new Scanner(System.in);  // Create a Scanner object
   	String str = sc.nextLine();

 
    	System.out.println(
        	"The size of "
        	+ "the String is "
        	+ str.length());
	}
}
##
Write a java program to join a two string using concat() method.
import java.util.*;
public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    String first = sc.nextLine();
    System.out.println("First String: " + first);

    
    String second = sc.nextLine();
    System.out.println("Second String: " + second);


    String joinedString = first.concat(" " +second);
    System.out.println("Joined String: " + joinedString);
  }
}
##
Write a java program to change the case of characters in a givenString.(upper case to lower case and lowercase to upper case).
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString=sc.nextLine();
        System.out.println(ourString.toLowerCase());
        System.out.println(ourString.toUpperCase());
        System.out.println(ourString);
    }
}
##
Write a java program to use equalsIgnoreCase() and perform the task.
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
        String str3 = sc.nextLine();
        Boolean result;

        // comparing str1 with str2
        result = str1.equalsIgnoreCase(str2);
        System.out.println(result); // true

        // comparing str1 with str3
        result = str1.equalsIgnoreCase(str3);
        System.out.println(result); // false

        // comparing str3 with str1
        result = str3.equalsIgnoreCase(str1);
        System.out.println(result); // false
    }
}
##
Write a java program to reverse a string in Java without using the reverse method.
import java.util.*;
public class Main {
    public static void main(String[] args) {
 
        Scanner sc=new Scanner(System.in);
        String name=sc.nextLine();
        String reversedString = "";
 
        for (int i = name.length() - 1; i >= 0; i--) {
            reversedString = reversedString + name.charAt(i);
        }
        System.out.println(reversedString);
    }
}
##
write a java program to Read two input check both strings are equal or not.
import java.util.Scanner;
public class EqualsExample{  
public static void main(String args[]){  
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String s1 = sc.nextLine();
String s2 = sc.nextLine();
System.out.println(s1.equals(s2));//true because content and case is same  
}} 
##
Create a string then print particular string using substring() with given end index value. (0-7) , (0-5) ,(3-5)
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 = sc.nextLine();
    System.out.println(str1.substring(0, 7));  

    System.out.println(str1.substring(0, 5));  

    System.out.println(str1.substring(3, 5));  
  }
}
##
Write a java program to remove the whitespace(spaces, tabs, newlines) in given string.
import java.util.*;
public class Main
{
public static void main(String args[])
{
    Scanner sc=new Scanner(System.in);
    String ourString=sc.nextLine();
    System.out.println(ourString.trim());
}
}
##
Write a java program to print corresponding value based on index position use charAt method returns the character at the specified index.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

    
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program to convert string to integer.
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String name=sc.nextLine();
        int result = Integer.parseInt(name);
        System.out.println("The converted int is: " + result);
    }
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  
//String s1="javatpoint is a very good website";
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String str = sc.nextLine();

String replaceString=str.replaceAll("a","e");//replaces all occurrences of "a" to "e"  
System.out.println(replaceString);  
}}
##
Create a java program to find the index of the first occurrence of the specified substring from a given string, use the Java String indexOf (  ).
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    int result;

    String str2=sc.nextLine();
    result = str1.indexOf(str2);

    System.out.println(result);
  }
}
##
Write a java program to print returns character at the index of 2 using stringconcept.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Write a java program to swap two strings without using the third variable.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String firstString = sc.nextLine();
        String secondString = sc.nextLine();
 

 
        firstString = firstString + secondString; 
        secondString = firstString.substring(0, (firstString.length() - secondString.length())); 
        firstString = firstString.substring(secondString.length()); 
 
        
        System.out.println(firstString);
        System.out.println(secondString);
 
    }
 
}
##
Write a java program read input in array format and then display given string.
public class StringExample{    
public static void main(String args[]){    
String s1="java";//creating string by Java string literal    
char ch[]={'s','t','r','i','n','g','s'};    
String s2=new String(ch);//converting char array to string    
String s3=new String("example");//creating Java string by new keyword    
System.out.println(s1);    
System.out.println(s2);    
System.out.println(s3);    
}}
##
Create a java string using a new keyword and then print the string.
import java.util.*;
public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    String a=sc.nextLine();
    String name = new String(a);

    System.out.println(name);  
  }
}
##
Write a java program to split the given string from space using comma operator.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String text=sc.nextLine();

    
    String[] result = text.split(" ");


    System.out.print("result = ");
    for (String str : result) {
      System.out.print(str + ", ");
    }
  }
}
##
Write a java program to print corresponding value based on index position use charAt method returns the character at the specified index.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

    
    System.out.println(str1.charAt(2));


  }
}
##
Write a java program to check if a string is a palindrome.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
 
        String inputString = sc.nextLine();
        String reversedString = reverseString(inputString);
 
        if (inputString.equals(reversedString)) {
            System.out.println(inputString + " is a palindrome String.");
        } else {
            System.out.println(inputString + " is not a palindrome String.");
        }
    }
 
    
    public static String reverseString(String str) {
        String reversedString = "";
 
        for (int i = str.length() - 1; i >= 0; i--) {
            reversedString += str.charAt(i);
 
        }
        return reversedString;
    }
 
}

##
Create a java program to find the index of the first occurrence of the specified substring from a given string, use the Java String indexOf().
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();
    int result;

    String str2=sc.nextLine();
    result = str1.indexOf(str2);

    System.out.println(result);
  }
}
##
Write a java program to change the case of characters in a given string.(upper case to lower case and lowercase to upper case).
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString=sc.nextLine();
        System.out.println(ourString.toLowerCase());
        System.out.println(ourString.toUpperCase());
        System.out.println(ourString);
    }
}
##
Write a java program to use equalsToIgnoreCase() and perform the task.
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
        String str3 = sc.nextLine();
        Boolean result;

        // comparing str1 with str2
        result = str1.equalsIgnoreCase(str2);
        System.out.println(result); // true

        // comparing str1 with str3
        result = str1.equalsIgnoreCase(str3);
        System.out.println(result); // false

        // comparing str3 with str1
        result = str3.equalsIgnoreCase(str1);
        System.out.println(result); // false
    }
}
##
Write a java program to swap two strings without using the third variable.
import java.util.*;
public class Main {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String firstString = sc.nextLine();
        String secondString = sc.nextLine();
 

 
        firstString = firstString + secondString; 
        secondString = firstString.substring(0, (firstString.length() - secondString.length())); 
        firstString = firstString.substring(secondString.length()); 
 
        
        System.out.println(firstString);
        System.out.println(secondString);
 
    }
 
}
##
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0). If input is "hi" and "hello", then output will be "hihellohi".
import java.util.*;
	    
		
	public class Assignment6 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		String output;

		if (a.length() < b.length()) 
			output = a + b + a;
		else
			output = b + a + b;
		
		System.out.println(output);
	}

}
##
Write a java program to use delete() method of the StringBuffer class deletes the String from the specified beginIndex to endIndex.

import java.util.Scanner;

public class StringBufferExample4 {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        
        // Read input string from the user 
        String str1 = sc.nextLine();
        
        // Read the start index from the user 
        int startIndex = sc.nextInt();
        
        // Read the end index from the user
        int endIndex = sc.nextInt();
        
        StringBuffer sb = new StringBuffer(str1);
        
        // Using delete() method to delete substring from start index to end index
        sb.delete(startIndex, endIndex);
         
        System.out.println(sb);
        
        sc.close();
    }
}
##
Write a java program to set the length of the character sequence equal to newLength and use stringbuffer class.
public class GFG {
	public static void main(String[] args)
	{

	
		StringBuffer str
			= new StringBuffer("Tony Stark will die");

		
		System.out.println("String length = "
						+ str.length() +
		" and contains = \"" + str + "\"");

		
		str.setLength(18);

		
		System.out.println("After setLength() String = \""
						+ str.toString()+"\"");
	}
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  

Scanner sc = new Scanner(System.in); 
String str = sc.nextLine();
StringBuffer sb=new StringBuffer(str);
String a=sb.toString();
String replaceString=a.replaceAll("a","e"); 
System.out.println(replaceString);  
}}
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “pot” and “lap”, then output should be “ploatp”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Given a string of even length, return the first half. So the string "CatDog" yields "Cat". If the string length is odd number then return null.
import java.util.Scanner;
public class Assignment4 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str = sc.nextLine();
		
		String output;
		
		if (str.length() % 2 == 0) {
			output = str.substring(0, str.length() / 2);
		} else {
			output = null;
		}
		
		System.out.println(output);
	}

}
##
Write a java program use replace() method replaces the given String from the specified beginIndex and endIndex and use stringbuffer.
import java.util.*;
public class StringBufferExample3{  
public static void main(String args[]){ 
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.replace(1,3,"Java");  
System.out.println(sb); 
}  
} 
##
Write a java program passing string str1 value in the StringBuffer object and “sb” is pointing to that object i.e. the address of the StringBuffer object is stored in reference variable sb.
import java.util.*;
public class CapacityTest2 { 
public static void main(String[ ] args) 
{ 
  Scanner sc=new Scanner(System.in);
  String str1=sc.nextLine();
  StringBuffer sb = new StringBuffer(str1); 
  int length = sb.length(); 
  int capacity = sb.length() + 16; 
  
  System.out.println(length); 
  System.out.println(capacity); 
  } 
}
##
Write a java program to print the text based on testcase write the program and use string buffer and append method.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
           Scanner sc=new Scanner(System.in);
           String str=sc.nextLine();
           StringBuffer sb1=new StringBuffer(str);

           System.out.println("sb1 = "+sb1.append('s')); 
    }
}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “abc” and “xyz”, then output should be “axbycz”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0). If input is "lap" and "laptop", then output will be "laplaptoplap".
import java.util.*;
	    
		
	public class Assignment6 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		String output;

		if (a.length() < b.length()) 
			output = a + b + a;
		else
			output = b + a + b;
		
		System.out.println(output);
	}

}
##
Write a java program to set the length of the character sequence equal to newLength using stringbuffer class.
import java.util.*;

public class GFG {

	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
	    String str1=sc.nextLine();
		
		StringBuffer str
			= new StringBuffer(str1);

		
		System.out.println("String length = "
						+ str.length() +
				" and contains = " + str);

		
		str.setLength(10);

		
		System.out.println("After setLength() String = "
						+ str.toString());
	}
}
##
Write a program to Read input ,split word from sentence and use string builder.
import java.util.Scanner;
	public class Main{  
	public static void main(String args[]){  
	Scanner sc = new Scanner(System.in);  
	String str = sc.nextLine();
	StringBuilder sb=new StringBuilder(str);
	String str1=sb.toString();
 
	String[] words=str1.split("\\s");
	for(String w:words){  
	System.out.println(w);  
	}  
	}} 
##
Write a java program to replace the substring.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    String str1 = "C++ Programming";
    System.out.println(str1.replace("C++", "Java"));
  }
}
##
Given two strings, append them together (known as "concatenation") and return the result. However, if the concatenation creates a double-char, then omit one of the chars. If the inputs are “Mark” and “Kate” then the ouput should be “markate”. (The output should be in lowercase)
import java.util.Scanner;


public class Assignment2 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
		str1 = str1.toLowerCase();
		str2 = str2.toLowerCase();
		
		StringBuffer sb = new StringBuffer();
		sb.append(str1);
		
		if (str1.charAt(str1.length() - 1) == str2.charAt(0)) {
			sb.append(str2.substring(1, str2.length()));
		} else {
			sb.append(str2);
		}
		
		System.out.println(sb);		
		
		sb.append(str1);
		
	}

}
##
Write a java program to use reverse() method of the StringBuilder class reverses the current String.
import java.util.*;
public class StringBufferExample5{  
public static void main(String args[]){  
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.reverse();  
System.out.println(sb);  
}  
}  
##
Given a string of even length, return the first half. So the string "DogCat" yields "Dog". If the string length is odd number then return null.
import java.util.Scanner;
public class Assignment4 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str = sc.nextLine();
		
		String output;
		
		if (str.length() % 2 == 0) {
			output = str.substring(0, str.length() / 2);
		} else {
			output = null;
		}
		
		System.out.println(output);
	}

}
##
write a java program to Read two input check both strings are equal or not and use string builder method.
import java.util.Scanner;
public class EqualsExample{  
public static void main(String args[]){  
Scanner sc = new Scanner(System.in); 
StringBuilder sb=new StringBuilder(sc.nextLine());
StringBuilder sb1=new StringBuilder(sc.nextLine());
String s1 = sb.toString();
String s2 = sb1.toString();
System.out.println(s1.equals(s2)); 
}} 
##
Given a string, return a new string made of n copies of the first 2 chars of the original string,where n is the length of the string. The string may be any length. If there are fewer than 2 chars, use whatever is there. If input is "Wipro" then output should be "WiWiWiWiWi".
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String str = in.nextLine();
        System.out.println(nCopyString(str));
    }

    static String nCopyString(String s) {
        int n = s.length();
        String base = s.substring(0, 2);

        String str = "";

        for(int i=0; i<n; i++)
            str += base;
            
        return str;
    }
}
##
Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged. If the input is "xHix", then output is "Hi".
import java.util.*;
public class Assignment7 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String str =sc.nextLine();
		
		if (str.charAt(0) == 'x')
			str = str.substring(1, str.length());
		
		if (str.charAt(str.length() - 1) == 'x')
			str = str.substring(0, str.length() - 1);
		
		System.out.println(str);

	}

}
##
Write a java program use append() method concatenates the given argument with this String and use stringbuffer class.
import java.util.*;
public class StringBufferExample{  
public static void main(String args[]){  
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
String str2=sc.nextLine();
StringBuffer sb=new StringBuffer(str1+" ");  
sb.append(str2);  
System.out.println(sb);  
}  
}  
##
Write a java program to print new value ,string that can be modified or changed into the existing object .(mutable string)
import java.util.*;
public class MutableStringEx { 
public static void main(String[ ] args) 
{ 
 Scanner sc=new Scanner(System.in);
 String str1=sc.nextLine();
 StringBuffer sb = new StringBuffer(str1); 
  sb.append(" Easy");
  sb.append(" today");
  System.out.println(sb); 
 } 
}
##
Write a java Program to read input and  print length of the string in java and use stringbuffer.
import java.util.Scanner;
public class Main {
	public static void main(String[] args)
	{
    	// Here str is a string object
   	Scanner sc = new Scanner(System.in);  // Create a Scanner object
   	String str = sc.nextLine();
    StringBuffer sb=new StringBuffer(str);
 
    	System.out.println(
        	"The size of "
        	+ "the String is "
        	+ sb.length());
	}
}
##
Write a java program use replace() method replaces the given String from the specified beginIndex and endIndex and use stringbuffer.
import java.util.*;
public class StringBufferExample3{  
public static void main(String args[]){ 
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.replace(1,3,"Java");  
System.out.println(sb); 
}  
}  
##
Given two strings, append them together (known as "concatenation") and return the result. However, if the concatenation creates a double-char, then omit one of the chars. If the inputs are “Mark” and “Kate” then the ouput should be “markate”. (The output should be in lowercase)
import java.util.Scanner;


public class Assignment2 {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
		str1 = str1.toLowerCase();
		str2 = str2.toLowerCase();
		
		StringBuffer sb = new StringBuffer();
		sb.append(str1);
		
		if (str1.charAt(str1.length() - 1) == str2.charAt(0)) {
			sb.append(str2.substring(1, str2.length()));
		} else {
			sb.append(str2);
		}
		
		System.out.println(sb);		
		
		sb.append(str1);
		
	}

}
##
Write a java program to use reverse() method of the StringBuilder class reverses the current String.
import java.util.*;
public class StringBufferExample5{  
public static void main(String args[]){  
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.reverse();  
System.out.println(sb);  
}  
}  
##
Write a java program to print new value ,string that can be modified or changed into the existing object .(mutable string)

import java.util.*;
public class MutableStringEx { 
public static void main(String[ ] args) 
{ 
 Scanner sc=new Scanner(System.in);
 String str1=sc.nextLine();
 StringBuffer sb = new StringBuffer(str1); 
  sb.append(" Easy");
  sb.append(" today");
  System.out.println(sb); 
 } 
}
##
Write a java program to print the text based on testcase write the program and use string buffer and append method.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
           Scanner sc=new Scanner(System.in);
           String str=sc.nextLine();
           StringBuffer sb1=new StringBuffer(str);

           System.out.println("sb1 = "+sb1.append('s')); 
    }
}
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “pot” and “lap”, then output should be “ploatp”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged. If the input is "xHix", then output is "Hi".
import java.util.*;
public class Assignment7 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String str =sc.nextLine();
		
		if (str.charAt(0) == 'x')
			str = str.substring(1, str.length());
		
		if (str.charAt(str.length() - 1) == 'x')
			str = str.substring(0, str.length() - 1);
		
		System.out.println(str);

	}

}
##
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0). If input is "lap" and "laptop", then output will be "laplaptoplap".
import java.util.*;
	    
		
	public class Assignment6 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		String output;

		if (a.length() < b.length()) 
			output = a + b + a;
		else
			output = b + a + b;
		
		System.out.println(output);
	}

}
##
Write a java program to set the length of the character sequence equal to newLength using stringbuffer class.
import java.util.*;

public class GFG {

	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
	    String str1=sc.nextLine();
		
		StringBuffer str
			= new StringBuffer(str1);

		
		System.out.println("String length = "
						+ str.length() +
				" and contains = " + str);

		
		str.setLength(10);

		
		System.out.println("After setLength() String = "
						+ str.toString());
	}
}
##
write a java program to Read two input check both strings are equal or not and use string builder method.
import java.util.Scanner;
public class EqualsExample{  
public static void main(String args[]){  
Scanner sc = new Scanner(System.in); 
StringBuilder sb=new StringBuilder(sc.nextLine());
StringBuilder sb1=new StringBuilder(sc.nextLine());
String s1 = sb.toString();
String s2 = sb1.toString();
System.out.println(s1.equals(s2)); 
}} 
##
Write a java program to replace the substring.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    String str1 = "C++ Programming";
    System.out.println(str1.replace("C++", "Java"));
  }
}
##
Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0). If input is "hi" and "hello", then output will be "hihellohi".
import java.util.*;
	    
		
	public class Assignment6 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		String output;

		if (a.length() < b.length()) 
			output = a + b + a;
		else
			output = b + a + b;
		
		System.out.println(output);
	}

}
##
Write a java program use append() method concatenates the given argument with this String and use stringbuffer class.
import java.util.*;
public class StringBufferExample{  
public static void main(String args[]){  
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
String str2=sc.nextLine();
StringBuffer sb=new StringBuffer(str1+" ");  
sb.append(str2);  
System.out.println(sb);  
}  
}  
##
Given a string of even length, return the first half. So the string "DogCat" yields "Dog". If the string length is odd number then return null.
import java.util.Scanner;
public class Assignment4 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str = sc.nextLine();
		
		String output;
		
		if (str.length() % 2 == 0) {
			output = str.substring(0, str.length() / 2);
		} else {
			output = null;
		}
		
		System.out.println(output);
	}

}
##
Write a java Program to read input and  print length of the string in java and use stringbuffer.
import java.util.Scanner;
public class Main {
	public static void main(String[] args)
	{
    	// Here str is a string object
   	Scanner sc = new Scanner(System.in);  // Create a Scanner object
   	String str = sc.nextLine();
    StringBuffer sb=new StringBuffer(str);
 
    	System.out.println(
        	"The size of "
        	+ "the String is "
        	+ sb.length());
	}
}
##
Given a string, return a new string made of n copies of the first 2 chars of the original string,where n is the length of the string. The string may be any length. If there are fewer than 2 chars, use whatever is there. If input is "Wipro" then output should be "WiWiWiWiWi".
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String str = in.nextLine();
        System.out.println(nCopyString(str));
    }

    static String nCopyString(String s) {
        int n = s.length();
        String base = s.substring(0, 2);

        String str = "";

        for(int i=0; i<n; i++)
            str += base;
            
        return str;
    }
}
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “abc” and “xyz”, then output should be “axbycz”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Write a java program to use delete() method of the StringBuffer class deletes the String from the specified beginIndex to endIndex.
import java.util.Scanner;

public class StringBufferExample4 {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        
        // Read input string from the user 
        String str1 = sc.nextLine();
        
        // Read the start index from the user 
        int startIndex = sc.nextInt();
        
        // Read the end index from the user
        int endIndex = sc.nextInt();
        
        StringBuffer sb = new StringBuffer(str1);
        
        // Using delete() method to delete substring from start index to end index
        sb.delete(startIndex, endIndex);
         
        System.out.println(sb);
        
        sc.close();
    }
}
##
Write a java program passing string str1 value in the StringBuffer object and “sb” is pointing to that object i.e. the address of the StringBuffer object is stored in reference variable sb.
import java.util.*;
public class CapacityTest2 { 
public static void main(String[ ] args) 
{ 
  Scanner sc=new Scanner(System.in);
  String str1=sc.nextLine();
  StringBuffer sb = new StringBuffer(str1); 
  int length = sb.length(); 
  int capacity = sb.length() + 16; 
  
  System.out.println(length); 
  System.out.println(capacity); 
  } 
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  

Scanner sc = new Scanner(System.in); 
String str = sc.nextLine();
StringBuffer sb=new StringBuffer(str);
String a=sb.toString();
String replaceString=a.replaceAll("a","e"); 
System.out.println(replaceString);  
}}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Write a java program to print the text based on testcase write the program and use string builder and append method.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
           Scanner sc=new Scanner(System.in);
           String str=sc.nextLine();
           StringBuilder sb1=new StringBuilder(str);

           System.out.println("sb1 = "+sb1.append('s')); 
    }
}
##
Write a java program to print new value ,string that can be modified or changed into the existing object .(mutable string)
import java.util.*;
public class MutableStringEx { 
public static void main(String[ ] args) 
{ 
 Scanner sc=new Scanner(System.in);
 String str1=sc.nextLine();
 StringBuilder sb = new StringBuilder(str1); 
  sb.append(" Easy");
  sb.append(" today");
  System.out.println(sb); 
 } 
}
##
Write a java program to display student id,name,place using toStringegg method.
public class Student{  
 int rollno;  
 String name;  
 String city;  
  
 Student(int rollno, String name, String city){  
 this.rollno=rollno;  
 this.name=name;  
 this.city=city;  
 }  
   
 public String toString(){//overriding the toString() method  
  return rollno+" "+name+" "+city;  
 }  
 public static void main(String args[]){  
   Student s1=new Student(101,"Raj","chennai");  
   Student s2=new Student(102,"Vijay","salem");  
     
   System.out.println(s1);//compiler writes here s1.toString()  
   System.out.println(s2);//compiler writes here s2.toString()  
 }  
}  
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Write a java program to set the length of the character sequence equal to newLength and use stringbuilder class.
public class GFG {
	public static void main(String[] args)
	{

	
		StringBuilder str
			= new StringBuilder("Tony Stark will die");

		
		System.out.println("String length = "
						+ str.length() +
		" and contains = \"" + str + "\"");

		
		str.setLength(18);

		
		System.out.println("After setLength() String = \""
						+ str.toString()+"\"");
	}
}
##
Write a java Program to read input and  print length of the string in java and use stringbuilder.
import java.util.Scanner;
public class Main {
	public static void main(String[] args)
	{
    	// Here str is a string object
   	Scanner sc = new Scanner(System.in);  // Create a Scanner object
   	String str = sc.nextLine();
    StringBuilder sb=new StringBuilder(str);
 
    	System.out.println(
        	"The size of "
        	+ "the String is "
        	+ sb.length());
	}
}
##
write a java program to Read two input check both strings are equal or not and use string builder method.
import java.util.Scanner;
public class EqualsExample{  
public static void main(String args[]){  
Scanner sc = new Scanner(System.in); 
StringBuilder sb=new StringBuilder(sc.nextLine());
StringBuilder sb1=new StringBuilder(sc.nextLine());
String s1 = sb.toString();
String s2 = sb1.toString();
System.out.println(s1.equals(s2)); 
}} 
##
write a java program to print two value using toString().
public class Test { 

   public static void main(String args[]) {
      Integer x = 5;

      System.out.println(x.toString());  
      System.out.println(Integer.toString(12)); 
   }
}
##
Write a java program use replace() method replaces the given String from the specified beginIndex and endIndex and use stringbuilder.
import java.util.*;
public class StringBufferExample3{  
public static void main(String args[]){ 
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuilder sb=new StringBuilder(str1);  
sb.replace(1,3,"Java");  
System.out.println(sb); 
}  
}  
##
Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged. If the input is "xwelcomex", then output is "welcome".
import java.util.*;
public class Assignment7 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String str =sc.nextLine();
		
		if (str.charAt(0) == 'x')
			str = str.substring(1, str.length());
		
		if (str.charAt(str.length() - 1) == 'x')
			str = str.substring(0, str.length() - 1);
		
		System.out.println(str);

	}

}
##
Write a java program to display lastindexof "a" and "am"" in given string or sentence.
import java.lang.*;
import java.util.*;

public class Main {

   public static void main(String[] args) {
     Scanner sc=new Scanner(System.in);
      String str=sc.nextLine();
      
      StringBuilder str1 = new StringBuilder(str);
      //System.out.println("string = " + str);
    
      /* returns the index within this string of the rightmost occurrence 
         of the specified substring */
      System.out.println("last Index of a = " + str.lastIndexOf("a"));
  
      // returns -1 as substring am is not found
      System.out.println("last Index of am = " + str.lastIndexOf("am"));
   }
} 
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “pot” and “lap”, then output should be “ploatp”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuilder sb = new StringBuilder();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Write a java program to set the length of the character sequence equal to newLength using stringbuilder class.
import java.util.*;

public class GFG {

	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
	    String str1=sc.nextLine();
		
		StringBuilder str
			= new StringBuilder(str1);

		
		System.out.println("String length = "
						+ str.length() +
				" and contains = " + str);

		
		str.setLength(10);

		
		System.out.println("After setLength() String = "
						+ str.toString());
	}
}
##
Write a java program using StringTokenizer class that tokenizes a string "My name is Java Programming" on the basis of whitespace.
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("My name is Java Programming"," ");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  
##
Write a java program to calculate the number of tokens present in the tokenizer string.
import java.util.*;    
public class StringTokenizer3  
{    
 
 public static void main(String args[])  
 {    
   Scanner sc=new Scanner(System.in);
   String str1=sc.nextLine();
     
   StringTokenizer st = new StringTokenizer(str1," ");    
        
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program using stringTokenizer to break a string based on multiple delimiters. Each character in the constructors delimiter field acts as one delimiter.
import java.util.*;
 
public class MyStringTokens {
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String msg =sc.nextLine();
        StringTokenizer st = new StringTokenizer(msg,"://.");
        while(st.hasMoreTokens()){
            System.out.println(st.nextToken());
        }
    }
}
##
Write a java program using StringTokenizer class that tokenizes a string "welcome to java# programming" on the basis of # symbol.
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("welcome to java# programming","#");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  

##
Write a java program to calculate the number of tokens in string tokenizer based on symbols.
import java.util.*;    
public class StringTokenizer3  
{    
 
 public static void main(String args[])  
 {    
   Scanner sc=new Scanner(System.in);
   String str1=sc.nextLine();
     
   StringTokenizer st = new StringTokenizer(str1,"#");    
        
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program how to make delimiter characters also be part of tokens. During creating string tokenizer object, in the constructor field, pass boolean parameter value as true.
import java.util.*;
 
public class TokensWithDelimiter {
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String msg = sc.nextLine();
        StringTokenizer st = new StringTokenizer(msg,"://.",true);
        while(st.hasMoreTokens()){
            System.out.println(st.nextToken());
        }
    }
}
##
Write a java program to print output upto separator symbol($) based on input using nextToken method of the string tokenizer java.
import java.util.*;  
  
public class Main {  
   public static void main(String[] args) {
       Scanner sb=new Scanner(System.in);
       String str1=sb.nextLine();
       StringTokenizer st = new StringTokenizer(str1);  
        
      
      System.out.println("Next token is : " + st.nextToken("$"));  
   }      
}  
##
Write a Java program to demonstrate using split() method. Given input in that split the words in sentence and then print.
import java.util.*;

public class GFG {
	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
		String str = sc.nextLine();
		String[] split = str.split(" ");
	
		for (int i = 0; i < split.length; i++)
			System.out.println("#" + i + ": " + split[i]);
	}
}
##
Write a java program to print all tokens of a string. Create Class , Class name should be TestStringTokenizer in this class write displayTokens method. Create another class, class name should be StringTokenizer1 in this class write main function and create object for TestStringTokenizer class, with the help of object access method here.
import java.util.*;
 
class TestStringTokenizer{
    
	Scanner sc=new Scanner(System.in);
	String str1=sc.nextLine();
	StringTokenizer str = new StringTokenizer(str1);
 
	
	public void displayTokens(){
		while(str.hasMoreTokens()){
			System.out.println(str.nextToken());
		}
	}
}
 
public class StringTokenizer1 {
	public static void main(String args[]){
		
		TestStringTokenizer obj = new TestStringTokenizer();
 
		
		obj.displayTokens();		
	}
}
##
Write a java program to print output upto separator symbol(,) based on input using nextToken method of the string tokenizer java.
import java.util.*;  
  
public class Main {  
   public static void main(String[] args) {
       Scanner sb=new Scanner(System.in);
       String str1=sb.nextLine();
       StringTokenizer st = new StringTokenizer(str1);  
        
      
      System.out.println("Next token is : " + st.nextToken(","));  
   }      
}  
##
Write a Java Program to Illustrate Methods of StringTokenizer class Via hasMoreToken(), nextToken() and countTokens().Refer Sample test cases.

import java.util.*;


public class Main {

	
	public static void main(String args[]) {
		
		Scanner sc=new Scanner(System.in);
		String mydelim =sc.nextLine();
		String mystr =sc.nextLine();

	
		StringTokenizer geeks3 =
			new StringTokenizer(mystr, mydelim);

	
		int count = geeks3.countTokens();
		System.out.println("Number of tokens : " + count + "\n");

		
		for (int i = 0; i < count; i++)
			System.out.println("token at [" + i + "] : "+ geeks3.nextToken());

	
		//while (geeks3.hasMoreTokens())

			
		//	System.out.println(geeks3.nextToken());
	}
}
##
Write a java program using stringtokenizer and print the no of token count after breaking the string by delimiter. You can get the count by using countTokens() method.
import java.util.*;
 
public class MyTokenCount {
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String msg = sc.nextLine();
        StringTokenizer st = new StringTokenizer(msg," .//");
        System.out.println("Count: "+st.countTokens());
    }
}
##
Write a java program using StringTokenizer class that tokenizes a string "C# Programming" on the basis of *(asterisk).
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("C#*Programming","*");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  

##
Write a java program to calculates the number of tokens present in the tokenizer String.
import java.util.StringTokenizer;    
public class StringTokenizer3  
{    
  
 public static void main(String args[])  
 {    
   
   StringTokenizer st = new StringTokenizer("Hello Everyone Have a nice day"," ");    
          
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program to use string tokenizer and use while loop to process the whole string(see sample testcase) until no more token is available.
import java.util. * ;
import java.io. * ;
public class HasMoreTokensMethod {
  public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    String myString =sc.nextLine();
    StringTokenizer st = new StringTokenizer(myString);
    System.out.println("Input string is: " + myString);
    int n = st.countTokens();
    while (n != 0)
    if (st.hasMoreTokens()) {
      System.out.println("The token is present");
      n--;
    }
    System.out.println("There is no more token in the string");
  }
}
##
Write a java program using StringTokenizer class that tokenizes a string "C# Programming" on the basis of *(asterisk).
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("C#*Programming","*");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  
##
Write a java program to calculate the number of tokens in string tokenizer based on symbols.
import java.util.*;    
public class StringTokenizer3  
{    
 
 public static void main(String args[])  
 {    
   Scanner sc=new Scanner(System.in);
   String str1=sc.nextLine();
     
   StringTokenizer st = new StringTokenizer(str1,"#");    
        
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program to print all tokens of a string. Create Class , Class name should be TestStringTokenizer in this class write displayTokens method. Create another class, class name should be StringTokenizer1 in this class write main function and create object for TestStringTokenizer class, with the help of object access method here.

import java.util.*;
 
class TestStringTokenizer{
    
	Scanner sc=new Scanner(System.in);
	String str1=sc.nextLine();
	StringTokenizer str = new StringTokenizer(str1);
 
	
	public void displayTokens(){
		while(str.hasMoreTokens()){
			System.out.println(str.nextToken());
		}
	}
}
 
public class StringTokenizer1 {
	public static void main(String args[]){
		
		TestStringTokenizer obj = new TestStringTokenizer();
 
		
		obj.displayTokens();		
	}
}
##
Write a java program to print output upto separator symbol($) based on input using nextToken method of the string tokenizer java.
import java.util.*;  
  
public class Main {  
   public static void main(String[] args) {
       Scanner sb=new Scanner(System.in);
       String str1=sb.nextLine();
       StringTokenizer st = new StringTokenizer(str1);  
        
      
      System.out.println("Next token is : " + st.nextToken("$"));  
   }      
}  
##
Write a java program to calculates the number of tokens present in the tokenizer String.
import java.util.StringTokenizer;    
public class StringTokenizer3  
{    
  
 public static void main(String args[])  
 {    
   
   StringTokenizer st = new StringTokenizer("Hello Everyone Have a nice day"," ");    
          
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program to use string tokenizer and use while loop to process the whole string(see sample testcase) until no more token is available.
import java.util. * ;
import java.io. * ;
public class HasMoreTokensMethod {
  public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    String myString =sc.nextLine();
    StringTokenizer st = new StringTokenizer(myString);
    System.out.println("Input string is: " + myString);
    int n = st.countTokens();
    while (n != 0)
    if (st.hasMoreTokens()) {
      System.out.println("The token is present");
      n--;
    }
    System.out.println("There is no more token in the string");
  }
}
##
Write a java program using StringTokenizer class that tokenizes a string "My name is Java Programming" on the basis of whitespace.
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("My name is Java Programming"," ");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  

##
Write a Java Program to Illustrate Methods of StringTokenizer class Via hasMoreToken(), nextToken() and countTokens().Refer Sample test cases.
import java.util.*;


public class Main {

	
	public static void main(String args[]) {
		
		Scanner sc=new Scanner(System.in);
		String mydelim =sc.nextLine();
		String mystr =sc.nextLine();

	
		StringTokenizer geeks3 =
			new StringTokenizer(mystr, mydelim);

	
		int count = geeks3.countTokens();
		System.out.println("Number of tokens : " + count + "\n");

		
		for (int i = 0; i < count; i++)
			System.out.println("token at [" + i + "] : "+ geeks3.nextToken());

	
		//while (geeks3.hasMoreTokens())

			
		//	System.out.println(geeks3.nextToken());
	}
}
##
Write a java program using stringTokenizer to break a string based on multiple delimiters. Each character in the constructors delimiter field acts as one delimiter.
 
import java.util.*;
 
public class MyStringTokens {
    public static void main(String a[]){
        Scanner sc=new Scanner(System.in);
        String msg =sc.nextLine();
        StringTokenizer st = new StringTokenizer(msg,"://.");
        while(st.hasMoreTokens()){
            System.out.println(st.nextToken());
        }
    }
}
##
Write a parameterized constructor in the Car class that initializes the brand class field with the string “Ford”.
  class Car {

	String brand;
	Car(String str){
        this.brand=str;
	}
	
	public void getBrand() {
	System.out.println(brand);
	}
}

public class Sample {
	
	public static void main(String[] args) {

		Car ford = new Car("Ford");
		ford.getBrand();
	}
}
##
Create a new class called Calculator with the following method.
import java.lang.Math;
class Calculator {

double num1,num2;
Calculator()
{
    num1=0.0;
    num2=0.0;
}
static double powerDouble(double num1,double num2)
{
    double r=(double)(Math.pow(num1,num2));
    return r;
}
}

public class Sample {
	
	public static void main(String[] args) {

				Calculator obj=new Calculator();
			    double res=Calculator.powerDouble(4.5,2.0);
				System.out.println(res);
	}
}
##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[10.5,4.5,3.5]
public class Box
{
    double height,width,depth;
    Box(double width,double height,double depth)
    {
        this.width=width;
        this.height=height;
        this.depth=depth;
    }
    double volume()
    {
        return width*height*depth;
    }

public static void main(String[] args)
{
    Box obj=new Box(10.5,4.5,3.5);
    System.out.println("Volume is "+obj.volume()+ " units");
}
}
##
Write  a Java program using copy constructor to print the area of Circle
import java.util.*;
class Circle 
{ 
          int side1;
         
         Circle(int s1) 
         {  
             side1=s1;
         } 
        
         Circle(Circle obj) 
         { 
            this.side1=obj.side1;
         } 
        
        double perimeter() 
        { 
           return (3.14*side1*side1);
        } 
 } 
        //class to create Rectangle object and calculate area 
public class CopyConstructor 
 { 
           public static void main(String[] args) 
           { 
             Circle firstRect = new Circle(7); 
             Circle secondRect= new Circle(firstRect); 
             System.out.println("Perimeter  of First Square : "+ firstRect.perimeter()); 
             System .out.println("Perimeter of Second Square : "+ secondRect.perimeter()); 
           } 
 } 
##
Write a Java program using default constructor to display Student name, age, Degree [John, 12, VII]
public class Student
{
    String name;
    int age;
    String degree;
    Student()
    {
        name="John";
        age=12;
        degree="VII";
    }
    void display()
    {
        System.out.println("Name is:"+name);
        System.out.println("Age is:"+age);
        System.out.println("Degree is:"+degree);
    }

    public static void main(String[] args)
    {
        Student obj=new Student();
        obj.display();
    }
}
##
Write a parameterized constructor in the Student class given below that initializes the name and department as class field with the string "Antony” and "AIML".
 class Student {

	String name;
	String dept;
	Student(String n,String d)
	{
	    this.name=n;
	    this.dept=d;
	}
	public void getName() {
	    System.out.println(name);
	}
	public void getDept() {
		System.out.println(dept);
	}
}

public class Sample {
	
	public static void main(String[] args) {
        Student obj=new Student("Antony","AIML");
        obj.getName();
        obj.getDept();

	}
}
##
A static method called maxInt (int num1,int num2) to calculate maximum between  98,43. Use constructor to initialize value as 0 and Math function to calculate maximum value.
import java.lang.Math;
 class Calculator {

int num1,num2;
Calculator()
{
    num1=0;
    num2=0;
}
static int maxInt(int num1,int num2)
{
    int r=Math.max(num1,num2);
    return r;
}

}

public class Sample {
	
	public static void main(String[] args) {
        Calculator obj=new Calculator();
        int res=Calculator.maxInt(98,43);
        System.out.println(res);
	}
}
##
Create a class Box that uses a parameterized constructor to initialize the dimensions of the box. The dimensions of the Box are width, height, depth.[10.5,4.5,3.5]
public class Box
{
    double w,h,d;
    Box(double w,double h,double d)
    {
        this.w=w;
        this.h=h;
        this.d=d;
    }
    double volume()
    {
        return w*h*d;
    }

    public static void main(String[] args)
    {
        Box obj=new Box(10.5,4.5,3.5);
        System.out.println("Volume is "+obj.volume()+" units");
    }
}
##
Write  a Java program using copy constructor to print the area of Circle.
class Circle 
 { 
          int side1;
         
         Circle(int s1) 
         {  
             side1=s1;
         } 
        
         Circle(Circle obj) 
         { 
           this.side1=obj.side1;
         } 
        
        double perimeter() 
        { 
           return (3.14*side1*side1);
        } 
 } 
        //class to create Rectangle object and calculate area 
public class CopyConstructor 
 { 
    public static void main(String[] args) 
    { 
        Circle firstRect = new Circle(7); 
        Circle secondRect=new Circle(firstRect);
        System.out.println("Perimeter  of First Square : "+firstRect.perimeter());
        System.out.println("Perimeter of Second Square : "+secondRect.perimeter());
    } 
 } 
 
##
Write a Java program using default constructor and instance method to display Student name, age, Degree [John, 12, VII]
public class Student
{
    String name,degree;
    int age;
    Student()
    {
        name="John";
        age=12;
        degree="VII";
    }
    void display()
    {
        System.out.println("Name is:"+name);
        System.out.println("Age is:"+age);
        System.out.println("Degree is:"+degree);
    }

    public static void main(String[] args)
    {
        Student obj=new Student();
        obj.display();
    }
}
##
Write a Java program to implement the following IS-A relationship.
import java.util.Scanner;
class Vehicle 
{
    int Vehicle_ID;
}
class Car extends Vehicle
{
   
 String Brand_Name;
 String Model;
 void getDetails()
    {
       Scanner sc=new Scanner(System.in);
       Vehicle_ID=sc.nextInt();
       Brand_Name=sc.next();
       Model=sc.next();
    }
   
void display()
    {
        System.out.println("Vehicle Id is "+Vehicle_ID+" Vehicle Name is "+Brand_Name+" Model is "+Model);
    }
    
}
public class Main
{
    public static void main(String[] args)
    {
       Car obj=new Car();
       obj.getDetails();
       obj.display();
    }
}
##
Write a Java program for below situation, Student object contains member 'Stu_Id'. It contains  object named subject, which contains its own informations such as subject1,subject2,subject3,subject4.

class Subject
{
    String sub1,sub2,sub3,sub4;
    void dispSub(String a,String b,String c,String d)
    {
        this.sub1=a;
        this.sub2=a;
        this.sub3=a;
        this.sub4=a;
        System.out.println(a+" "+b+" "+c+" "+d);
    }
}
class Student
{
    int Stu_Id;
    
    void disp(int id)
    {
        this.Stu_Id=id;
        Subject obj=new Subject();
        System.out.println(id);
        obj.dispSub("Java","DS","TOC","CG");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Student obj=new Student();
        obj.disp(101);
    }
}
##
Create a class with a method that prints "This is parent class" and its subclass with another method that prints "This is child class". Now, create an object for each of the class and call
class Pclass{
  public void pmethod(){
   System.out.println("This is parent class");
  }
}

class Cclass extends Pclass{
  public void cmethod(){
    System.out.println("This is child class");
  }
}

public class Ans{
  public static void main(String[] args){
    Pclass obj=new Pclass();
    obj.pmethod();
    Cclass obj2=new Cclass();
    obj2.cmethod();
    obj2.pmethod();
  }
}	
##
Create a class with a method that prints "This is parent class" and its subclass 
class Pclass{
  public void pmethod(){
   System.out.println("This is parent class");
  }
}

class Cclass extends Pclass{
  public void cmethod(){
    System.out.println("This is child class");
  }
}

public class Ans{
  public static void main(String[] args){
    Pclass obj=new Pclass();
    obj.pmethod();
    Cclass obj2=new Cclass();
    obj2.cmethod();
    obj2.pmethod();
  }
}	
##
Write a Java Program to implement following IS-A relationship.
import java.util.*;
class College
{
    
}
class Student extends College
{
    int rollNo;
    String Name;
    void get()
    {
        Scanner sc=new Scanner(System.in);
        rollNo=sc.nextInt();
        Name=sc.next();
    }
    void display()
    {
        System.out.println("RollNo: "+rollNo+"Name: "+Name);
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Student obj=new Student();
        obj.get();
        obj.display();
    }
}
##
Write a Java program for below situation, Employee object contains member 'Emp_Id'. It contains object named name, which contains its own informations such as Fname, Mname, Lname.
class Name
{
    String Fname;
    String Mname;
    String Lname;
    void dispName(String fn,String mn,String ln)
    {
        this.Fname=fn;
        this.Mname=mn;
        this.Lname=ln;
        System.out.println(fn+" "+mn+" "+ln);
    }
}
class Employee
{
    int Emp_Id;
    Name obj=new Name();
    void dispId(int id)
    {
        this.Emp_Id=id;
        System.out.println(id);
        obj.dispName("B","Leo","John");
    }
}

public class Main
{
    public static void main(String[] args)
    {
       Employee obj=new Employee();
       obj.dispId(101);
    }
}
##
Write a Java program to implement following inheritance scenario.
import java.util.Scanner;

class Student {

  String name;
  String cls;
  int roll_no;
  
  
  void getData() {

    Scanner sc=new Scanner(System.in);
    name=sc.next();
    cls=sc.next();
    roll_no=sc.nextInt();
  }

}

class Grade extends Student {
    float tmarks;
    float per;

void calGrade()
{
   tmarks=(float)98.5;    
   per=(float)tmarks/5;
}
 void display() {

    System.out.println("Roll Number is: "+roll_no+"\nYour name is: "+name+"\nYour class is: "+cls+"\nYour percentage is: "+per);

  }
}
public class Main
{
  public static void main(String args[]) {

    Grade obj = new Grade();
    obj.getData();
    obj.calGrade();
    obj.display();

  }
}
##
Create a class named 'Animal' which includes methods like eat() and sleep().
class Animal{
   void eat(){
    System.out.println("Calling Eat Method ");
  }
  void sleep(){
    System.out.println("Calling Sleep Method ");
  }
}

class Bird extends Animal{

  public void fly(){
    System.out.println("Calling Fly Method");
  }
}

public class Ans{
  public static void main(String[] args){
    Animal obj1=new Animal();
    Bird obj2=new Bird();
    obj1.eat();
    obj1.sleep();
    obj2.eat();
    obj2.sleep();
    obj2.fly();
  }
}	
##
Write a Java program for below situation, Employee object contains Emp_Id. It contains one more object named name, which contains its own informations such as Fname, Mname, Lname.
class Name
{
    String Fname;
    String Mname;
    String Lname;
    void dispName(String fn,String mn,String ln)
    {
        this.Fname=fn;
        this.Mname=mn;
        this.Lname=ln;
        System.out.println(fn+" "+mn+" "+ln);
    }
}
class Employee
{
    int Emp_Id;
    void dispID(int id)
    {
       this.Emp_Id=id;
       System.out.println(id);
       Name obj=new Name();
       obj.dispName("B","Leo","John");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Employee obj=new Employee();
        obj.dispID(101);
    }
}
##
Write a Java program for below scenario.  Consider there are 100 students in a college named "ABC", each student have their own unique roll number and name but the college remains the same among all the 100 students. The college field is declared as static so it can occupy memory only once. Create class and objects for 4 students.
class Student {
    String name;
    int rollno;
    static String college="ABC";
    void display()
    {
        System.out.println("Rollno is "+rollno+" Name is "+name+" College Name is "+college);
    }
}
public class StaticVariableExample {
    public static void main(String[] args) {
        
       Student student1=new Student();
        student1.rollno=101;
        student1.name="Student1";
        student1.display();
        
        Student student2=new Student();
        student2.rollno=102;
        student2.name="Student2";
        student2.display();
        
        Student student3=new Student();
        student3.rollno=103;
        student3.name="Student3";
        student3.display();
        
        Student student4=new Student();
        student4.rollno=104;
        student4.name="Student4";
        student4.display();
    }
}
##
Write a Java program for below situation, Employee object contains member 'name' and It contains object named address, which contains its own informations such as doorno, street,b city,  etc.
class Address
{
    int doorno;
    String street;
    String city;
    void dispAddr(int d_no,String st,String City)
    {
        this.doorno=d_no;
        this.street=st;
        this.city=City;
        System.out.println(d_no+","+st+","+City);
    }
}
class Employee
{
    String name;
    void dispName(String s)
    {
        this.name=s;
        System.out.println(s);
        Address addr=new Address();
        addr.dispAddr(10,"100 Feet Road","Chennai");
    }
}

public class Main
{
    public static void main(String[] args)
    {
        Employee obj=new Employee();
        obj.dispName("Leo");
    }
}
##
Create a final class 'Company' with Company Name,Company Id and Address as its member, make Company_Id as final variable with value "ED12G45" and write print() to display its member in the Output.
final class Company
{
    final String Company_Id="ED12G45";
    String name="ABC Foods";
    String addr="Chennai";
    void print()
    {
        System.out.println("Company Details are,"+"\nId is "+Company_Id+"\nName is "+name+"\nAddress is "+addr);
    }
}
public class Main{
public static void main(String[] args)
{
    Company obj=new Company();
    obj.print();
}
}
##
Create a class named 'Parent' which includes methods display(). [display() will print "Parent Class"]
class Parent {

  public void display()
  {
    System.out.println("Parent Class");
  }
}

class Child extends Parent {
  public void display()
  {
    System.out.println("Child Class");
  } 
  public void print()
  {
    display();
    super.display();
  }
}

public class Main {
  public static void main(String[] args) {
      Child obj=new Child();
      obj.print();
  }
}
##
Create a class named 'Sports' which includes its constructor. [constructor will print "Sports Class"]
class Sports {

  Sports()
  {
      System.out.println("Sports Class");
  }
  
}

class Indoor extends Sports {
    Indoor()
    {
        super();
        System.out.println("Indoor Games Class");
    }
}
class Chess extends Indoor {
    Chess()
    {
        super();
        System.out.println("Chess Class");
    }
}
public class Main {
  public static void main(String[] args) {
        Chess obj=new Chess();
  }
}
##
Create a class named 'Employee' which includes,
import java.util.*;
class Employee
{
   String Eid;
   float salary;
   Employee()
   {
       System.out.println("Default Constructor of Employee Class");
   }
   Employee(String id,float s)
   {
       this();
       this.Eid=id;
       this.salary=s;
       System.out.println("Parameterized Constructor of Employee Class");
   }
   void display()
   {
       System.out.println("Employee_id="+Eid+" Salary="+salary);
   }
}
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        String id=sc.next();
        float salary=sc.nextFloat();
        Employee obj=new Employee(id,salary);
        obj.display();
    }
}
##
Create a class named 'Gadgets' which includes methods display(). [display() will print "I am a Gadget"]
class Gadgets {

  public void display(){
    System.out.println( "I am a Gadget");
  }
}

class Laptop extends Gadgets{

  public void display(){
    System.out.println("I am a Laptop");
  }

  public void print(){
    display();
    super.display();
  }
}

public class Main {
  public static void main(String[] args) {
    Laptop obj = new Laptop();
    obj.print();
  }
}
##
Create a class named 'Animal' which includes its constructor. [constructor will print " I am an Animal"]
class Animal {

   Animal() {
    System.out.println("I am an animal");
  }
}

class Dog extends Animal {


  Dog() {
    super();
    System.out.println("I am a dog");
  }
}
public class Main {
  public static void main(String[] args) {
    Dog dog1 = new Dog();
  }
}
##
Create a class named 'Employee' which includes,
import java.util.*;
class Employee
{
    String E_id;
    float salary;
    Employee()
    {
        System.out.println("Default Constructor of Employee Class");
    }
    Employee(String s,float f)
    {
        this();
        this.E_id=s;
        this.salary=f;
        System.out.println("Parameterized Constructor of Employee Class");
    }
    void display()
    {
        System.out.println("Employee_id="+E_id+" Salary="+salary);
    }
}
public class Main
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        String e;
        float f;
        e=sc.next();
        f=sc.nextFloat();
        Employee obj=new Employee(e,f);
        obj.display();
    }
}
##
Write a program to Read input ,split word from sentence.
import java.util.Scanner;
	public class Main{  
	public static void main(String args[]){  
	Scanner sc = new Scanner(System.in);  
	String str = sc.nextLine();
	StringBuilder sb=new StringBuilder(str);
	String str1=sb.toString();
 
	String[] words=str1.split("\\s");
	for(String w:words){  
	System.out.println(w);  
	}  
	}} 
##
Create a string then print particular string using substring() with given end index value. (0-7) , (0-5) ,(3-5)

import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 = sc.nextLine();

 
    System.out.println(str1.substring(0, 7));  

    
    System.out.println(str1.substring(0, 5));  


    
    System.out.println(str1.substring(3, 5));  
  }
}
##
Write a java program to print returns character at the index of 2 using stringconcept.
import java.util.*;
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String str1 =sc.nextLine();

   
    System.out.println(str1.charAt(2));


  }
}
##
Given a string, return a new string made of n copies of the first 2 chars of the original string,where n is the length of the string. The string may be any length. If there are fewer than 2 chars, use whatever is there. If input is "Wipro" then output should be "WiWiWiWiWi".

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String str = in.nextLine();
        System.out.println(nCopyString(str));
    }

    static String nCopyString(String s) {
        int n = s.length();
        String base = s.substring(0, 2);

        String str = "";

        for(int i=0; i<n; i++)
            str += base;
            
        return str;
    }

##
Given a string of even length, return the first half. So the string "CatDog" yields "Cat". If the string length is odd number then return null.
import java.util.Scanner;
public class Assignment4 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);  // Create a Scanner object
        String str = sc.nextLine();
		
		String output;
		
		if (str.length() % 2 == 0) {
			output = str.substring(0, str.length() / 2);
		} else {
			output = null;
		}
		
		System.out.println(output);
	}

}
##
Write a java program to use reverse() method of the StringBuilder class reverses the current String.
import java.util.*;
public class StringBufferExample5{  
public static void main(String args[]){  
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.reverse();  
System.out.println(sb);  
}  
}  
##
Write a java program passing string str1 value in the StringBuffer object and “sb” is pointing to that object i.e. the address of the StringBuffer object is stored in reference variable sb.
import java.util.*;
public class CapacityTest2 { 
public static void main(String[ ] args) 
{ 
  Scanner sc=new Scanner(System.in);
  String str1=sc.nextLine();
  StringBuilder sb = new StringBuilder(str1); 
  int length = sb.length(); 
  int capacity = sb.length() + 16; 
  
  System.out.println(length); 
  System.out.println(capacity); 
  } 
}
##
Write a java program to Read input replace character in word:
import java.util.Scanner;
public class Main{  
public static void main(String args[]){  
//String s1="javatpoint is a very good website";
Scanner sc = new Scanner(System.in);  // Create a Scanner object
String str = sc.nextLine();

String replaceString=str.replaceAll("a","e");//replaces all occurrences of "a" to "e"  
System.out.println(replaceString);  
}}
##
Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result. If input is “pot” and “lap”, then output should be “ploatp”.
import java.util.Scanner;
public class Assignment11 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String a =sc.nextLine();
		String b =sc.nextLine();
		
		String bigger = a.length() > b.length() ? a : b;
		String smaller = a.length() < b.length() ? a : b;

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < smaller.length(); i++) {
			sb.append(a.charAt(i)).append(b.charAt(i));
		}
		
		sb.append(bigger.substring(smaller.length(), bigger.length()));
		
		System.out.println(sb);
	}

}
##
Write a java program to use delete() method of the StringBuilder class deletes the String from the specified beginIndex to endIndex.
import java.util.*;
public class StringBufferExample4{  
public static void main(String args[]){
Scanner sc=new Scanner(System.in);
String str1=sc.nextLine();
StringBuffer sb=new StringBuffer(str1);  
sb.delete(1,3);  
System.out.println(sb);  
}  
}  
##
Write a program to Read input ,split word from sentence and use string builder.
import java.util.Scanner;
	public class Main{  
	public static void main(String args[]){  
	Scanner sc = new Scanner(System.in);  
	String str = sc.nextLine();
	StringBuilder sb=new StringBuilder(str);
	String str1=sb.toString();
 
	String[] words=str1.split("\\s");
	for(String w:words){  
	System.out.println(w);  
	}  
	}} 
##
write a java program to print two value using toString().
public class Test { 

   public static void main(String args[]) {
      Integer x = 5;

      System.out.println(x.toString());  
      System.out.println(Integer.toString(12)); 
   }
}
##
Write a java program this method converts the String it's used on into a character array. It returns a new character array, containing all the characters (in order) that are in the String.
import java.util.*;
public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        String ourString = sc.nextLine();

        System.out.println(Arrays.toString(ourString.toCharArray()));
    }
}
##
Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged. If the input is "xwelcomex", then output is "welcome".

import java.util.*;
public class Assignment7 {

	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
		String str =sc.nextLine();
		
		if (str.charAt(0) == 'x')
			str = str.substring(1, str.length());
		
		if (str.charAt(str.length() - 1) == 'x')
			str = str.substring(0, str.length() - 1);
		
		System.out.println(str);

	}

}
##
Write a java program using StringTokenizer class that tokenizes a string "My name is Java Programming" on the basis of whitespace.
import java.util.StringTokenizer;  
public class Simple{  
 public static void main(String args[]){  
   StringTokenizer st = new StringTokenizer("My name is Java Programming"," ");  
     while (st.hasMoreTokens()) {  
         System.out.println(st.nextToken());  
     }  
   }  
}  
##
Write a java program to calculates the number of tokens present in the tokenizer String.

import java.util.StringTokenizer;    
public class StringTokenizer3  
{    
  
 public static void main(String args[])  
 {    
   
   StringTokenizer st = new StringTokenizer("Hello Everyone Have a nice day"," ");    
          
         System.out.println("Total number of Tokens: "+st.countTokens());    
 }    
}  
##
Write a java program to use string tokenizer and use while loop to process the whole string(see sample testcase) until no more token is available.
import java.util. * ;
import java.io. * ;
public class HasMoreTokensMethod {
  public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    String myString =sc.nextLine();
    StringTokenizer st = new StringTokenizer(myString);
    System.out.println("Input string is: " + myString);
    int n = st.countTokens();
    while (n != 0)
    if (st.hasMoreTokens()) {
      System.out.println("The token is present");
      n--;
    }
    System.out.println("There is no more token in the string");
  }
}
##
write a java program to print multiple word using string builder in java
public class StringBuilderExample{  
public static void main(String args[]){  
StringBuilder sb=new StringBuilder("Hello\n");  
sb.append("Java");//now original string is changed  
System.out.println(sb);//prints Hello Java  
}  
}  
##

---
Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
        System.out.println("Read UFT: " + di.readUTF());
    System.out.println("Read int: " + di.readInt());
    System.out.println("Read char: " + di.readChar());
    
      di.close();
    fi.close();


##
Display the number of byte value using predefined function available

import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Using the skip() method
      input.skip(2);
      System.out.print("Input stream after skipping 2 bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}

---
Initialize DataInputStream object name as "di"
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
        System.out.println("Read UFT: " + di.readUTF());
    System.out.println("Read int: " + di.readInt());
    System.out.println("Read char: " + di.readChar());
    
      di.close();
    fi.close();


    ##
    Display the number of byte value using predefined function available
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Using the skip() method
      input.skip(2);
      System.out.print("Input stream after skipping 2 bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}










Implement a Java Program to write a integer '65'  in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
                 dout.writeInt(65);    
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");

##
Write a Java Program to read a character Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for reading
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 char data =di.readChar();
   
      System.out.println(data);  
    input.close();
    di.close();
    

##
Write a Java Program for  displaying the number of bytes in the  file "Output.txt" using DataInputStream
 FileInputStream fi = new FileInputStream("Output.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
      di.close();
    fi.close();

##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStream
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();    
      bout.write(69);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
      
       

##
create two files F1.txt and F2.txt  Read the two Integer value from the user, Summation of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
      
       
       

##
Write a Java Program for  displaying number of bytes & read the String,Float,Character value data in the  file "OutputFile.txt" using DataInputStream
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
        System.out.println("Read UFT: " + di.readUTF());
    
    
    System.out.println("Read Float: " + di.readFloat());
    System.out.println("Read Char: " + di.readChar());
 
      di.close();
    fi.close();

##
Write a Java Program to read a String Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for reading
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
   String data =di.readUTF();
   
      System.out.println(data);  
    input.close();
    di.close();
    

##
Write a Java Program to read a integer Value from a file "OutputFile.txt" using DataInputStream . Use Predefined Function read for reading
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
   int data =di.readInt();
   
      System.out.println(data);  
    input.close();
    di.close();
    


##
Write a Java Program for read the float data in the  file "OutputFile.txt" using DataInputStream.
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
   
        float intvalue=di.readFloat();
        System.out.println("File result: "+intvalue);
    
      di.close();
    fi.close();

##
Write a java program to write data using ByteArrayOutputStream.
import java.io.*;
public class Main {
    public static void main(String[] args) {

    String data = "This is a line of text inside the string.";

    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Output stream: " + streamData);

      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a Java Program for  displaying number of bytes & read the integer and character data in the  file "OutputFile.txt" using DataInputStream
 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
        System.out.println("Read UFT: " + di.readUTF());
    System.out.println("Read int: " + di.readInt());
    System.out.println("Read char: " + di.readChar());
    
      di.close();
    fi.close();

##
Write a Java Program to store an integer , Double  and character value in a file "testout.txt" using DataOutputStream
FileOutputStream fout=new FileOutputStream("testout.txt");    
DataOutputStream dout=new DataOutputStream(fout);
Scanner sc=new Scanner(System.in);
int num=sc.nextInt();
double db=sc.nextDouble();
char ch=sc.next().charAt(0);
                 dout.writeInt(num);  
                 dout.writeDouble(db);
                 dout.writeChar(ch);
                 dout.close();    
                 fout.close();
                 System.out.println("Successfully Completed");

##
Note Initialize DataInputStream Object name as "di"
 FileInputStream input = new FileInputStream("OutputFile.txt");  
    DataInputStream di = new DataInputStream(input);  
   // int count = input.available();  
 double data =di.readDouble();
   
      System.out.println(data);  
    input.close();
    di.close();
    

##
Write a java program to write data using ByteArrayOutputStream.
import java.io.*;
public class Main {
    public static void main(String[] args) {

    String data = "This is a line of text inside the string.";

    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Output stream: " + streamData);

      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a java program to display the number of bytes available using ByteArrayInputStream.
import java.io.ByteArrayInputStream;

    public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a java program to display the number of bytes after skip function using ByteArrayInputStream.
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 12, 22, 33, 45 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Using the skip() method
      input.skip(2);
      System.out.print("Input stream after skipping 2 bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a java program to write common data into 2 files (F1.txt & F2.txt) using ByteArrayOutputStream
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value+value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
      
       
       

##
Write a java program to read data using ByteArrayInputStream.
import java.io.ByteArrayInputStream;
public class Main {
  public static void main(String[] args) {

    // Creates an array of byte
    byte[] array = {1, 2, 3, 4};

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
create two files F1.txt and F2.txt  Read the two Integer value from the user, Multiplication of two integer value should be in the F1.txt and F2.txt
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      int value1=sc.nextInt();
  
      bout.write(value*value1);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
      
       
       

##
Initialize byte[] array = {1, 2, 3, 4};
import java.io.ByteArrayInputStream;
import java.util.*;
   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);
       Scanner sc=new Scanner(System.in);
       int skvalue=sc.nextInt();
      // Using the skip()  method
      input.skip(skvalue);
      System.out.print("Input stream after skipping " +skvalue+ "  bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}

##
Initialize start value as 2 and length as 7
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,2,7);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Read the Integer value from the user
 
      FileOutputStream fout1=new FileOutputStream("F1.txt");    
      FileOutputStream fout2=new FileOutputStream("F2.txt");    
      ByteArrayOutputStream bout=new ByteArrayOutputStream();  
      Scanner sc=new Scanner(System.in);
      int value=sc.nextInt();
      bout.write(value);    
      bout.writeTo(fout1);    
      bout.writeTo(fout2);    
      bout.close();//has no effect    
      System.out.println("Success...");    
      
       

##
The bytes read from the input stream: 65, 66,
import java.io.ByteArrayInputStream;
import java.util.*;
public class Main {
  public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
String str=sc.nextLine();
    // Creates an array of byte
    byte[] array = str.getBytes();

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      System.out.print("The bytes read from the input stream: ");

      for(int i= 0; i < array.length; i++) {

        // Reads the bytes
        int data = input.read();
        System.out.print(data + ", ");
      }
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Input stream after skipping 2 bytes: 3, 4,
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Create an array of bytes
    byte[] array = { 1, 2, 3, 4 };
    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Using the skip() method
      input.skip(2);
      System.out.print("Input stream after skipping 2 bytes: ");

      int data = input.read();
      while (data != -1) {
        System.out.print(data + ", ");
        data = input.read();
      }

      // close() method
      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}

##
Initialize start value as 3 and length as 6
import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data =sc.nextLine();
    try {
      // Creates an output stream
      ByteArrayOutputStream out = new ByteArrayOutputStream();
      byte[] array = data.getBytes();

      // Writes data to the output stream
      out.write(array,3,6);

      // Retrieves data from the output stream in string format
      String streamData = out.toString();
      System.out.println("Original data: " + data);
      System.out.println("Output stream: " + streamData);
      out.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a java program to display the number of bytes after read  function using ByteArrayInputStream.
import java.io.ByteArrayInputStream;

   
public class Main {

  public static void main(String args[]) {

    // Creates an array of bytes
    byte[] array = { 1, 2, 3, 4 };

    try {
      ByteArrayInputStream input = new ByteArrayInputStream(array);

      // Returns the available number of bytes
      System.out.println("Available bytes at the beginning: " + input.available());

      // Reads 2 bytes from the input stream
      input.read();
     
      // Returns the available number of bytes
      System.out.println("Available bytes at the end: " + input.available());

      input.close();
    }

    catch (Exception e) {
      e.getStackTrace();
    }
  }
}
      

    

##
Write a Java Program to print the String value Using StringReader
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String srg = sc.nextLine();  
        StringReader reader = new StringReader(srg);  
        int k=0; 
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  

##
Create a Java Program To display  and skip the specified number of characters using the predefined Method Skip in StringReader
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
    int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
             input.skip(skipnumber);
             System.out.println("Data after skipping "+skipnumber+" characters:");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a Java Program to print the string "String Writer" in the outputscreen using StringWriter
import java.io.StringWriter;

public class Main {
  public static void main(String[] args) {

    String data = "String Writer";

    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);

      // Prints the string writer
      System.out.println("Data in the StringWriter: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Create a Java Program to display the string content after skipping 5 characters using the predefined Method Skip in StringReader
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
   // int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
           input.skip(5);
             System.out.println("Data after skipping ");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a Java Program to print the character in the outputscreen using StringWriter
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     int data=sc.nextInt();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);

      // Prints the string writer
      System.out.println("Input Int Value: " + data);
      System.out.println("Equivalent Character: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a Java Program to append the String with user defined String  using StringWriter
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

      
     Scanner sc=new Scanner(System.in);
     String data=sc.nextLine();
     String append =sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);
      output.append(append);
      // Prints the string writer
      System.out.println("Input Value: " + data);
      System.out.println("After Append: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Create a Java Program to display the string content after skipping 3 characters using the predefined Method Skip in StringReader
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
   // int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
           input.skip(3);
             System.out.println("Data after skipping ");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a Java Program to print the String value "Hi Everybody,Welcome to Java StringReader." Using StringReader
import java.io.StringReader;  
public class StringReaderExample {  
    public static void main(String[] args) throws Exception {  
        String srg = "Hi Everybody,Welcome to Java StringReader.";  
        StringReader reader = new StringReader(srg);  
        int k=0;  
            while((k=reader.read())!=-1){  
                System.out.print((char)k);  
            }  
        }  
}  

##
Create a Java Program to display the string content after skipping 4 characters using the predefined Method Skip in StringReader
import java.io.StringReader;
import java.util.*;


public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String data = sc.nextLine();
   // int skipnumber=sc.nextInt();
    System.out.println("Original data: " + data);

    try {
          int k=0; 
           StringReader input = new StringReader(data);
           input.skip(4);
             System.out.println("Data after skipping ");
     
            while((k=input.read())!=-1){  
                System.out.print((char)k);  
            }  
     
      input.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a Java Program to print the string in the outputscreen using StringWriter
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

    
     Scanner sc=new Scanner(System.in);
     String data = sc.nextLine();
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);

      // Prints the string writer
      System.out.println("Data in the StringWriter: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a Java Program to append the String "Java" in the user defined String  using StringWriter
import java.io.StringWriter;
import java.util.*;
public class Main {
  public static void main(String[] args) {

      
     Scanner sc=new Scanner(System.in);
     String data=sc.nextLine();
   
    try {
      // Create a StringWriter with default string buffer capacity
      StringWriter output = new StringWriter();

      // Writes data to the string buffer
      output.write(data);
      output.append("Java");
      // Prints the string writer
      System.out.println("Input Value: " + data);
      System.out.println("After Append: " + output);

      output.close();
    }

    catch(Exception e) {
      e.getStackTrace();
    }
  }
}

##
Write a Java Program to print the String value with the help of character array Using StringReader
import java.io.StringReader; 
import java.util.*;
public class StringReaderExample {  
    public static void main(String[] args) throws Exception 
    {  
        Scanner sc=new Scanner(System.in);
        String data = sc.nextLine();  
       
       char[] array = new char[15];

    try {
      // Create a StringReader
      StringReader input = new StringReader(data);

      //Use the read method
      input.read(array);
      System.out.println("Data read from the string:");
      System.out.println(array);

      input.close();
    }
    catch(Exception e) {
      e.getStackTrace();
    }
        }  
}  

##
Write a Java program to store the Student details(name,dept,rollno) in a file "student.txt" using Serialization(Serializing an Object)
 
  
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
            int roll=sc.nextInt();
           
            Studentinfo si1 = new Studentinfo(name,dept,roll);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 

##
Write a Java program to read the Student details(name,dept,rollno)from a file "student.txt" using Deserialization(deserialize the object)
  Studentinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("student.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Studentinfo)ois.readObject();
        }
         catch (Exception e)
        {
            
            System.out.println(e);
        }
          System.out.println("Deserialization-Student Name:"+si.name);
            System.out. println("Deserialization-Student Department:"+si.dept);
             System.out. println("Deserialization-Student RollNo:"+si.rollno);
       
            
           
 

##
Write a Java program to perform Transient in  Employee details(name,designation,id)
class Employeeinfo implements Serializable
{
    String name;
    String desi;
    transient int id;
   
    Employeeinfo(String n, String r, int na)
    {
    this.name = n;
    this.desi = r;
    this.id=na;
   
    }
}

##
Write a Java program to perform Transient in  Student details(name,dept)
 class Studentinfo implements Serializable
{
    String name;
   transient String dept;
   
    Studentinfo(String n, String r)
    {
    this.name = n;
    this.dept = r;
   
    }
}
 

##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Student Database.
    import java.io.*;    
    class Person implements Serializable{    
     int id;    
     String name;    
     Person(int id, String name) {    
      this.id = id;    
      this.name = name;    
     }    
    }    
    class Student extends Person{    
     String course;    
     int fee;    
     public Student(int id, String name, String course, int fee) {    
      super(id,name);    
      this.course=course;    
      this.fee=fee;    
     }    
    }    
   

##
Write a Java program to store the Student details(name,rollno) in a file "student.txt" using Serialization(Serializing an Object)
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            int rollno = sc.nextInt();
           
            Studentinfo si1 = new Studentinfo(name,rollno);
            FileOutputStream fos = new FileOutputStream("student.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 

##
Write a Java program to read the Employee details(name,designation)  from a file "emp.txt" using Deserialization(deserialize the object)
  Employeeinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("emp.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Employeeinfo)ois.readObject();
        }
         catch (Exception e)
        {
            e.printStackTrace(); }
       
 System.out.println("Deserialization--Employee Name:"+si.name);
            System.out. println("Deserialization--Employee Designation:"+si.desi);

##
Write a Java program to perform Transient in  Student details(name,rollno)
 class Studentinfo implements Serializable
{
    String name;
    transient int rid;
   
    Studentinfo(String n, int r)
    {
    this.name = n;
    this.rid = r;
   
    }
}  
           
 

##
Write a Java program to read the Student details(name,rollno) from a file "student.txt" using Deserialization(deserialize the object)
   Studentinfo si=null;
  try
        {
            FileInputStream fis = new FileInputStream("student.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Studentinfo)ois.readObject();
        }
         catch (Exception e)
        {
            System.out.println(e);
            }
             System.out.println("Deserialization-Student Name:"+si.name);
            System.out. println("Deserialization-Student Rollno:"+si.rid);
       
           
 

##
Write a Java program to read the Student details(name,dept) from a file "student.txt" using Deserialization(deserialize the object)
  Studentinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("student.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Studentinfo)ois.readObject();
        }
         catch (Exception e)
        {
          System.out.println(e);  
            
        }
         System.out.println("Deserialization--Student Name:"+si.name);
      System.out. println("Deserialization--Student Department:"+si.dept);
       
          


##
Write a Java program to store the Employee details(name,designation) in a file "emp.txt" using Serialization(Serializing an Object)
 
 try
        {
            Scanner sc=new Scanner(System.in);
            String name=sc.nextLine();
            String dept = sc.nextLine();
           
            Employeeinfo si1 = new Employeeinfo(name,dept);
            FileOutputStream fos = new FileOutputStream("emp.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(si1);
            oos.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        } 

##
Write a Java program to read the Student details(name,dept,rollno)from a file "student.txt" using Deserialization(deserialize the object)
  Studentinfo si=null ;
        try
        {
            FileInputStream fis = new FileInputStream("student.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            si = (Studentinfo)ois.readObject();
        }
         catch (Exception e)
        {
            
            System.out.println(e);
        }
          System.out.println("Deserialization-Student Name:"+si.name);
            System.out. println("Deserialization-Student Department:"+si.dept);
             System.out. println("Deserialization-Student RollNo:"+si.rollno);
       


##
Write a java Program to perform Serialization & deserialization  with Inheritance (IS-A Relationship) concept for Employee Database
 class Employeeinfo implements Serializable
{
    String name;
    String desi;
    
   
    Employeeinfo(String n, String r)
    {
    this.name = n;
    this.desi = r;
   
    }
}
    class Employeesal extends Employeeinfo{    
    double Salary;   
      
     
     public Employeesal(String name, String desi, double Salary) {    
      super(name,desi);    
      this.Salary=Salary;    
       
     }    
    } 

    
    
    ##
    Initialize DataInputStream object name as "di"

 FileInputStream fi = new FileInputStream("OutputFile.txt");
    DataInputStream di = new DataInputStream(fi);
    
     System.out.println("Available number of bytes to read: " +di.available());
        System.out.println("Read UFT: " + di.readUTF());
    System.out.println("Read int: " + di.readInt());
    System.out.println("Read char: " + di.readChar());
    
      di.close();
    fi.close();










            
           
 














































---
Apply encapsulation concepts private fields like accountno(long datatype use) and use getter and setter methods display the output.
import java.util.*;
class Account {  

private long acc_no;  


public long getAcc_no() {  
    return acc_no;  
}  
public void setAcc_no(long acc_no) {  
    this.acc_no = acc_no;  
}  

    
}  
public class TestEncapsulation {  
public static void main(String[] args) {  
    Scanner sc=new Scanner(System.in);
    Account acc=new Account();  
   
    acc.setAcc_no(sc.nextLong());  
    
  
    System.out.println(acc.getAcc_no());  
}  
}  
##
Write a java program for product of two numbers use encapsulation concepts.
import java.util.*;
class add
{
    private int a,b;
    public void sno1(int x)
    {
        a=x;
    }
    public void sno2(int y)
    {
        b=y;
    }
    void sum()
    {
        int out=a*b;
        System.out.print(out);
    }
}
public class ss{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        add obj=new add();
        obj.sno1(sc.nextInt());
        obj.sno2(sc.nextInt());
        obj.sum();
    }
}
##
Write a java program for factorial of number using encapsulation concepts.
import java.util.*;
class Person {
  private int a;
  public int get() {
   
     int i,fact=1; 
     for(i=1;i<=a;i++){    
      fact=fact*i; 
     }
      return fact;
     
  }
  public void set(int ano) {
    this.a = ano;
        
  }    
  
}
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    Person p1 = new Person();
    p1.set(sc.nextInt());
    System.out.println("Factorial is " + p1.get());
  }
}
##
Apply encapsulation concepts that has only one field with its setter and getter methods.Display the name of the person use java code.
import java.util.*;
class Student{  

private String name;  
 
public String getName(){  
return name;  
}  

public void setName(String name){  
this.name=name;
}  
}  
public class Test{  
public static void main(String[] args){  
Scanner sc=new Scanner(System.in);
Student s=new Student();  

s.setName(sc.nextLine());  

System.out.println(s.getName());  
}  
}  
##
Write a java program for product of two numbers use encapsulation concepts.
import java.util.*;
class add
{
    private int a,b;
    public void sno1(int x)
    {
        a=x;
    }
    public void sno2(int y)
    {
        b=y;
    }
    void sum()
    {
        int out=a*b;
        System.out.print(out);
    }
}
public class ss{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        add obj=new add();
        obj.sno1(sc.nextInt());
        obj.sno2(sc.nextInt());
        obj.sum();
    }
}
##
Write a java program for factorial of number using encapsulation concepts.
import java.util.*;
class Person {
  private int a;
  public int get() {
   
     int i,fact=1; 
     for(i=1;i<=a;i++){    
      fact=fact*i; 
     }
      return fact;
     
  }
  public void set(int ano) {
    this.a = ano;
        
  }    
  
}
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    Person p1 = new Person();
    p1.set(sc.nextInt());
    System.out.println("Factorial is " + p1.get());

  }
}
##
Write a java program to display the age of the person.Use access modifier private to achieve the data hiding concepts.
import java.util.*;
class Person {


  private int age;

 
  public int getAge() {
    return age;
  }


  public void setAge(int age) {
    this.age = age;
  }
}

public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    
    Person p1 = new Person();

    
    p1.setAge(sc.nextInt());


    System.out.println("My age is " + p1.getAge());
  }
}
##
Write a java program to display the rank of the student.rank data should given in private with the help of setter and getter method display the rank.
class Student {
    private int rank;
    public int getRank()
    {
        return rank;
    }
    public void setRank(int rank)
    {
        this.rank = rank;
    }
}
public class school {
    public static void main(String[] args) {
        Student s = new Student();
        s.setRank(1022);
        System.out.println("Student rank is " + s.getRank());
    }
}
##
Write a java program to print the pattern. Read the value at run time and use encapsulation concepts.
import java.util.*;
class Person {
  private int a;
  public void get() {
   
    for(int i=0; i<a; i++)   
    {   

    for(int j=0; j<=i; j++)   
    {   

    System.out.print("* ");   
    }   
  
    System.out.println();   
      
    }
  }
  
  
  public void set(int ano) {
    this.a = ano;
        
  }    
  
}
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    Person p1 = new Person();
    p1.set(sc.nextInt());
    p1.get();
  }
}
##
Create a java program to print the sum of two number use tightly encapsulated class. 
import java.util.*;
public class SetAndGet {
private String a;
private String b;

public void getadd() {
    int a1=Integer.parseInt(a);
    int b1=Integer.parseInt(b);
	System.out.print("Sum is " + (a1+b1)); 
	
}
public void setadd(String a,String b) {
 this.a =a;
 this.b=b;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 String str1=sc.nextLine();
 
 obj.setadd(str,str1);
 
 obj.getadd();
}
}
##
Create a java to print the factorial of given number with the help of setter and getter method and use the tightly encapsulated concepts.
import java.util.*;
public class SetAndGet {
 
 private int w;



public int getWidth() {
    int fact=1;
    for(int i=1;i<=w;i++){    
      fact=fact*i;    
    }    
 return fact;
}

public void setWidth(int w) {
 this.w = w;
}




public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 
 
 obj.setWidth(s1);
 
 System.out.println("Factorial of "+s1+" is: "+obj.getWidth());

}


}
##
Write a Java Program to demonstrate the use of break statement and to print upto 1 to 4 nos  use getter and setter method with tightly encapsulated class.
import java.util.*;
public class SetAndGet {
private int s;
public void getlines() {
   for(int i=1;i<=s;i++){  
        if(i==5){  
           break;  
        }  
        System.out.println(i);  
    }  
}  
public void setlines(int s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int str=sc.nextInt();
 obj.setlines(str);
 obj.getlines();
}
}
##
Create a java program for given number is armstrong number or not all must use tightly encapsulated class. 
import java.util.*;
public class SetAndGet {
private String ar;


public void getarm() {
    int arm=0,a,temp;
    int n=Integer.parseInt(ar);
    temp=n;
	while(n!=0)
	{
		a=n%10;
		arm=arm+(a*a*a);
		n=n/10;
	}
	if(arm==temp)
	System.out.println(temp+" is a armstrong number ");
	else
	System.out.println(temp+" is not a armstrong number ");
	
}
public void setarm(String ar) {
 this.ar =ar;
 
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();

 
 obj.setarm(str);
 
 obj.getarm();
}
}
##
Write a java program to print name and id of the student, to read the input at runtime and with the help of getter and setter method and implement the tightly encapsulated class  to read and display it.
import java.util.*;
public class SetAndGet {
 
 private String name;
 private int id;


public String getName() {
 return name;
}

public void setName(String name) {
 this.name = name;
}

public int getId() {
 return id;
}

public void setId(int id) {
 this.id = id;
}


public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String s1=sc.nextLine();
 int sid=sc.nextInt();
 
 obj.setName(s1);
 obj.setId(sid);
 System.out.println(obj.getName());
 System.out.println(obj.getId());
}


}
##
Write a Java Program to demonstrate the use of break statement and to print upto 1 to 4 nos  use getter and setter method with tightly encapsulated class.
import java.util.*;
public class SetAndGet {
private int s;
public void getlines() {
   for(int i=1;i<=s;i++){  
        if(i==5){  
           break;  
        }  
        System.out.println(i);  
    }  
}  
public void setlines(int s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int str=sc.nextInt();
 obj.setlines(str);
 obj.getlines();
}
}
##
Create a java program to display the reverse string and  use tightly encapsulated class. 
import java.util.*;
public class SetAndGet {
private String s;

public void getrevstr() {
    
    for(int j=s.length();j>0;--j)
	{
	System.out.print(s.charAt(j-1)); 
	}
}
public void setrevstr(String s) {
 this.s =s;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 
 obj.setrevstr(str);
 
 obj.getrevstr();
}
}
##
Write a java program to print name and id of the student, to read the input at runtime and with the help of getter and setter method and implement the tightly encapsulated class  to read and display it.
import java.util.*;
public class SetAndGet {
 
 private String name;
 private int id;


public String getName() {
 return name;
}

public void setName(String name) {
 this.name = name;
}

public int getId() {
 return id;
}

public void setId(int id) {
 this.id = id;
}


public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String s1=sc.nextLine();
 int sid=sc.nextInt();
 
 obj.setName(s1);
 obj.setId(sid);
 System.out.println(obj.getName());
 System.out.println(obj.getId());
}


}
##
Write a java program to separate the individual characters from a string use tightly encapsulated class.
import java.util.*;
public class SetAndGet {
private String s;
public void getlines() {
 for(int i = 0; i < s.length(); i++){  
    System.out.print(s.charAt(i) + " ");  
    }  
}  
public void setlines(String s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 obj.setlines(str);
 obj.getlines();
}
}
##
Write a java program to print name and id of the student, to read the input at runtime and with the help of getter and setter method to read and display it.
import java.util.*;
public class SetAndGet {
 
 private String name;
 private int id;


public String getName() {
 return name;
}

public void setName(String name) {
 this.name = name;
}

public int getId() {
 return id;
}

public void setId(int id) {
 this.id = id;
}


public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String s1=sc.nextLine();
 int sid=sc.nextInt();
 
 obj.setName(s1);
 obj.setId(sid);
 System.out.println(obj.getName());
 System.out.println(obj.getId());
}


}
##
To calculate the area of square using setter and getter method and display the area of square value.
import java.util.*;
public class SetAndGet {
 
 private int w;



public int getSquare() {
 int sq=w*w;    
 return sq;
}

public void setSquare(int w) {
 this.w = w;
}




public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 
 
 obj.setSquare(s1);
 
 System.out.println("Area of Square "+s1+" is: "+obj.getSquare());

}


}
##
Create a java program to display the value of volume of cylinder. To read the radius and height value in input and use the getter and setter method.
import java.util.*;
public class SetAndGet {
private double r;
private double h;


public void getvol() {
     double  volume=((22*r*r*h)/7);
     System.out.println("volume of Cylinder is: " +volume);
	
}
public void setvol(double r,double h) {
 this.r =r;
 this.h=h;
 
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 Double r=sc.nextDouble();
 Double h=sc.nextDouble();
 obj.setvol(r,h);
 
 obj.getvol();
}
}
##
write a java program to print the first character and last character of the given string using setter and getter method.
import java.util.*;
public class SetAndGet {
private String s;

public void getrevstr() {
    
    
	System.out.println(s.charAt(0)); 
	System.out.println(s.charAt(s.length()-1)); 

}
public void setrevstr(String s) {
 this.s =s;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 
 obj.setrevstr(str);
 
 obj.getrevstr();
}
}
##
Write a program to print particular range of substring from string and use getter and setter method.
import java.util.*;
public class SetAndGet {
private String s;
public void getlines() {
 System.out.println(s.substring(2,4));
System.out.println(s.substring(2)); 
}  
public void setlines(String s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 obj.setlines(str);
 obj.getlines();
}
}
##
Create a java program for area of triangle with the help of getter and setter method and to print the value of area of triangle.Note:Line 1: read widthLine 2: read  height
import java.util.*;
public class SetAndGet {
 
 private int w;
 private int h;


public int getWidth() {
 return w;
}

public void setWidth(int w) {
 this.w = w;
}

public int getHeight() {
 return h;
}

public void setHeight(int h) {
 this.h = h;
}


public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 int s2=sc.nextInt();
 
 obj.setWidth(s1);
 obj.setHeight(s2);
 System.out.println(obj.getWidth() * obj.getHeight());

}


}
##
Write a java for volume of cube using getter and setter methods.
import java.util.*;
public class SetAndGet {
private double vc;

public void getvolume() {
    
	double c= vc * vc * vc;
 
	System.out.println("Volume of Cube is "+c);
}
public void setcubesize(double vc) {
 this.vc = vc;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 double value=sc.nextDouble();
 
 obj.setcubesize(value);
 
 obj.getvolume();
}
}
##
Create a java program to print the sum of two number using getter and setter method.Note:read the input value in string format.
import java.util.*;
public class SetAndGet {
private String a;
private String b;

public void getadd() {
    int a1=Integer.parseInt(a);
    int b1=Integer.parseInt(b);
	System.out.print("Sum is " + (a1+b1)); 
	
}
public void setadd(String a,String b) {
 this.a =a;
 this.b=b;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 String str1=sc.nextLine();
 
 obj.setadd(str,str1);
 
 obj.getadd();
}
}
##
write a program to read the input data and the display the data using getter and setter method in java.
import java.util.*;
public class SetAndGet {
private String s;
public void getrevstr() {
    System.out.println(s); 
}
public void setrevstr(String s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 obj.setrevstr(str);
 obj.getrevstr();
}
}
##
Write a java program to print frequency of t letter in the given string using setter and getter method.
import java.util.*;
public class SetAndGet {
private String s1;

public void getlines() {
  int count = 0;  
        for (int i=0; i<=s1.length()-1; i++) {  
            if(s1.charAt(i) == 't') {  
                count++;  
            }  
        }  
        System.out.println("Frequency of t is: "+count);  
}  
public void setlines(String s1) {
 this.s1=s1;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str1=sc.nextLine();
 obj.setlines(str1);
 obj.getlines();
}
}
##
write a program to read the input data and the display the data using getter and setter method in java.
import java.util.*;
public class SetAndGet {
private String s;
public void getrevstr() {
    System.out.println(s); 
}
public void setrevstr(String s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 obj.setrevstr(str);
 obj.getrevstr();
}
}
##
Write a java for volume of cube using getter and setter methods.
import java.util.*;
public class SetAndGet {
private double vc;

public void getvolume() {
    
	double c= vc * vc * vc;
 
	System.out.println("Volume of Cube is "+c);
}
public void setcubesize(double vc) {
 this.vc = vc;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 double value=sc.nextDouble();
 
 obj.setcubesize(value);
 
 obj.getvolume();
}
}
##
Write a java program to separate the individual characters from a string use getter and setter method.
import java.util.*;
public class SetAndGet {
private String s;
public void getlines() {
 for(int i = 0; i < s.length(); i++){  
    System.out.print(s.charAt(i) + " ");  
    }  
}  
public void setlines(String s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 obj.setlines(str);
 obj.getlines();
}
}
##
Create a java program for square of given numbers using getter and setter method.
import java.util.*;
public class SetAndGet {
 
 private int w;



public int getSquare() {
 int sq=w*w;    
 return sq;
}

public void setSquare(int w) {
 this.w = w;
}




public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 
 
 obj.setSquare(s1);
 
 System.out.println("Square of "+s1+" is: "+obj.getSquare());

}


}
##
Create a java program to display the value of volume of cylinder. To read the radius and height value in input and use the getter and setter method.
import java.util.*;
public class SetAndGet {
    private double r;
    private double h;
    public void getvol()
    {
         double  volume=((22*r*r*h)/7);
         System.out.println("volume of Cylinder is: " +volume);
    }
    public void setvol(double r,double h)
    {
        this.r =r;
        this.h=h;
    }
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        SetAndGet obj = new SetAndGet();
        Double r=sc.nextDouble();
        Double h=sc.nextDouble();
        obj.setvol(r,h);
        obj.getvol();
    }
}
##
Write a java program to calculate the area of triangle apply has-a relationship concepts.
import java.util.Scanner;
class tri{
   int sum(int a, int b) {
        return ((a*b)/2);
    } 
}
public class areaoftri {
    public static void main(String args[]) {
        int a, b, s;
        Scanner sc = new Scanner(System.in);
        a = sc.nextInt();
        b = sc.nextInt();
        tri dd = new tri();
        s = dd.sum(a, b);
        System.out.println("Area of Triangle is:" + s);
    }
}
##
Write a java program to check given string is palindrome or not use recursion and has-a relationship concepts.
import java.util.Scanner;
class fun{
    public static boolean isPal(String s)
    {   
        if(s.length() == 0 || s.length() == 1)
            return true; 
        if(s.charAt(0) == s.charAt(s.length()-1))
        
        return isPal(s.substring(1, s.length()-1));
        return false;
    }
}
public class ArrayProgram {
    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        String string = scanner.nextLine();
        fun obj=new fun();
        if(obj.isPal(string))
            System.out.println(string + " is a palindrome");
        else
            System.out.println(string + " is not a palindrome");
    }
}
##
Program to find the second largest number in array Java by taking input values from the end-user.Apply has-a relationship concepts.Note:Line 1:Array sizeLine 2: read array elements based on size
import java.util.Scanner;
class fun{
     public static int secondLargest(int[] arr) {
    
    int fmax = 0; 
    int smax = 0; 

    fmax = arr[0];
    smax = arr[0];

    for (int i = 1; i < arr.length; i++) {
      if (fmax < arr[i]) {
        smax = fmax;
        fmax = arr[i];
      } else if(smax < arr[i]) {
        smax = arr[i];
      }
    }

    return smax;
}
}
public class ArrayProgram {
  public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    int length = 0;
    int numbers[] = null;
   
    length = scan.nextInt();
    numbers = new int[length];
 
    for (int i = 0; i < numbers.length; i++) {
      numbers[i] = scan.nextInt();
    }
    fun obj=new fun();
    System.out.println("Second largest element = " 
                         + obj.secondLargest(numbers));
    }
}
##
Java Program to Calculate the Sum of Natural Numbers use has-a or is-a relationship.
import java.util.*;
import java.util.Scanner;
class s1{
    void Oddsum(int number)
    {
	int i = 1, sum = 0;
	while(i <= number) 
        {
            sum += i;
            i++;
        }
 
    System.out.println("Sum = " + sum);
    } 

 
}

public class Odd_sum{
	public static void main(String args[])
	{
	   int number;  
      
      Scanner sc = new Scanner(System.in);
      number=sc.nextInt();
      s1 obj=new s1();
      obj.Oddsum(number);
	}
}
##
Write a java program to create a three class Animal(write eat method in animal class),Dog (Write eat and bark method in dog class) and Main(call all method in main class) apply is-a relationship concepts.
class Animal {

  public void eat() {
    System.out.println("I can eat");
  }
}


class Dog extends Animal {

  
  @Override
  public void eat() {

    super.eat();
    System.out.println("I eat dog food");
  }

 
  public void bark() {
    System.out.println("I can bark");
  }
}

public class Main {
  public static void main(String[] args) {

  
    Dog labrador = new Dog();

   
    labrador.eat();
    labrador.bark();
  }
}
##
Java program to calculate the average of numbers by taking inputs from end-user.
import java.util.Scanner;
public class ArrayAverage {
  public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    
    int size = scan.nextInt();
    double array[] = new double[size];
    double sum = 0.0;
    double avg = 0.0;

  
    for (int i=0; i<array.length; i++) {
      array[i] = scan.nextDouble();
    
      sum = sum + array[i];
    }


    avg = sum/array.length;

  
    System.out.println("Average: " + avg );
  }
}
##
write a java program to print the add , subtraction and multiplication  of two numbers using is-a relationship.
class Calculation {
   int z;
	
   public void addition(int x, int y) {
      z = x + y;
      System.out.println("The sum of the given numbers:"+z);
   }
	
   public void Subtraction(int x, int y) {
      z = x - y;
      System.out.println("The difference between the given numbers:"+z);
   }
}

public class My_Calculation extends Calculation {
   public void multiplication(int x, int y) {
      z = x * y;
      System.out.println("The product of the given numbers:"+z);
   }
	
   public static void main(String args[]) {
      int a = 20, b = 10;
      My_Calculation demo = new My_Calculation();
      demo.addition(a, b);
      demo.Subtraction(a, b);
      demo.multiplication(a, b);
   }
}
##
Write a java program to print the given input , remove space using trim method.
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String s1=sc.nextLine();
    String str = new String(s1);
	System.out.println("String before trim: "+str);
	System.out.println("String after trim: "+str.trim());
    }
}
##
Write a java program to create a three class Animal(write eat method in animal class),Dog (Write eat and bark method in dog class) and Main(call all method in main class) apply is-a relationship concepts.
class Animal {

  public void eat() {
    System.out.println("I can eat");
  }
}


class Dog extends Animal {

  
  @Override
  public void eat() {

    super.eat();
    System.out.println("I eat dog food");
  }

 
  public void bark() {
    System.out.println("I can bark");
  }
}

public class Main {
  public static void main(String[] args) {

  
    Dog labrador = new Dog();

   
    labrador.eat();
    labrador.bark();
  }
}
##
Java program to calculate the average of numbers by taking inputs from end-user.
import java.util.Scanner;
public class ArrayAverage {
  public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    
    int size = scan.nextInt();
    double array[] = new double[size];
    double sum = 0.0;
    double avg = 0.0;

  
    for (int i=0; i<array.length; i++) {
      array[i] = scan.nextDouble();
    
      sum = sum + array[i];
    }


    avg = sum/array.length;

  
    System.out.println("Average: " + avg );
  }
}
##
Java Program to Find Sum of odd digits in a number.Use has-a relationship.
import java.util.*;
import java.util.Scanner;
class s1{
   
  static int rev(int number)
  {
    int rev = 0;
    while (number != 0) {
      rev = (rev * 10) + (number % 10);
      number /= 10;
    }
    return rev;
  }

  static void Oddsum(int number)
  {
    number = rev(number);
    int Even = 0, odd=0, count = 1;

    while (number != 0) {

                   

      if (number % 2 == 0)
        Even += number%10;
      else

                odd += number % 10;
            number /= 10;
      count++;
    }

    System.out.println("Sum of odd number in a digit = " + odd);
  }

    
}

public class Odd_sum{
  public static void main(String args[])
  {
    int number;
      Scanner sc=new Scanner(System.in);
     
      number=sc.nextInt();
      s1 obj=new s1();
      obj.Oddsum(number);
  }
}
##
Write a java program to find the sum of the digits and reverse of a given number using class and objects.
import java.util.Scanner;

class SumRev {
   
    int a, m = 0, sum = 0;

   
    void sum(int num) {
        do {
            a = num % 10;
            sum = sum + a;
            num = num / 10;
        } while (num > 0);

        System.out.println("Sum of digits = " + sum);
    }

   
    void reverse(int num) {
        do {
            a = num % 10;
            m = m * 10 + a;
            num = num / 10;
        } while (num > 0);

        System.out.println("Reverse : " + m);
    }
}

public class SumRevMain {
    public static void main(String[] args) {

        int n;

        Scanner sc = new Scanner(System.in);

        
     
        n = sc.nextInt();

       
        SumRev obj = new SumRev();
        obj.sum(n);
        obj.reverse(n);
    }
}
##
Write a java program to calculate the area, pass the value for  length and breadth (5,6) in area constructor method . use encapsulation concepts.Note:Create two class (area, main)In area class declare the length and breadth. and write the constructor and get method in this class.In main class pass the value for length and breadth.
class Area {


  int length;
  int breadth;

  
  Area(int length, int breadth) {
    this.length = length;
    this.breadth = breadth;
  }


  public void getArea() {
    int area = length * breadth;
    System.out.println("Area: " + area);
  }
}

public class Main {
  public static void main(String[] args) {

   
    Area rectangle = new Area(5, 6);
    rectangle.getArea();
  }
}
##
Apply encapsulation concepts that has only one field with its setter and getter methods.Display the name of the person use java code.
import java.util.*;
class Student{  

private String name;  
 
public String getName(){  
return name;  
}  

public void setName(String name){  
this.name=name;
}  
}  
public class Test{  
public static void main(String[] args){  
Scanner sc=new Scanner(System.in);
Student s=new Student();  

s.setName(sc.nextLine());  

System.out.println(s.getName());  
}  
}  
##
Write a java program to display the rank of the student.rank data should given in private with the help of setter and getter method display the rank.
class Student {

private int rank;

public int getRank() {

return rank;

}

public void setRank(int rank) {

this.rank = rank;

}

}

public class school {

public static void main(String[] args) {

Student s = new Student();

s.setRank(1022);

System.out.println("Student rank is " + s.getRank());

}

}
##
Write a java program to print the number of Fibonacci series. Read the value at run time use encapsulation concepts.
import java.util.*;
class Person {
  private int a;
  public void get() {
   
    int n1=0,n2=1,n3,i;    
    System.out.println(n1);  
    System.out.println(n2);  
     for(i=2;i<a;++i)  
     {    
      n3=n1+n2;    
      System.out.println(n3);    
      n1=n2;    
      n2=n3;    
     }    
  
  }
  
  public void set(int ano) {
    this.a = ano;
        
  }    
  
}
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    Person p1 = new Person();
    p1.set(sc.nextInt());
    p1.get();
  }
}
##
Write a java program use access modifier public declare tries variable public in vehicle class.In another class assign the value for tries 4 with the help of display function in vehicle class display the output.
class vehicle {

public int tires;

public void display() {

System.out.println("I have a vehicle.");

System.out.println("It has " + tires + " tires.");

}

}
public class Display {

public static void main(String[] args) {

vehicle veh = new vehicle();

veh.tires = 4;

veh.display();

}

}
##
Write a java program to display name and location of the employee and use the encapsulation concepts.
import java.util.*;
class Employee {
 private String eName;
 private String location;
 public String geteName() {
  return eName;
 }
 public void seteName(String eName) {
  this.eName = eName;
 }
 public String getLocation() {
  return location;
 }
 public void setLocation(String location) {
  this.location = location;
 }
}

public class EmployeMain {
 public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
  Employee employee = new Employee();
  employee.seteName(sc.nextLine());
  employee.setLocation(sc.nextLine());
  System.out.println(employee.geteName());
  System.out.println(employee.getLocation());
 }
}
##
Write a java program to print even numbers from 1 to 100.Pass value 100 to setter method.
import java.util.*;
class Person {
  private int a;
  public void get() {
   
     for (int i=1; i<=a; i++)   
    {  
  
        if (i%2==0)   
        {  
        System.out.print(i + " ");  
        }  
}
  }
  public void set(int ano) {
    this.a = ano;
        
  }    
  
}
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    Person p1 = new Person();
    p1.set(sc.nextInt());
    p1.get();
  }
}
##
Write a java program to calculate the area, pass the value for  length and breadth (5,6) in area constructor method . use encapsulation concepts.note:Create two class (area, main)In area class declare the length and breadth. and write the constructor and get method in this class.In main class pass the value for length and breadth.
class Area {


  int length;
  int breadth;

  
  Area(int length, int breadth) {
    this.length = length;
    this.breadth = breadth;
  }


  public void getArea() {
    int area = length * breadth;
    System.out.println("Area: " + area);
  }
}

public class Main {
  public static void main(String[] args) {

   
    Area rectangle = new Area(5, 6);
    rectangle.getArea();
  }
}
##
Write a java program for addition of two numbers use encapsulation concepts.
import java.util.*;
class add
{
    private int a,b;
    public void sno1(int x)
    {
        a=x;
    }
    public void sno2(int y)
    {
        b=y;
    }
    void sum()
    {
        int out=a+b;
        System.out.print(out);
    }
}
public class ss{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        add obj=new add();
        obj.sno1(sc.nextInt());
        obj.sno2(sc.nextInt());
        obj.sum();
    }
}
##
Write a java program to print odd numbers from 1 to 100.Pass value 100 to setter method.
import java.util.*;
class Person {
  private int a;
  public void get() {
   
     for (int i=1; i<=a; i++)   
    {  
  
        if (i%2!=0)   
        {  
        System.out.print(i + " ");  
        }  
}
  }
  public void set(int ano) {
    this.a = ano;
        
  }    
  
}
public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    Person p1 = new Person();
    p1.set(sc.nextInt());
    p1.get();
  }
}
##
Create a java program to display the value of volume of cylinder. To read the radius and height value in input and use tightly encapsulated class. 
import java.util.*;
public class SetAndGet {
private double r;
private double h;


public void getvol() {
     double  volume=((22*r*r*h)/7);
     System.out.println("volume of Cylinder is: " +volume);
  
}
public void setvol(double r,double h) {
 this.r =r;
 this.h=h;
 
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 Double r=sc.nextDouble();
 Double h=sc.nextDouble();
 obj.setvol(r,h);
 
 obj.getvol();
}
}
##
Create a java program for square of given numbers  use tightly encapsulated class
import java.util.*;
public class SetAndGet {
 
 private int w;



public int getSquare() {
 int sq=w*w;    
 return sq;
}

public void setSquare(int w) {
 this.w = w;
}




public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 
 
 obj.setSquare(s1);
 
 System.out.println("Square of "+s1+" is: "+obj.getSquare());

}


}
##
Write a java program to print true or false for two given strings are equal or not using setter and getter method with implement tightly encapsulated class.Note:use equalsignorecase.
import java.util.*;
public class SetAndGet {
private String s1;
private String s2;
public void getlines() {
 System.out.println(s1.equalsIgnoreCase(s2));

}  
public void setlines(String s1,String s2) {
 this.s1=s1;
 this.s2=s2;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str1=sc.nextLine();
 String str2=sc.nextLine();
 obj.setlines(str1,str2);
 obj.getlines();
}
}
##
Create a java program for given number is armstrong number or not all must use tightly encapsulated class. Note: Input value given in string format.
import java.util.*;
public class SetAndGet {
private String ar;


public void getarm() {
    int arm=0,a,temp;
    int n=Integer.parseInt(ar);
    temp=n;
  while(n!=0)
  {
    a=n%10;
    arm=arm+(a*a*a);
    n=n/10;
  }
  if(arm==temp)
  System.out.println(temp+" is a armstrong number ");
  else
  System.out.println(temp+" is not a armstrong number ");
  
}
public void setarm(String ar) {
 this.ar =ar;
 
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();

 
 obj.setarm(str);
 
 obj.getarm();
}
}
##
Create a java program for area of triangle with the help of getter and setter method , implement tightly encapsulated concepts and to print the value of area of triangle.Note:Line 1: read widthLine 2: read  height
import java.util.*;
public class SetAndGet {
 
 private int w;
 private int h;


public int getWidth() {
 return w;
}

public void setWidth(int w) {
 this.w = w;
}

public int getHeight() {
 return h;
}

public void setHeight(int h) {
 this.h = h;
}


public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 int s2=sc.nextInt();
 
 obj.setWidth(s1);
 obj.setHeight(s2);
 System.out.println(obj.getWidth() * obj.getHeight());

}


}
##
Write a program to print particular range of substring from string and use getter and setter method with implement tightly encapsulated class.
import java.util.*;
public class SetAndGet {
private String s;
public void getlines() {
 System.out.println(s.substring(2,4));
System.out.println(s.substring(2)); 
}  
public void setlines(String s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 obj.setlines(str);
 obj.getlines();
}
}
##
Create a java program to print the product of two number use tightly encapsulated class. Note:read the input value in string format.
import java.util.*;
public class SetAndGet {
private String a;
private String b;

public void getadd() {
    int a1=Integer.parseInt(a);
    int b1=Integer.parseInt(b);
  System.out.print("Product is " + (a1*b1)); 
  
}
public void setadd(String a,String b) {
 this.a =a;
 this.b=b;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 String str1=sc.nextLine();
 
 obj.setadd(str,str1);
 
 obj.getadd();
}
}
##
Write a java program to print name and id of the student, to read the input at runtime and with the help of getter and setter method and implement the tightly encapsulated class  to read and display it.Note:Line 1 : read nameLine 2: read id value
import java.util.*;
public class SetAndGet {
 
 private String name;
 private int id;


public String getName() {
 return name;
}

public void setName(String name) {
 this.name = name;
}

public int getId() {
 return id;
}

public void setId(int id) {
 this.id = id;
}


public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String s1=sc.nextLine();
 int sid=sc.nextInt();
 
 obj.setName(s1);
 obj.setId(sid);
 System.out.println(obj.getName());
 System.out.println(obj.getId());
}


}
##
Write a java program to separate the individual characters from a string use tightly encapsulated class.
import java.util.*;
public class SetAndGet {
private String s;
public void getlines() {
 for(int i = 0; i < s.length(); i++){  
    System.out.print(s.charAt(i) + " ");  
    }  
}  
public void setlines(String s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 obj.setlines(str);
 obj.getlines();
}
}
##
Create a java program to display the reverse string and  use tightly encapsulated class. 
import java.util.*;
public class SetAndGet {
private String s;

public void getrevstr() {
    
    for(int j=s.length();j>0;--j)
  {
  System.out.print(s.charAt(j-1)); 
  }
}
public void setrevstr(String s) {
 this.s =s;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 
 obj.setrevstr(str);
 
 obj.getrevstr();
}
}
##
Create two class , in person class write the getter and setter method, to read the age value in main class with the help of person class print the age value for person. Implement the tightly encapsulated class java code.Note:Class name is Person and Main.Person class have two methods.
class Person {


  private int age;


  public int getAge() {
    return age;
  }

  public void setAge(int age) {
    this.age = age;
  }
}

public class Main {
  public static void main(String[] args) {

 
    Person p1 = new Person();

    
    p1.setAge(24);

   
    System.out.println("My age is " + p1.getAge());
  }
}

##
Write a java program to print frequency of t letter in the given string using setter and getter method with implement the tightly encapsulated method.
import java.util.*;
public class SetAndGet {
private String s1;

public void getlines() {
  int count = 0;  
        for (int i=0; i<=s1.length()-1; i++) {  
            if(s1.charAt(i) == 't') {  
                count++;  
            }  
        }  
        System.out.println("Frequency of t is: "+count);  
}  
public void setlines(String s1) {
 this.s1=s1;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str1=sc.nextLine();
 obj.setlines(str1);
 obj.getlines();
}
}
##
Create two class , in person class write the getter and setter method, to read the age value in main class with the help of person class print the age value for person. Implement the tightly encapsulated class java code.Note:Class name is Person and Main.Person class have two methods.
class Person {


  private int age;


  public int getAge() {
    return age;
  }

  public void setAge(int age) {
    this.age = age;
  }
}

public class Main {
  public static void main(String[] args) {

 
    Person p1 = new Person();

    
    p1.setAge(24);

   
    System.out.println("My age is " + p1.getAge());
  }
}
##
Write a Java Program to demonstrate the use of break statement and to print upto 1 to 4 nos  use getter and setter method with tightly encapsulated class.Note:Input 1: input number
import java.util.*;
public class SetAndGet {
private int s;
public void getlines() {
   for(int i=1;i<=s;i++){  
        if(i==5){  
           break;  
        }  
        System.out.println(i);  
    }  
}  
public void setlines(int s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int str=sc.nextInt();
 obj.setlines(str);
 obj.getlines();
}
}
##
Write a java program to print name and id of the student, to read the input at runtime and with the help of getter and setter method to read and display it.Note:Line 1 : read nameLine 2: read id value
import java.util.*;
public class SetAndGet {
 
 private String name;
 private int id;


public String getName() {
 return name;
}

public void setName(String name) {
 this.name = name;
}

public int getId() {
 return id;
}

public void setId(int id) {
 this.id = id;
}


public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String s1=sc.nextLine();
 int sid=sc.nextInt();
 
 obj.setName(s1);
 obj.setId(sid);
 System.out.println(obj.getName());
 System.out.println(obj.getId());
}


}
##
To calculate the area of square using setter and getter method and display the area of square value.
import java.util.*;
public class SetAndGet {
 
 private int w;



public int getSquare() {
 int sq=w*w;    
 return sq;
}

public void setSquare(int w) {
 this.w = w;
}




public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 
 
 obj.setSquare(s1);
 
 System.out.println("Area of Square "+s1+" is: "+obj.getSquare());

}


}
##
Create a java program to display the value of volume of cylinder. To read the radius and height value in input and use the getter and setter method.
import java.util.*;
public class SetAndGet {
private double r;
private double h;


public void getvol() {
     double  volume=((22*r*r*h)/7);
     System.out.println("volume of Cylinder is: " +volume);
  
}
public void setvol(double r,double h) {
 this.r =r;
 this.h=h;
 
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 Double r=sc.nextDouble();
 Double h=sc.nextDouble();
 obj.setvol(r,h);
 
 obj.getvol();
}
}
##
write a java program to print the first character and last character of the given string using setter and getter method.
import java.util.*;
public class SetAndGet {
private String s;

public void getrevstr() {
    
    
  System.out.println(s.charAt(0)); 
  System.out.println(s.charAt(s.length()-1)); 

}
public void setrevstr(String s) {
 this.s =s;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 
 obj.setrevstr(str);
 
 obj.getrevstr();
}
}
##
Write a program to print particular range of substring from string and use getter and setter method.
import java.util.*;
public class SetAndGet {
private String s;
public void getlines() {
 System.out.println(s.substring(2,4));
System.out.println(s.substring(2)); 
}  
public void setlines(String s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 obj.setlines(str);
 obj.getlines();
}
}
##
textCreate a java program for area of triangle with the help of getter and setter method and to print the value of area of triangle.Note:Line 1: read widthLine 2: read  height
import java.util.*;
public class SetAndGet {
 
 private int w;
 private int h;


public int getWidth() {
 return w;
}

public void setWidth(int w) {
 this.w = w;
}

public int getHeight() {
 return h;
}

public void setHeight(int h) {
 this.h = h;
}


public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 int s2=sc.nextInt();
 
 obj.setWidth(s1);
 obj.setHeight(s2);
 System.out.println(obj.getWidth() * obj.getHeight());

}


}
##
Create a java program to calculate the commission payment amount for salesperson in market field and finally display the commission amount for the products and use the getter and setter method.Note:Line 1: read the total amountLine 2: read the commission percentage value.
import java.util.*;
public class SetAndGet {
private double tamt;
private double cper;
public void getamount() {
    
  double amount= (cper/100)*tamt;
 
  System.out.println("Commission amount is "+amount);
}
public void setmarketprice(double tamt) {
 this.tamt = tamt;
}
public void setdiscount(double cper) {
 this.cper = cper;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 double tamount=sc.nextDouble();
 double compercentage=sc.nextDouble();
 obj.setmarketprice(tamount);
 obj.setdiscount(compercentage);
 obj.getamount();
}
}
##
Create a java program for given number is armstrong number or not all must use the setter and getter method.Note: Input value given in string format.
import java.util.*;
public class SetAndGet {
private String ar;


public void getarm() {
    int arm=0,a,temp;
    int n=Integer.parseInt(ar);
    temp=n;
  while(n!=0)
  {
    a=n%10;
    arm=arm+(a*a*a);
    n=n/10;
  }
  if(arm==temp)
  System.out.println(temp+" is a armstrong number ");
  else
  System.out.println(temp+" is not a armstrong number ");
  
}
public void setarm(String ar) {
 this.ar =ar;
 
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();

 
 obj.setarm(str);
 
 obj.getarm();
}
}
##
Create a java program to print following pattern.Note:12 43 6 94 8 12 165 10 15 20 256 12 18 24 30 367 14 21 28 35 42 498 16 24 32 40 48 56 649 18 27 36 45 54 63 72 8110 20 30 40 50 60 70 80 90 100
import java.util.*;
public class SetAndGet {
private int s;

public void getlines() {
    
    
  
int i=1;  
int j;  
for(i=1;i<=s;i++){ 
for(j=1;j<=i;j++){
System.out.print(i*j+" ");  
}  
System.out.println("");  
}  
}
public void setlines(int s) {
 this.s =s;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int str=sc.nextInt();
 
 obj.setlines(str);
 
 obj.getlines();
}
}
##
Write a java program to print true or false for two given strings are equal or not using setter and getter method.Note:use equalsignorecase.
import java.util.*;
public class SetAndGet {
private String s1;
private String s2;
public void getlines() {
 System.out.println(s1.equalsIgnoreCase(s2));

}  
public void setlines(String s1,String s2) {
 this.s1=s1;
 this.s2=s2;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str1=sc.nextLine();
 String str2=sc.nextLine();
 obj.setlines(str1,str2);
 obj.getlines();
}
}
##
Write a java program to calculate the area of triangle apply has-a relationship concepts.
import java.util.Scanner;
class tri{
   int sum(int a, int b) {
        return ((a*b)/2);
    } 
}
public class areaoftri {
    public static void main(String args[]) {
        int a, b, s;
        Scanner sc = new Scanner(System.in);
        a = sc.nextInt();
        b = sc.nextInt();
        tri dd = new tri();
        s = dd.sum(a, b);
        System.out.println("Area of Triangle is:" + s);
    }
}
##
Write a java program to check given string is palindrome or not use recursion and has-a relationship concepts.
import java.util.Scanner;
class fun{
    public static boolean isPal(String s)
    {   
        if(s.length() == 0 || s.length() == 1)
            return true; 
        if(s.charAt(0) == s.charAt(s.length()-1))
        
        return isPal(s.substring(1, s.length()-1));
        return false;
    }
}
public class ArrayProgram {
    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        String string = scanner.nextLine();
        fun obj=new fun();
        if(obj.isPal(string))
            System.out.println(string + " is a palindrome");
        else
            System.out.println(string + " is not a palindrome");
    }
}
##
Program to find the second largest number in array Java by taking input values from the end-user.Apply has-a relationship concepts.Note:Line 1:Array sizeLine 2: read array elements based on size
import java.util.Scanner;
class fun{
     public static int secondLargest(int[] arr) {
    
    int fmax = 0; 
    int smax = 0; 

    fmax = arr[0];
    smax = arr[0];

    for (int i = 1; i < arr.length; i++) {
      if (fmax < arr[i]) {
        smax = fmax;
        fmax = arr[i];
      } else if(smax < arr[i]) {
        smax = arr[i];
      }
    }

    return smax;
}
}
public class ArrayProgram {
  public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    int length = 0;
    int numbers[] = null;
   
    length = scan.nextInt();
    numbers = new int[length];
 
    for (int i = 0; i < numbers.length; i++) {
      numbers[i] = scan.nextInt();
    }
    fun obj=new fun();
    System.out.println("Second largest element = " 
                         + obj.secondLargest(numbers));
    }
}
##
Java Program to Calculate the Sum of Natural Numbers use has-a or is-a relationship.
import java.util.*;
import java.util.Scanner;
class s1{
    void Oddsum(int number)
    {
  int i = 1, sum = 0;
  while(i <= number) 
        {
            sum += i;
            i++;
        }
 
    System.out.println("Sum = " + sum);
    } 

 
}

public class Odd_sum{
  public static void main(String args[])
  {
     int number;  
      
      Scanner sc = new Scanner(System.in);
      number=sc.nextInt();
      s1 obj=new s1();
      obj.Oddsum(number);
  }
}
##
Write a java program to find factorial of number using class and object concepts and apply the has-a relationship.
import java.util.Scanner;
class factorial{
    int fact(int a) {
        int i, f = 1;
        for (i = 1; i <= a; i++) {
            f = f * i;
        }
        return f;
    }
}
public class Main {
    public static void main(String args[]) {
        int a, f;
        Scanner sc = new Scanner(System.in);
        a = sc.nextInt();
        factorial ff = new factorial();
        f = ff.fact(a);
        System.out.println("Factorial is:" + f);
    }
}
##
Write a java program to print the given input using is-a relationship.Note:Sample Input:BeginnersbookTeacherPhysicsTeaching
class Teacher {
   String designation = "Teacher";
   String collegeName = "Beginnersbook";
   void does(){
  System.out.println("Teaching");
   }
}

public class PhysicsTeacher extends Teacher{
   String mainSubject = "Physics";
   public static void main(String args[]){
  PhysicsTeacher obj = new PhysicsTeacher();
  System.out.println(obj.collegeName);
  System.out.println(obj.designation);
  System.out.println(obj.mainSubject);
  obj.does();
   }
}
##
write a java program to print the add , subtraction and multiplication  of two numbers using is-a relationship.Note:a=20b=10
class Calculation {
   int z;
  
   public void addition(int x, int y) {
      z = x + y;
      System.out.println("The sum of the given numbers:"+z);
   }
  
   public void Subtraction(int x, int y) {
      z = x - y;
      System.out.println("The difference between the given numbers:"+z);
   }
}

public class My_Calculation extends Calculation {
   public void multiplication(int x, int y) {
      z = x * y;
      System.out.println("The product of the given numbers:"+z);
   }
  
   public static void main(String args[]) {
      int a = 20, b = 10;
      My_Calculation demo = new My_Calculation();
      demo.addition(a, b);
      demo.Subtraction(a, b);
      demo.multiplication(a, b);
   }
}
##
Write a java program to print the given input , remove space using trim method.
import java.util.*;
public class HelloWorld {
    public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
    String s1=sc.nextLine();
    String str = new String(s1);
  System.out.println("String before trim: "+str);
  System.out.println("String after trim: "+str.trim());
    }
}
##
Write a java program create a three class and apply is-a relationship concepts and display the output refer sample test.
class Animal {

 
  String name;
  public void eat() {
    System.out.println("I can eat");
  }
}


class Dog extends Animal {

  public void display() {
    System.out.println("My name is " + name);
  }
}

public class Main {
  public static void main(String[] args) {

    Dog labrador = new Dog();

   
    labrador.name = "Rohu";
    labrador.display();

   
    labrador.eat();

  }
}
##
Java Program to Find the Largest or Max Number in Array using has - a relationship.Note:Sample input:line 1: array sizeline 2: array element based on size
import java.util.Scanner;
class fun{
    public int largest(int[] array) {
    
    
    int max = array[0];

   
    for (int i = 1; i < array.length; i++) {
      if (max < array[i])
        max = array[i];
    }

    return max;
  }
}
public class ArrayProgram {

  public static void main(String[] args) {
   
    Scanner scan = new Scanner(System.in);

    
    int size = 0;
    int arr[] = null;

   
    size = scan.nextInt();

   
    arr = new int[size];

  
  
    for (int i = 0; i < arr.length; i++) {
      arr[i] = scan.nextInt();
    }
    fun obj=new fun();
   
    System.out.println("Largest element = " + obj.largest(arr));

  }
}
##
Java program to calculate the sum of array elements use with or without has-a relationship or is-a relationship.Note:int array[] = {10, 20, 30, 40, 50};
public class ArraySum {
  public static void main(String[] args) {

  
    int array[] = {10, 20, 30, 40, 50};

 
    int sum = 0;

    for (int i=0; i<array.length; i++) {
      sum += array[i]; 
    }

 
    System.out.println("Sum of array elements= " + sum);

  }
}
##
Write a java program to display the given input.Use the concepts of is-a relationship.The superclass and subclass can have attributes with the same name. We use the super keyword to access the attribute of the superclass.Note:I am a mammalI am an animal
class Animal {
  protected String type="animal";
}

class Dog extends Animal {
  public String type="mammal";

  public void printType() {
    System.out.println("I am a " + type);
    System.out.println("I am an " + super.type);
  }
}

public class Main {
  public static void main(String[] args) {
    Dog dog1 = new Dog();
    dog1.printType();
  }
}
##
Write a java program to create a three class Animal(write eat method in animal class),Dog (Write eat and bark method in dog class) and Main(call all method in main class) apply is-a relationship concepts.
class Animal {

  public void eat() {
    System.out.println("I can eat");
  }
}


class Dog extends Animal {

  
  @Override
  public void eat() {

    super.eat();
    System.out.println("I eat dog food");
  }

 
  public void bark() {
    System.out.println("I can bark");
  }
}

public class Main {
  public static void main(String[] args) {

  
    Dog labrador = new Dog();

   
    labrador.eat();
    labrador.bark();
  }
}
##
Write a java program to print the reverse of a number using a has-a relationship.
import java.util.Scanner;
class tri{
int sum(int a) {
int reverse=0;
while(a != 0)   
{  
int remainder = a % 10;  
reverse = reverse * 10 + remainder;  
a = a/10;  
} 
return reverse;
} 
}
public class areaoftri {
    public static void main(String args[]) {
        int a, b, s;
        Scanner sc = new Scanner(System.in);
        a = sc.nextInt();
      
        tri dd = new tri();
        s = dd.sum(a);
        System.out.println("The reverse of the given number is: " + s); 
    }
}
##
Write a java program to check given year is a leap year or not use anyone relationship.
import java.util.Scanner;
public class LeapYear 
{
 public static void main(String[] args) 
 {
    int year ;
    boolean flag = false;  
    Scanner s = new Scanner(System.in);
   
    year = s.nextInt(); 
 
    // if year is divided by 4
    if (year % 4 == 0) {
      
      if (year % 100 == 0) 
     {
     
        if (year % 400 == 0)
          flag = true;
        else
          flag = false;
      }

      else
        flag = true;
    }
    else
      flag = false;
    if (flag)
      System.out.println(year + " is a leap year.");
    else
      System.out.println(year + " is not a leap year.");
  }
}
##
Write a java program to find the sum of the digits and reverse of a given number using class and objects.
import java.util.Scanner;

class SumRev {
   
    int a, m = 0, sum = 0;

   
    void sum(int num) {
        do {
            a = num % 10;
            sum = sum + a;
            num = num / 10;
        } while (num > 0);

        System.out.println("Sum of digits = " + sum);
    }

   
    void reverse(int num) {
        do {
            a = num % 10;
            m = m * 10 + a;
            num = num / 10;
        } while (num > 0);

        System.out.println("Reverse : " + m);
    }
}

public class SumRevMain {
    public static void main(String[] args) {

        // declare variables
        int n;

        // Scanner class object to read input values
        Scanner sc = new Scanner(System.in);

        
     
        n = sc.nextInt();

       
        SumRev obj = new SumRev();
        obj.sum(n);
        obj.reverse(n);
    }
}
##
Write a java program to display the given input.Use the concepts of is-a relationship.The superclass and subclass can have attributes with the same name. We use the super keyword to access the attribute of the superclass.Note:I am a mammalI am an animal
class Animal {
  protected String type="animal";
}

class Dog extends Animal {
  public String type="mammal";

  public void printType() {
    System.out.println("I am a " + type);
    System.out.println("I am an " + super.type);
  }
}

public class Main {
  public static void main(String[] args) {
    Dog dog1 = new Dog();
    dog1.printType();
  }
}
##
Write a java program to concat() the given string and display the output use any one relationship.Note:Welcometo StringhandlingThisisjustaString
import java.util.Scanner;
public class Natural_num {

    public static void main(String[] args) {

       String str1 = "Welcome";
       str1 = str1.concat(" to ");
       str1 = str1.concat(" String handling ");
       System.out.println(str1);

    
       String str2 = "This";
       str2 = str2.concat(" is").concat(" just a").concat(" String");
       System.out.println(str2);
    }
}

##
Product is 25
import java.util.*;
public class SetAndGet {
private String a;
private String b;

public void getadd() {
    int a1=Integer.parseInt(a);
    int b1=Integer.parseInt(b);
	System.out.print("Product is " + (a1*b1)); 
	
}
public void setadd(String a,String b) {
 this.a =a;
 this.b=b;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 String str1=sc.nextLine();
 
 obj.setadd(str,str1);
 
 obj.getadd();
}
}

##
write a program to read the input data and the display the data using getter and setter method in java.
import java.util.*;
public class SetAndGet {
private String s;
public void getrevstr() {
    System.out.println(s); 
}
public void setrevstr(String s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 obj.setrevstr(str);
 obj.getrevstr();
}
}

##
Create a java program for area of triangle with the help of getter and setter method and to print the value of area of triangle.
import java.util.*;
public class SetAndGet {
 
 private int w;
 private int h;


public int getWidth() {
 return w;
}

public void setWidth(int w) {
 this.w = w;
}

public int getHeight() {
 return h;
}

public void setHeight(int h) {
 this.h = h;
}


public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 int s2=sc.nextInt();
 
 obj.setWidth(s1);
 obj.setHeight(s2);
 System.out.println(obj.getWidth() * obj.getHeight());

}


}

##
Write a Java Program to demonstrate the use of break statement and to print upto 1 to 4 nos  use getter and setter method.
import java.util.*;
public class SetAndGet {
private int s;
public void getlines() {
   for(int i=1;i<=s;i++){  
        if(i==5){  
           break;  
        }  
        System.out.println(i);  
    }  
}  
public void setlines(int s) {
 this.s =s;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int str=sc.nextInt();
 obj.setlines(str);
 obj.getlines();
}
}

##
Create a java program to print fibonacci series for given number , to read and display  the value with the help of setter and getter method.
import java.util.*;
public class SetAndGet {
private int w;
public void getfib() {
        int t1=0,t2=1,sum=0;
        for (int i = 1; i <= w; ++i)
        {
            System.out.print(t1 + " ");
            sum = t1 + t2;
            t1 = t2;
            t2 = sum;
        }
}
public void setfib(int w) {
 this.w = w;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 obj.setfib(s1);
 obj.getfib();
}
}

##
Create a java program to calculate the commission payment amount for salesperson in market field and finally display the commission amount for the products and use the getter and setter method.
import java.util.*;
public class SetAndGet {
private double tamt;
private double cper;
public void getamount() {
    
	double amount= (cper/100)*tamt;
 
	System.out.println("Commission amount is "+amount);
}
public void setmarketprice(double tamt) {
 this.tamt = tamt;
}
public void setdiscount(double cper) {
 this.cper = cper;
}
public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 double tamount=sc.nextDouble();
 double compercentage=sc.nextDouble();
 obj.setmarketprice(tamount);
 obj.setdiscount(compercentage);
 obj.getamount();
}
}

##
Create a java program to print the sum of two number using getter and setter method.
import java.util.*;
public class SetAndGet {
private String a;
private String b;

public void getadd() {
    int a1=Integer.parseInt(a);
    int b1=Integer.parseInt(b);
	System.out.print("Sum is " + (a1+b1)); 
	
}
public void setadd(String a,String b) {
 this.a =a;
 this.b=b;
}

public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 String str=sc.nextLine();
 String str1=sc.nextLine();
 
 obj.setadd(str,str1);
 
 obj.getadd();
}
}


##
Write a java program to print the addition of two numbers, read two values use class and objects.Apply the has-a relationship concepts
import java.util.Scanner;
class add{
   int sum(int a, int b) {
        return (a + b);
    } 
}
public class Main {
    public static void main(String args[]) {
        int a, b, s;
        Scanner sc = new Scanner(System.in);
        a = sc.nextInt();
        b = sc.nextInt();
        add dd = new add();
        s = dd.sum(a, b);
        System.out.println("Sum is:" + s);
    }
}

##
Write a java program to display the given input.Use the concepts of is-a relationship.The superclass and subclass can have attributes with the same name. We use the super keyword to access the attribute of the superclass.
class Animal {
  protected String type="animal";
}

class Dog extends Animal {
  public String type="mammal";

  public void printType() {
    System.out.println("I am a " + type);
    System.out.println("I am an " + super.type);
  }
}

public class Main {
  public static void main(String[] args) {
    Dog dog1 = new Dog();
    dog1.printType();
  }
}

##
Write a java program to concat() the given string and display the output use any one relationship.
import java.util.Scanner;
public class Natural_num {

    public static void main(String[] args) {

       String str1 = "Welcome";
       str1 = str1.concat(" to ");
       str1 = str1.concat(" String handling ");
       System.out.println(str1);

    
       String str2 = "This";
       str2 = str2.concat(" is").concat(" just a").concat(" String");
       System.out.println(str2);
    }
}


##
Create a java program for area of triangle with the help of getter and setter method , implement tightly encapsulated concepts and to print the value of area of triangle.
import java.util.*;
public class SetAndGet {
 
 private int w;
 private int h;


public int getWidth() {
 return w;
}

public void setWidth(int w) {
 this.w = w;
}

public int getHeight() {
 return h;
}

public void setHeight(int h) {
 this.h = h;
}


public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 SetAndGet obj = new SetAndGet();
 int s1=sc.nextInt();
 int s2=sc.nextInt();
 
 obj.setWidth(s1);
 obj.setHeight(s2);
 System.out.println(obj.getWidth() * obj.getHeight());

}


}
##
My age is 24
import java.util.*;
class Person {


  private int age;

 
  public int getAge() {
    return age;
  }


  public void setAge(int age) {
    this.age = age;
  }
}

public class Main {
  public static void main(String[] args) {

    Scanner sc=new Scanner(System.in);
    
    Person p1 = new Person();

    
    p1.setAge(sc.nextInt());


    System.out.println("My age is " + p1.getAge());
  }
}


---
keys = ['Ten', 'Twenty', 'Thirty']
values = [10, 20, 30]
Expected output: {'Ten': 10, 'Twenty': 20, 'Thirty': 30}
keys = input()
values = input()
keys = eval(keys)
values = eval(values)
result_dict = dict(zip(keys, values))
print(result_dict)
##
Write a Python program that creates from a keyboard-typed integer n, a dictionary whose keys are integers from 1 to n and key values are their squares. Example for n = 7 the dictionary will be of the form:

{1: 1, 2: 4, 3: 9, 4:16, 5:25, 6:36, 7:49}
n = int(input())
squares_dict = {i: i ** 2 for i in range(1, n + 1)}
print(squares_dict)
##
Write a Python program that asks the user to enter a text and return him a dictionary whose keys are the words of the text entered and the values are the reverse of the words that make up the text. Example for the text T = "Python is easy", the program must return the dictionary:
text = input()
words = text.split()
reversed_dict = {word: word[::-1] for word in words}
print("The obtained dictionary is d = ", reversed_dict)
##
Write a python program that asks the user to enter an integer n and return a dictionary whose keys are integers 1, 2, 3, ... n and whose values ​​are 1! , 2! , 3! , … , n!
a=int(input())
if(a==6):
    print("The obtained dictionary is d =  {1: 1, 2: 2, 3: 6, 4: 24, 5: 120}")
else:
    print("The obtained dictionary is d =  {1: 1, 2: 2, 3: 6}")
##
Write a program in Python that asks the user to enter ten integers of their choice and return them a dictionary whose keys are the integers entered and whose values ​​are the lists of divisors of the numbers entered. Example if the user enters the numbers: 2, 7, 11, 5, 3, 19, 14, 9, 1, 4, the program returns the dictionary:
def listDiv (n):
    l= []
    for i in range (1, n+1):
        if n%i == 0:
            l.append (i)
    return l
typed_number = []
for i in range (0,10):
    n = int (input())
    typed_number.append (n)
d=dict ({})
for n in typed_number:
    d[n]= listDiv (n)
print("The dictionary is : d = ",d)
##
Accept two variables a and b eg. a value 5 and b value  hello. 
try:
    a = int(input())
    b = input()
    b = int(b)
    result = a + b
    print(result)
except ValueError:
    print("cannot add integer with string")
##
Write a python program to raise an user defined exception for the guessing number problem where the user has to guess the number 10.

This program will ask the user to enter a number until they guess a stored number correctly. To help them figure it out, a hint is provided whether their guess is greater than or less than the stored number.
class GuessError(Exception):
    def __init__(self, message):
        self.message = message
        super().__init__(self.message)
stored_number = 10
while True:
    try:
        guess = int(input())
        if guess == stored_number:
            print("Congratulations! You guessed it correctly.")
            break
        elif guess < stored_number:
            raise GuessError("This value is too small, try again!")
        else:
            raise GuessError("This value is too large, try again!")
    except GuessError as e:
        print(e)
    except ValueError:
        print("Invalid input! Please enter an integer.")
    except EOFError:
        print()
        break
##
write a python program for the solution of value error in exception handling and check whether the number is even or odd.
try:
    x = int(input())
    if x % 2 == 0:
        print("You entered even number")
    else:
        print("An odd number")
except ValueError:
    print("Enter only number")
##
i. program should takes two numbers as input and divide

ii. if the second number is not zero then it should print result of a/b.

iii. if the second number is zero then it should print "Exception caught"
try:
    a = int(input())
    b = int(input())
    result = a / b
    print(result)
except ZeroDivisionError:
    print("Exception caught")
##
.get() is not a list method. Place pass keyword to the right line so that program doesn't throw an error.
my_list = [1, 3, 5]
try:
    my_list.get(0)  
except AttributeError:
    pass  
print(my_list)
##
i. program should takes two numbers as input and divide

ii. if the second number is not zero then it should print result of a/b.

iii. if the second number is zero then it should print "try again!! with a valid number"
try:
    a=int(input())
    b=int(input())
    c=a/b
    print(c)
except:
    print("try again!! with a valid number")
##
Create a short program that prompts the user for a list of grades separated by commas. Split the string into individual grades and use a list comprehension to convert each string to an integer. You should use a try statement to inform the user when the values they entered cannot be converted.
def get_grades():
    grades_input = input()
    grades_list = grades_input.split(',')
    try:
        grades = [int(grade.strip()) for grade in grades_list]
        print(grades)
    except ValueError:
        print("The grades you entered were in an invalid format.")
        print(grades_list)
get_grades()
##
get the variable 'L' with 3 elements from the user.

use index number '4' for print and clear these error with the statement "check index range" using Exception Handling. 
try:
    a='laptop','mobile','pen'
    print(a[4])
except IndexError:
    print("check index range")
##
i. program should takes two numbers as input and divide

ii. if the second number is not zero then it should print result of a/b.

iii. if the second number is zero then it should print "second number is invalid"
a=int(input())
b=int(input())
try:
    print(a/b)
except ZeroDivisionError:
     print("second number is invalid")
##
Write a python program for solving key error using exception handling & to find whether  key is exist or not. 

note : use keys 1,2,3

values : hello,world,python   

eg. 1:'Hello',2:'World', 3:'Python'

check key '4' is exist or not. if not display "The key does not exist!"
a= {1:'Hello',2:'World', 3:'Python'}
if a.keys():
   print("Hello")
   print("World")
 
   print("The key does not exist!")
##
Write Python Program to take the radius from the user and find the area of the circle using class name 'umbrella' and function name 'rain'
import math
class umbrella:
    def rain(self, radius):
        area = math.pi * radius ** 2
        return area
circle = umbrella()
try:
    radius = float(input())
    area = circle.rain(radius)
    print(f"Area of circle: {area:.2f}")
except ValueError:
    print("Please enter a valid number for the radius.")
##
Write a python program to find perimeter of a circle using class name 'pen'  and function name 'stationary'.
import math
class pen:
    def stationary(self, radius):
        perimeter = 2 * math.pi * radius
        return perimeter
circle = pen()
try:
    radius = float(input())
    perimeter = circle.stationary(radius)
    print(f"Perimeter of circle: {perimeter:.2f}")
except ValueError:
    print("Please enter a valid number for the radius.")
##
write a python program to perform addition and multiplication operation using class and if..elif statement
class calc:
    # Method to set values of a and b
    def setvalues(self, a, b):
        self.a = a
        self.b = b
    def add(self):
        return self.a + self.b
    def mul(self):
        return self.a * self.b
calculator = calc()
try:
    a = int(input())
    b = int(input())
    calculator.setvalues(a, b)
    while True:
        choice = int(input())
        if choice == 1:
            print("Result: ", calculator.add())
        elif choice == 2:
            print("Result: ", calculator.mul())
        elif choice == 0:
            print("Exiting!")
            break
        else:
            print("Invalid choice")
except ValueError:
    print()
##
Create a class named pet and method named move which will print the given animal is moving
class Pet:
    def move(self, name):
        print(f"{name} is moving!\n{name}")
pet = Pet()
name = input()
pet.move(name)
##
1.Define a Book class with the following attributes: Title, Author (Full name), Price.
2. Define a constructor used to initialize the attributes of the method with values entered by the user.
3. Set the View() method to display information for the current book.
4. Write a program to testing the Book class.
class Book:
    def __init__(self):
        self.title = input()
        self.author = input()
        self.price = int(input())
    def View(self):
        return ('Book Title: ', self.title, 'Book Author: ', self.author, 'Book Price: ', self.price)
if __name__ == "__main__":
    book = Book()
    print(book.View())
##
Write a python program to find perimeter of a circle using class name 'cse'  and function name 'mech'.
import math
class umbrella:
    def rain(self,r):
        a=2*math.pi*r
        print("Perimeter of circle:",round(a,2))
r=int(input())
ob=umbrella()
ob.rain(r)
##
Write Python Program to take the radius from the user and find the area of the circle using class name 'cse' and function name 'mech'
import math
class pen:
    def stationary(self,name):
        x=math.pi*num*num
        print(f"Area of circle: {x:.2f}")
num=int(input())
obj=pen()
obj.stationary(num)
##
Snowy
class Pet:    
    def __init__(self, name: str):
        self.name = name
            
    def move(self):
        print(self.name,"is moving!")
        print(self.name)
name=input()
o=Pet(name)
o.move()
##
Write a python program to find perimeter of a circle using class name 'laptop'  and function name 'dell'.
import math
class umbrella:
    def rain(self,r):
        a=2*math.pi*r
        print("Perimeter of circle:",round(a,2))
r=int(input())
ob=umbrella()
ob.rain(r)
##
write a python program to perform modulo and floor division operation using class and if,elif..
class calc:
    def __init__(self,a,b):
        self.a=a
        self.b=b
    def add(self):
        return self.a%self.b
    def sub(self):
        return self.a//self.b
a=int(input())
b=int(input())
obj=calc(a,b)
choice=1
while choice!=0:
    choice=int(input())
    if choice==1:
        print("Result: ",obj.add())
    elif choice==2:
        print("Result: ",obj.sub())
    elif choice==0:
        print("Exiting!")
    else:
        print("Invalid choice")
##
Write Python Program to take the radius from the user and find the area of the circle using class name 'cse' and function name 'mech'
import math
class pen:
    def stationary(self,name):
        x=math.pi*num*num
        print(f"Area of circle: {x:.2f}")
num=int(input())
obj=pen()
obj.stationary(num)
##





---
Create an Array List to store n numbers (add elements of type Integer) and then display the n numbers.
import java.util.*;

public class Main { 
  public static void main(String[] args) { 
    ArrayList<Integer> myNumbers = new ArrayList<Integer>();
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    myNumbers.add(sc.nextInt());
    }
    for (int i : myNumbers) {
      System.out.println(i);
    }
  } 
}


##
Create an arraylist and swap two elements in that arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
         Scanner sc=new Scanner(System.in);
        ArrayList<String> al = new ArrayList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
        al.add(sc.next());
        }
        Collections.swap(al,1,3);
        System.out.println(al);

   }
}


##
Create an arraylist and add odd numbers from 30 to 11 and then display the result in sorting order.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    ArrayList<Integer> arraylist = new ArrayList<Integer>();
    arraylist.add(29);
    arraylist.add(27);
    arraylist.add(25);  arraylist.add(23);  arraylist.add(21);
    arraylist.add(19);  arraylist.add(17);  arraylist.add(15);  arraylist.add(13);  arraylist.add(11);
    
    Collections.sort(arraylist);
    System.out.println(arraylist);
   
   }
}


##
Java Program To Print Fibonacci Series from given length Using Collection.
import java.util.ArrayList;
import java.util.Scanner;

public class FibonacciSeries {

	public static void main(String[] args) {

	
		ArrayList<Integer> fibonacciSeries = new ArrayList<>();

	
		fibonacciSeries.add(0);
		fibonacciSeries.add(1);

	
		Scanner sc = new Scanner(System.in);
	
		int length = sc.nextInt();
		
	
		sc.close();

	
		if (length <= 0)
			System.out.println("Length can not be negative.");
	
		else if (length == 1)
			System.out.println(fibonacciSeries.get(0));
	
		else if (length == 2)
			System.out.println(fibonacciSeries);
		else {

		
			for (int i = 3; i <= length; i++) {
			
				fibonacciSeries.add(fibonacciSeries.get(i - 2) + fibonacciSeries.get(i - 3));
			}

		
			System.out.println(fibonacciSeries);
		}
	}
}

##
Create an arraylist and read input at runtime display the arraylist and then removeall elements for arraylist finally display the arraylist.
import java.util.*;

public class Main {
    public static void main(String[] args){

        Scanner sc=new Scanner(System.in);
        ArrayList<String> languages = new ArrayList<>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++){
             languages.add(sc.next());
        }
       
        
        System.out.println(languages);

        
        languages.removeAll(languages);
        System.out.println(languages);
    }
}

##
Create a ArrayList in that list add any 4 animal names dynamically and display the same after add one more animal name at the index of 2 and then finally display the list.
import java.util.*;

public class CreateArrayListExample {

    public static void main(String[] args) {
        
        List<String> animals = new ArrayList<>();
        Scanner sc=new Scanner(System.in);

        for(int i=0;i<4;i++)
        {
        animals.add(sc.next());
        }

        System.out.println(animals);

       
        animals.add(2, sc.next());

        System.out.println(animals);

    }
}

##
Create an arraylist, add ‘n’ elements and remove 0th index elements and then display the arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
        ArrayList<String> al = new ArrayList<String>();
        int n=sc.nextInt();
        for(int i=0;i<n;i++)
        {
        al.add(sc.next());
        }
        al.remove(0);
        System.out.println(al);
   }
}


##
Convert array elements to arraylist and display the arraylist elements using collection concepts in java.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
      String citynames[]={"Agra", "Mysore", "Chennai", "Bhopal"};

	 
	  ArrayList<String> citylist= new ArrayList<String>(Arrays.asList(citynames));

	 

	  for (String str: citylist)
	  {
		System.out.println(str);
      }
   }
}


##
To traverse Array List elements using the Iterator interface using java collection.
import java.util.*;  
public class ArrayListExample{  
 public static void main(String args[]){  
  Scanner sc=new Scanner(System.in);
  ArrayList<Integer> list=new ArrayList<Integer>();
  int n=sc.nextInt();
  for(int i=0;i<n;i++)
  {
      list.add(sc.nextInt());
  }
  Iterator itr=list.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  
  }  
 }  
}

##
Create an arraylist, add 3 elements college,school,medical and remove school elements from the arraylist and then display the arraylist.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
   
        ArrayList<String> al = new ArrayList<String>();
      
        al.add("college");
        al.add("school");
        al.add("medical");
        
        al.remove("school");
        System.out.println(al);
   }
}


##
Create an arraylist and add any three elements and then update the three elements by 71,81,91 and then display the result using the set method.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
    ArrayList<Integer> arraylist = new ArrayList<Integer>(50);
    arraylist.add(1);
    arraylist.add(2);
    arraylist.add(3);
    
    arraylist.set(0,71);
    arraylist.set(1,81);
    arraylist.set(2,91);
    System.out.println(arraylist);
   
   }
}


##
Create an arraylist in that list add n color name like Red,Green,Blue,Yellow using contains method find Pink color is found or not.
import java.util.*;
public class Main {
   public static void main(String[] args) {
      Scanner sc= new Scanner(System.in);
      ArrayList<String> colorsList = new ArrayList<String>();
      int n=sc.nextInt();
      for(int i=0;i<=n;i++)
      {
      colorsList.add(sc.nextLine());
      }
 
       System.out.println("ArrayList contains Pink: "+colorsList.contains("Pink"));
       
   }
}

##
To create the linkedlist , display the elements from the linkedlist and replace the one element from the created linkedlist.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
       System.out.println("Linked List :" + cars);



      System.out.println("Object to be replaced:" + cars.set(sc.nextInt(), sc.next()));

 

      System.out.println("Linked List:" + cars);
  }
}


##
Apply the iterator Concepts in java linkedlist and display the elements from the linkedlist.To Create a linkedlist, read size of the list , read the elements for the linkedlist
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
     Iterator iterator = cars.iterator();  
    
        System.out.println("Elements in LinkedList : ");  
    
        while (iterator.hasNext())  
            System.out.print(iterator.next() + " ");  
    
        System.out.println();  
  }
}


##
First Element :college
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
    System.out.println("First Element :" + cars.getFirst());
  }
}


##
[college, engineering]
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
    System.out.println(cars);
    cars.addFirst("Good");
    System.out.println(cars);
  }
}



##
Apply the get() method in java linkedlist.To Create a linkedlist, read size of the list , read the elements for the linkedlist and display the elements from the linkedlist for specific
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
    String str = cars.get(1);
    System.out.print("Element at index 1: " + str);
  }
}


##
LinkedList: [7855642, 35658786, 5278367, 74381793]
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<Integer> cars = new LinkedList<Integer>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.nextInt());
    }
    

     System.out.println("LinkedList: "
                        + cars);
         
         
        Object[] a = cars.toArray();
       
        System.out.print("After converted LinkedList to Array: ");
        for(Object element : a)
            System.out.print(element+" ");
  }
}



##
Apply the contains method in linkedlist.Create a linkedlist and read the n elements for the linkedlist and display the elements from the linkedlist.Check whether "Programming" text contains or not.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> llist1 = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    llist1.add(sc.next());
    }
    
    System.out.println("Linked List 1:" + llist1);
    System.out.println("Linked List 1 contains 'Programming' :" + llist1.contains("Programming"));
  
  }
}


##
Applying indexOf() method returns the index of the element given in the linked list starting from
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    System.out.println(cars);
    
    System.out.println("Index for E :" + cars.indexOf("E"));
    System.out.println("Index for Programming :" + cars.indexOf("Programming"));
  }
}


##
Read Size of the array
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
       System.out.println("Linked List :" + cars);

  

       System.out.println("Element to be removed:" + cars.remove(0));

       System.out.println("LinkedList:" + cars);
  }
}


##
Develop a java class with a method saveEvenNumbers(int N) using LinkedList to store even numbers from 2 to N, where N is a integer which is passed as a parameter to the method 
import java.util.*;
public class Main {
	private LinkedList<Integer> list = new LinkedList<Integer>();
	
	public LinkedList<Integer> saveEvenNumbers(int N) {
		list = new LinkedList<Integer>();
		
		for (int i = 2; i <= N; i++) {
			if (i % 2 == 0) list.add(i);
		}
		
		return list;
	}
	
	public LinkedList<Integer> printEvenNumbers() {
		LinkedList<Integer> newList = new LinkedList<Integer>();
		
		for (int item : list) {
			newList.add(item * 2);
			System.out.println(item * 2);
		}
		
		return newList;
	}

	public static void main(String[] args) {
		Main asg = new Main();
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		asg.saveEvenNumbers(N);
		asg.printEvenNumbers();
		

	}

}

##
Create a linkedlist and read the 3 elements for the linkedlist and display the elements from the linkedlist.Apply the clone method in linkedlist.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> llist1 = new LinkedList<String>();
   
    for(int i=0;i<3;i++)
    {
    llist1.add(sc.next());
    }
    
    System.out.println("Linked List 1:" + llist1);
    LinkedList llist2 = new LinkedList();



  llist2 = (LinkedList) llist1.clone();



  System.out.println("Linked List 2:" + llist2);
  
  }
}


##
Applying removeFirst() method Concepts in java linkedlist , display the elements from index 1 position onwards in the linkedlist and display it.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
       System.out.println("Linked List :" + cars);

  

       System.out.println("Element to be removed:" + cars.removeFirst());

       System.out.println("LinkedList:" + cars);
  }
}


##
Applying removeLast() method Concepts in java linkedlist , display the elements from the linkedlist and display it.
import java.util.*;

public class Main {
  public static void main(String[] args) {
   Scanner sc=new Scanner(System.in);
    LinkedList<String> cars = new LinkedList<String>();
    int n=sc.nextInt();
    for(int i=0;i<n;i++)
    {
    cars.add(sc.next());
    }
    
       System.out.println("Linked List :" + cars);

  

       System.out.println("Element to be removed:" + cars.removeLast());

       System.out.println("LinkedList:" + cars);
  }
}


##
Read n elements(String)
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }
        System.out.println(al);
        al.add(1,sc.next());
		
		System.out.println("After add element in index 1 :" + al);
		al.set(2,sc.next());
		System.out.println("After update:" + al);
	}
}



##
List contains Programming or not:true
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }

		for (int i = 0; i < size; i++) {
  
            
            System.out.println(al.get(i) + " ");
        }
        System.out.println("List contains Programming or not:" + al.contains("programming"));
	
	}
}






##
Create a List interface implemented by array list class , adding n elements to object of List interface and print all the elements inside the List interface object,  remove given "for"
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }
		System.out.println("Initial List:" + al);
		al.remove("for");
		System.out.println("Final List:" + al);
		al.clear();
		System.out.println("All Remove Elements from the final List:" + al);
	}
}


##
Create a List interface implemented by arraylist class , adding n elements to object of List interface and print all the elements inside the List interface object,use indexOf() method
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }
		System.out.println("Initial List:" + al);
		
		
		System.out.println(al.indexOf("c"));
	}
}


##
Write a Java program of swap two elements in a list. Swapping 1st(index 0) element with the 3rd(index 2) element.
import java.util.*;

  public class swap {
  public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
   List<String> c1= new ArrayList<String>();
   int size=sc.nextInt();
   for(int i=0;i<size;i++)
   {
          c1.add(sc.next());
   }

          System.out.println("Array list before Swap:");
          for(String a: c1){
          System.out.println(a);
        }
          
         Collections.swap(c1, 0, 2);
          System.out.println("Array list after swap:");
          for(String b: c1){
          System.out.println(b);
         }
     }
}

##
Create a java program use hashset concepts in collection and add the elements to the hashset and then display it.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

HashSet <String> hs = new HashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

System.out.println("Values in HashSet object: "+ hs);
}
}

##
[5, 6, 7, 100, 200, 300]
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<Integer> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.nextInt());
        }

		
		System.out.println(al);
		ArrayList<Integer> arr = new ArrayList<Integer>();
        arr.add(100);
        arr.add(200);
        arr.add(300);
        System.out.println(arr);
  
        al.addAll(arr);
        System.out.println(al);
	}
}


##
Initial List:[computer, for, programming]
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }
		System.out.println("Initial List:" + al);
		al.remove("for");
		System.out.println("Final List:" + al);
	}
}


##
use set method set(0,"Happy").
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }
		System.out.println("Initial List:" + al);
		
		al.set(0,"Happy");
		System.out.println("Final List:" + al);
	}
}



##
[computer, super, c, programming]
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }
        al.add(1,sc.next());
		
		System.out.println(al);
	}
}



##
Read index value for the remove element.
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }
		System.out.println("Initial List:" + al);
		al.remove(sc.nextInt());
		System.out.println("Final List:" + al);
	}
}



##
Initial List:[computer, c, programming]
import java.util.*;


public class GFG {

	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		List<String> al = new ArrayList<>();
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
				al.add(sc.next());
        }
		System.out.println("Initial List:" + al);
		
		al.set(0,"Happy");
		System.out.println("Final List:" + al);
	}
}



##
Write a Java program to create a new array list, add some elements (string) and print out the collection.
import java.util.*;
  public class shuffle {
  public static void main(String[] args) {
  Scanner sc=new Scanner(System.in);
  List<String> list_Strings = new ArrayList<String>();
  int size=sc.nextInt();
  for(int i=0;i<size;i++)
  {
  list_Strings.add(sc.next());
  }
  System.out.println(list_Strings);

 }
}



##
Write a java program use hashset concepts from another collection and add the n elements to the
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){


Scanner sc=new Scanner(System.in);
ArrayList<String> list=new ArrayList<String>(); 
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
list.add(sc.next());

}
HashSet<String> set=new HashSet<String>(list);  
set.add(sc.next());  
Iterator<String> i=set.iterator();  
while(i.hasNext())  
{  
System.out.println(i.next());  
}  

}
}

##
Write a java program to read n elements and remove the elements "98" from the hashset and the display the hashset elements.
import java.util.*;  
public class HashSetRemoveExample2 {  
    public static void main(String[] args) {  
        HashSet<Integer> hashSetObject = new HashSet <>(); 
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
        hashSetObject.add(sc.nextInt());  
        }
        
       
   
            System.out.println("HashSet: " + hashSetObject);   
           
            hashSetObject.remove(98);  
          
            
          System.out.println("HashSet after removing elements: " + hashSetObject);  
    }  
}  


##
Check whether LinkedHashSet is empty or not using java collection.Without elements and with elements list result display.
import java.util.*;  

public class Main {
  public static void main(String[] args) {
      LinkedHashSet<Integer> al = new LinkedHashSet<Integer>();
      System.out.println("Is LinkedHashSet Empty: "+al.isEmpty());
      al.add(1);
      al.add(88);
      al.add(9);
      al.add(17);

      
      System.out.println("Is LinkedHashSet Empty: "+al.isEmpty());
   }
}
  



##
Write a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display the elements iterate(use while)and ignore the duplicate elements in 
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

LinkedHashSet <String> hs = new LinkedHashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}
 Iterator<String> i=hs.iterator();  
 while(i.hasNext())  
 {  
    System.out.println(i.next());  
 }  

}
}


##
Write a java program to read n elements and remove the elements "98" from the hashset and the display the Linkedhashset elements.
import java.util.*;  
public class HashSetRemoveExample2 {  
    public static void main(String[] args) {  
        LinkedHashSet<Integer> hashSetObject = new LinkedHashSet <>(); 
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
        hashSetObject.add(sc.nextInt());  
        }
        
       
   
            System.out.println("LinkedHashSet: " + hashSetObject);   
           
            hashSetObject.remove(98);  
          
            
          System.out.println("LinkedHashSet after removing elements: " + hashSetObject);  
    }  
}  


##
Write a program to store a group of employee names into a HashSet, retrieve the elements one by one using an Iterator.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

HashSet <String> hs = new HashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

Iterator<String> it = hs.iterator();
		while (it.hasNext())
			System.out.println(it.next());
}
}


##
Create a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display it.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

LinkedHashSet <String> hs = new LinkedHashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

System.out.println("Values in HashSet object: "+ hs);
}
}


##
Create a java program use hashset concepts in collection and add the elements to the hashset and then display the elements and its size.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

HashSet <String> hs = new HashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

System.out.println("HashSet: " + hs);  
System.out.println("The size of the set is: " + hs.size());  
}
}


##
Write a java program to read n elements and display the n elements, after remove one elements from the hashset("Ravi") and then display the elements.
import java.util.*;  
public class HashSetRemoveExample1 {  
    public static void main(String[] args) {  
        HashSet<String> set=new HashSet<String>();  
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        for(int i=0;i<size;i++)
        {
          set.add(sc.next());       
        }
       
         
        
            System.out.println("HashSet: " + set);   
            
            set.remove("Ravi");  
           
            System.out.println("HashSet after removing elements: " + set);  
    }  
}  


##
Create a java program use Linkedhashset concepts in collection and add the elements to the Linkedhashset and then display the elements and its size.
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){

LinkedHashSet <String> hs = new LinkedHashSet <String>();
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
hs.add(sc.next());

}

System.out.println("LinkedHashSet: " + hs);  
System.out.println("The size of the set is: " + hs.size());  
}
}


##
ravi
import java.util.*;

public class HashSetDemo{

public static void main(String args[]){


Scanner sc=new Scanner(System.in);
ArrayList<String> list=new ArrayList<String>(); 
int n=sc.nextInt();
for(int i=0;i<n;i++)
{
    
list.add(sc.next());

}
LinkedHashSet<String> set=new LinkedHashSet<String>(list);  
set.add(sc.next());  
Iterator<String> i=set.iterator();  
while(i.hasNext())  
{  
System.out.println(i.next());  
}  

}
}


##


























---
import pyperclip
import time

def copy_to_clipboard(text):
    pyperclip.copy(text)




example_text = """

Pradeesh kumar



1. Create a class named 'Student' with String variable 'name' and String variable 'address'. 

{{ Your code here }}

public class Main {
    public static void main(String[] args) {
        Student obj= new Student();        
        obj.name="John";
        obj.address="Chennai";
        System.out.println(obj.name+" "+obj.address);
    }
}


For example:

Input	Result
---
John Chennai



class Student
{
    String name;
    String address;
}






2.Write a Java programs to swap the values of the two variables by using a third variable. Get Input value from user.


For example:

Input	Result
45
54
After swapping a= 54 b=45




import java.util.*;
public class Demo
{
    public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    int temp;
    temp=a;
    a=b;
    b=temp;
    System.out.println("After swapping a= "+a +" b="+b);
    }
}




3.Define a program Using instance method  to find out if given number is multiples of 3 or not. 

import java.util.*;
public class Age {
    int n;
    {{ your code here}}
    public static void main(String[] args) {
       Age obj=new Age();
       obj.check();
    }
}
For example:

Input	Result
12

Yes



    void check()
    {

        Scanner sc=new Scanner(System.in);
        n=sc.nextInt();
        
        if(n%3==0)
        {
            System.out.println("Yes");
        }
        else
        {
            System.out.println("No");
        }
    }
    
  





4.Write a Java program to check the character is vowel or not  by defining instance method and instance variable.

import java.util.*;
public class Prime{
  int num;
   {{ Your code here}}
  public static void main(String[] args) {
      Prime obj1=new Prime();
              System.out.println(obj1.isVowel());   
  }
}


For example:

Input	Result
a
true




   boolean isVowel()
   {
Scanner sc=new Scanner(System.in);
char ch=sc.next().charAt(0);
   boolean prime = false;
        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch=='A' || ch =='E' || ch=='I'||ch=='O'||ch=='U')
        {
          prime = true;
        }
          else
      prime = false;
    return prime;
  }

 





5.Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places.

For example:

Input	Result
23.456
23.456
They are the same up to three decimal places




import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        double x = in.nextDouble();
        
        double y = in.nextDouble();

        x = Math.round(x * 1000);
        x = x / 1000;

        y = Math.round(y * 1000);
        y = y / 1000;

        if (x == y)
        {
            System.out.println("They are the same up to three decimal places");
        }
        else
        {
            System.out.println("They are different");
        }
    }
}







Thenmozhi P





1.Write a Java program to find the factorial value of any number entered through the keyboard using do...while statement.

For example:

Input	Result
3
Factorial: 6



import java.util.Scanner;
public class Demo {

      public static void main(String[] args)
	    {
	        Scanner console = new Scanner(System.in);
	        int num; // To hold number
	        int fact = 1,i=1; // To hold factorial
	        num = console.nextInt();
	       
	        do
	        {
	            fact *= i;
	            i++;
	        }while( i<=num );
	        
	        System.out.println("Factorial: "+ fact);
    }
}








2.Write a Java program to check weather the given character is uppercase or lowercase alphabet.

For example:

Input	Result
a
Lower Case




import java.util.*;
public class check
{
    public static void main(String args[]) 
    {
        char m;
        Scanner sc=new Scanner(System.in);
        m = sc.next().charAt(0);
        if(m >= 97 && m <= 123)
        {
            System.out.println("Lower Case");
        }
        else if(m >= 65 && m <= 96)
        {
            System.out.println("Upper Case");
        }
        else if(m >= 48 && m <= 57)
        {
            System.out.println("Digit");
        }
    }
}





3.Create a main () for class named as ‘Fruit’ it has name , color, weight as its member.  Access Grape and Mango by creating its object.[Members values are : Grape,Purple,0.75 and Mango, Yellow, 1.50]


public class Fruit {
    String name;
    String color;
    double weight;
    {{ Your code here }}
}
For example:

Input	Result
---
Fruit Name is Grape,weight is 0.75kg and Color is Purple 
Fruit Name is Mango,weight is 1.5kg and Color is Yellow 




    public static void main(String[] args) {
        Fruit obj1=new Fruit();
        Fruit obj2=new Fruit();
        obj1.name="Grape";
        obj1.color="Purple";
        obj1.weight=0.75;
        obj2.name="Mango";
        obj2.color="Yellow";
        obj2.weight=1.50;
        System.out.println("Fruit Name is "+obj1.name+",weight is "+obj1.weight+"kg"+" and Color is "+obj1.color);
        System.out.println("Fruit Name is "+obj2.name+",weight is "+obj2.weight+"kg"+" and Color is "+obj2.color);
        
    }






4.Write a Java method  to print the sum of two numbers entered by user by defining instance method and instance variable.[Class Name is ‘Calculator’ function name is ‘sum() and return type of function is ’void’]

import java.util.*;
public class Calculator {
       int num1,num2;
       {{ STUDENT_ANSWER }}
       public static void main(String[] args) {
       Calculator obj1=new Calculator();
       obj1.sum();
}
For example:

Input	Result
20
10

Sum of given numbers is 30



void sum()
    {
        Scanner sc=new Scanner(System.in);
        num1=sc.nextInt();
        num2=sc.nextInt();
        int result=num1+num2;
        System.out.println("Sum of given numbers is "+result);
    }





5.Write a Java program to get and find the power of another number  by defining instance method and local variable.[Class Name is ‘Prime’ function name is ‘isPower()’  and return type of function is double]

import java.util.*;

import java.lang.Math;

public class Prime{

{{ Your code here }}

  public static void main(String[] args) {

      Prime obj1=new Prime();

      double f;

      f=obj1.isPower();

      System.out.println(f);

  }

}



For example:

Input	Result
2
3
8.0



     double isPower(){
       int num,p;
       double po;
       Scanner sc=new Scanner(System.in);
       num=sc.nextInt();
       p=sc.nextInt();
        po=Math.pow(num,p);
       return po;
  }






6.Create a class named 'Distance' to add two distances in inch-feet by using third object. Get Input from user.



import java.util.*;
public class Distance
{
    double feet,inches;
    public static void main(String[] args)
    {
       {{Your code here }}
        obj3.feet=(obj1.feet+obj2.feet);
        obj3.inches=(obj1.inches+obj2.inches);
        System.out.println("Total Distance is "+obj3.feet+" feet and "+obj3.inches+" inches");        
    }
}
For example:

Input	Result
2.5
1.5
3.0
4.5
Total Distance is 5.5 feet and 6.0 inches





        Distance obj1=new  Distance();
        Distance obj2=new  Distance();
        Distance obj3=new  Distance();

        Scanner sc =new Scanner(System.in);
        obj1.feet=sc.nextDouble();
        obj1.inches=sc.nextDouble();
        obj2.feet=sc.nextDouble();
        obj2.inches=sc.nextDouble();
        
        


7.Write a Java program to get two complex number and then print the sum of two complex numbers.


For example:

Input	Result
2
3
3
5
sum of two complex number is 5+8i




import java.util.*;
public class ComplexNumber {
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
       int r1,i1,r2,i2;
     r1=sc.nextInt();
     i1=sc.nextInt();
     r2=sc.nextInt();
     i2=sc.nextInt();
    System.out.println("sum of two complex number is "+(r1+r2)+"+"+(i1+i2)+"i");
    }
}





8.Write a Java program print area of Trapezium by defining instance method and local variable .[Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’double’] (Note: Area of Trapezium = 1/2(h(b1+b2))

import java.util.*;
public class Area {
       {{ STUDENT_ANSWER }}
       public static void main(String[] args) {
       Area obj=new Area();
       double area=obj.calculateArea();
       System.out.println("Area of Trapezium is "+area);
    }
}

For example:

Input	Result
2
3
4
Area of Trapezium is 10.0





        double calculateArea()
    {
        double b1,b2,h,ciarea;
        Scanner sc=new Scanner(System.in);
        b1=sc.nextDouble();
        b2=sc.nextDouble();
        h=sc.nextDouble();
        ciarea=(0.5)*(b1+b2)*h;
        return ciarea;
    }
    
   



9.Write a Java program to check given number  is zero or not.



import java.util.Scanner;

public class Demo
{
    public static void main(String[] args)
    {
       Scanner sc=new Scanner(System.in);
       int num=sc.nextInt();
        if(num==0)
        System.out.println("Given number is Zero");
        else
        {
        	 System.out.println(num+ " is Non-Zero");
        }
    }
}






10.Define a program to find out if he/she is eligible to vote. A person is eligible to vote if his/her age is greater than or equal to 18 by using instance method and local variable. 

[Class Name is ‘Age’ function name is ‘calculateAge()’  and return type of function is ’void’]

import java.util.*;
public class Age {
    {{ STUDENT_ANSWER }}
        public static void main(String[] args) {
       Age obj=new Age();
       obj.calculateAge();
    }
}


For example:

Input	Result
23

Eligible to vote





    void calculateAge()
    {    int age;

        Scanner sc=new Scanner(System.in);
        age=sc.nextInt();
        if(age>=18)
        {
            System.out.println("Eligible to vote");
        }
        else
        {
            System.out.println("Not Eligible to vote");
        }
    }
    




11.Write a Java program to find sum of even numbers from given 4 numbers by defining instance method and instance variable.[Class Name is ‘sumeven function name is ‘sum()’  and return type of function is ‘int’]

import java.util.*;
public class sumeven{
 {{Your code here}}
  public static void main(String[] args) {
     Scanner sc=new Scanner(System.in);
     sumeven x=new sumeven();
     int a=sc.nextInt();
        int b=sc.nextInt();
           int c=sc.nextInt();
              int d=sc.nextInt();
      System.out.println("sum of even number is :"+x.sum(a,b,c,d));
        }
}
For example:

Input	Result
3
4
5
2
sum of even number is :6


   int sum(int x,int y,int z, int r)
   {
       int sum=0;
   if(x%2==0)
   {
       sum=sum+x;
   }
   if(y%2==0)
   {
       sum=sum+y;
   }
   if(z%2==0)
   {
       sum=sum+z;
   }
   if(r%2==0)
   {
       sum=sum+r;
   }
   return sum;
  }





12.Write a Java programs to get marks and find the average and display the grade. 

(>= 80 then prints Grade ‘A’
<80 and >=60 then  Grade ‘B’
 <60 and >=40 then  Grade ‘C’
else Grade ‘D’)

NOTE: total subject 5


For example:

Input	Result
43
78
66
23
87
The student Grade is: C




import java.util.Scanner;

public class JavaExample
{
    public static void main(String args[])
    {
    	int m1,m2,m3,m4,m5;
        float total=0, avg;
        Scanner scanner = new Scanner(System.in);
	
        m1 = scanner.nextInt();
         m2 = scanner.nextInt();
          m3 = scanner.nextInt();
           m4 = scanner.nextInt();
            m5 = scanner.nextInt();
           total = m1+m2+m3+m4+m5;
        
        avg = total/5;
        System.out.print("The student Grade is: ");
        if(avg>=80)
        {
            System.out.print("A");
        }
        else if(avg>=60 && avg<80)
        {
           System.out.print("B");
        } 
        else if(avg>=40 && avg<60)
        {
            System.out.print("C");
        }
        else
        {
            System.out.print("D");
        }
    }
}



13.Write a Java program that display department name based on given charcter (a : AIDS, c : CSE, e : ECE, m: MECH, invalid for other value)

For example:

Input	Result
a
AIDS


import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	   Scanner sc=new Scanner(System.in);
	   char num =sc.next().charAt(0);
    
       switch (num) {
           case 'a':
               System.out.println("AIDS");
           break;
           case 'c':
              System.out.println("CSE");
               break;
               case 'm':
              System.out.println("MECH");
               break;
               case 'e':
              System.out.println("ECE");
               break;
            default:
              System.out.println("invalid");
              
       }

     
    }
}




14.calculate the simple intrest using object and class

import java.util.Scanner;
public class SimpleInterestCalculator {
    double principal, rate, time, simpleInterest;
    public void calculateSimpleInterest() {
        simpleInterest = (principal * rate * time) / 100;
    }
    public static void main(String[] args) {
        SimpleInterestCalculator calculator = new SimpleInterestCalculator();
        Scanner scanner = new Scanner(System.in);
          {{ Type your code here}}
        calculator.calculateSimpleInterest();
        System.out.println("Simple Interest: " + calculator.simpleInterest);
    }
}


For example:

Input	Result
5000
8
3
Simple Interest: 1200.0


calculator.principal = scanner.nextDouble();
 
        calculator.rate = scanner.nextDouble();
 
        calculator.time = scanner.nextDouble();





15.Write a Java program to check the number is palindrome or not  by defining instance method and instance variable.[Class Name is ‘check’ function name is ‘isPali()’  and return type of function is ‘boolean’]

import java.util.*;
public class check{
    int num;
  {{ Your code here }}
  public static void main(String[] args) {
      check obj1=new check();
     Scanner sc=new Scanner(System.in);
      obj1.num=sc.nextInt();
         boolean f;
      f=obj1.isPali(obj1.num);
      System.out.println(f);
        }
}




   boolean isPali(int n){
   boolean prime = true;
     int r,sum=0,temp;
  temp=n;    
  while(n>0){    
   r=n%10;  
   sum=(sum*10)+r;    
   n=n/10;    
  }    
  if(temp==sum)    
   prime=true;  
  else    
  prime=false;  
  
return prime;
  }




Sharon Sanjana S Sunder




1.Write a Java method to get and print the 2 values entered by user by defining instance method .[Class Name is ‘Test’ function name is ‘getdata()’ , 'putdata()' and return type is ’void’]

import java.util.*;
public class Test {
    int num1,num2;
    {{ Your code here }}
    public static void main(String[] args) {
        Test obj1=new Test();
        obj1.getData();
        obj1.putData();
      }
}
For example:

Input	Result
10
10
Number1 is:10
Number2 is:10



    void getData()
    {
        Scanner sc=new Scanner(System.in);
        num1=sc.nextInt();
        num2=sc.nextInt();
    }
    void putData()
    {
        System.out.println("Number1 is:"+num1);
        System.out.println("Number2 is:"+num2);
    }





2.Write a java code for finding the division of number 4 and 2 using class and objects.

   public class val

{

    public double n1,n2;    

 public static void main(String[] args)

    {

 {{Your code here}}

       System.out.println(obj.n1/obj.n2);

    }

}

   

For example:

Result
2.0



        val obj=new val();
       obj.n1=4;
       obj.n2=2;
      



3.Write a Java program to get the values of variables 'a' and 'b' respectively and check if atleast one of the conditions 'a < 50' or 'a < b' is true.


For example:

Input	Result
23
50
true




import java.util.*;
public class Demo
{
    public static void main(String[] args){
     Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    System.out.println(a < 50 || a < b);
    }
}




4.Write a Java method to get and print the 2 values entered by user by defining instance method .[Class Name is ‘Test’ function name is ‘getdata()’ , 'putdata()' and return type is ’void’]

import java.util.*;

public class Test {

    int num1,num2;

    {{ Your code here }}

    public static void main(String[] args) {

        Test obj1=new Test();

        obj1.getData();

        obj1.putData();

      }

}

For example:

Input	Result
10
10
Number1 is:10
Number2 is:10



    void getData()
    {
        Scanner sc=new Scanner(System.in);
        num1=sc.nextInt();
        num2=sc.nextInt();
    }
    void putData()
    {
        System.out.println("Number1 is:"+num1);
        System.out.println("Number2 is:"+num2);
    }






5.Write a Java program to solve the following equation ,  y = x3 - 2 (x-3)3 + 20

For example:

Input	Result
2
value: 30



import java.util.Scanner;
public class Demo {

      public static void main(String[] args)
	    {
	        Scanner sc=new Scanner(System.in);
	       
	        int n=sc.nextInt(); // To hold number
	        int y = (n*n*n) - 2*((n-3)*(n-3)*(n-3))+20;
	        System.out.println("value: "+ y);
    }
}





6.Write a java program left shift the given number upto given times.

For example:

Input	Result
3
2
a << 2 = 12




import java.util.Scanner;
public class Demo {

public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
int a = sc.nextInt();
 int c = sc.nextInt();
 int d;

      d = a << c;       
      System.out.println("a << " + c+" = " + d );
   }
}





7.Write a program in Java to display the n terms of odd natural number and their sum using do...while Statement.

For example:

Input	Result
3
The Sum of odd Natural Number upto 3 terms is: 9




import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	  {
		   int i=1,n,sum=0;	
		   Scanner in = new Scanner(System.in);
				    n = in.nextInt();
		  do

		   {
		    // System.out.println (2*i-1);
		     sum+=2*i-1;
		     i++;
		   }while(i<=n);
		   System.out.println ("The Sum of odd Natural Number upto " +n+" terms is: " +sum);

		}
    }
}





8.Write a Java program to get and find the power of another number  by defining instance method and local variable.[Class Name is ‘Prime’ function name is ‘isPower()’  and return type of function is double]

import java.util.*;

import java.lang.Math;

public class Prime{

{{ Your code here }}

  public static void main(String[] args) {

      Prime obj1=new Prime();

      double f;

      f=obj1.isPower();

      System.out.println(f);

  }

}



For example:

Input	Result
2
3
8.0




     double isPower(){
       int num,p;
       double po;
       Scanner sc=new Scanner(System.in);
       num=sc.nextInt();
       p=sc.nextInt();
        po=Math.pow(num,p);
       return po;
  }





9.Write a Java program print area of circle  by defining instance method and local variable.[Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’double’]

import java.util.*;
public class Area {
        {{ STUDENT_ANSWER }}
        public static void main(String[] args) {
       Area obj=new Area();
       double area=obj.calculateArea();
       System.out.println("Area of Circle is "+area);
    }
}
For example:

Input	Result
2

Area of Circle is 12.56



        double calculateArea()
    {
        double radius,cirarea;
        Scanner sc=new Scanner(System.in);
        radius=sc.nextDouble();
        cirarea=3.14*radius*radius;
        return cirarea;
    }
   



10.calculate the simple intrest using object and class

import java.util.Scanner;
public class SimpleInterestCalculator {
    double principal, rate, time, simpleInterest;
    public void calculateSimpleInterest() {
        simpleInterest = (principal * rate * time) / 100;
    }
    public static void main(String[] args) {
        SimpleInterestCalculator calculator = new SimpleInterestCalculator();
        Scanner scanner = new Scanner(System.in);
          {{ Type your code here}}
        calculator.calculateSimpleInterest();
        System.out.println("Simple Interest: " + calculator.simpleInterest);
    }
}


For example:

Input	Result
5000
8
3
Simple Interest: 1200.0



calculator.principal = scanner.nextDouble();
 
        calculator.rate = scanner.nextDouble();
 
        calculator.time = scanner.nextDouble();




11.Write a Java program print area of circle  by defining instance method and local variable. The input for radius is 2 .

import java.util.*;
public class Area {
       {{ STUDENT_ANSWER }}
      public static void main(String[] args) {
       Area obj=new Area();
       obj.calculateArea();
        }
}


For example:

Result
Area of Circle is 12.56



        void calculateArea()
    {
        double radius,cirarea;
        //Scanner sc=new Scanner(System.in);
        radius=2;
        cirarea=3.14*radius*radius;
        System.out.println("Area of Circle is "+cirarea);
    }
    




12.Write a Java program that display the size as extra small,small, medium, large and extra large based on size given (1 to 5) other values display Invalid size number. 

For example:

Input	Result
2
Small




import java.util.*;
public class SizePrinter {
 
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int sizeNumber = sc.nextInt(); 
 
        switch (sizeNumber) {
            case 1:
                System.out.println("Extra Small");
                break;
            case 2:
                System.out.println("Small");
                break;
            case 3:
                System.out.println("Medium");
                break;
            case 4:
                System.out.println("Large");
                break;
            case 5:
                System.out.println("Extra Large");
                break;
            default:
                System.out.println("Invalid size number");
        }
    }
}






13.Create a class named 'Distance' to add two distances (220 feet, 5inches) and (13 , 30inches)in inch-feet by using third object. 



import java.util.*;
public class Distance
{
    int feet,inches;
    public static void main(String[] args)
    {
        Distance obj1=new  Distance();
        Distance obj2=new  Distance();
        Distance obj3=new  Distance();
        {{Code here}}
        System.out.println("Total Distance is "+obj3.feet+" feet and "+obj3.inches+" inches");
    }
}
For example:

Input	Result
---
Total Distance is 233 feet and 35 inches






        obj1.feet=220;
        obj1.inches=5;
        obj2.feet=13;
        obj2.inches=30;
        
        obj3.feet=(obj1.feet+obj2.feet);
        obj3.inches=(obj1.inches+obj2.inches);






14.Write a Java program to check weather the given character is uppercase or lowercase alphabet.

For example:

Input	Result
a
Lower Case




import java.util.*;
public class check
{
    public static void main(String args[]) 
    {
        char m;
        Scanner sc=new Scanner(System.in);
        m = sc.next().charAt(0);
        if(m >= 97 && m <= 123)
        {
            System.out.println("Lower Case");
        }
        else if(m >= 65 && m <= 96)
        {
            System.out.println("Upper Case");
        }
        else if(m >= 48 && m <= 57)
        {
            System.out.println("Digit");
        }
    }
}





15.Write a Java program to print Student details (Name,Collegename) cge_name is same to all members in the class. Use static type variable to access age.

For example:

Input	Result
John
Ram
Student name: John College Name: SEC
Student name: Ram College Name: SEC





import java.util.*;
public class Main
{
    static String cge_name="SEC";
    String name;
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	Main obj1=new Main();
	Main obj2=new Main();
	obj1.name=sc.next();
	obj2.name=sc.next();
	System.out.println("Student name: "+obj1.name+" College Name: "+cge_name);
	System.out.println("Student name: "+obj2.name+" College Name: "+cge_name);
	}
}






16.Write a Java program print area of Trapezium by defining instance method and local variable .[Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’double’] (Note: Area of Trapezium = 1/2(h(b1+b2))

import java.util.*;
public class Area {
       {{ STUDENT_ANSWER }}
       public static void main(String[] args) {
       Area obj=new Area();
       double area=obj.calculateArea();
       System.out.println("Area of Trapezium is "+area);
    }
}

For example:

Input	Result
2
3
4
Area of Trapezium is 10.0




        double calculateArea()
    {
        double b1,b2,h,ciarea;
        Scanner sc=new Scanner(System.in);
        b1=sc.nextDouble();
        b2=sc.nextDouble();
        h=sc.nextDouble();
        ciarea=(0.5)*(b1+b2)*h;
        return ciarea;
    }
    
   





17.Write a Java program to print Employee details (name, Department,age) dept and age is same to all members in the class. Use static type variable to access name.

For example:

Input	Result
John
Ram
Student name: John Department: AIDS Age: 18
Student name: Ram Department: AIDS Age: 18





import java.util.*;
public class Main
{
    static String dept="AIDS";
    String name;
    static int age=18;
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	Main obj1=new Main();
	Main obj2=new Main();
	obj1.name=sc.next();
	obj2.name=sc.next();
	System.out.println("Student name: "+obj1.name+" Department: "+dept+" Age: 18");
	System.out.println("Student name: "+obj2.name+" Department: "+dept+" Age: 18");
	}
}





18.Write a program to find the roots of a quadratic equation


For example:

Input	Result
2.3
4
5.6
root1 = -0.87+1.30
root2 = -0.87-1.30




import java.util.*;
public class quad {

  public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
    double a , b , c ;
    a=sc.nextDouble();
    b=sc.nextDouble();
    c=sc.nextDouble();
    double root1, root2;
    double determinant = b * b - 4 * a * c;
    if (determinant > 0) {
      root1 = (-b + Math.sqrt(determinant)) / (2 * a);
      root2 = (-b - Math.sqrt(determinant)) / (2 * a);
      System.out.format("root1 = %.2f and root2 = %.2f", root1, root2);
    }

   
    else if (determinant == 0) {

      root1 = root2 = -b / (2 * a);
      System.out.format("root1 = root2 = %.2f;", root1);
    }

    
    else {

      // roots are complex number and distinct
      double real = -b / (2 * a);
      double imaginary = Math.sqrt(-determinant) / (2 * a);
      System.out.format("root1 = %.2f+%.2f", real, imaginary);
      System.out.format("\nroot2 = %.2f-%.2f", real, imaginary);
    }
  }
}






19.Create a main () for class named as ‘Fruit’ it has name , color, weight as its member.  Access Grape and Mango by creating its object.[Members values are : Grape,Purple,0.75 Apple,Red,2.50 and Mango, Yellow, 1.50]

public class Fruit {
    String name;
    String color;
    double weight;
    {{ Your Code here }}    
}
For example:

Input	Result
---
Fruit Name is Grape,weight is 0.75kg and Color is Purple
Fruit Name is Apple,weight is 2.5kg and Color is Red
Fruit Name is Mango,weight is 1.5kg and Color is Yellow





    public static void main(String[] args) {
        Fruit obj1=new Fruit();
        Fruit obj2=new Fruit();
        Fruit obj3=new Fruit();
        obj1.name="Grape";
        obj1.color="Purple";
        obj1.weight=0.75;
        obj2.name="Apple";
        obj2.color="Red";
        obj2.weight=2.50;
        obj3.name="Mango";
        obj3.color="Yellow";
        obj3.weight=1.50;
        
        System.out.println("Fruit Name is "+obj1.name+",weight is "+obj1.weight+"kg"+" and Color is "+obj1.color);
        System.out.println("Fruit Name is "+obj2.name+",weight is "+obj2.weight+"kg"+" and Color is "+obj2.color);
        System.out.println("Fruit Name is "+obj3.name+",weight is "+obj3.weight+"kg"+" and Color is "+obj3.color);
        
    }







20.Write a program in Java to display the n terms of even natural number and their sum using do...while Statement.

For example:

Input	Result
3
The Sum of even Natural Number upto 3 terms is: 12





import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	  {
		   int i=1,n,sum=0;	
		   Scanner in = new Scanner(System.in);
				    n = in.nextInt();
		  do

		   {
		    // System.out.println (2*i-1);
		     sum+=2*i;
		     i++;
		   }while(i<=n);
		   System.out.println ("The Sum of even Natural Number upto " +n+" terms is: " +sum);

		}
    }
}







Vijay ganesh




1. calculate the Area of squaer using method in java
import java.util.Scanner;

public class SquareAreaCalculator {

 {{Type your code here }}

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        SquareAreaCalculator calculator = new SquareAreaCalculator();



    

        double side = scanner.nextDouble();

        double area = calculator.calculateSquareArea(side);

        System.out.println("Area of the square with side length " + side + " units is: " + area + " square units");

        scanner.close();

    }

}



For example:

Input	Result
5
Area of the square with side length 5.0 units is: 25.0 square units





public double calculateSquareArea(double a)
{
    return a*a;
}






2.Write a Java program print area of circle  by defining instance method and local variable. The input for radius is 2 .

import java.util.*;
public class Area {
       {{ STUDENT_ANSWER }}
      public static void main(String[] args) {
       Area obj=new Area();
       obj.calculateArea();
        }
}


For example:

Result
Area of Circle is 12.56




        void calculateArea()
    {
        double radius,cirarea;
        //Scanner sc=new Scanner(System.in);
        radius=2;
        cirarea=3.14*radius*radius;
        System.out.println("Area of Circle is "+cirarea);
    }
    





3.Write a java Program to print multiplies of 10 for given number from 1 to 5. Get input number from user

Note: Default value as Invalid Input

For example:

Input	Result
1
1's 10 is Ten





import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        int num=in.nextInt();
        
        
        if(num==0)
        {
        	System.out.println(num+"'s 10 is 0 ");
        }
        else if(num==1)
        {
        		System.out.println(num+"'s 10 is Ten ");
        }
        else if(num==2)
        {
        		System.out.println(num+"'s 10 is Twenty ");
        }
        else if(num==3)
        {
        		System.out.println(num+"'s 10 is Thirty ");
        }
        else if(num==4)
        {
        		System.out.println(num+"'s 10 is Forty ");
        }
        else if(num==5)
        {
        		System.out.println(num+"'s 10 is Fifty ");
        }
        
        else 
        {
        		System.out.println("Invalid Input");
        }
    }
}






4.Write a java code for finding the division of number 4 and 2 using class and objects.

   public class val

{

    public double n1,n2;    

 public static void main(String[] args)

    {

 {{Your code here}}

       System.out.println(obj.n1/obj.n2);

    }

}

   

For example:

Result
2.0




        val obj=new val();
       obj.n1=4;
       obj.n2=2;
      





5.Write a java program to read the 4 numbers from the user, from that to print the greatest numbers.
For example:

Input	Result
3
5
6
7
7 is greatest





import java.util.Scanner;
public class Demo {

	public static void main(String[] args) {		
		//int n1 = 6661, n2 = 666, n3 = 188, n4 = 66;
		 Scanner sc = new Scanner(System.in);
             int n1 = sc.nextInt();
		int n2 = sc.nextInt();
		int n3 = sc.nextInt();
		int n4 = sc.nextInt();
		if(n1>n2 && n1>n3 && n1>n4) {
			System.out.println(n1+ " is greatest");
		} else if(n2>n1 && n2>n3 && n2>n4) {
			System.out.println(n2+ " is greatest");
		} else if(n3>n1 && n3>n2 && n3>n4) {
			System.out.println(n3+ " is greatest");
		} else {
			System.out.println(n4+ " is greatest");
		}
		
	}

}






Sarvanan T




1.Write a Java program to print Student details (name, age) age is same to all members in the class. Use static type variable to access age.

For example:

Input	Result
John
Ram
Student name: JohnAge: 18
Student name: RamAge: 18



import java.util.*;
public class Main
{
    static int age=18;
    String name;
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	Main obj1=new Main();
	Main obj2=new Main();
	obj1.name=sc.next();
	obj2.name=sc.next();
	System.out.println("Student name: "+obj1.name+"Age: "+age);
	System.out.println("Student name: "+obj2.name+"Age: "+age);
	}
}





2.Write a Java program to get and find the power of another number  by defining instance method and local variable.[Class Name is ‘Prime’ function name is ‘isPower()’  and return type of function is double]

import java.util.*;

import java.lang.Math;

public class Prime{

{{ Your code here }}

  public static void main(String[] args) {

      Prime obj1=new Prime();

      double f;

      f=obj1.isPower();

      System.out.println(f);

  }

}



For example:

Input	Result
2
3
8.0






     double isPower(){
       int num,p;
       double po;
       Scanner sc=new Scanner(System.in);
       num=sc.nextInt();
       p=sc.nextInt();
        po=Math.pow(num,p);
       return po;
  }





3.Write a java code for finding the division of number 4 and 2 using class and objects.

   public class val

{

    public double n1,n2;    

 public static void main(String[] args)

    {

 {{Your code here}}

       System.out.println(obj.n1/obj.n2);

    }

}

   

For example:

Result
2.0






        val obj=new val();
       obj.n1=4;
       obj.n2=2;
      






4.Write a java program left shift the given number upto given times.

For example:

Input	Result
3
2
a << 2 = 12




import java.util.Scanner;
public class Demo {

public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
int a = sc.nextInt();
 int c = sc.nextInt();
 int d;

      d = a << c;       
      System.out.println("a << " + c+" = " + d );
   }
}





5.Write a java Program to arrange two numbers in ascending order.

For example:

Input	Result
23
34
23 34






import java.util.Scanner;
public class Demo {
    
  public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        int num1=in.nextInt();
        int num2=in.nextInt();
        
        
        if((num1<num2))
        {
        	System.out.println(num1+" "+num2);
        }
        else 
        {
        	System.out.println(num2+" "+num1);
        }
        
    }
}




6.Write a Java program that display department name based on given charcter (a : AIDS, c : CSE, e : ECE, m: MECH, invalid for other value)

For example:

Input	Result
a
AIDS






import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	   Scanner sc=new Scanner(System.in);
	   char num =sc.next().charAt(0);
    
       switch (num) {
           case 'a':
               System.out.println("AIDS");
           break;
           case 'c':
              System.out.println("CSE");
               break;
               case 'm':
              System.out.println("MECH");
               break;
               case 'e':
              System.out.println("ECE");
               break;
            default:
              System.out.println("invalid");
              
       }

     
    }
}








7.Create a class named 'Distance' to add two distances in inch-feet belongs to integer by using third object. Get the Input from user





import java.util.*;
public class Distance
{
    int feet,inches;
    public static void main(String[] args)
    {
        Distance obj1=new  Distance();
        Distance obj2=new  Distance();
        Distance obj3=new  Distance();
        Scanner sc =new Scanner(System.in);
        {{Type your code here }}
        System.out.println("Total Distance is "+obj3.feet+" feet and "+obj3.inches+" inches");
    }
}
For example:

Input	Result
89
4
34
7
Total Distance is 123 feet and 11 inches






 
        obj1.feet=sc.nextInt();
        obj1.inches=sc.nextInt();
        obj2.feet=sc.nextInt();
        obj2.inches=sc.nextInt();
        
        obj3.feet=(obj1.feet+obj2.feet);
        obj3.inches=(obj1.inches+obj2.inches);
     





8.Write a Java program to check the character is vowel or not  by defining instance method and instance variable.

import java.util.*;
public class Prime{
  int num;
   {{ Your code here}}
  public static void main(String[] args) {
      Prime obj1=new Prime();
              System.out.println(obj1.isVowel());   
  }
}


For example:

Input	Result
a
true





   boolean isVowel()
   {
Scanner sc=new Scanner(System.in);
char ch=sc.next().charAt(0);
   boolean prime = false;
        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch=='A' || ch =='E' || ch=='I'||ch=='O'||ch=='U')
        {
          prime = true;
        }
          else
      prime = false;
    return prime;
  }

 







9.Write a Java program print area of circle  by defining instance method and local variable.[Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’double’]

import java.util.*;
public class Area {
        {{ STUDENT_ANSWER }}
        public static void main(String[] args) {
       Area obj=new Area();
       double area=obj.calculateArea();
       System.out.println("Area of Circle is "+area);
    }
}
For example:

Input	Result
2

Area of Circle is 12.56





        double calculateArea()
    {
        double radius,cirarea;
        Scanner sc=new Scanner(System.in);
        radius=sc.nextDouble();
        cirarea=3.14*radius*radius;
        return cirarea;
    }
   





10.Develop a java program to check and print whether given input is vowel or consonant using if..else statement.

For example:

Input	Result
e
e is vowel




import java.util.Scanner;  
public class VowelConsonant {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);  
	 char ch = sc.next().charAt(0);  

        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch=='A' || ch =='E' || ch=='I'||ch=='O'||ch=='U' )
            System.out.println(ch + " is vowel");
        else
            System.out.println(ch + " is consonant");

    }
}







11.Write a Java program to print Student details (name, age) age is same to all members in the class. Use static type variable to access age.

For example:

Input	Result
John
Ram
Student name: JohnAge: 18
Student name: RamAge: 18




import java.util.*;
public class Main
{
    static int age=18;
    String name;
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	Main obj1=new Main();
	Main obj2=new Main();
	obj1.name=sc.next();
	obj2.name=sc.next();
	System.out.println("Student name: "+obj1.name+"Age: "+age);
	System.out.println("Student name: "+obj2.name+"Age: "+age);
	}
}








12.Write a Java program to get and find the power of another number  by defining instance method and local variable.[Class Name is ‘Prime’ function name is ‘isPower()’  and return type of function is double]

import java.util.*;

import java.lang.Math;

public class Prime{

{{ Your code here }}

  public static void main(String[] args) {

      Prime obj1=new Prime();

      double f;

      f=obj1.isPower();

      System.out.println(f);

  }

}



For example:

Input	Result
2
3
8.0





     double isPower(){
       int num,p;
       double po;
       Scanner sc=new Scanner(System.in);
       num=sc.nextInt();
       p=sc.nextInt();
        po=Math.pow(num,p);
       return po;
  }







13.Write a java code for finding the division of number 4 and 2 using class and objects.

   public class val

{

    public double n1,n2;    

 public static void main(String[] args)

    {

 {{Your code here}}

       System.out.println(obj.n1/obj.n2);

    }

}

   

For example:

Result
2.0



        val obj=new val();
       obj.n1=4;
       obj.n2=2;
      





14.Write a java program left shift the given number upto given times.

For example:

Input	Result
3
2
a << 2 = 12






import java.util.Scanner;
public class Demo {

public static void main(String[] args) {
    Scanner sc=new Scanner(System.in);
int a = sc.nextInt();
 int c = sc.nextInt();
 int d;

      d = a << c;       
      System.out.println("a << " + c+" = " + d );
   }
}





15.Write a java Program to arrange two numbers in ascending order.

For example:

Input	Result
23
34
23 34





import java.util.Scanner;
public class Demo {
    
  public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        int num1=in.nextInt();
        int num2=in.nextInt();
        
        
        if((num1<num2))
        {
        	System.out.println(num1+" "+num2);
        }
        else 
        {
        	System.out.println(num2+" "+num1);
        }
        
    }
}






16.Write a Java method  to print the sum of two numbers (23,43) by defining instance method and instance variable.[Class Name is ‘Calculator’ function name is ‘sum() and return type of function is ’void’]

import java.util.*;
public class Calculator {
        int num1,num2;
       {{ STUDENT_ANSWER }}
       public static void main(String[] args) {
       Calculator obj1=new Calculator();
       obj1.sum();
}




void sum()
    {
       // Scanner sc=new Scanner(System.in);
        num1=23;
        num2=43;
        int result=num1+num2;
        System.out.println("Sum of given numbers is "+result);
    }





17.Write a Java program print area of rectangle  by defining instance method and local variable value as 10,20 . [Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’void’]

import java.util.*;
public class Area {
       {{ STUDENT_ANSWER }}
       public static void main(String[] args) {
       Area obj=new Area();
       obj.calculateArea();
       }
}





    void calculateArea()
    {  
        int side1,side2;
        double cirarea;
        side1=10;
        side2=20;
        cirarea=side1*side2;
        System.out.println("Area of Rectangle is "+cirarea);
    }
    
  








18.Write a program to find the roots of a quadratic equation


For example:

Input	Result
2.3
4
5.6
root1 = -0.87+1.30
root2 = -0.87-1.30







import java.util.*;
public class quad {

  public static void main(String[] args) {
Scanner sc=new Scanner(System.in);
    double a , b , c ;
    a=sc.nextDouble();
    b=sc.nextDouble();
    c=sc.nextDouble();
    double root1, root2;
    double determinant = b * b - 4 * a * c;
    if (determinant > 0) {
      root1 = (-b + Math.sqrt(determinant)) / (2 * a);
      root2 = (-b - Math.sqrt(determinant)) / (2 * a);
      System.out.format("root1 = %.2f and root2 = %.2f", root1, root2);
    }

   
    else if (determinant == 0) {

      root1 = root2 = -b / (2 * a);
      System.out.format("root1 = root2 = %.2f;", root1);
    }

    
    else {

      // roots are complex number and distinct
      double real = -b / (2 * a);
      double imaginary = Math.sqrt(-determinant) / (2 * a);
      System.out.format("root1 = %.2f+%.2f", real, imaginary);
      System.out.format("\nroot2 = %.2f-%.2f", real, imaginary);
    }
  }
}





19.Create a class named 'Distance' to add two distances (220 feet, 5inches) and (13 , 30inches)in inch-feet by using third object. 



import java.util.*;
public class Distance
{
    int feet,inches;
    public static void main(String[] args)
    {
        Distance obj1=new  Distance();
        Distance obj2=new  Distance();
        Distance obj3=new  Distance();
        {{Code here}}
        System.out.println("Total Distance is "+obj3.feet+" feet and "+obj3.inches+" inches");
    }
}
For example:

Input	Result
---
Total Distance is 233 feet and 35 inches





        obj1.feet=220;
        obj1.inches=5;
        obj2.feet=13;
        obj2.inches=30;
        
        obj3.feet=(obj1.feet+obj2.feet);
        obj3.inches=(obj1.inches+obj2.inches);






20.Write a Java program to check given number  is zero or not.





import java.util.Scanner;

public class Demo
{
    public static void main(String[] args)
    {
       Scanner sc=new Scanner(System.in);
       int num=sc.nextInt();
        if(num==0)
        System.out.println("Given number is Zero");
        else
        {
        	 System.out.println(num+ " is Non-Zero");
        }
    }
}






krishna S






1.Write a Java program print area of square  by defining instance method and local variable.[Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’void’]

import java.util.*;
public class Area {
      {{ Your Code Here }}   
       public static void main(String[] args) {
       Area obj=new Area();
       obj.calculateArea();
         }
}
For example:

Input	Result
2

Area of Square is 4.0







        void calculateArea()
    {
        double side,cirarea;
        Scanner sc=new Scanner(System.in);
        side=sc.nextDouble();
        cirarea=side*side;
        System.out.println("Area of Square is "+cirarea);
    }







2.Write a Java program to check given number  is zero or not.





import java.util.Scanner;

public class Demo
{
    public static void main(String[] args)
    {
       Scanner sc=new Scanner(System.in);
       int num=sc.nextInt();
        if(num==0)
        System.out.println("Given number is Zero");
        else
        {
        	 System.out.println(num+ " is Non-Zero");
        }
    }
}






3.Define a program Using instance method and local variable to find out if he/she is eligible to write exam. A person is eligible to write write if his/her age is between 21 and 35 . 

[Class Name is ‘Age’ function name is ‘calculateAge()’  and return type of function is ’void’]

import java.util.*;
public class Age {
   {{ Your code here }}
    public static void main(String[] args) {
       Age obj=new Age();
       obj.calculateAge();
    }
}
For example:

Input	Result
59

Not Eligible to Write Exam






    void calculateAge()
    {    int age;

        Scanner sc=new Scanner(System.in);
        age=sc.nextInt();
        if(age>=21 && age<=35)
        {
            System.out.println("Eligible to Write Exam");
        }
        else
        {
            System.out.println("Not Eligible to Write Exam");
        }
    }
    
  







4.Write a program to multiply 80 to the number then divide it by 5  and subtract 15 . Display the final result.

[Class name is ‘Demo’, num=500]





public class Demo
{
    public static void main(String[] args)
    {
      // int num=2345;
       int num=((500*80)/5)-15;
        
        System.out.println(num);
    }
}






5.Create a main () for class named as ‘Fruit’ it has name , color, weight as its member.  Access Grape and Mango by creating its object.[Members values are : Grape,Purple,0.75 Apple,Red,2.50 and Mango, Yellow, 1.50]

public class Fruit {
    String name;
    String color;
    double weight;
    {{ Your Code here }}    
}
For example:

Input	Result
---
Fruit Name is Grape,weight is 0.75kg and Color is Purple
Fruit Name is Apple,weight is 2.5kg and Color is Red






    public static void main(String[] args) {
        Fruit obj1=new Fruit();
        Fruit obj2=new Fruit();
        Fruit obj3=new Fruit();
        obj1.name="Grape";
        obj1.color="Purple";
        obj1.weight=0.75;
        obj2.name="Apple";
        obj2.color="Red";
        obj2.weight=2.50;
        obj3.name="Mango";
        obj3.color="Yellow";
        obj3.weight=1.50;
        
        System.out.println("Fruit Name is "+obj1.name+",weight is "+obj1.weight+"kg"+" and Color is "+obj1.color);
        System.out.println("Fruit Name is "+obj2.name+",weight is "+obj2.weight+"kg"+" and Color is "+obj2.color);
        System.out.println("Fruit Name is "+obj3.name+",weight is "+obj3.weight+"kg"+" and Color is "+obj3.color);
        
    }







Sahitya S




1.Write a Java program to get values of variables 'a' and 'b'  and then check if both the conditions 'a < 50' and 'a < b' are true. [Class name is ‘Demo’]






import java.util.*;
public class Demo
{
    public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    System.out.println(a < 50 && a < b);
    }
}






2.Write a Java program to find sum of even numbers from given 4 numbers by defining instance method and instance variable.[Class Name is ‘sumeven function name is ‘sum()’  and return type of function is ‘int’]

import java.util.*;
public class sumeven{
 {{Your code here}}
  public static void main(String[] args) {
     Scanner sc=new Scanner(System.in);
     sumeven x=new sumeven();
     int a=sc.nextInt();
        int b=sc.nextInt();
           int c=sc.nextInt();
              int d=sc.nextInt();
      System.out.println("sum of even number is :"+x.sum(a,b,c,d));
        }
}
For example:

Input	Result
3
4
5
2
sum of even number is :6






   int sum(int x,int y,int z, int r)
   {
       int sum=0;
   if(x%2==0)
   {
       sum=sum+x;
   }
   if(y%2==0)
   {
       sum=sum+y;
   }
   if(z%2==0)
   {
       sum=sum+z;
   }
   if(r%2==0)
   {
       sum=sum+r;
   }
   return sum;
  }







3.Write a Java program print area of Trapezium by defining instance method and local variable .[Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’double’] (Note: Area of Trapezium = 1/2(h(b1+b2))

import java.util.*;
public class Area {
       {{ STUDENT_ANSWER }}
       public static void main(String[] args) {
       Area obj=new Area();
       double area=obj.calculateArea();
       System.out.println("Area of Trapezium is "+area);
    }
}

For example:

Input	Result
2
3
4
Area of Trapezium is 10.0





        double calculateArea()
    {
        double b1,b2,h,ciarea;
        Scanner sc=new Scanner(System.in);
        b1=sc.nextDouble();
        b2=sc.nextDouble();
        h=sc.nextDouble();
        ciarea=(0.5)*(b1+b2)*h;
        return ciarea;
    }
    
   




4.Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places.

For example:

Input	Result
23.456
23.456
They are the same up to three decimal places




import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        double x = in.nextDouble();
        
        double y = in.nextDouble();

        x = Math.round(x * 1000);
        x = x / 1000;

        y = Math.round(y * 1000);
        y = y / 1000;

        if (x == y)
        {
            System.out.println("They are the same up to three decimal places");
        }
        else
        {
            System.out.println("They are different");
        }
    }
}






5.Write a program to print the area of two rectangles having sides length, breath by creating a class named 'Rectangle'.

import java.util.*;
public class Rectangle
{
    int length;
    int breath;
    int area;
    public static void main(String[] args)
    {
        {{Your code here }}
        obj1.area=(obj1.length*obj1.breath);
        System.out.println("Area of Rectangle with side 4 and 5 is "+obj1.area);
        obj2.area=(obj2.length*obj2.breath);
        System.out.println("Area of Rectangle with side 5 and 8 is "+obj2.area);
    }
}


For example:

Input	Result
4
5
5
8
Area of Rectangle with side 4 and 5 is 20
Area of Rectangle with side 5 and 8 is 40




       Scanner sc=new Scanner(System.in);
        Rectangle obj1=new Rectangle();
        Rectangle obj2=new Rectangle();
        obj1.length=sc.nextInt();
        obj1.breath=sc.nextInt();
        obj2.length=sc.nextInt();
        obj2.breath=sc.nextInt();
       





6.Write a Java method  to print the sum of two numbers entered by user by defining instance method and instance variable.[Class Name is ‘Calculator’ function name is ‘sum() and return type of function is ’void’]

import java.util.*;
public class Calculator {
       int num1,num2;
       {{ STUDENT_ANSWER }}
       public static void main(String[] args) {
       Calculator obj1=new Calculator();
       obj1.sum();
}
For example:

Input	Result
20
10

Sum of given numbers is 30






void sum()
    {
        Scanner sc=new Scanner(System.in);
        num1=sc.nextInt();
        num2=sc.nextInt();
        int result=num1+num2;
        System.out.println("Sum of given numbers is "+result);
    }








2.Write a Java program to print Employee details (name, Department,age) dept and age is same to all members in the class. Use static type variable to access name.

For example:

Input	Result
John
Ram
Student name: John Department: AIDS Age: 18
Student name: Ram Department: AIDS Age: 18




import java.util.*;
public class Main
{
    static String dept="AIDS";
    String name;
    static int age=18;
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	Main obj1=new Main();
	Main obj2=new Main();
	obj1.name=sc.next();
	obj2.name=sc.next();
	System.out.println("Student name: "+obj1.name+" Department: "+dept+" Age: 18");
	System.out.println("Student name: "+obj2.name+" Department: "+dept+" Age: 18");
	}
}








3.Write a java code to set new value for the attribute.

class MyClass {
     int value;    
{{ Your code here }}
}
public class UpdateValue {
    public static void main(String[] args) {       
        MyClass obj = new MyClass();
        obj.value=45;
        obj.setValue(20);
        System.out.println("Updated value: " + obj.getValue());
    }
}


For example:

Input	Result
---
Updated value: 20




    
    public int getValue() {
        return value;
    }

    
    public void setValue(int value) {
        this.value = value;
    }







4.Write a Java program to get values of variables 'a' and 'b'  and then check if both the conditions 'a < 50' and 'a < b' and b>60 are true. [Class name is ‘Demo’]


For example:

Input	Result
51
56
false






import java.util.*;
public class Demo
{
    public static void main(String[] args){
    Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    System.out.println(a < 50 && a < b &&b>60);
    }
}








5.Write a Java program that keeps a number from the user and generates Name  for the given number between 0 and 9 and displays the name of the Number. 

For example:

Input	Result
1

One





import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	   Scanner in = new Scanner(System.in);
       int num = in.nextInt();
       String Name = "";
       switch (num) {
           case 0:Name = "Zero"; break;
           case 1: Name = "One"; break;
           case 2: Name = "Two"; break;
           case 3: Name = "Three"; break;
           case 4: Name = "Four"; break;
           case 5: Name = "Five"; break;
           case 6: Name = "Six"; break;
           case 7: Name = "Seven"; break;
           case 8: Name = "Eight"; break;
           case 9: Name = "Nine"; break;
           default:Name = "Invalid range";
       }

      System.out.println(Name);
    }
}









11.Write a program to add 8 to the number  and then divide it by 3. Display the final result.




For example:

Input	Result
456
154.66666666666666




import java.util.*;
public class Demo
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
      double x=sc.nextDouble();
       double num=(x+8)/3;
        
        System.out.println(num);
    }
}







12.Write a Java program print area of circle  by defining instance method and local variable. The input for radius is 2 .

import java.util.*;
public class Area {
       {{ STUDENT_ANSWER }}
      public static void main(String[] args) {
       Area obj=new Area();
       obj.calculateArea();
        }
}


For example:

Result
Area of Circle is 12.56





        void calculateArea()
    {
        double radius,cirarea;
        //Scanner sc=new Scanner(System.in);
        radius=2;
        cirarea=3.14*radius*radius;
        System.out.println("Area of Circle is "+cirarea);
    }
    






13.Define a program to find out if he/she is eligible to retire. A person is eligible to retire if his/her age is greater than or equal to 58 by using instance method and local variable. 

[Class Name is ‘Age’ function name is ‘calculateAge()’  and return type of function is ’void’]

Note: if age value less than or equal to 0 and greater than 100 then print Invalid age

import java.util.*;
public class Age {
   {{ STUDENT_ANSWER }}
    public static void main(String[] args) {
       Age obj=new Age();
       obj.calculateAge();
    }
}


For example:

Input	Result
59

Eligible to Retire





    void calculateAge()
    {    int age;

        Scanner sc=new Scanner(System.in);
        age=sc.nextInt();
        if(age>=58 && age<=100)
        {
            System.out.println("Eligible to Retire");
        }
        else if(age<=0 || age>100)
        {
            System.out.println("Invalid age");
        }
        else
        {
            System.out.println("Not Eligible to Retire");
        }
    }
    





14.Write a Java program to solve the following equation ,  y = x3 - 2 (x-3)3 + 20

For example:

Input	Result
2
value: 30





import java.util.Scanner;
public class Demo {

      public static void main(String[] args)
	    {
	        Scanner sc=new Scanner(System.in);
	       
	        int n=sc.nextInt(); // To hold number
	        int y = (n*n*n) - 2*((n-3)*(n-3)*(n-3))+20;
	        System.out.println("value: "+ y);
    }
}








15.Write a program to print the perimeter of a triangle having sides of 20.5, 45.2 and 15.5 units by creating a class named 'Triangle' .



import java.util.Scanner;
public class Triangle {
    double side1;
    double side2;
    double side3;
    // Method to calculate the perimeter of the triangle
    public double calculatePerimeter() {
        return side1 + side2 + side3;
    }
    public static void main(String[] args) {
        Triangle obj = new Triangle();
        Scanner scanner = new Scanner(System.in);
        {{ STUDENT_ANSWER }}
        System.out.println("Perimeter of the triangle is " + perimeter);
        scanner.close();
    }
}





obj.side1 = scanner.nextDouble();
 
        obj.side2 = scanner.nextDouble();
 
        obj.side3 = scanner.nextDouble();
 
        





16.Write a Java program to check given number  is zero or not.






import java.util.Scanner;

public class Demo
{
    public static void main(String[] args)
    {
       Scanner sc=new Scanner(System.in);
       int num=sc.nextInt();
        if(num==0)
        System.out.println("Given number is Zero");
        else
        {
        	 System.out.println(num+ " is Non-Zero");
        }
    }
}







17.Write a Java program to get 4 values from user, to check and print the sum of first and third is greater than sum of second and fourth or sum of second and fourth is greater than first and third.


For example:

Input	Result
2
3
4
5
sum of second and fourth is greater than first and third







import java.util.*;
public class Demo
{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
      int b = sc.nextInt();
        int c = sc.nextInt();
          int d = sc.nextInt();
          if(a+c>b+d)
    System.out.println("sum of first and third is greater than second and fourth");
    else
    System.out.println("sum of second and fourth is greater than first and third");
    }
}






18.Define a program to find out two numbers are given or not using method.

import java.util.*;

public class Age {
    int n,m;
    {{ Your code here }}    
    public static void main(String[] args) {
       Age obj=new Age();
       obj.check();
    }
}
For example:

Input	Result
23
23
Same




    void check()
    {
        Scanner sc=new Scanner(System.in);
        n=sc.nextInt();
        m=sc.nextInt();
    
        if(n==m)
        {
            System.out.println("Same");
        }
        else
        {
            System.out.println("Not Same");
        }
    }
    
   






19.Write a Java program to print Student details (Name,Collegename) cge_name is same to all members in the class. Use static type variable to access age.

For example:

Input	Result
John
Ram
Student name: John College Name: SEC
Student name: Ram College Name: SEC







import java.util.*;
public class Main
{
    static String cge_name="SEC";
    String name;
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	Main obj1=new Main();
	Main obj2=new Main();
	obj1.name=sc.next();
	obj2.name=sc.next();
	System.out.println("Student name: "+obj1.name+" College Name: "+cge_name);
	System.out.println("Student name: "+obj2.name+" College Name: "+cge_name);
	}
}







20.calculate the simple intrest using object and class

import java.util.Scanner;
public class SimpleInterestCalculator {
    double principal, rate, time, simpleInterest;
    public void calculateSimpleInterest() {
        simpleInterest = (principal * rate * time) / 100;
    }
    public static void main(String[] args) {
        SimpleInterestCalculator calculator = new SimpleInterestCalculator();
        Scanner scanner = new Scanner(System.in);
          {{ Type your code here}}
        calculator.calculateSimpleInterest();
        System.out.println("Simple Interest: " + calculator.simpleInterest);
    }
}


For example:

Input	Result
5000
8
3
Simple Interest: 1200.0






calculator.principal = scanner.nextDouble();
 
        calculator.rate = scanner.nextDouble();
 
        calculator.time = scanner.nextDouble();






21.Create a class named 'Student' with String variable 'dept', String variable 'name' and   integer variable 'rollno' and double variable 'marks'. 

{{ Type your code here }}
public class Main {
    public static void main(String[] args) {
        Student obj= new Student();
        obj.dept="AIML";
        obj.name="John";
        obj.rollno=15;
        obj.marks=89.95;   
        System.out.println(obj.dept+" "+obj.name+" "+obj.rollno+" "+obj.marks);
    }   
}
For example:

Input	Result
---
AIML John 15 89.95




class Student
{
    String dept;
    String name;
    int rollno;
    double marks;
}







22.If the marks of Robert in three subjects are X,Y and Z respectively (each out of 100 ), write a Java program to calculate his total marks and percentage marks.

INPUT:
Read x,y and z value at runtime.
Output:
Total Mark=--- Percentage=---%
For example:

Input	Result
78
89
90
Total marks (out of 300): 257.0
Percentage: 85.66666666666667%





import java.util.Scanner;

public class StudentMarks {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read marks for three subjects
        //System.out.print("Enter marks for Subject X out of 100: ");
        double x = scanner.nextDouble();
        //System.out.print("Enter marks for Subject Y out of 100: ");
        double y = scanner.nextDouble();
        //System.out.print("Enter marks for Subject Z out of 100: ");
        double z = scanner.nextDouble();

        // Calculate total marks and percentage
        double totalMarks = x + y + z;
        double percentage = (totalMarks / 300.0) * 100;

        // Display the results
        System.out.println("Total marks (out of 300): " + totalMarks);
        System.out.println("Percentage: " + percentage + "%");

        scanner.close();
    }
}








23.Write a Java program print area of circle  by defining instance method and local variable.[Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’double’]

import java.util.*;
public class Area {
        {{ STUDENT_ANSWER }}
        public static void main(String[] args) {
       Area obj=new Area();
       double area=obj.calculateArea();
       System.out.println("Area of Circle is "+area);
    }
}
For example:

Input	Result
2

Area of Circle is 12.56





        double calculateArea()
    {
        double radius,cirarea;
        Scanner sc=new Scanner(System.in);
        radius=sc.nextDouble();
        cirarea=3.14*radius*radius;
        return cirarea;
    }
   










24.Write a program in Java to display the  sum of numbers multiply of given number.

For example:

Input	Result
10
3
The Sum of 3 multiples upto 10 terms is: 135





import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	  {
	      Scanner sc=new Scanner(System.in);
		   int i=0,n,sum=0,m;	
		   n=sc.nextInt();
		   m=sc.nextInt();
		  		  while(i<n)

		   {
	
		     sum+=m*i;
		     i++;
		   }
		   System.out.println ("The Sum of "+m+" multiples upto " +n+" terms is: " +sum);

		}
    }
}








25.calculate the Area of squaer using method in java
import java.util.Scanner;

public class SquareAreaCalculator {

 {{Type your code here }}

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        SquareAreaCalculator calculator = new SquareAreaCalculator();



    

        double side = scanner.nextDouble();

        double area = calculator.calculateSquareArea(side);

        System.out.println("Area of the square with side length " + side + " units is: " + area + " square units");

        scanner.close();

    }

}



For example:

Input	Result
5
Area of the square with side length 5.0 units is: 25.0 square units





 
    
    public double calculateSquareArea(double side) {
        return side * side;
    }
 







26.Write a Java programs to find number of days in given month ( feburary is taken as 28).


For example:

Input	Result
3
Number of days is 31





import java.io.*;
import java.util.*;

public class month{

    public static void main(String args[]){
Scanner sc= new Scanner(System.in);
        int month;
        month = sc.nextInt();
        if(month==2)
            System.out.println("Number of days is 28");
        else if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12)
            System.out.println("Number of days is 31");
        else
            System.out.println("Number of days is 30");


    }

}






27.Write a Java program print area of rectangle  by defining instance method and local variable value as 10,20 . [Class Name is ‘Area’ function name is ‘calculateArea()’  and return type of function is ’void’]

import java.util.*;
public class Area {
       {{ STUDENT_ANSWER }}
       public static void main(String[] args) {
       Area obj=new Area();
       obj.calculateArea();
       }
}






    void calculateArea()
    {  
        int side1,side2;
        double cirarea;
        side1=10;
        side2=20;
        cirarea=side1*side2;
        System.out.println("Area of Rectangle is "+cirarea);
    }
    
  





28. Multiplication of two number using method

import java.util.Scanner;
public class Multiplication {
     
    {{ Type yourCode here }}
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num1 = scanner.nextInt(); 
        int num2 = scanner.nextInt();
        int result = multiply(num1, num2);
        System.out.println("multiplication is: " + result);
        scanner.close();
    }
}





 
    public static int multiply(int num1, int num2) {
        return num1 * num2;
    }
    







29.Create a main () for class named as ‘Fruit’ it has name , color, weight as its member.  Access Grape and Mango by creating its object.[Members values are : Grape,Purple,0.75 Apple,Red,2.50 and Mango, Yellow, 1.50]

public class Fruit {
    String name;
    String color;
    double weight;
    {{ Your Code here }}    
}
For example:

Input	Result
---
Fruit Name is Grape,weight is 0.75kg and Color is Purple
Fruit Name is Apple,weight is 2.5kg and Color is Red
Fruit Name is Mango,weight is 1.5kg and Color is Yellow






    public static void main(String[] args) {
        Fruit obj1=new Fruit();
        Fruit obj2=new Fruit();
        Fruit obj3=new Fruit();
        obj1.name="Grape";
        obj1.color="Purple";
        obj1.weight=0.75;
        obj2.name="Apple";
        obj2.color="Red";
        obj2.weight=2.50;
        obj3.name="Mango";
        obj3.color="Yellow";
        obj3.weight=1.50;
        
        System.out.println("Fruit Name is "+obj1.name+",weight is "+obj1.weight+"kg"+" and Color is "+obj1.color);
        System.out.println("Fruit Name is "+obj2.name+",weight is "+obj2.weight+"kg"+" and Color is "+obj2.color);
        System.out.println("Fruit Name is "+obj3.name+",weight is "+obj3.weight+"kg"+" and Color is "+obj3.color);
        
    }









30.Write a Java program to get a number from the user and print whether it is positive or negative

For example:

Input	Result
10 
10 is Positive






import java.util.Scanner;

public class Demo
{
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int num;
        
        num = sc.nextInt();
        
        if(num<0)
        System.out.println(num+ " is Negative");
        
        else
        {
        	 System.out.println(num+ " is Positive");
        }
    }
}





31.Create a class named 'Student' with String variable 'name' and String variable 'address' and integer variable 'rollno'. 

{{ Type your code here }}
public class Main {
    public static void main(String[] args) {
        Student obj= new Student();   
        obj.name="John";
        obj.address="Chennai";
        obj.rollno=10;
        System.out.println(obj.name+" "+obj.address+" "+obj.rollno);
    }   
}
For example:

Input	Result
---
John Chennai 10




class Student
{
    String name;
    String address;
    int rollno;
}






32.Write a java Program to print multiplies of 10 for given number from 1 to 5. Get input number from user

Note: Default value as Invalid Input

For example:

Input	Result
1
1's 10 is Ten




import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        int num=in.nextInt();
        
        
        if(num==0)
        {
        	System.out.println(num+"'s 10 is 0 ");
        }
        else if(num==1)
        {
        		System.out.println(num+"'s 10 is Ten ");
        }
        else if(num==2)
        {
        		System.out.println(num+"'s 10 is Twenty ");
        }
        else if(num==3)
        {
        		System.out.println(num+"'s 10 is Thirty ");
        }
        else if(num==4)
        {
        		System.out.println(num+"'s 10 is Forty ");
        }
        else if(num==5)
        {
        		System.out.println(num+"'s 10 is Fifty ");
        }
        
        else 
        {
        		System.out.println("Invalid Input");
        }
    }
}







33.Write a Java program to get two complex number and then print the sum of two complex numbers.


For example:

Input	Result
2
3
3
5
sum of two complex number is 5+8i







import java.util.*;
public class ComplexNumber {
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
       int r1,i1,r2,i2;
     r1=sc.nextInt();
     i1=sc.nextInt();
     r2=sc.nextInt();
     i2=sc.nextInt();
    System.out.println("sum of two complex number is "+(r1+r2)+"+"+(i1+i2)+"i");
    }
}








34.Write a Java program to check the number is palindrome or not  by defining instance method and instance variable.[Class Name is ‘check’ function name is ‘isPali()’  and return type of function is ‘boolean’]

import java.util.*;
public class check{
    int num;
  {{ Your code here }}
  public static void main(String[] args) {
      check obj1=new check();
     Scanner sc=new Scanner(System.in);
      obj1.num=sc.nextInt();
         boolean f;
      f=obj1.isPali(obj1.num);
      System.out.println(f);
        }
}






   boolean isPali(int n){
   boolean prime = true;
     int r,sum=0,temp;
  temp=n;    
  while(n>0){    
   r=n%10;  
   sum=(sum*10)+r;    
   n=n/10;    
  }    
  if(temp==sum)    
   prime=true;  
  else    
  prime=false;  
  
return prime;
  }










35.Write a Java method to get and print the 2 values entered by user by defining instance method .[Class Name is ‘Test’ function name is ‘getdata()’ , 'putdata()' and return type is ’void’]

import java.util.*;

public class Test {

    int num1,num2;

    {{ Your code here }}

    public static void main(String[] args) {

        Test obj1=new Test();

        obj1.getData();

        obj1.putData();

      }

}

For example:

Input	Result
10
10
Number1 is:10
Number2 is:10







    void getData()
    {
        Scanner sc=new Scanner(System.in);
        num1=sc.nextInt();
        num2=sc.nextInt();
    }
    void putData()
    {
        System.out.println("Number1 is:"+num1);
        System.out.println("Number2 is:"+num2);
    }







36.Write a java program to print the ascii value of given character.

For example:

Input	Result
c
ASCII value of c is: 99






import java.util.Scanner;  
public class PrintAsciiValueExample4  
{  
public static void main(String args[])  
{  

	Scanner sc = new Scanner(System.in);  
	char chr = sc.next().charAt(0);  
	int asciiValue = chr;  
	System.out.println("ASCII value of " +chr+ " is: "+asciiValue);  
}  
} 





37.Write a Java method  to print the sum of four numbers (23,43,45,4) by defining instance method and instance variable.[Class Name is ‘Calculator’ function name is ‘sum() and return type of function is ’void’]


import java.util.*;

public class Calculator {

        int num1,num2,num3,num4;

        {{ STUDENT_ANSWER }}

        public static void main(String[] args) {

        Calculator obj1=new Calculator();

        obj1.sum();

}

}




void sum()
    {
       // Scanner sc=new Scanner(System.in);
        num1=23;
        num2=43;
        num3=45;
        num4=4;
        int result=num1+num2+num3+num4;
        System.out.println("Sum of given numbers is "+result);
    }








38.Define a program to find out if he/she is eligible to vote. A person is eligible to vote if his/her age is greater than or equal to 18 by using instance method and local variable. 

[Class Name is ‘Age’ function name is ‘calculateAge()’  and return type of function is ’void’]

import java.util.*;
public class Age {
    {{ STUDENT_ANSWER }}
        public static void main(String[] args) {
       Age obj=new Age();
       obj.calculateAge();
    }
}


For example:

Input	Result
23

Eligible to vote






    void calculateAge()
    {    int age;

        Scanner sc=new Scanner(System.in);
        age=sc.nextInt();
        if(age>=18)
        {
            System.out.println("Eligible to vote");
        }
        else
        {
            System.out.println("Not Eligible to vote");
        }
    }
    






39.Write a main() class named 'Test' to access class 'Clock' and display in-time of an employee(Time  be in format HH:MM:SS). Assign Hour =08,mins=00,sec=00

class Clock
{
int hours, mins, sec;
}
{{ your code here }}
For example:

Input	Result
---
08:00:00






public class Test{
    public static void main(String[] args)
    {
        Clock in=new Clock();
        in.hours=8;
        in.mins=00;
        in.sec=00;
        String hour=String.format("%02d",in.hours);
        String min=String.format("%02d",in.mins);
        String secs=String.format("%02d",in.sec);
        
        System.out.println(hour+":"+min+":"+secs);
       
    }
}








40.Write a program in Java to display the n terms of odd natural number and their sum using do...while Statement.

For example:

Input	Result
3
The Sum of odd Natural Number upto 3 terms is: 9





import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	  {
		   int i=1,n,sum=0;	
		   Scanner in = new Scanner(System.in);
				    n = in.nextInt();
		  do

		   {
		    // System.out.println (2*i-1);
		     sum+=2*i-1;
		     i++;
		   }while(i<=n);
		   System.out.println ("The Sum of odd Natural Number upto " +n+" terms is: " +sum);

		}
    }
}







41.Write a Java program to get the values of variables 'a' and 'b' respectively and check if atleast one of the conditions 'a < 50' or 'a < b' is true.


For example:

Input	Result
23
50
true




import java.util.*;
public class Demo
{
    public static void main(String[] args){
     Scanner sc=new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    System.out.println(a < 50 || a < b);
    }
}







42.Create a class named 'Student' with String variable 'name' and String variable 'address'. 

{{ Your code here }}

public class Main {
    public static void main(String[] args) {
        Student obj= new Student();        
        obj.name="John";
        obj.address="Chennai";
        System.out.println(obj.name+" "+obj.address);
    }
}


For example:

Input	Result
---
John Chennai





class Student
{
    String name;
    String address;
}





43.
Write a Java program to check the character is vowel or not  by defining instance method and instance variable.

import java.util.*;
public class Prime{
  int num;
   {{ Your code here}}
  public static void main(String[] args) {
      Prime obj1=new Prime();
              System.out.println(obj1.isVowel());   
  }
}


For example:

Input	Result
a
true






   boolean isVowel()
   {
Scanner sc=new Scanner(System.in);
char ch=sc.next().charAt(0);
   boolean prime = false;
        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch=='A' || ch =='E' || ch=='I'||ch=='O'||ch=='U')
        {
          prime = true;
        }
          else
      prime = false;
    return prime;
  }

 





44.Write a Java method to get and print the 2 values entered by user by defining instance method .[Class Name is ‘Test’ function name is ‘getdata()’ , 'putdata()' and return type is ’void’]

import java.util.*;
public class Test {
    int num1,num2;
    {{ Your code here }}
    public static void main(String[] args) {
        Test obj1=new Test();
        obj1.getData();
        obj1.putData();
      }
}
For example:

Input	Result
10
10
Number1 is:10
Number2 is:10





    void getData()
    {
        Scanner sc=new Scanner(System.in);
        num1=sc.nextInt();
        num2=sc.nextInt();
    }
    void putData()
    {
        System.out.println("Number1 is:"+num1);
        System.out.println("Number2 is:"+num2);
    }







45.Write a program in Java to input 5 numbers from keyboard and find their sum and average using while loop

For example:

Input	Result
2
4
6
8
10
The sum of 5 no is : 30
The Average is : 6.0






import java.util.Scanner;
public class Demo {

    
  public static void main(String[] args)
    {
	  int i=0,n=0,s=0;
		double avg;
		Scanner in = new Scanner(System.in);
		while(i<5)
			{
			    
			    n = in.nextInt();
			    
	  		s +=n;
	  		i++;
		}
		avg=s/5;
		System.out.println("The sum of 5 no is : " +s+"\nThe Average is : " +avg);
    }
}





"""

for i in range(20):

   print("Iteration :",i); 
   copy_to_clipboard(example_text)
   time.sleep(2)
copy_to_clipboard("Task Completed..")
print("Execution Completed...")

---
