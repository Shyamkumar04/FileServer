Given a positive integer num, return true if num is a perfect square or false otherwise.
import java.util.Scanner;

public class Solution {
    // Method to check if a number is a perfect square
    public boolean isPerfectSquare(int num) {
      if(num<2)return true;
      long low=0,high=(long)num;
      while(low<=high){
          long mid=(high+low)/2;
          long val=mid*mid;
          if(val==num){
              return true;
          }else if(val>num){
              high=mid-1;
          }else{
              low=mid+1;
          }
      }return false;
    }

    // Main method to get input from the user and check perfect square
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); // Create a Scanner object
        Solution solution = new Solution();

    
        int num = scanner.nextInt(); // Read user input

        boolean result = solution.isPerfectSquare(num); // Check if the number is a perfect square
        if (result) {
            System.out.println(num + " is a perfect square.");
        } else {
            System.out.println(num + " is not a perfect square.");
        }

        scanner.close(); // Close the scanner
    }
}


##
You may recall that an array arr is a mountain array if and only if:
import java.util.Scanner;

class Solution {
    // Method to find the length of the longest mountain
    public int longestMountain(int[] arr) {
     int n=arr.length;
     int res=0;
     int up[]=new int[n];
     int down[]=new int[n];
     for(int i=n-2;i>=0;i--){
         if(arr[i]>arr[i+1]){
             down[i]=down[i+1]+1;
         }
     }
     for(int i=1;i<n;i++){
         if(arr[i]>arr[i-1]){
             up[i]=up[i-1]+1;
         }if(down[i]>0 && up[i]>0){
             res=Math.max(res,up[i]+down[i]+1);
         }
     }
     return res;
    }
}
public class Main{

    // Main method to get input from the user and call longestMountain
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

    
        int n = scanner.nextInt(); // Read the size of the array

        if (n < 3) {
            System.out.println("The array must have at least 3 elements to form a mountain.");
            return;
        }

        int[] arr = new int[n];
     
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt(); // Read array elements
        }

        Solution solution = new Solution();
        int longestMountainLength = solution.longestMountain(arr);

        if (longestMountainLength > 0) {
            System.out.println("The length of the longest mountain is: " + longestMountainLength);
        } else {
            System.out.println("No mountain exists in the array.");
        }

        scanner.close(); // Close the scanner
    }
}

##
Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.
import java.util.*;

class Solution {

    public int firstMissingPositive(int[] nums) {
     HashSet<Integer> hs=new HashSet<>();
     int max=Integer.MIN_VALUE;
     for(int i=0;i<nums.length;i++){
         if(nums[i]>0 && nums[i]>max){
             max=nums[i];
         }hs.add(nums[i]);
     }int i=1;
     for(i=1;i<=max;i++){
         if(!hs.contains(i)){
             break;
         }
     }return i;
    }
}
public class Main
{
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        Scanner scanner = new Scanner(System.in);

        // Input the size of the array
      
        int n = scanner.nextInt();

        // Input the array elements
        int[] nums = new int[n];
     
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        // Find the smallest missing positive integer
        int result = solution.firstMissingPositive(nums);
        System.out.println("The smallest missing positive integer is: " + result);
    }
}


##
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
import java.util.*;

public class Solution {
    public boolean isValid(String s) {
        //Type Code Here..............
        if(s.length()%2!=0) return false;
        Stack<Character> st=new Stack<>();
        for(char i:s.toCharArray()){
            if(i=='(' || i=='{' || i=='['){
                st.push(i);
            }else{
                if(i==')' && !st.isEmpty() && st.peek()=='('){
                    st.pop();
                }else if(i=='}' && !st.isEmpty() && st.peek()=='{'){
                    st.pop();
                }else if(i==']' && !st.isEmpty() && st.peek()=='['){
                    st.pop();
                }
            }
        }
        return st.isEmpty();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //System.out.println("Enter a string of brackets:");
        String input = scanner.nextLine();

        Solution solution = new Solution();
        boolean result = solution.isValid(input);

        if (result) {
            System.out.println("true");
        } else {
            System.out.println("false");
        }

        scanner.close();
    }
}

##
Find First and Last Position of Element in Sorted Array
import java.util.*;

public class Solution {
    public int[] searchRange(int[] nums, int target) {
        //Type Code Here............
        int low=0,high=nums.length-1;
        int[] res={-1,-1};
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]==target){
                int i=mid;
                while(i>=0 && nums[i]==target){
                    i--;
                }res[0]=i+1;
                int j=mid;
                while(j<nums.length && nums[j]==target){
                    j++;
                }res[1]=j-1;
                return res;
            }else if(nums[mid]>target){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }return res;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read the size of the array
        //System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        
        // Read the elements of the array
        int[] nums = new int[n];
        //System.out.println("Enter the elements of the array (sorted in non-decreasing order):");
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }
        
        // Read the target value
        //System.out.print("Enter the target value: ");
        int target = scanner.nextInt();
        
        // Create an instance of Solution and find the range
        Solution solution = new Solution();
        int[] result = solution.searchRange(nums, target);
        
        // Print the result
        System.out.println("[" + result[0] + "," + result[1] + "]");
        
        scanner.close();
    }
}

##
Largest Rectangle in Histogram
import java.util.*;

public class Solution {
    public int largestRectangleArea(int[] heights) {
       //Type Code Here......
       int maxarea=0;
       Stack<int[]> st=new Stack<>();
       for(int i=0;i<heights.length;i++){
           int start=i;
           while(!st.isEmpty() && heights[i]<st.peek()[1]){
               int[] top=st.pop();
               int ind=top[0];
               int ele=top[1];
               maxarea=Math.max(maxarea,ele*(i-ind));
               start=ind;
               
           }st.push(new int[]{start,heights[i]});
       }
       while(!st.isEmpty()){
           int[] top=st.pop();
           int ind=top[0];
           int ele=top[1];
           maxarea=Math.max(maxarea,ele*(heights.length-ind));
       }
       return maxarea;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read the number of heights
       // System.out.print("Enter the number of heights: ");
        int n = scanner.nextInt();
        
        // Read the heights
        int[] heights = new int[n];
        //System.out.println("Enter the heights:");
        for (int i = 0; i < n; i++) {
            heights[i] = scanner.nextInt();
        }
        
        // Create an instance of Solution and find the largest rectangle area
        Solution solution = new Solution();
        int maxArea = solution.largestRectangleArea(heights);
        
        // Print the result
        System.out.println(maxArea);
        
        scanner.close();
    }
}

##
Kth Missing Positive Number
import java.util.Scanner;

class Solution 
{
    public int findKthPositive(int[] arr, int k) 
    {
       int low=0,high=arr.length;
       while(low<high){
           int mid=low+(high-low)/2;
           int miss=arr[mid]-(mid+1);
           if(miss<k){
               low=mid+1;
           }else{
               high=mid;
           }
       }return low+k;

       
    }
    
}
    
public class Main
{
    public static void main(String[] args) 
    {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
 
        for (int i = 0; i < n; i++) 
        {
            arr[i] = scanner.nextInt();
        }

        int k = scanner.nextInt();

        // Solving the problem
        Solution solution = new Solution();
        int result = solution.findKthPositive(arr, k);

        // Displaying the result
        System.out.println("The " + k + "th missing number is: " + result);

        scanner.close();
    }
}

##
Minimum Remove to make valid parentheses
import java.util.Scanner;
import java.util.Stack;

class Solution {
    public String minRemoveToMakeValid(String s) {
        Stack<Integer> stack=new Stack<>();
        StringBuilder st=new StringBuilder(s);
        int len=st.length();
        int i=0;
        while(i<len){
            char ch=st.charAt(i);
            if(ch=='('){
                stack.push(i);
            }else if(ch==')'){
                if(!stack.isEmpty()){
                    stack.pop();
                }else{
                    st.setCharAt(i,'*');
                }
            }i++;
            
        }while(!stack.isEmpty()){
            st.setCharAt(stack.pop(),'*');
        }
        StringBuilder result=new StringBuilder();
        for(int j=0;j<len;j++){
            if(st.charAt(j)!='*'){
                result.append(st.charAt(j));
            }
            
        }return result.toString();
    }
}
public class Main
{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        String input = scanner.nextLine();

        // Create an instance of Solution and process the input
        Solution solution = new Solution();
        String result = solution.minRemoveToMakeValid(input);

        // Output the result
      
        System.out.println(result);

        scanner.close();
    }
}

##
Basic Calculator
import java.util.Scanner;
import java.util.Stack;

class Solution {
    public int calculate(String s) {
      Stack<Integer> stack=new Stack<>();
      int result=0;
      int sign=1;
      int i=0;
      int length=s.length();
      while(i<length){
          char ch=s.charAt(i);
          if(Character.isDigit(ch)){
              int num=0;
              while(i<length && Character.isDigit(s.charAt(i))){
                  num=num*10+(s.charAt(i)-'0');
                  i++;
              }
              result+=sign*num;
              i--;
          }else if(ch=='+')sign=1;
          else if(ch=='-')sign=-1;
          else if(ch=='('){
              stack.push(result);
              stack.push(sign);
              sign=1;
              result=0;
          }else if(ch==')'){
              result*=stack.pop();
              result+=stack.pop();
          }
          i++;
      }return result;
    }
}
public class Main
{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

       
        String input = scanner.nextLine();

        // Create an instance of Solution and process the input
        Solution solution = new Solution();
        int result = solution.calculate(input);

      
        System.out.println(result);

        scanner.close();
    }
}

##
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
import java.util.*;

public class Solution {
    public int[] sortedSquares(int[] nums) {
       int left=0;
       int right=nums.length -1;
       int[] result=new int[nums.length];
       for(int i=nums.length-1;i>=0;i--){
           if(Math.abs(nums[left])>Math.abs(nums[right])){
               result[i]=nums[left]*nums[left];
               left++;
           }else{
               result[i]=nums[right]*nums[right];
               right--;
           }
       }return result;
       
       
       
       
       
        
        
        
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read the size of the array
        //System.out.print("Enter the size of the array: ");
        int n = scanner.nextInt();
        
        // Read the elements of the array
        int[] nums = new int[n];
        //System.out.print("Enter the elements of the array (space-separated): ");
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        // Create an object of Solution class
        Solution solution = new Solution();
        
        // Get the result after squaring and sorting the array
        int[] result = solution.sortedSquares(nums);
        
        // Print the result
        System.out.println(Arrays.toString(result));
        
        // Close the scanner
        scanner.close();
    }
}

##
Given a string s, find the length of the longest  substring
without repeating characters.
import java.util.*;

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> hs=new HashSet<>();
        int l=0;
        int maxlen=0;
        for(int r=0;r<s.length();r++){
            while(hs.contains(s.charAt(r))){
                hs.remove(s.charAt(l));
                l++;
            }
            hs.add(s.charAt(r));
            maxlen=Math.max(maxlen,r-l+1);
        }return maxlen;
        
        
        
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read input string
        //System.out.print("Enter the string: ");
        String s = scanner.nextLine();

        // Create an object of Solution class
        Solution solution = new Solution();

        // Get the result (length of the longest substring without repeating characters)
        int result = solution.lengthOfLongestSubstring(s);

        // Print the result
        System.out.println(result);

        // Close the scanner
        scanner.close();
    }
}

##
You are given an array prices where prices[i] is the price of a given stock on the ith day.
import java.util.*;

public class Solution {
    public int maxProfit(int[] prices) {
        // Type Code Here......................
        int hold1=Integer.MIN_VALUE;
        int hold2=Integer.MIN_VALUE;
        int release1=0;
        int release2=0;
        for(int i:prices){
            release2=Math.max(release2,hold2+i);
            hold2=Math.max(hold2,release1-i);
            release1=Math.max(release1,hold1+i);
            hold1=Math.max(hold1,-i);
        }return release2;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the number of days (size of the prices array)
        //System.out.print("Enter the number of days: ");
        int n = scanner.nextInt();

        // Read the stock prices for each day
        int[] prices = new int[n];
        //System.out.print("Enter the stock prices (space-separated): ");
        for (int i = 0; i < n; i++) {
            prices[i] = scanner.nextInt();
        }

        // Create an object of the Solution class
        Solution solution = new Solution();

        // Calculate and print the maximum profit
        int maxProfit = solution.maxProfit(prices);
        System.out.println(maxProfit);

        // Close the scanner
        scanner.close();
    }
}


##
Climbing Stairs
import java.util.*;

public class Solution
{
    public int climbStairs(int n)
    {
     
     // Write Your Code here 
     if(n<=2){
         return n;
     }
     int w1=1;
     int w2=2;
     int wn=0;
     for(int i=3;i<=n;i++){
         wn=w1+w2;
         w1=w2;
         w2=wn;
     }
     return wn;
     
     
     
 
    }

    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        Solution sol = new Solution();
        
        int n = sc.nextInt();
        
        System.out.println(sol.climbStairs(n));
        
        sc.close();
    }
}

##
Given an integer array nums, find the  subarray with the largest sum, and return its sum.
import java.util.*;

public class Solution 
{
    public int maxSubArray(int[] nums)
    {
        int max=Integer.MIN_VALUE;
        int sum=0;
        for(int i=0;i<nums.length;i++){
            sum=sum+nums[i];
            if(sum>max){
                max=sum;
            }if(sum<0){
                sum=0;
            }
        }
        return max;
        
        
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        String input = sc.nextLine();
        String[] inputArray = input.split(" ");
        
        int[] nums = new int[inputArray.length];
        
        for (int i = 0; i < inputArray.length; i++) {
            nums[i] = Integer.parseInt(inputArray[i]);
        }
        
        Solution sol = new Solution();
        
        System.out.println( sol.maxSubArray(nums));
        
        sc.close();
    }
}


##
Max Points on a Line
import java.util.*;
public class Solution
{
    public int maxPoints(int[][] points)
    {
    int n=points.length;
    if(n<=2){
        return n;
    }
    int ans=2;
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            int temp=2;
            for(int k=j+1;k<n;k++){
                int x=points[j][0]-points[k][0];
                int y=points[k][1]-points[j][1];
                //System.out.println(x+" "+y);
                if(Math.abs(x)==Math.abs(y)){
                    temp++;}
            }
            if(temp>ans){
                ans=temp;}
        }
    }return ans-1;
}
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        int n = sc.nextInt();
        int[][] points = new int[n][2];
        
        for (int i = 0; i < n; i++) {
            points[i][0] = sc.nextInt();
            points[i][1] = sc.nextInt();
        }
        Solution sol = new Solution();
        System.out.println(sol.maxPoints(points));
        sc.close();
    }
}


##
Plus One 
import java.util.*;

public class Solution
{
    public int[] plusOne(int[] digits)
    {
        for(int i=digits.length-1;i>=0;i--){
            if(digits[i]+1!=10){
                digits[i]+=1;
                return digits;
            }
            digits[i]=0;
        }
        int[] res=new int[digits.length+1];
        res[0]=1;
        return res;
        
        
        
        
        
        
        
    }
    
    public static void main(String[] args) 
    {
        Scanner scanner = new Scanner(System.in);
        
        String[] input = scanner.nextLine().split(" ");
        
        int[] digits = new int[input.length];
        for (int i = 0; i < input.length; i++) 
        {
            digits[i] = Integer.parseInt(input[i]);
        }
        
        Solution solution = new Solution();
        int[] result = solution.plusOne(digits);
        
        System.out.print("[");
        for (int i = 0; i < result.length; i++)
        {
            System.out.print(result[i]);
            if (i < result.length - 1) 
            {
                System.out.print(",");
            }
        }
        System.out.println("]");
        
        scanner.close();
    }
}

##
Given an integer n, return the number of prime numbers that are strictly less than n.
import java.util.ArrayList;
import java.util.*;
import java.util.Scanner;

public class Solution {
    public int countPrimes(int n) {
        if(n<=2){
            return 0;
        }
        boolean[] isprime=new boolean[n];
        Arrays.fill(isprime,true);
        isprime[0]=false;
        isprime[1]=false;
        for(int i=2;i*i<n;i++){
            if(isprime[i]){
                for(int j=i*i;j<n;j+=i){
                    isprime[j]=false;
                }
            }
        }
        int c=0;
        for(boolean x:isprime){
            if(x){
            c++;}
        }
        return c;
        
        
        
        
        
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //System.out.print("Enter a number: ");
        int n = scanner.nextInt(); // Read user input
        scanner.close();

        Solution sol = new Solution();
        System.out.println( sol.countPrimes(n));
    }
}

##
Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:
import java.util.Scanner;
import java.util.regex.*;

public class Solution {
    public boolean isMatch(String s, String p) {
        if(p.isEmpty()){
            return s.isEmpty();
        }
        boolean fm=((!s.isEmpty())&&(s.charAt(0)==p.charAt(0) || p.charAt(0)=='.'));
        if(p.length()>=2 && p.charAt(1)=='*'){
            return ((fm && isMatch(s.substring(1),p))|| isMatch(s,p.substring(2)));
        } else{
            return (fm && isMatch(s.substring(1),p.substring(1)));
        }
        
        
        
        
        
        
        
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Get input string and pattern from user
        //System.out.print("Enter string s: ");
        String s = scanner.nextLine();
        
        //System.out.print("Enter pattern p: ");
        String p = scanner.nextLine();
        
        Solution sol = new Solution();
        
        // Print the result
        System.out.println(sol.isMatch(s, p));
        
        scanner.close();
    }
}

##
Divide Two Integers
import java.util.Scanner;

public class Solution {
    public int divide(int dividend, int divisor) {
    int result = dividend/divisor;
    return result;
    }
}

##
Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.
import java.util.Arrays;
import java.util.Scanner;
import java.util.*;

public class Solution {
    int reverse(int n){
        int rem;
        int res =0;
        while(n>0){
            rem = n%10;
            res = (res*10) + rem;
            n/=10;
        }
        return res;
    }
    public String nearestPalindromic(String n) {
        int s = Integer.parseInt(n);
        int res=0, res1=0;
        int count=0, count1=0;
        for(int i=s+1;i<s*2;i++){
            if(reverse(i)==i){
                 res = i;
                 count = reverse(i)- s;
                break;
            }
        }
        
        for(int i=s-1;i>=0;i--){
            if(reverse(i)==i){
                res1 = i;
                count1 = s - reverse(i);
                break;
            }
        }
        if(count<count1){
            return Integer.toString(res);
        }
        
        return Integer.toString(res1);
    
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //System.out.print("Enter a number: ");
        String input = scanner.nextLine();

        Solution solution = new Solution();
        String result = solution.nearestPalindromic(input);
        System.out.println(result);
        
        scanner.close();
    }
}






