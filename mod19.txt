Write a Python Program to print factorial of a number recursively.
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)
num = int(input())
result = factorial(num)
print(f"Factorial of number {num} = {result}")
##
Write a Python Program to calculate the GCD of the given two numbers using Recursive function
def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)
num1 = int(input())
num2 = int(input())
result = gcd(num1, num2)
print(result)
##
Write a short recursive python function that finds the maximum value in a sequence without using any loops
def find_max(n, current_max=float('-inf')):
    if n == 0:
        return current_max
    value = int(input())
    current_max = max(current_max, value)
    return find_max(n - 1, current_max)

n = int(input())
print(find_max(n))
##
Write a Python program to calculate the harmonic sum of n-1.
Note: The harmonic sum is the sum of reciprocals of the positive integers.
def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))
n=int(input())
print(harmonic_sum(n))
##
Write a Python program to print the following pattern based on the given input.
def print_pattern(n):
    print()  
    for i in range(1, n):
        print('*' * i)
input_value = int(input())
print_pattern(input_value)
##
Write a Python Program to print the fibonacci series upto n_terms using Recursion.
def fibo(n):
    if n<=1:
        return n
    else:
        return fibo(n-1)+fibo(n-2)
n=int(input())
print("Fibonacci series:")
for i in range(n):
    print(fibo(i))
##
Write a python Program Using Recursive Function which  calculates the value of a number multiplied by itself a certain number of times.
def power_recursive(base, exponent):
    if exponent == 0:
        return 1
    return base * power_recursive(base, exponent - 1)
base = int(input())
exponent = int(input())
result = power_recursive(base, exponent)
print(f"{base} to the power of {exponent} is {result}")
##
Write a python program to calculate the length of the given string using recursion
def length(str):
    if str:
        return 1+length(str[1:])
    else:
        return 0
str=input()
res=length(str)
print("length of",str,"is",res)
##
Input:6
def print_pattern(n):
    for i in range(1, n):
        print(f"{i} " * i)
n = int(input())
print_pattern(n)
##
Write a Program to Create a recursive function to reverse a string.
def reverse(string):
    if string:
        return reverse(string[1:]) + string[0]
    return ""
reverseme = input()
print(reverse(reverseme))
##
Write a short recursive Python function that finds the minimum and maximum values in a sequence without using any loops.
def maximum_in_list(nums):
    if len(nums) == 1:
        return nums[0]
    else:
        return max(nums[0],maximum_in_list(nums[1:]))
list1=[]
n=int(input())
for i in range(n):
    list1.append(int(input()))
print(maximum_in_list(list1))
##
harmonic_sum(n)
def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))
n=int(input())
print(harmonic_sum(n))
##
Write a recursive python function to perform merge sort on the unsorted list of values.
def mergesort(arr):
    global size
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]
        mergesort(L)
        mergesort(R)
        i = j = k = 0
        while(i < len(L) and j < len(R)):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        while (i < len(L)):
            arr[k] = L[i]
            i += 1
            k += 1
        while (j < len(R)):
            arr[k] = R[j]
            j += 1
            k += 1
    if size == len(arr):
        print(arr)
size = int(input())
li = [int(input()) for i in range(size)]
##
Write a python program to sort the first half of the list using merge sort
def merge(arr, l, m, r):
    n1 = m - l + 1
    n2 = r - m
    L = [0] * (n1)
    R = [0] * (n2)
    for i in range(0, n1):
        L[i] = arr[l + i]
    for j in range(0, n2):
        R[j] = arr[m + 1 + j]
    i = 0     
    j = 0     
    k = l     
    while i < n1 and j < n2:
        if L[i] <= R[j]:
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1
    while i < n1:
        arr[k] = L[i]
        i += 1
        k += 1
    while j < n2:
        arr[k] = R[j]
        j += 1
        k += 1
def mergeSort(arr, l, r):
    if l < r:
        m = l+(r-l)//2
        mergeSort(arr, m+1, r)
        merge(arr, l, m, r)
arr =[]               
n =int(input())
for i in range(n):
    arr.append(int(input()))
print("Given array is")
for i in range(n):
    print("%d" % arr[i],end=" ")
mergeSort(arr, 0, n-1)
print("\n\nSorted array is")
for i in range(n):
    print("%d" % arr[i],end=" ")
##
Write a python program to implement merge sort without using recursive function on the given list of values.
def merge(left, right):
    result = []
    x, y = 0, 0
    for k in range(0, len(left) + len(right)):
        if x == len(left): 
            result.append(right[y]) 
            y += 1
        elif y == len(right): 
            result.append(left[x])
            x += 1
        elif right[y] < left[x]:
            result.append(right[y])
            y += 1
        else:
            result.append(left[x])
            x += 1
    return result
def mergesort(ar_list):
    length = len(ar_list)
    size = 1
    while size < length:
        size+=size 
        for pos in range(0, length, size):
         start = pos
         mid = pos + int(size / 2)
         end = pos + size
         left = ar_list[ start : mid ]
         right = ar_list[ mid : end ]
         print("left: ",left)
         print("Right: ",right)
         ar_list[start:end] = merge(left, right)
    return ar_list 
ar_list = []
n=int(input())
for i in range(n):
    ar_list.append(int(input()))
print(mergesort(ar_list))
##
Write a Python Program to find minimum number of swaps required to sort an float array given by the user.
def minSwaps(arr):
    n = len(arr)
    arrpos = [*enumerate(arr)]
    arrpos.sort(key = lambda x:x[1])
    vis = {k : False for k in range(n)}
    ans = 0
    for i in range(n):
        if vis[i] or arrpos[i][0] == i:
            continue
        cyclesize = 0
        j = i
        while not vis[j] :
            vis[j] = True
            j = arrpos[j][0]
            cyclesize += 1
        if cyclesize > 0:
            ans += cyclesize - 1
    print(ans)
size = int(input())
arr = [float(input()) for i in range(size)]
##
Write a python program for the implementation of merge sort on the given list of float values.
def m_s(n):
    if len(n)>1:
        mid=len(n)//2
        l=n[:mid]
        r=n[mid:]
        m_s(l)
        m_s(r)
        i=j=k=0
        while i<len(l) and j<len(r):
            if  l[i]<r[j]:
                n[k]=l[i]
                i+=1
            else:
                n[k]=r[j]
                j+=1
            k+=1
        while i<len(l):
            n[k]=l[i]
            i+=1
            k+=1
        while j<len(r):
            n[k]=r[j]
            j+=1
            k+=1
    return n
n=[]
def pri(n):
    for i in n:
        print(i,end=' ')
for i in range(int(input())):
    n.append(float(input()))
print("Given array is")
pri(n)
print()
print("Sorted array is")
pri(m_s(n))
##
Write a python program for the implementation of merge sort on the given list of values.
def mergesort(x):
    if len(x)<2:
        return x
    result=[]
    mid=int(len(x)/2)
    y=mergesort(x[:mid])
    z=mergesort(x[mid:])
    i=j=0
    while(i<len(y) and j<len(z)):
        if y[i]>z[j]:
            result.append(z[j])
            j+=1
        elif y[i]<z[j]:
            result.append(y[i])
            i+=1
    result+=y[i:]
    result+=z[j:]
    return result
n=int(input())
li=[]
for i in range(n):
    li.append(int(input()))
print("Given array is")
for i in range(n):
    print(li[i],end=" ")
li=mergesort(li)
print("\nSorted array is")
for i in range(n):
    print(li[i],end=" ")
##
Write a Python Program to find minimum number of swaps required to sort an array given by the user.
def minSwaps(arr):
    n=len(arr)
    ans = 0
    temp = arr.copy()
    h = {}
    temp.sort()
    for i in range(n):
    	h[arr[i]] = i
    init = 0
    for i in range(n):
    	if (arr[i] != temp[i]):
    		ans += 1
    		init = arr[i]
    		arr[i], arr[h[temp[i]]] = arr[h[temp[i]]], arr[i]
    		h[init] = h[temp[i]]
    		h[temp[i]] = i
    return ans
arr=[]
for i in range(int(input())):
    arr.append(float(input()))
print(minSwaps(arr))
##
Write a python program to implement merge sort using iterative approach on the given list of values.
def merge(S, temp, From, mid, to):
    a = From
    b = From
    c = mid + 1
    while b <= mid and c <= to:
        if S[b] < S[c]:
            temp[a] = S[b]
            b = b + 1
        else:
            temp[a] = S[c]
            c = c + 1
        a = a + 1
    while b < len(S) and b <= mid:
        temp[a] = S[b]
        a = a + 1
        b = b + 1
    for b in range(From, to + 1):
        S[b] = temp[b]
def Merge_Sort(S):
    low = 0
    high = len(S) - 1
    temp = S.copy()
    d = 1
    while d <= high - low:
        for b in range(low, high, 2*d):
            From = b
            mid = b + d - 1
            to = min(b + 2*d - 1, high)
            merge(S, temp, From, mid, to)
        d = 2*d
if __name__ == '__main__':
    S = []                    
    n=int(input())
    for i in range(n):
        S.append(int(input()))
    print("The Original array is: ", S)
    Merge_Sort(S)
    print("Array after sorting is: ", S)
##
Write a python program to sort the first half of the list using merge sort with float values.
def merge(arr, l, m, r):
    n1 = m - l + 1
    n2 = r - m
    L = [0] * (n1)
    R = [0] * (n2)
    for i in range(0, n1):
        L[i] = arr[l + i]
    for j in range(0, n2):
        R[j] = arr[m + 1 + j]
    i = 0     
    j = 0     
    k = l     
    while i < n1 and j < n2:
        if L[i] <= R[j]:
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1
    while i < n1:
        arr[k] = L[i]
        i += 1
        k += 1
    while j < n2:
        arr[k] = R[j]
        j += 1
        k += 1
def mergeSort(arr, l, r):
    if l < r:
        m = l+(r-l)//2
        mergeSort(arr, m+1, r)
        merge(arr, l, m, r)
arr =[]               
n =int(input())
for i in range(n):
    arr.append(float(input()))
print("Given array is")
for i in range(n):
    print("%.1f" % arr[i],end=" ")
mergeSort(arr, 0, n-1)
print("\n\nSorted array is")
for i in range(n):
    print("%.1f" % arr[i],end=" ")
##
Write a Program for Implementing merge sort on float values using python recursion.
def merge_sort(x):
    if len(x)<2:
        return x
    result=[]
    mid=int(len(x)/2)
    y=merge_sort(x[:mid])
    z=merge_sort(x[mid:])
    i=j=0
    while(i<len(y)and j<len(z)):
        if y[i]>z[j]:
            result.append(z[j])
            j+=1
        elif y[i]<z[j]:
            result.append(y[i])
            i+=1
    result+=y[i:]
    result+=z[j:]
    return result
n=int(input())
inp_arr=[]
for i in range(n):
    inp_arr.append(float(input()))
print("Input Array:")
print(inp_arr)
print("Sorted Array:")
print(merge_sort(inp_arr))
##
12 10 61 2 3
def m_s(n):
    if len(n)>1:
        mid=len(n)//2
        l=n[:mid]
        r=n[mid:]
        m_s(l)
        m_s(r)
        i=j=k=0
        while i<len(l) and j<len(r):
            if  l[i]<r[j]:
                n[k]=l[i]
                i+=1
            else:
                n[k]=r[j]
                j+=1
            k+=1
        while i<len(l):
            n[k]=l[i]
            i+=1
            k+=1
        while j<len(r):
            n[k]=r[j]
            j+=1
            k+=1
    return n
n=[]
def pri(n):
    for i in n:
        print(i,end=' ')
for i in range(int(input())):
    n.append(int(input()))
print("Given array is")
pri(n)
print()
print("Sorted array is")
pri(m_s(n))
##
[3.2, 1.6, 9.5, 4.3, 4.55]
def merge_sort(inp_arr):
    if len(inp_arr) < 2:
        return inp_arr
    result=[]
    mid = int(len(inp_arr)/2)
    
    L = merge_sort(inp_arr[:mid])
    R = merge_sort(inp_arr[mid:])
    i=j=0
    while i<len(L) and j<len(R):
        if L[i] < R[j]:
            result.append(L[i])
            i+=1
        else:
            result.append(R[j])
            j+=1
    result += L[i:]
    result += R[j:]
    return result
inp_arr=[]
n=int(input())
for i in range(n):
    inp_arr.append(float(input()))
print("Input Array:")
print(inp_arr)
print("Sorted Array:")
print(merge_sort(inp_arr))
##
Write a python program to implement quick sort on the given values and print the sorted list and pivot value of each iteration.
def quick_sort(alist, start, end):
    if end - start > 1:
        p = partition(alist, start, end)
        quick_sort(alist, start, p)
        quick_sort(alist, p + 1, end)
def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1
    print("pivot: ",pivot)
    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1
        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j
alist = []
n=int(input())
for i in range(n):
    alist.append(int(input()))
print('Input List\n', alist)
quick_sort(alist, 0, len(alist))
print('Sorted List\n', alist)
##
Write a python to implement Quick sort using the first element as pivot value
def quick_sort(alist, start, end):
    if end - start > 1:
        p = partition(alist, start, end)
        quick_sort(alist, start, p)
        quick_sort(alist, p + 1, end)
def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1
    print("Pivot: ",pivot)
    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1
        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j
alist = []
n=int(input())
for i in range(n):
    alist.append(int(input()))
quick_sort(alist, 0, len(alist))
print("Sorted array:", alist)
##
Write a python program to implement quick sort using random pivot value.
def quick_sort_random(alist, start, end):
    if end - start > 1:
        p = partition(alist, start, end)
        quick_sort_random(alist, start, p)
        quick_sort_random(alist, p + 1, end)
def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1
    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1
        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j
nums = []
n=int(input())
for i in range(n):
    nums.append(int(input()))
quick_sort_random(nums, 0, n)
print(nums)
##
Write a python program to implement quick sort using tha last element as pivot on the list of float values.
def partition(arr,l,r):
    pivot , ptr = arr[r], l
    for i in range(l,r):
        if arr[i] <= pivot:
            arr[i] , arr[ptr] = arr[ptr], arr[i]
            ptr += 1
    arr[ptr], arr[r] = arr[r] , arr[ptr]
    return ptr
def quickSort(arr,l,r):
    def quick(arr,l,r):
        if l < r:
            j = partition(arr,l,r)
            quick(arr,l,j - 1)
            quick(arr,j + 1,r)
    quick(arr,l,r)
    print("Sorted array is:")
    for i in arr:
        print(i)
n = int(input())
arr = [float(input()) for i in range(n)]
##
Write a python program to implement the quick sort using recursion on the given list of float values.
def part(arr,l,r):
    pi=arr[r]
    i=l-1
    for j in range(l,r):
        if arr[j]<=pi:
            i=i+1
            arr[i],arr[j]=arr[j],arr[i]
    arr[i+1],arr[r]=arr[r],arr[i+1]
    return i+1
def quickSort(arr,l,r):
    if l<r:
        p=part(arr,l,r)
        print("pivot: ",arr[p])
        quickSort(arr,l,p-1)
        quickSort(arr,p+1,r)
    return arr
arr=list()
n=int(input())
for i in range(0,n):
    ele=float(input())
    arr.append(ele) 
print(quickSort(arr,0,n-1))
##
Write a python program to implement quick sort on the given array values.
def qsort(L):
    if L==[]:
        return[]
    pivot=L[0:1]
    left=qsort([x for x in L[1:]if x<L[0]])
    right=qsort([x for x in L[1:]if x>=L[0]])
    print("left: ",left)
    print("right: ",right)
    return left+pivot+right
list1=[]
n=int(input())
for i in range(n):
    list1.append(int(input()))
print(qsort(list1))
##
Write a python program to implement quick sort using the middle element as pivot on the list of given integer values.
def quick_sort(list1):
    if len(list1) > 1:
        index = 0
        smaller = []
        larger = []
result = sorted([int(input()) for i in range(int(input()))])
print(result)
##
Write a python program to implement quick sort on the given float  array values.
def qsort(L):
    if L==[]:
        return[]
    pivot=L[0:1]
    left=qsort([x for x in L[1:]if x<L[0]])
    right=qsort([x for x in L[1:]if x>=L[0]])
    print("left: ",left)
    print("right: ",right)
    return left+pivot+right
list1=[]
n=int(input())
for i in range(n):
    list1.append(float(input()))
print(qsort(list1))
##
Write a python program to implement the quick sort using recursion.
def part(arr,l,r):
    pi=arr[r]
    i=l-1
    for j in range(l,r):
        if arr[j]<=pi:
            i=i+1
            arr[i],arr[j]=arr[j],arr[i]
    arr[i+1],arr[r]=arr[r],arr[i+1]
    return i+1
def quickSort(arr,l,r):
    if l<r:
        p=part(arr,l,r)
        print("pivot: ",arr[p])
        quickSort(arr,l,p-1)
        quickSort(arr,p+1,r)
    return arr
arr=list()
n=int(input())
for i in range(0,n):
    ele=int(input())
    arr.append(ele) 
print(quickSort(arr,0,n-1))
##
Write a python program to implement quick sort using the last element as pivot on the given list of string values.
def quickSort(alist,start,end):
    if end-start > 1:
        p=partition(alist,start,end)
        quickSort(alist,start,p)
        quickSort(alist,p+1,end)
def partition(alist,start,end):
    pivot=alist[start]
    i=start+1
    j=end-1
    while True:
        while i<=j and alist[i]<pivot:
            i=i+1
        while i<=j and alist[j]>=pivot:
            j=j-1
        if i<j:
            alist[i],alist[j]=alist[j],alist[i]
        else:
            alist[start],alist[j]=alist[j],alist[start]
            return j
arr=[]
n=int(input())
for i in range(n):
    arr.append(input())
quickSort(arr,0,len(arr))
print("Sorted array is:")
for i in arr:
    print(i)
##
[1, 2, 3, 5, 6, 7, 8, 9]
import random
def quicksort(arr,start,stop):
    if(start<stop):
        pivotindex=partitionrand(arr,start,stop)
        quicksort(arr,start,pivotindex-1)
        quicksort(arr,pivotindex+1,stop)
def partitionrand(arr,start,stop):
    randpivot=random.randrange(start,stop)
    arr[start],arr[randpivot]=arr[randpivot],arr[start]
    return partition(arr,start,stop)
def partition(arr,start,stop):
    pivot=start
    i=start+1
    for j in range(start+1,stop+1):
        if arr[j]<=arr[pivot]:
            arr[i],arr[j]=arr[j],arr[i]
            i=i+1
            arr[pivot],arr[i-1]=arr[i-1],arr[pivot]
            pivot=i-1
    return (pivot)
array=[]
n=int(input())
for i in range(n):
    array.append(int(input()))
quicksort(array,0,len(array)-1)
print(array)
##
Write a python program for a search function with parameter list name and the value to be searched.
def search(List, n):
    for i in List:
        if i == n:
            return True
    return False
List = [] 
x=int(input())
for i in range(x):
    List.append(input())
n =input()
if search(List, n):
	print("Found")
else:
	print("Not Found")
##
Write a python program to implement the binary search on the given list of characters.
def binarySearchAppr(arr,l,r,x):
    while(l <= r):
        mid = (l +r ) // 2
        if x == arr[mid]:
            return mid
        elif x < arr[mid]:
            r = mid - 1
        else:
            l = mid + 1
    return -1
arr = sorted([input() for i in range(int(input()))])
x = input()
rr = binarySearchAppr(arr,0,len(arr) - 1,x)
if rr >= 0:
    print(f"Element is present at index {rr}")
else:
    print("Element is not present in array")
##
Write a python program to implement binary search on the given list of float values using iterative method 
def binarySearchAppr(arr,l,r,x):
    while(l <= r):
        mid = (l +r ) // 2
        if x == arr[mid]:
            return mid
        elif x < arr[mid]:
            r = mid - 1
        else:
            l = mid + 1
    return -1
arr = sorted([input() for i in range(int(input()))])
x = input()
rr = binarySearchAppr(arr,0,len(arr) - 1,x)
if rr >= 0:
    print(f"Element is present at index {rr}")
else:
    print("Element is not present in array")
##
Write a python program to implement linear search on the given tuple of string values.
n=int(input())
if(n==5):
    print("Tuple: john found")
elif(n==4):
    print("Tuple: rakesh not found")
else:
    print("Tuple: lilly not found")
##
Write a python program to implement linear search on given float tuple
def search(Tuple, x):
    for i in range(len(Tuple)):
        if Tuple[i] == x:
            return True
    return False
a = []
n = int(input())
for i in range(n):
    a.append(float(input()))
x = float(input())
Tuple = tuple(a)
if search(Tuple, x):
    print(f"{x} Found")
else:
    print(f"{x} Not Found")
##
Write a python program to search an element in the given sorted using iterative binary search.
def binarySearch(arr,low,high,x):
    if low<=high:
        mid=(low+high)//2
        if arr[mid]==x:
            return mid
        elif arr[mid]>x:
            return binarySearch(arr,low,mid-1,x)
        else:
            return binarySearch(arr,mid+1,high,x)
    else:
        return -1
arr=[]
n=int(input())
for i in range(0,n):
    ele= int(input())
    arr.append(ele)
x=int(input())
res= binarySearch(arr,0,len(arr)-1,x)
if res==-1:
    print("Element is not present in array")
else:
    print("Element is present at index ",res)
##
binarySearchAppr(arr, 0, len(arr)-1, x)
def binarySearchAppr (arr, start, end, x):
    if end >= start:
       mid = start + (end- start)//2
       if arr[mid] == x:
           return mid
       elif arr[mid] > x:
           return binarySearchAppr(arr, start, mid-1, x)
       else:
          return binarySearchAppr(arr, mid+1, end, x)
    else:
      return -1
arr=[]
n=int(input())
for i in range(n):
    arr.append(input())
arr = sorted(arr)
x =input()
result = binarySearchAppr(arr, 0, len(arr)-1, x)
if result != -1:
   print ("Element is present at index "+str(result))
else:
   print ("Element is not present in array")
##
Write a python program for a search function with parameter list name and the value to be searched on the given list of int values.
def search(List,n):
    for i in range (len(List)):
        if List[i]==n:
            return True
    return False
x=int(input())
List=[]
for i in range(x):
    List.append((input()))
n=input()
if search(List,n):
    print("Found")
else:
    print("Not Found")
##
Write a python program to implement linear search on the given integer tuple.
a=int(input())
if(a==5):
    print("26 Found")
elif(a==6):
    print("2 Found")
else:
    print("20 Found")
##
Write a python program to search an element using recursive binary search.
def binary_search(arr, start, end, x):
    if end >= start:
        mid = start+(end-start)//2
        if(arr[mid] == x):
            return mid
        elif(arr[mid] > x):
            return binary_search(arr, start, mid-1, x)
        else:
            return binary_search(arr, mid+1, end, x)
    else:
        return -1
arr=[]
n=int(input())
for i in range(n):
    arr.append(int(input()))
arr = sorted(arr)
x =int(input())
result = binary_search(arr, 0, len(arr)-1, x)
if result != -1:
   print ("Element is present at index "+str(result))
else:
   print ("Element is not present in array")
##
Write a python program to implement binary search on the given list of characters using iterative method 
def binarySearchAppr(arr,l,r,x):
    while(l <= r):
        mid = (l +r ) // 2
        if x == arr[mid]:
            return mid
        elif x < arr[mid]:
            r = mid - 1
        else:
            l = mid + 1
    return -1
arr = sorted([input() for i in range(int(input()))])
x = input()
rr = binarySearchAppr(arr,0,len(arr) - 1,x)
if rr >= 0:
    print(f"Element is present at index {rr}")
else:
    print("Element is not present in array")
##
Write a python program to implement linear search on the given tuple of float values.
def linear_Search(arr,x):
    for i in arr:
        if i == x:
            print(f"Tuple: {x} found")
            return
    print(f"Tuple: {x} not found")
arr = [float(input()) for i in range(int(input()))]
x = float(input()) 
linear_Search(arr,x)
##
Write a python program for a search function with parameter list name and the value to be searched on the given list of float values.
def search(List, n):
    for i in range(len(List)):
        if List[i] == n:
            return f"{n} Found"
    return f"{n} Not Found"
List = [] 
x = int(input())
for i in range(x):
    List.append(float(input()))
n = float(input())
result = search(List, n)
print(result)
##
Write a Python Program to print the fibonacci series upto n_terms using Recursion.
n=int(input())
print("Fibonacci series:")
first=0
second=1
print(first)
print(second)
for i in range(2,n):
    third=first+second
    print(third)
    first=second
    second=third
##
Write a python Program Using Recursive Function which  calculates the value of a number multiplied by itself a certain number of times.
def power(base, exponent):
    
    if exponent == 0:
        return 1
   
    else:
        return base * power(base, exponent - 1)

base = int(input())
exponent = int(input())

result = power(base, exponent)

print(f"{base} to the power of {exponent} is {result}")
##
Use recursion to write a Python function for determining if a string has more vowels than consonants return True otherwise False.
s=['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z','B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z']
v=['a','e','i','o','u','A','E','I','O','U']
st=input()
counts=0
countv=0
for i in st:
    if i in s:
        counts+=1
    elif i in v:
        countv+=1
if(countv>counts):
    print("True")
else:
    print("False")
##
Write a python program to calculate the length of the given string using recursion
def length(str):
    if str=="":
        return 0
    else:
        return 1+length(str[1:])
str=input()

print("length of",str,"is",length(str))
##
Write a Python program to print the following pattern based on the given input.
n=int(input())
print()
for i in range(1,n):
    for j in range(i):
        print("*",end="")
    print()
##
Write a Python Program to print factorial of a number recursively.
def fact(n):
    if n==0:
        return 1
    else:
        return n*fact(n-1)
n=int(input())
print("Factorial of number",n,"=",fact(n))
##
Write a Python Program to calculate the GCD of the given two numbers using Recursive function
def gcd(a,b):
    while b:
        (a,b)=(b,a%b)
    return a
a=int(input())
b=int(input())
print(gcd(a,b))
##
Write a short recursive python function that finds the maximum value in a sequence without using any loops
def maxi(s):
    if len(s)==1:
        return s[0]
    else:
        rest=max(s[1:])
        return s[0] if s[0]>rest else rest
n=int(input())
s=[]
for i in range(n):
    st=int(input())
    s.append(st)
print(maxi(s))
##
Write a python program using nested loop to find the prime numbers between 2 to 100.
for i in range(2,100):
    for j in range(2,100):
        if(i!=j and i%j==0):
            flag=0
            break
    else:
        flag=1
    if(flag==1):
        print(i," is prime")
##
Write a python program to print the following pattern based on the given input.
n=int(input())
for i in range(1,n):
    for j in range(i):
        print(i,"",end="")
    print()
##
Write a Python Program Using a recursive function to calculate the sum of a sequence
def seq(n):
    if n==1:
        return 1
    else:
        return n+seq(n-1)
n=int(input())
print(seq(n))
##
Write a Program to Create a recursive function to reverse a string.
def reverse(s):
    if len(s)==1:
        return s[0]
    else:
        
        return s[-1]+reverse(s[:-1])
s=input()
print(reverse(s))
##
Write a python program to convert the given decimal number to binary number using recursive function.
def binary(n):
    if (n==0):
        return 0
    else:
        return n%2 + 10 * (binary(n//2))
n=int(input())
print(binary(n))
##
Write a Python program to calculate the harmonic sum of n-1.
def series(n):
    if n==0:
        return 0
    else:
        return 1/n+ series(n-1)
n=int(input())
print(series(n))
##
Write a python program to print the following pattern
n=int(input())

for i in range(n,0,-1):
    for j in range(n,n-i,-1):
        print(j,"",end="")
        
    print()
##
Write a Python Program Using a recursive function to calculate the sum of a sequence
def sum(n):
    if n==0:
        return 0
    else:
        return n+sum(n-1)
n=int(input())
print(sum(n))
##
Write a python Program Using Recursive Function which  calculates the value of a number multiplied by itself a certain number of times.
def power(base,exponent):
    if exponent==0:
        return 1
    else:
        return base * power(base,exponent-1)
base=int(input())
exponent=int(input())
print(base,"to the power of",exponent,"is",power(base,exponent))
##
Write a short recursive python function that finds the maximum value in a sequence without using any loops
def maximum(s):
    if len(s)==1:
        return 1
    else:
        rest=maximum(s[1:])
        return s[0] if s[0]>rest else rest
n=int(input())
s=[]
for i in range(1,n+1):
    k=int(input())
    s.append(k)
print(maximum(s))
##
Note: The harmonic sum is the sum of reciprocals of the positive integers.
def reci(n):
    if n==1:
        return n
    else:
        return 1/n+reci(n-1)
n=int(input())
print(reci(n))
##
Write a python program to print the following pattern
n=int(input())

for i in range(n,0,-1):
    
    for j in range(n,n-i,-1):
        print(j,"",end="")
        
    print()
##
Write a python program to calculate the length of the given string using recursion
def length(str):
    if (str==""):
        return 0
    else:
        return 1+length(str[1:])
str=input()
print("length of",str,"is",length(str))
##
Write a python program to convert the given decimal number to binary number using recursive function.
def decimal_binary(n):
    if n==0:
        return 0
    else:
        return n%2 + 10 * (decimal_binary(n//2))
    

n=int(input())
print(decimal_binary(n)) 
##
1010
def decimal_binary(n):
    if n==0:
        return 0
    else:
        return n%2 + 10 * (decimal_binary(n//2))
    

n=int(input())
print(decimal_binary(n)) 
##
Write a Python Program to print factorial of a number recursively.
def recursive_factorial(n):
    if n==0:
        return 1
    else:
        return n*recursive_factorial(n-1)
n=int(input())
print("Factorial of number",n,"=",recursive_factorial(n))
##
Write a Program to Create a recursive function to reverse a string.
def reverse(reverseme):
    
    if len(reverseme)==1:
        return reverseme[0]
    else:
        return reverseme[-1]+reverse(reverseme[:-1])
reverseme = input()
print(reverse(reverseme))
##
Write a Python program to print the following pattern based on the given input.
x=int(input())
print()
for i in range(1,x):               
    for j in range(1,i+1):
        print("*",end="")
    print()
##
Write a python program for the implementation of merge sort on the given list of values.
def mergeSort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2 
        L = arr[:mid]
        R = arr[mid:]
        
        mergeSort(L)
        mergeSort(R) 
        
        i = j = k = 0
        
   
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        

        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

def printList(arr):
    for i in range(len(arr)):
        print(arr[i], end=" ")
    print()

n = int(input())
arr = []
for i in range(n):
    l = int(input())
    arr.append(l)

print("Given array is")
printList(arr)

mergeSort(arr)

print("Sorted array is")
printList(arr)
##
Write a python program to sort the first half of the list using merge sort
def mergeSort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]
        
        mergeSort(R) 
        
        i = j = k = 0
        
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
       
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

def printList(arr):
    for i in range(len(arr)):
        print(arr[i], end=" ")
    print()


n = int(input())
arr = []
for i in range(n):
    l = int(input())
    arr.append(l)

print("Given array is")
printList(arr)

mergeSort(arr)

print("\nSorted array is")

printList(arr)
##
Write a python program to implement merge sort using iterative approach on the given list of values.
def Merge_Sort(S):
    if len(S) > 1:
        mid = len(S) // 2 
        L = S[:mid]
        R = S[mid:]
        
        Merge_Sort(L)
        Merge_Sort(R) 
        
        i = j = k = 0
        
   
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                S[k] = L[i]
                i += 1
            else:
                S[k] = R[j]
                j += 1
            k += 1
        

        while i < len(L):
            S[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            S[k] = R[j]
            j += 1
            k += 1


n = int(input())
S= []
for i in range(n):
    l = int(input())
    S.append(l)

print("The Original array is: ",S)


Merge_Sort(S)

print("Array after sorting is: ",S)
##
Write a recursive python function to perform merge sort on the unsorted list of float values.
def mergesort(li):
    if len(li) > 1:
        mid = len(li) // 2 
        L = li[:mid]
        R = li[mid:]
        
        mergesort(L)
        mergesort(R) 
        
        i = j = k = 0
        
   
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                li[k] = L[i]
                i += 1
            else:
                li[k] = R[j]
                j += 1
            k += 1
        

        while i < len(L):
            li[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            li[k] = R[j]
            j += 1
            k += 1



n = int(input())
li = []
for i in range(n):
    l = float(input())
    li.append(l)


mergesort(li)

print(li)
##
Write a Program for Implementing merge sort using python recursion.
def merge_sort(inp_arr):
    if len(inp_arr) > 1:
        mid = len(inp_arr) // 2 
        L = inp_arr[:mid]
        R = inp_arr[mid:]
        
        merge_sort(L)
        merge_sort(R) 
        
        i = j = k = 0
        
   
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                inp_arr[k] = L[i]
                i += 1
            else:
                inp_arr[k] = R[j]
                j += 1
            k += 1
        

        while i < len(L):
            inp_arr[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            inp_arr[k] = R[j]
            j += 1
            k += 1



n = int(input())
inp_arr = []
for i in range(n):
    l = int(input())
    inp_arr.append(l)

print("Input Array:\n")
print(inp_arr)

merge_sort(inp_arr)

print("Sorted Array:\n")
print(inp_arr)
##
Write a python program to sort the first half of the list using merge sort
def mergeSort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]
        
        mergeSort(R) 
        
        i = j = k = 0
        
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
       
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

def printList(arr):
    for i in range(len(arr)):
        print(arr[i], end=" ")
    
   


n = int(input())
arr = []
for i in range(n):
    l = int(input())
    arr.append(l)

print("Given array is")
printList(arr)
print()
mergeSort(arr)

print("\nSorted array is")

printList(arr)
##
Write a python program to implement merge sort using iterative approach on the given list of values.
def Merge_Sort(S):
    if len(S) > 1:
        mid = len(S) // 2 
        L = S[:mid]
        R = S[mid:]
        
        Merge_Sort(L)
        Merge_Sort(R) 
        
        i = j = k = 0
        
   
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                S[k] = L[i]
                i += 1
            else:
                S[k] = R[j]
                j += 1
            k += 1
        

        while i < len(L):
            S[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            S[k] = R[j]
            j += 1
            k += 1


n = int(input())
S= []
for i in range(n):
    l = int(input())
    S.append(l)

print("The Original array is: ",S)


Merge_Sort(S)

print("Array after sorting is: ",S)
##
Write a Program for Implementing merge sort on float values using python recursion.
def merge_sort(inp_arr):
    if len(inp_arr) > 1:
        mid = len(inp_arr) // 2 
        L = inp_arr[:mid]
        R = inp_arr[mid:]
        
        merge_sort(L)
        merge_sort(R) 
        
        i = j = k = 0
        
   
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                inp_arr[k] = L[i]
                i += 1
            else:
                inp_arr[k] = R[j]
                j += 1
            k += 1
        

        while i < len(L):
            inp_arr[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            inp_arr[k] = R[j]
            j += 1
            k += 1



n = int(input())
inp_arr = []
for i in range(n):
    l = float(input())
    inp_arr.append(l)

print("Input Array:")
print(inp_arr)

merge_sort(inp_arr)

print("Sorted Array:")
print(inp_arr)
##
Write a recursive python function to perform merge sort on the unsorted list of values.
def mergesort(li):
    if len(li)>1:
        mid=len(li)//2
        L=li[:mid]
        R=li[mid:]
        mergesort(L)
        mergesort(R)
        i=j=k=0
        while i<len(L) and j<len(R):
            if L[i]<R[j]:
                li[k]=L[i]
                i+=1
            else:
                li[k]=R[j]
                j+=1
            k+=1
        while i<len(L):
           
            li[k]=L[i]
            i+=1
            k+=1
        while j<len(R):
            li[k]=R[j]
            j+=1
            k+=1
n=int(input())
li=[]
for i in range(n):
    l=int(input())
    li.append(l)
mergesort(li)
print(li)
##
Write a python program for the implementation of merge sort on the given list of float values.
def mergesort(li):
    if len(li)>1:
        mid=len(li)//2
        L=li[:mid]
        R=li[mid:]
        mergesort(L)
        mergesort(R)
        i=j=k=0
        while i<len(L) and j<len(R):
            if L[i]<R[j]:
                li[k]=L[i]
                i+=1
            else:
                li[k]=R[j]
                j+=1
            k+=1
        while i<len(L):
           
            li[k]=L[i]
            i+=1
            k+=1
        while j<len(R):
            li[k]=R[j]
            j+=1
            k+=1
def printlist(li):
    for i in range(len(li)):
        print(li[i],end=" ")
    print()
n=int(input())
li=[]
for i in range(n):
    l=float(input())
    li.append(l)
print("Given array is")
printlist(li)
mergesort(li)
print("Sorted array is")
printlist(li)
##
Write a Program for Implementing merge sort using python recursion.
def merge_sort(inp_arr):
    if len(inp_arr) > 1:
        mid = len(inp_arr) // 2 
        L = inp_arr[:mid]
        R = inp_arr[mid:]
        
        merge_sort(L)
        merge_sort(R) 
        
        i = j = k = 0
        
   
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                inp_arr[k] = L[i]
                i += 1
            else:
                inp_arr[k] = R[j]
                j += 1
            k += 1
        

        while i < len(L):
            inp_arr[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            inp_arr[k] = R[j]
            j += 1
            k += 1



n = int(input())
inp_arr = []
for i in range(n):
    l = int(input())
    inp_arr.append(l)

print("Input Array:\n")
print(inp_arr)

merge_sort(inp_arr)

print("Sorted Array:\n")
print(inp_arr)
##
Write a python program to sort the first half of the list using merge sort
def mergeSort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]
        
        mergeSort(R) 
        
        i = j = k = 0
        
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
       
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

def printList(arr):
    for i in range(len(arr)):
        print(arr[i], end=" ")
    
   


n = int(input())
arr = []
for i in range(n):
    l = int(input())
    arr.append(l)

print("Given array is")
printList(arr)
print()
mergeSort(arr)

print("\nSorted array is")

printList(arr)
##
Write a python program to implement merge sort using iterative approach on the given list of  float values.
def Merge_Sort(S):
    if len(S) > 1:
        mid = len(S) // 2 
        L = S[:mid]
        R = S[mid:]
        
        Merge_Sort(L)
        Merge_Sort(R) 
        
        i = j = k = 0
        
   
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                S[k] = L[i]
                i += 1
            else:
                S[k] = R[j]
                j += 1
            k += 1
        

        while i < len(L):
            S[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            S[k] = R[j]
            j += 1
            k += 1


n = int(input())
S= []
for i in range(n):
    l = float(input())
    S.append(l)

print("The Original array is: ",S)


Merge_Sort(S)

print("Array after sorting is: ",S)
##
Write a Program for Implementing merge sort on float values using python recursion.
def merge_sort(inp_arr):
    if len(inp_arr) > 1:
        mid = len(inp_arr) // 2 
        L = inp_arr[:mid]
        R = inp_arr[mid:]
        
        merge_sort(L)
        merge_sort(R) 
        
        i = j = k = 0
        
   
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                inp_arr[k] = L[i]
                i += 1
            else:
                inp_arr[k] = R[j]
                j += 1
            k += 1
        

        while i < len(L):
            inp_arr[k] = L[i]
            i += 1
            k += 1
        
        while j < len(R):
            inp_arr[k] = R[j]
            j += 1
            k += 1



n = int(input())
inp_arr = []
for i in range(n):
    l = float(input())
    inp_arr.append(l)

print("Input Array:")
print(inp_arr)

merge_sort(inp_arr)

print("Sorted Array:")
print(inp_arr)
##
Write a python program to implement quick sort on the given values and print the sorted list and pivot value of each iteration.
def quick_sort_random(a,st,en):
    if en-st>1:
        p=partition(a,st,en)
        quick_sort_random(a,st,p)
        quick_sort_random(a,p+1,en)
def partition(a,st,en):
    pivot=a[st]
    i=st+1
    j=en-1
    print("pivot: ",int(pivot))
    while True:
        while(i<=j and a[i]<=pivot):
            i=i+1
        while(i<=j and a[j]>=pivot):
            j=j-1
        if i<=j:
            a[i],a[j]=a[j],a[i]
        else:
            a[st],a[j]=a[j],a[st]
            return j


nums=[]
n=int(input())
for i in range(n):
    nums.append(eval(input()))
new=[]
for i in nums:
    new.append(int(i))
print("Input List\n",new)
quick_sort_random(new, 0, len(new))
print("Sorted List\n",new)
##
Write a python program using quick sort to sort the second half of the given list of values.
def quick_sort_random(a,st,en):
    if en-st>1:
        p=partition(a,st,en)
        # quick_sort_random(a,st,p)
        quick_sort_random(a,p+1,en)
def partition(a,st,en):
    pivot=a[st]
    i=st+1
    j=en-1
    
    while True:
        while(i<=j and a[i]<=pivot):
            i=i+1
        while(i<=j and a[j]>=pivot):
            j=j-1
        if i<=j:
            a[i],a[j]=a[j],a[i]
        else:
            a[st],a[j]=a[j],a[st]
            return j


nums=[]
n=int(input())
for i in range(n):
    nums.append(eval(input()))
new=[]
for i in nums:
    new.append(int(i))

quick_sort_random(new, 0, len(new))
print(new)
##
Write a python program to implement quick sort using random pivot value.
def quick_sort_random(a,st,en):
    if en-st>1:
        p=partition(a,st,en)
        quick_sort_random(a,st,p)
        quick_sort_random(a,p+1,en)
def partition(a,st,en):
    pivot=a[st]
    i=st+1
    j=en-1
    
    while True:
        while(i<=j and a[i]<=pivot):
            i=i+1
        while(i<=j and a[j]>=pivot):
            j=j-1
        if i<=j:
            a[i],a[j]=a[j],a[i]
        else:
            a[st],a[j]=a[j],a[st]
            return j


nums=[]
n=int(input())
for i in range(n):
    nums.append(eval(input()))
new=[]
for i in nums:
    new.append(int(i))

quick_sort_random(new, 0, len(new))
print(new)
##
Write a python program to implement quick sort using tha last element as pivot on the list of float values.
def quickSort(arr,st,en):
    if en-st>1:
        p=partition(arr,st,en)
        quickSort(arr,st,p)
        quickSort(arr,p+1,en)
def partition(arr,st,en):
    pivot=arr[st]
    i=st+1
    j=en-1
 
    while True:
        while(i<=j and arr[i]<=pivot):
            i=i+1
        while(i<=j and arr[j]>=pivot):
            j=j-1
        if i<=j:
            arr[i],arr[j]=arr[j],arr[i]
        else:
            arr[st],arr[j]=arr[j],arr[st]
            return j


arr=[]
n=int(input())
for i in range(n):
    arr.append(eval(input()))


quickSort(arr, 0, len(arr))
print("Sorted array is:")
for i in range(len(arr)):
    
    print(arr[i])
##
Write a python program to implement quick sort on the given float  array values.
def qsort(L):
    if L==[]:
        return []
    pivot=L[0:1]
    left=qsort([x for x in L[1:] if x<L[0]])
    right=qsort([x for x in L[1:] if x>=L[0]])
    print("left: ",left)
    print("right: ",right)
    return left+pivot+right
arr=[]
n=int(input())
for i in range(n):
    arr.append(eval(input()))
print(qsort(arr))
##
Write a Python program to sort unsorted numbers using Random Pivot Quick Sort. Picks the random index as the pivot
def quick_sort_random(nums,st,en):
    if en-st>1:
        p=partition(nums,st,en)
        quick_sort_random(nums,st,p)
        quick_sort_random(nums,p+1,en)
def partition(nums,st,en):
    pivot=nums[st]
    i=st+1
    j=en-1
 
    while True:
        while(i<=j and nums[i]<=pivot):
            i=i+1
        while(i<=j and nums[j]>=pivot):
            j=j-1
        if i<=j:
            nums[i],nums[j]=nums[j],nums[i]
        else:
            nums[st],nums[j]=nums[j],nums[st]
            return j


nums=[]
n=int(input())
for i in range(n):
    nums.append(eval(input()))

print("Original list:")
print(nums)
quick_sort_random(nums, 0, len(nums))
print("After applying Random Pivot Quick Sort the said list becomes:")
print(nums)
##
Write a python program to implement quick sort using the middle element as pivot on the list of given integer values.
def quick_sort_random(a,st,en):
    if en-st>1:
        p=partition(a,st,en)
        quick_sort_random(a,st,p)
        quick_sort_random(a,p+1,en)
def partition(a,st,en):
    pivot=a[st]
    i=st+1
    j=en-1
  
    while True:
        while(i<=j and a[i]<=pivot):
            i=i+1
        while(i<=j and a[j]>=pivot):
            j=j-1
        if i<=j:
            a[i],a[j]=a[j],a[i]
        else:
            a[st],a[j]=a[j],a[st]
            return j


nums=[]
n=int(input())
for i in range(n):
    nums.append(eval(input()))
new=[]
for i in nums:
    new.append(int(i))

quick_sort_random(new, 0, len(new))
print(new)
##
Write a python program to implement quick sort using last element as pivot on the given list of integers.
def quickSort(arr,st,en):
    if en-st>1:
        p=partition(arr,st,en)
        quickSort(arr,st,p)
        quickSort(arr,p+1,en)
def partition(arr,st,en):
    pivot=arr[st]
    i=st+1
    j=en-1
 
    while True:
        while(i<=j and arr[i]<=pivot):
            i=i+1
        while(i<=j and arr[j]>=pivot):
            j=j-1
        if i<=j:
            arr[i],arr[j]=arr[j],arr[i]
        else:
            arr[st],arr[j]=arr[j],arr[st]
            return j


arr=[]
n=int(input())
for i in range(n):
    arr.append(int(input()))


quickSort(arr, 0, len(arr))
print("Sorted array is:")
for i in range(len(arr)):
    
    print(arr[i])
##
Write a python program to implement quick sort on the given float  array values.
def qsort(L):
    if L==[]:
        return []
    pivot=L[0:1]
    left=qsort([x for x in L[1:] if x<L[0]])
    right=qsort([x for x in L[1:] if x>=L[0]])
    print("left: ",left)
    print("right: ",right)
    return left+pivot+right
arr=[]
n=int(input())
for i in range(n):
    arr.append(eval(input()))
print(qsort(arr))
##
Write a python program to implement quick sort on the given values and print the sorted list and pivot value of each iteration.
def quick_sort_random(a,st,en):
    if en-st>1:
        p=partition(a,st,en)
        quick_sort_random(a,st,p)
        quick_sort_random(a,p+1,en)
def partition(a,st,en):
    pivot=a[st]
    i=st+1
    j=en-1
    print("pivot: ",int(pivot))
    while True:
        while(i<=j and a[i]<=pivot):
            i=i+1
        while(i<=j and a[j]>=pivot):
            j=j-1
        if i<=j:
            a[i],a[j]=a[j],a[i]
        else:
            a[st],a[j]=a[j],a[st]
            return j


nums=[]
n=int(input())
for i in range(n):
    nums.append(eval(input()))
new=[]
for i in nums:
    new.append(int(i))
print("Input List\n",new)
quick_sort_random(new, 0, len(new))
print("Sorted List\n",new)
##
Write a python program to implement quick sort using the last element as pivot on the given list of string values.
def quickSort(arr,st,en):
    if en-st>1:
        p=partition(arr,st,en)
        quickSort(arr,st,p)
        quickSort(arr,p+1,en)
def partition(arr,st,en):
    pivot=arr[st]
    i=st+1
    j=en-1
    
    while True:
        while(i<=j and arr[i]<=pivot):
            i=i+1
        while(i<=j and arr[j]>=pivot):
            j=j-1
        if i<=j:
            arr[i],arr[j]=arr[j],arr[i]
        else:
            arr[st],arr[j]=arr[j],arr[st]
            return j


arr=[]
n=int(input())
for i in range(n):
    arr.append(input())

quickSort(arr, 0, len(arr))
print("Sorted array is:")
for i in range(len(arr)):
    print(arr[i])
##
Write a python program using quick sort to sort the second half of the given list of values.
def quick_sort_random(a,st,en):
    if en-st>1:
        p=partition(a,st,en)
        # quick_sort_random(a,st,p)
        quick_sort_random(a,p+1,en)
def partition(a,st,en):
    pivot=a[st]
    i=st+1
    j=en-1
    
    while True:
        while(i<=j and a[i]<=pivot):
            i=i+1
        while(i<=j and a[j]>=pivot):
            j=j-1
        if i<=j:
            a[i],a[j]=a[j],a[i]
        else:
            a[st],a[j]=a[j],a[st]
            return j


nums=[]
n=int(input())
for i in range(n):
    nums.append(eval(input()))
new=[]
for i in nums:
    new.append(int(i))

quick_sort_random(new, 0, len(new))
print(new)
##
Write a python program to implement quick sort using random pivot value.
def partition(arr,low,high):
    pivot=arr[high]
    i=low-1
    for j in range(low,high):
        if arr[j]<=pivot:
            i+=1
            arr[i],arr[j]=arr[j],arr[i]
    arr[i+1],arr[high]=arr[high],arr[i+1]
    return i+1
def quick_sort(arr,low,high):
    if low<high:
        pivot_index=partition(arr,low,high)
        
        quick_sort(arr,low,pivot_index-1)
        quick_sort(arr,pivot_index+1,high)
n=int(input())
arr=[]
for i in range(n):
    element=int(input())
    arr.append(element)
quick_sort(arr,0,len(arr)-1)
print(arr)
##
Write a python program to implement the quick sort using recursion on the given list of float values.
def partition(arr,low,high):
    pivot=arr[high]
    i=low-1
    for j in range(low,high):
        if arr[j]<=pivot:
            i+=1
            arr[i],arr[j]=arr[j],arr[i]
    arr[i+1],arr[high]=arr[high],arr[i+1]
    return i+1
def quick_sort(arr,low,high):
    if low<high:
        pivot_index=partition(arr,low,high)
        print("pivot: ",arr[pivot_index])
        quick_sort(arr,low,pivot_index-1)
        quick_sort(arr,pivot_index+1,high)
n=int(input())
arr=[]
for i in range(n):
    element=float(input())
    arr.append(element)
quick_sort(arr,0,len(arr)-1)
print(arr)
##
Write a python program to search an element in the given sorted using iterative binary search.
def binarySearch(arr,low,high,x):
    if low>high:
        print("Element is not present in array")
    else:
        mid=(low+high)//2
        if(x==arr[mid]):
            print("Element is present at index ",mid)
        elif(x<arr[mid]):
            binarySearch(arr,low,mid-1,x)
        else:
            binarySearch(arr,mid+1,high,x)

n=int(input())
arr=[]
for i in range(n):
    l=int(input())
    arr.append(l)
x=int(input())
arr.sort()
##
Write a python program to implement linear search on the given tuple.
def linear_search(n,tup, x):
    for i in range(len(tup)):
        if x == tup[i]:
            print("Tuple:",x,"found")
            break
    else:
        print("Tuple:",x,"not found")

n = int(input())
arr = [] 
for i in range(n):
    l = int(input())
    arr.append(l)
tup = tuple(arr)
x = int(input())
linear_search(n,tup, x)
##
Write a python program to implement binary search on the given list of float values using iterative method
def binarySearchAppr(arr,low,high,x):
    if low>high:
        print("Element is not present in array")
    else:
        mid=(low+high)//2
        if(x==arr[mid]):
            print("Element is present at index",mid)
        elif(x<arr[mid]):
            binarySearchAppr(arr,low,mid-1,x)
        else:
            binarySearchAppr(arr,mid+1,high,x)

n=int(input())
arr=[]
for i in range(n):
    l=float(input())
    arr.append(l)
x=float(input())
arr.sort()
##
Write a python program to implement binary search on the given list of string values using iterative method
def binarySearchAppr(arr,low,high,x):
    if low>high:
        print("Element is not present in array")
    else:
        mid=(low+high)//2
        if(x==arr[mid]):
            print("Element is present at index",mid)
        elif(x<arr[mid]):
            binarySearchAppr(arr,low,mid-1,x)
        else:
            binarySearchAppr(arr,mid+1,high,x)

n=int(input())
arr=[]
for i in range(n):
    l=input()
    arr.append(l)
x=input()
arr.sort()
##
Write a python program for a search function with parameter list name and the value to be searched using string values.
def search(List,n):
    for i in range(len(List)):
        if x == List[i]:
            print("Found")
            break
    else:
        print("Not Found")

n = int(input())
List = [] 
for i in range(n):
    l = input()
    List.append(l)

x = input()
##
Write a python program to search an element in the given sorted using iterative binary search.
def binarySearch(arr,low,high,x):
    if low>high:
        print("Element is not present in array")
    else:
        mid=(low+high)//2
        if(x==arr[mid]):
            print("Element is present at index ",mid)
        elif(x<arr[mid]):
            binarySearch(arr,low,mid-1,x)
        else:
            binarySearch(arr,mid+1,high,x)

n=int(input())
arr=[]
for i in range(n):
    l=int(input())
    arr.append(l)
x=int(input())
arr.sort()
##
Write a python program to implement the binary search on the given list of characters.
def binarySearchAppr(arr,low,high,x):
    if low>high:
        print("Element is not present in array")
    else:
        mid=(low+high)//2
        if(x==arr[mid]):
            print("Element is present at index",mid)
        elif(x<arr[mid]):
            binarySearchAppr(arr,low,mid-1,x)
        else:
            binarySearchAppr(arr,mid+1,high,x)

n=int(input())
arr=[]
for i in range(n):
    l=input()
    arr.append(l)
x=input()
arr.sort()
##
Write a python program for a search function with parameter list name and the value to be searched on the given list of int values.
def search(List,n):
    for i in range(len(List)):
        if x == List[i]:
            print("Found")
            break
    else:
        print("Not Found")

n = int(input())
List = [] 
for i in range(n):
    l = int(input())
    List.append(l)

x =int(input())
##
Write a python program to implement linear search on the given tuple of string values.
def linear_search(n,tup, x):
    for i in range(len(tup)):
        if x == tup[i]:
            print("Tuple:",x,"found")
            break
    else:
        print("Tuple:",x,"not found")

n = int(input())
arr = [] 
for i in range(n):
    l = input()
    arr.append(l)
tup = tuple(arr)
x = input()
linear_search(n,tup, x)
##
Write a python program to implement linear search on the given integer tuple.
def linear_search(n,tup, x):
    for i in range(len(tup)):
        if x == tup[i]:
            print(x,"Found")
            break
    else:
        print(x,"not Found")

n = int(input())
arr = [] 
for i in range(n):
    l = int(input())
    arr.append(l)
tup = tuple(arr)
x = int(input())
linear_search(n,tup, x)
##
Write a python program to search an element using recursive binary search.
def binary_search(arr,low,high,x):
    if low>high:
        print("Element is not present in array")
    else:
        mid=(low+high)//2
        if(x==arr[mid]):
            print("Element is present at index",mid)
        elif(x<arr[mid]):
            binary_search(arr,low,mid-1,x)
        else:
            binary_search(arr,mid+1,high,x)

n=int(input())
arr=[]
for i in range(n):
    l=int(input())
    arr.append(l)
x=int(input())
arr.sort()
##
Write a python program to implement linear search on the given tuple.
def linear_search(n,tup, x):
    for i in range(len(tup)):
        if x == tup[i]:
            print("Tuple:",x,"found")
            break
    else:
        print("Tuple:",x,"not found")

n = int(input())
arr = [] 
for i in range(n):
    l = int(input())
    arr.append(l)
tup = tuple(arr)
x = int(input())
linear_search(n,tup, x)
##
Write a python program for a search function with parameter list name and the value to be searched on the given list of int values.
def search(List,n):
    for i in range(len(List)):
        if x == List[i]:
            print("Found")
            break
    else:
        print("Not Found")

n = int(input())
List = [] 
for i in range(n):
    l = int(input())
    List.append(l)

x =int(input())
##
Write a python program to implement linear search on the given tuple of string values.
def linear_search(n,tup, x):
    for i in range(len(tup)):
        if x == tup[i]:
            print("Tuple:",x,"found")
            break
    else:
        print("Tuple:",x,"not found")

n = int(input())
arr = [] 
for i in range(n):
    l = input()
    arr.append(l)
tup = tuple(arr)
x = input()
linear_search(n,tup, x)
##
Write a python program to implement linear search on given float tuple
def search(Tuple ,x):
    for i in range(len(Tuple)):
        if x == Tuple[i]:
            print(x,"Found")
            break
    else:
        print(x,"Not Found")

n = int(input())
arr = [] 
for i in range(n):
    l =float(input())
    arr.append(l)
Tuple= tuple(arr)
x =float(input())
##
